/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSmDeviceDesktopLogs_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkSmDeviceDesktopLogs_200_response_inner_H
#define OAIGetNetworkSmDeviceDesktopLogs_200_response_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetNetworkSmDeviceDesktopLogs_200_response_inner : public OAIObject {
public:
    OAIGetNetworkSmDeviceDesktopLogs_200_response_inner();
    OAIGetNetworkSmDeviceDesktopLogs_200_response_inner(QString json);
    ~OAIGetNetworkSmDeviceDesktopLogs_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDhcpServer() const;
    void setDhcpServer(const QString &dhcp_server);
    bool is_dhcp_server_Set() const;
    bool is_dhcp_server_Valid() const;

    QString getDnsServer() const;
    void setDnsServer(const QString &dns_server);
    bool is_dns_server_Set() const;
    bool is_dns_server_Valid() const;

    QString getGateway() const;
    void setGateway(const QString &gateway);
    bool is_gateway_Set() const;
    bool is_gateway_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    QString getMeasuredAt() const;
    void setMeasuredAt(const QString &measured_at);
    bool is_measured_at_Set() const;
    bool is_measured_at_Valid() const;

    QString getNetworkDevice() const;
    void setNetworkDevice(const QString &network_device);
    bool is_network_device_Set() const;
    bool is_network_device_Valid() const;

    QString getNetworkDriver() const;
    void setNetworkDriver(const QString &network_driver);
    bool is_network_driver_Set() const;
    bool is_network_driver_Valid() const;

    QString getNetworkMtu() const;
    void setNetworkMtu(const QString &network_mtu);
    bool is_network_mtu_Set() const;
    bool is_network_mtu_Valid() const;

    QString getPublicIp() const;
    void setPublicIp(const QString &public_ip);
    bool is_public_ip_Set() const;
    bool is_public_ip_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    QString getTs() const;
    void setTs(const QString &ts);
    bool is_ts_Set() const;
    bool is_ts_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getWifiAuth() const;
    void setWifiAuth(const QString &wifi_auth);
    bool is_wifi_auth_Set() const;
    bool is_wifi_auth_Valid() const;

    QString getWifiBssid() const;
    void setWifiBssid(const QString &wifi_bssid);
    bool is_wifi_bssid_Set() const;
    bool is_wifi_bssid_Valid() const;

    QString getWifiChannel() const;
    void setWifiChannel(const QString &wifi_channel);
    bool is_wifi_channel_Set() const;
    bool is_wifi_channel_Valid() const;

    QString getWifiNoise() const;
    void setWifiNoise(const QString &wifi_noise);
    bool is_wifi_noise_Set() const;
    bool is_wifi_noise_Valid() const;

    QString getWifiRssi() const;
    void setWifiRssi(const QString &wifi_rssi);
    bool is_wifi_rssi_Set() const;
    bool is_wifi_rssi_Valid() const;

    QString getWifiSsid() const;
    void setWifiSsid(const QString &wifi_ssid);
    bool is_wifi_ssid_Set() const;
    bool is_wifi_ssid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dhcp_server;
    bool m_dhcp_server_isSet;
    bool m_dhcp_server_isValid;

    QString m_dns_server;
    bool m_dns_server_isSet;
    bool m_dns_server_isValid;

    QString m_gateway;
    bool m_gateway_isSet;
    bool m_gateway_isValid;

    QString m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    QString m_measured_at;
    bool m_measured_at_isSet;
    bool m_measured_at_isValid;

    QString m_network_device;
    bool m_network_device_isSet;
    bool m_network_device_isValid;

    QString m_network_driver;
    bool m_network_driver_isSet;
    bool m_network_driver_isValid;

    QString m_network_mtu;
    bool m_network_mtu_isSet;
    bool m_network_mtu_isValid;

    QString m_public_ip;
    bool m_public_ip_isSet;
    bool m_public_ip_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    QString m_ts;
    bool m_ts_isSet;
    bool m_ts_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_wifi_auth;
    bool m_wifi_auth_isSet;
    bool m_wifi_auth_isValid;

    QString m_wifi_bssid;
    bool m_wifi_bssid_isSet;
    bool m_wifi_bssid_isValid;

    QString m_wifi_channel;
    bool m_wifi_channel_isSet;
    bool m_wifi_channel_isValid;

    QString m_wifi_noise;
    bool m_wifi_noise_isSet;
    bool m_wifi_noise_isValid;

    QString m_wifi_rssi;
    bool m_wifi_rssi_isSet;
    bool m_wifi_rssi_isValid;

    QString m_wifi_ssid;
    bool m_wifi_ssid_isSet;
    bool m_wifi_ssid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSmDeviceDesktopLogs_200_response_inner)

#endif // OAIGetNetworkSmDeviceDesktopLogs_200_response_inner_H
