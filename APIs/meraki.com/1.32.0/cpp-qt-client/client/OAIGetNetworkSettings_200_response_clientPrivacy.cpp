/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSettings_200_response_clientPrivacy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSettings_200_response_clientPrivacy::OAIGetNetworkSettings_200_response_clientPrivacy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSettings_200_response_clientPrivacy::OAIGetNetworkSettings_200_response_clientPrivacy() {
    this->initializeModel();
}

OAIGetNetworkSettings_200_response_clientPrivacy::~OAIGetNetworkSettings_200_response_clientPrivacy() {}

void OAIGetNetworkSettings_200_response_clientPrivacy::initializeModel() {

    m_expire_data_before_isSet = false;
    m_expire_data_before_isValid = false;

    m_expire_data_older_than_isSet = false;
    m_expire_data_older_than_isValid = false;
}

void OAIGetNetworkSettings_200_response_clientPrivacy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSettings_200_response_clientPrivacy::fromJsonObject(QJsonObject json) {

    m_expire_data_before_isValid = ::OpenAPI::fromJsonValue(m_expire_data_before, json[QString("expireDataBefore")]);
    m_expire_data_before_isSet = !json[QString("expireDataBefore")].isNull() && m_expire_data_before_isValid;

    m_expire_data_older_than_isValid = ::OpenAPI::fromJsonValue(m_expire_data_older_than, json[QString("expireDataOlderThan")]);
    m_expire_data_older_than_isSet = !json[QString("expireDataOlderThan")].isNull() && m_expire_data_older_than_isValid;
}

QString OAIGetNetworkSettings_200_response_clientPrivacy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSettings_200_response_clientPrivacy::asJsonObject() const {
    QJsonObject obj;
    if (m_expire_data_before_isSet) {
        obj.insert(QString("expireDataBefore"), ::OpenAPI::toJsonValue(m_expire_data_before));
    }
    if (m_expire_data_older_than_isSet) {
        obj.insert(QString("expireDataOlderThan"), ::OpenAPI::toJsonValue(m_expire_data_older_than));
    }
    return obj;
}

QDateTime OAIGetNetworkSettings_200_response_clientPrivacy::getExpireDataBefore() const {
    return m_expire_data_before;
}
void OAIGetNetworkSettings_200_response_clientPrivacy::setExpireDataBefore(const QDateTime &expire_data_before) {
    m_expire_data_before = expire_data_before;
    m_expire_data_before_isSet = true;
}

bool OAIGetNetworkSettings_200_response_clientPrivacy::is_expire_data_before_Set() const{
    return m_expire_data_before_isSet;
}

bool OAIGetNetworkSettings_200_response_clientPrivacy::is_expire_data_before_Valid() const{
    return m_expire_data_before_isValid;
}

qint32 OAIGetNetworkSettings_200_response_clientPrivacy::getExpireDataOlderThan() const {
    return m_expire_data_older_than;
}
void OAIGetNetworkSettings_200_response_clientPrivacy::setExpireDataOlderThan(const qint32 &expire_data_older_than) {
    m_expire_data_older_than = expire_data_older_than;
    m_expire_data_older_than_isSet = true;
}

bool OAIGetNetworkSettings_200_response_clientPrivacy::is_expire_data_older_than_Set() const{
    return m_expire_data_older_than_isSet;
}

bool OAIGetNetworkSettings_200_response_clientPrivacy::is_expire_data_older_than_Valid() const{
    return m_expire_data_older_than_isValid;
}

bool OAIGetNetworkSettings_200_response_clientPrivacy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expire_data_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_data_older_than_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSettings_200_response_clientPrivacy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
