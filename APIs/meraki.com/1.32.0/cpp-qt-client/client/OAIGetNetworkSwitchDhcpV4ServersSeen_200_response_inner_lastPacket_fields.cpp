/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields() {
    this->initializeModel();
}

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::~OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields() {}

void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::initializeModel() {

    m_chaddr_isSet = false;
    m_chaddr_isValid = false;

    m_ciaddr_isSet = false;
    m_ciaddr_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_giaddr_isSet = false;
    m_giaddr_isValid = false;

    m_hlen_isSet = false;
    m_hlen_isValid = false;

    m_hops_isSet = false;
    m_hops_isValid = false;

    m_htype_isSet = false;
    m_htype_isValid = false;

    m_magic_cookie_isSet = false;
    m_magic_cookie_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_secs_isSet = false;
    m_secs_isValid = false;

    m_siaddr_isSet = false;
    m_siaddr_isValid = false;

    m_sname_isSet = false;
    m_sname_isValid = false;

    m_xid_isSet = false;
    m_xid_isValid = false;

    m_yiaddr_isSet = false;
    m_yiaddr_isValid = false;
}

void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::fromJsonObject(QJsonObject json) {

    m_chaddr_isValid = ::OpenAPI::fromJsonValue(m_chaddr, json[QString("chaddr")]);
    m_chaddr_isSet = !json[QString("chaddr")].isNull() && m_chaddr_isValid;

    m_ciaddr_isValid = ::OpenAPI::fromJsonValue(m_ciaddr, json[QString("ciaddr")]);
    m_ciaddr_isSet = !json[QString("ciaddr")].isNull() && m_ciaddr_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_giaddr_isValid = ::OpenAPI::fromJsonValue(m_giaddr, json[QString("giaddr")]);
    m_giaddr_isSet = !json[QString("giaddr")].isNull() && m_giaddr_isValid;

    m_hlen_isValid = ::OpenAPI::fromJsonValue(m_hlen, json[QString("hlen")]);
    m_hlen_isSet = !json[QString("hlen")].isNull() && m_hlen_isValid;

    m_hops_isValid = ::OpenAPI::fromJsonValue(m_hops, json[QString("hops")]);
    m_hops_isSet = !json[QString("hops")].isNull() && m_hops_isValid;

    m_htype_isValid = ::OpenAPI::fromJsonValue(m_htype, json[QString("htype")]);
    m_htype_isSet = !json[QString("htype")].isNull() && m_htype_isValid;

    m_magic_cookie_isValid = ::OpenAPI::fromJsonValue(m_magic_cookie, json[QString("magicCookie")]);
    m_magic_cookie_isSet = !json[QString("magicCookie")].isNull() && m_magic_cookie_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_secs_isValid = ::OpenAPI::fromJsonValue(m_secs, json[QString("secs")]);
    m_secs_isSet = !json[QString("secs")].isNull() && m_secs_isValid;

    m_siaddr_isValid = ::OpenAPI::fromJsonValue(m_siaddr, json[QString("siaddr")]);
    m_siaddr_isSet = !json[QString("siaddr")].isNull() && m_siaddr_isValid;

    m_sname_isValid = ::OpenAPI::fromJsonValue(m_sname, json[QString("sname")]);
    m_sname_isSet = !json[QString("sname")].isNull() && m_sname_isValid;

    m_xid_isValid = ::OpenAPI::fromJsonValue(m_xid, json[QString("xid")]);
    m_xid_isSet = !json[QString("xid")].isNull() && m_xid_isValid;

    m_yiaddr_isValid = ::OpenAPI::fromJsonValue(m_yiaddr, json[QString("yiaddr")]);
    m_yiaddr_isSet = !json[QString("yiaddr")].isNull() && m_yiaddr_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_chaddr_isSet) {
        obj.insert(QString("chaddr"), ::OpenAPI::toJsonValue(m_chaddr));
    }
    if (m_ciaddr_isSet) {
        obj.insert(QString("ciaddr"), ::OpenAPI::toJsonValue(m_ciaddr));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_giaddr_isSet) {
        obj.insert(QString("giaddr"), ::OpenAPI::toJsonValue(m_giaddr));
    }
    if (m_hlen_isSet) {
        obj.insert(QString("hlen"), ::OpenAPI::toJsonValue(m_hlen));
    }
    if (m_hops_isSet) {
        obj.insert(QString("hops"), ::OpenAPI::toJsonValue(m_hops));
    }
    if (m_htype_isSet) {
        obj.insert(QString("htype"), ::OpenAPI::toJsonValue(m_htype));
    }
    if (m_magic_cookie_isSet) {
        obj.insert(QString("magicCookie"), ::OpenAPI::toJsonValue(m_magic_cookie));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_secs_isSet) {
        obj.insert(QString("secs"), ::OpenAPI::toJsonValue(m_secs));
    }
    if (m_siaddr_isSet) {
        obj.insert(QString("siaddr"), ::OpenAPI::toJsonValue(m_siaddr));
    }
    if (m_sname_isSet) {
        obj.insert(QString("sname"), ::OpenAPI::toJsonValue(m_sname));
    }
    if (m_xid_isSet) {
        obj.insert(QString("xid"), ::OpenAPI::toJsonValue(m_xid));
    }
    if (m_yiaddr_isSet) {
        obj.insert(QString("yiaddr"), ::OpenAPI::toJsonValue(m_yiaddr));
    }
    return obj;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getChaddr() const {
    return m_chaddr;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setChaddr(const QString &chaddr) {
    m_chaddr = chaddr;
    m_chaddr_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_chaddr_Set() const{
    return m_chaddr_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_chaddr_Valid() const{
    return m_chaddr_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getCiaddr() const {
    return m_ciaddr;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setCiaddr(const QString &ciaddr) {
    m_ciaddr = ciaddr;
    m_ciaddr_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_ciaddr_Set() const{
    return m_ciaddr_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_ciaddr_Valid() const{
    return m_ciaddr_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getFlags() const {
    return m_flags;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setFlags(const QString &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getGiaddr() const {
    return m_giaddr;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setGiaddr(const QString &giaddr) {
    m_giaddr = giaddr;
    m_giaddr_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_giaddr_Set() const{
    return m_giaddr_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_giaddr_Valid() const{
    return m_giaddr_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getHlen() const {
    return m_hlen;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setHlen(const qint32 &hlen) {
    m_hlen = hlen;
    m_hlen_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_hlen_Set() const{
    return m_hlen_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_hlen_Valid() const{
    return m_hlen_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getHops() const {
    return m_hops;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setHops(const qint32 &hops) {
    m_hops = hops;
    m_hops_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_hops_Set() const{
    return m_hops_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_hops_Valid() const{
    return m_hops_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getHtype() const {
    return m_htype;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setHtype(const qint32 &htype) {
    m_htype = htype;
    m_htype_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_htype_Set() const{
    return m_htype_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_htype_Valid() const{
    return m_htype_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getMagicCookie() const {
    return m_magic_cookie;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setMagicCookie(const QString &magic_cookie) {
    m_magic_cookie = magic_cookie;
    m_magic_cookie_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_magic_cookie_Set() const{
    return m_magic_cookie_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_magic_cookie_Valid() const{
    return m_magic_cookie_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getOp() const {
    return m_op;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setOp(const qint32 &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_op_Set() const{
    return m_op_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_op_Valid() const{
    return m_op_isValid;
}

QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner> OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getOptions() const {
    return m_options;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setOptions(const QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_options_Set() const{
    return m_options_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_options_Valid() const{
    return m_options_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getSecs() const {
    return m_secs;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setSecs(const qint32 &secs) {
    m_secs = secs;
    m_secs_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_secs_Set() const{
    return m_secs_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_secs_Valid() const{
    return m_secs_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getSiaddr() const {
    return m_siaddr;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setSiaddr(const QString &siaddr) {
    m_siaddr = siaddr;
    m_siaddr_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_siaddr_Set() const{
    return m_siaddr_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_siaddr_Valid() const{
    return m_siaddr_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getSname() const {
    return m_sname;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setSname(const QString &sname) {
    m_sname = sname;
    m_sname_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_sname_Set() const{
    return m_sname_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_sname_Valid() const{
    return m_sname_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getXid() const {
    return m_xid;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setXid(const QString &xid) {
    m_xid = xid;
    m_xid_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_xid_Set() const{
    return m_xid_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_xid_Valid() const{
    return m_xid_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::getYiaddr() const {
    return m_yiaddr;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::setYiaddr(const QString &yiaddr) {
    m_yiaddr = yiaddr;
    m_yiaddr_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_yiaddr_Set() const{
    return m_yiaddr_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::is_yiaddr_Valid() const{
    return m_yiaddr_isValid;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chaddr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciaddr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giaddr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hlen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_htype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magic_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_siaddr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yiaddr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
