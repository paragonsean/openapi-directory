/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDevices_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDevices_200_response_inner::OAIGetNetworkSmDevices_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDevices_200_response_inner::OAIGetNetworkSmDevices_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDevices_200_response_inner::~OAIGetNetworkSmDevices_200_response_inner() {}

void OAIGetNetworkSmDevices_200_response_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;

    m_system_model_isSet = false;
    m_system_model_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_wifi_mac_isSet = false;
    m_wifi_mac_isValid = false;
}

void OAIGetNetworkSmDevices_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDevices_200_response_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;

    m_system_model_isValid = ::OpenAPI::fromJsonValue(m_system_model, json[QString("systemModel")]);
    m_system_model_isSet = !json[QString("systemModel")].isNull() && m_system_model_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_wifi_mac_isValid = ::OpenAPI::fromJsonValue(m_wifi_mac, json[QString("wifiMac")]);
    m_wifi_mac_isSet = !json[QString("wifiMac")].isNull() && m_wifi_mac_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDevices_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_ssid_isSet) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    if (m_system_model_isSet) {
        obj.insert(QString("systemModel"), ::OpenAPI::toJsonValue(m_system_model));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_wifi_mac_isSet) {
        obj.insert(QString("wifiMac"), ::OpenAPI::toJsonValue(m_wifi_mac));
    }
    return obj;
}

QString OAIGetNetworkSmDevices_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkSmDevices_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getIp() const {
    return m_ip;
}
void OAIGetNetworkSmDevices_200_response_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkSmDevices_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getNotes() const {
    return m_notes;
}
void OAIGetNetworkSmDevices_200_response_inner::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getOsName() const {
    return m_os_name;
}
void OAIGetNetworkSmDevices_200_response_inner::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetNetworkSmDevices_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getSerialNumber() const {
    return m_serial_number;
}
void OAIGetNetworkSmDevices_200_response_inner::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getSsid() const {
    return m_ssid;
}
void OAIGetNetworkSmDevices_200_response_inner::setSsid(const QString &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_ssid_Valid() const{
    return m_ssid_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getSystemModel() const {
    return m_system_model;
}
void OAIGetNetworkSmDevices_200_response_inner::setSystemModel(const QString &system_model) {
    m_system_model = system_model;
    m_system_model_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_system_model_Set() const{
    return m_system_model_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_system_model_Valid() const{
    return m_system_model_isValid;
}

QList<QString> OAIGetNetworkSmDevices_200_response_inner::getTags() const {
    return m_tags;
}
void OAIGetNetworkSmDevices_200_response_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getUuid() const {
    return m_uuid;
}
void OAIGetNetworkSmDevices_200_response_inner::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIGetNetworkSmDevices_200_response_inner::getWifiMac() const {
    return m_wifi_mac;
}
void OAIGetNetworkSmDevices_200_response_inner::setWifiMac(const QString &wifi_mac) {
    m_wifi_mac = wifi_mac;
    m_wifi_mac_isSet = true;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_wifi_mac_Set() const{
    return m_wifi_mac_isSet;
}

bool OAIGetNetworkSmDevices_200_response_inner::is_wifi_mac_Valid() const{
    return m_wifi_mac_isValid;
}

bool OAIGetNetworkSmDevices_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_mac_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDevices_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
