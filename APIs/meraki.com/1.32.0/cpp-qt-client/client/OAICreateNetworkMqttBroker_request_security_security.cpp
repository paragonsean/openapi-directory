/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkMqttBroker_request_security_security.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkMqttBroker_request_security_security::OAICreateNetworkMqttBroker_request_security_security(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkMqttBroker_request_security_security::OAICreateNetworkMqttBroker_request_security_security() {
    this->initializeModel();
}

OAICreateNetworkMqttBroker_request_security_security::~OAICreateNetworkMqttBroker_request_security_security() {}

void OAICreateNetworkMqttBroker_request_security_security::initializeModel() {

    m_ca_certificate_isSet = false;
    m_ca_certificate_isValid = false;

    m_verify_hostnames_isSet = false;
    m_verify_hostnames_isValid = false;
}

void OAICreateNetworkMqttBroker_request_security_security::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkMqttBroker_request_security_security::fromJsonObject(QJsonObject json) {

    m_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate, json[QString("caCertificate")]);
    m_ca_certificate_isSet = !json[QString("caCertificate")].isNull() && m_ca_certificate_isValid;

    m_verify_hostnames_isValid = ::OpenAPI::fromJsonValue(m_verify_hostnames, json[QString("verifyHostnames")]);
    m_verify_hostnames_isSet = !json[QString("verifyHostnames")].isNull() && m_verify_hostnames_isValid;
}

QString OAICreateNetworkMqttBroker_request_security_security::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkMqttBroker_request_security_security::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_isSet) {
        obj.insert(QString("caCertificate"), ::OpenAPI::toJsonValue(m_ca_certificate));
    }
    if (m_verify_hostnames_isSet) {
        obj.insert(QString("verifyHostnames"), ::OpenAPI::toJsonValue(m_verify_hostnames));
    }
    return obj;
}

QString OAICreateNetworkMqttBroker_request_security_security::getCaCertificate() const {
    return m_ca_certificate;
}
void OAICreateNetworkMqttBroker_request_security_security::setCaCertificate(const QString &ca_certificate) {
    m_ca_certificate = ca_certificate;
    m_ca_certificate_isSet = true;
}

bool OAICreateNetworkMqttBroker_request_security_security::is_ca_certificate_Set() const{
    return m_ca_certificate_isSet;
}

bool OAICreateNetworkMqttBroker_request_security_security::is_ca_certificate_Valid() const{
    return m_ca_certificate_isValid;
}

bool OAICreateNetworkMqttBroker_request_security_security::isVerifyHostnames() const {
    return m_verify_hostnames;
}
void OAICreateNetworkMqttBroker_request_security_security::setVerifyHostnames(const bool &verify_hostnames) {
    m_verify_hostnames = verify_hostnames;
    m_verify_hostnames_isSet = true;
}

bool OAICreateNetworkMqttBroker_request_security_security::is_verify_hostnames_Set() const{
    return m_verify_hostnames_isSet;
}

bool OAICreateNetworkMqttBroker_request_security_security::is_verify_hostnames_Valid() const{
    return m_verify_hostnames_isValid;
}

bool OAICreateNetworkMqttBroker_request_security_security::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_hostnames_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkMqttBroker_request_security_security::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
