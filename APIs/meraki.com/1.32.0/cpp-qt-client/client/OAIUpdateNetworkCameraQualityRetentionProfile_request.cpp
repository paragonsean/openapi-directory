/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkCameraQualityRetentionProfile_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkCameraQualityRetentionProfile_request::OAIUpdateNetworkCameraQualityRetentionProfile_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkCameraQualityRetentionProfile_request::OAIUpdateNetworkCameraQualityRetentionProfile_request() {
    this->initializeModel();
}

OAIUpdateNetworkCameraQualityRetentionProfile_request::~OAIUpdateNetworkCameraQualityRetentionProfile_request() {}

void OAIUpdateNetworkCameraQualityRetentionProfile_request::initializeModel() {

    m_audio_recording_enabled_isSet = false;
    m_audio_recording_enabled_isValid = false;

    m_cloud_archive_enabled_isSet = false;
    m_cloud_archive_enabled_isValid = false;

    m_max_retention_days_isSet = false;
    m_max_retention_days_isValid = false;

    m_motion_based_retention_enabled_isSet = false;
    m_motion_based_retention_enabled_isValid = false;

    m_motion_detector_version_isSet = false;
    m_motion_detector_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_restricted_bandwidth_mode_enabled_isSet = false;
    m_restricted_bandwidth_mode_enabled_isValid = false;

    m_schedule_id_isSet = false;
    m_schedule_id_isValid = false;

    m_video_settings_isSet = false;
    m_video_settings_isValid = false;
}

void OAIUpdateNetworkCameraQualityRetentionProfile_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkCameraQualityRetentionProfile_request::fromJsonObject(QJsonObject json) {

    m_audio_recording_enabled_isValid = ::OpenAPI::fromJsonValue(m_audio_recording_enabled, json[QString("audioRecordingEnabled")]);
    m_audio_recording_enabled_isSet = !json[QString("audioRecordingEnabled")].isNull() && m_audio_recording_enabled_isValid;

    m_cloud_archive_enabled_isValid = ::OpenAPI::fromJsonValue(m_cloud_archive_enabled, json[QString("cloudArchiveEnabled")]);
    m_cloud_archive_enabled_isSet = !json[QString("cloudArchiveEnabled")].isNull() && m_cloud_archive_enabled_isValid;

    m_max_retention_days_isValid = ::OpenAPI::fromJsonValue(m_max_retention_days, json[QString("maxRetentionDays")]);
    m_max_retention_days_isSet = !json[QString("maxRetentionDays")].isNull() && m_max_retention_days_isValid;

    m_motion_based_retention_enabled_isValid = ::OpenAPI::fromJsonValue(m_motion_based_retention_enabled, json[QString("motionBasedRetentionEnabled")]);
    m_motion_based_retention_enabled_isSet = !json[QString("motionBasedRetentionEnabled")].isNull() && m_motion_based_retention_enabled_isValid;

    m_motion_detector_version_isValid = ::OpenAPI::fromJsonValue(m_motion_detector_version, json[QString("motionDetectorVersion")]);
    m_motion_detector_version_isSet = !json[QString("motionDetectorVersion")].isNull() && m_motion_detector_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_restricted_bandwidth_mode_enabled_isValid = ::OpenAPI::fromJsonValue(m_restricted_bandwidth_mode_enabled, json[QString("restrictedBandwidthModeEnabled")]);
    m_restricted_bandwidth_mode_enabled_isSet = !json[QString("restrictedBandwidthModeEnabled")].isNull() && m_restricted_bandwidth_mode_enabled_isValid;

    m_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_schedule_id, json[QString("scheduleId")]);
    m_schedule_id_isSet = !json[QString("scheduleId")].isNull() && m_schedule_id_isValid;

    m_video_settings_isValid = ::OpenAPI::fromJsonValue(m_video_settings, json[QString("videoSettings")]);
    m_video_settings_isSet = !json[QString("videoSettings")].isNull() && m_video_settings_isValid;
}

QString OAIUpdateNetworkCameraQualityRetentionProfile_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkCameraQualityRetentionProfile_request::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_recording_enabled_isSet) {
        obj.insert(QString("audioRecordingEnabled"), ::OpenAPI::toJsonValue(m_audio_recording_enabled));
    }
    if (m_cloud_archive_enabled_isSet) {
        obj.insert(QString("cloudArchiveEnabled"), ::OpenAPI::toJsonValue(m_cloud_archive_enabled));
    }
    if (m_max_retention_days_isSet) {
        obj.insert(QString("maxRetentionDays"), ::OpenAPI::toJsonValue(m_max_retention_days));
    }
    if (m_motion_based_retention_enabled_isSet) {
        obj.insert(QString("motionBasedRetentionEnabled"), ::OpenAPI::toJsonValue(m_motion_based_retention_enabled));
    }
    if (m_motion_detector_version_isSet) {
        obj.insert(QString("motionDetectorVersion"), ::OpenAPI::toJsonValue(m_motion_detector_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_restricted_bandwidth_mode_enabled_isSet) {
        obj.insert(QString("restrictedBandwidthModeEnabled"), ::OpenAPI::toJsonValue(m_restricted_bandwidth_mode_enabled));
    }
    if (m_schedule_id_isSet) {
        obj.insert(QString("scheduleId"), ::OpenAPI::toJsonValue(m_schedule_id));
    }
    if (m_video_settings.isSet()) {
        obj.insert(QString("videoSettings"), ::OpenAPI::toJsonValue(m_video_settings));
    }
    return obj;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::isAudioRecordingEnabled() const {
    return m_audio_recording_enabled;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setAudioRecordingEnabled(const bool &audio_recording_enabled) {
    m_audio_recording_enabled = audio_recording_enabled;
    m_audio_recording_enabled_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_audio_recording_enabled_Set() const{
    return m_audio_recording_enabled_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_audio_recording_enabled_Valid() const{
    return m_audio_recording_enabled_isValid;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::isCloudArchiveEnabled() const {
    return m_cloud_archive_enabled;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setCloudArchiveEnabled(const bool &cloud_archive_enabled) {
    m_cloud_archive_enabled = cloud_archive_enabled;
    m_cloud_archive_enabled_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_cloud_archive_enabled_Set() const{
    return m_cloud_archive_enabled_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_cloud_archive_enabled_Valid() const{
    return m_cloud_archive_enabled_isValid;
}

qint32 OAIUpdateNetworkCameraQualityRetentionProfile_request::getMaxRetentionDays() const {
    return m_max_retention_days;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setMaxRetentionDays(const qint32 &max_retention_days) {
    m_max_retention_days = max_retention_days;
    m_max_retention_days_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_max_retention_days_Set() const{
    return m_max_retention_days_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_max_retention_days_Valid() const{
    return m_max_retention_days_isValid;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::isMotionBasedRetentionEnabled() const {
    return m_motion_based_retention_enabled;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setMotionBasedRetentionEnabled(const bool &motion_based_retention_enabled) {
    m_motion_based_retention_enabled = motion_based_retention_enabled;
    m_motion_based_retention_enabled_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_motion_based_retention_enabled_Set() const{
    return m_motion_based_retention_enabled_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_motion_based_retention_enabled_Valid() const{
    return m_motion_based_retention_enabled_isValid;
}

qint32 OAIUpdateNetworkCameraQualityRetentionProfile_request::getMotionDetectorVersion() const {
    return m_motion_detector_version;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setMotionDetectorVersion(const qint32 &motion_detector_version) {
    m_motion_detector_version = motion_detector_version;
    m_motion_detector_version_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_motion_detector_version_Set() const{
    return m_motion_detector_version_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_motion_detector_version_Valid() const{
    return m_motion_detector_version_isValid;
}

QString OAIUpdateNetworkCameraQualityRetentionProfile_request::getName() const {
    return m_name;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::isRestrictedBandwidthModeEnabled() const {
    return m_restricted_bandwidth_mode_enabled;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setRestrictedBandwidthModeEnabled(const bool &restricted_bandwidth_mode_enabled) {
    m_restricted_bandwidth_mode_enabled = restricted_bandwidth_mode_enabled;
    m_restricted_bandwidth_mode_enabled_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_restricted_bandwidth_mode_enabled_Set() const{
    return m_restricted_bandwidth_mode_enabled_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_restricted_bandwidth_mode_enabled_Valid() const{
    return m_restricted_bandwidth_mode_enabled_isValid;
}

QString OAIUpdateNetworkCameraQualityRetentionProfile_request::getScheduleId() const {
    return m_schedule_id;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setScheduleId(const QString &schedule_id) {
    m_schedule_id = schedule_id;
    m_schedule_id_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_schedule_id_Set() const{
    return m_schedule_id_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_schedule_id_Valid() const{
    return m_schedule_id_isValid;
}

OAICreateNetworkCameraQualityRetentionProfile_request_videoSettings OAIUpdateNetworkCameraQualityRetentionProfile_request::getVideoSettings() const {
    return m_video_settings;
}
void OAIUpdateNetworkCameraQualityRetentionProfile_request::setVideoSettings(const OAICreateNetworkCameraQualityRetentionProfile_request_videoSettings &video_settings) {
    m_video_settings = video_settings;
    m_video_settings_isSet = true;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_video_settings_Set() const{
    return m_video_settings_isSet;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::is_video_settings_Valid() const{
    return m_video_settings_isValid;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_recording_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_archive_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_based_retention_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_detector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_bandwidth_mode_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkCameraQualityRetentionProfile_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
