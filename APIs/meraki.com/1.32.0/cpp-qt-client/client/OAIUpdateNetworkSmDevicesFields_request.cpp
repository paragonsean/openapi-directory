/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSmDevicesFields_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSmDevicesFields_request::OAIUpdateNetworkSmDevicesFields_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSmDevicesFields_request::OAIUpdateNetworkSmDevicesFields_request() {
    this->initializeModel();
}

OAIUpdateNetworkSmDevicesFields_request::~OAIUpdateNetworkSmDevicesFields_request() {}

void OAIUpdateNetworkSmDevicesFields_request::initializeModel() {

    m_device_fields_isSet = false;
    m_device_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_wifi_mac_isSet = false;
    m_wifi_mac_isValid = false;
}

void OAIUpdateNetworkSmDevicesFields_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSmDevicesFields_request::fromJsonObject(QJsonObject json) {

    m_device_fields_isValid = ::OpenAPI::fromJsonValue(m_device_fields, json[QString("deviceFields")]);
    m_device_fields_isSet = !json[QString("deviceFields")].isNull() && m_device_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_wifi_mac_isValid = ::OpenAPI::fromJsonValue(m_wifi_mac, json[QString("wifiMac")]);
    m_wifi_mac_isSet = !json[QString("wifiMac")].isNull() && m_wifi_mac_isValid;
}

QString OAIUpdateNetworkSmDevicesFields_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSmDevicesFields_request::asJsonObject() const {
    QJsonObject obj;
    if (m_device_fields.isSet()) {
        obj.insert(QString("deviceFields"), ::OpenAPI::toJsonValue(m_device_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_wifi_mac_isSet) {
        obj.insert(QString("wifiMac"), ::OpenAPI::toJsonValue(m_wifi_mac));
    }
    return obj;
}

OAIUpdateNetworkSmDevicesFields_request_deviceFields OAIUpdateNetworkSmDevicesFields_request::getDeviceFields() const {
    return m_device_fields;
}
void OAIUpdateNetworkSmDevicesFields_request::setDeviceFields(const OAIUpdateNetworkSmDevicesFields_request_deviceFields &device_fields) {
    m_device_fields = device_fields;
    m_device_fields_isSet = true;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_device_fields_Set() const{
    return m_device_fields_isSet;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_device_fields_Valid() const{
    return m_device_fields_isValid;
}

QString OAIUpdateNetworkSmDevicesFields_request::getId() const {
    return m_id;
}
void OAIUpdateNetworkSmDevicesFields_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateNetworkSmDevicesFields_request::getSerial() const {
    return m_serial;
}
void OAIUpdateNetworkSmDevicesFields_request::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIUpdateNetworkSmDevicesFields_request::getWifiMac() const {
    return m_wifi_mac;
}
void OAIUpdateNetworkSmDevicesFields_request::setWifiMac(const QString &wifi_mac) {
    m_wifi_mac = wifi_mac;
    m_wifi_mac_isSet = true;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_wifi_mac_Set() const{
    return m_wifi_mac_isSet;
}

bool OAIUpdateNetworkSmDevicesFields_request::is_wifi_mac_Valid() const{
    return m_wifi_mac_isValid;
}

bool OAIUpdateNetworkSmDevicesFields_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_mac_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSmDevicesFields_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_fields_isValid && true;
}

} // namespace OpenAPI
