/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp.h
 *
 * The Cisco Discovery Protocol (CDP) information of the connected device.
 */

#ifndef OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp_H
#define OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp : public OAIObject {
public:
    OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp();
    OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp(QString json);
    ~OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getCapabilities() const;
    void setCapabilities(const QString &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getManagementAddress() const;
    void setManagementAddress(const QString &management_address);
    bool is_management_address_Set() const;
    bool is_management_address_Valid() const;

    qint32 getNativeVlan() const;
    void setNativeVlan(const qint32 &native_vlan);
    bool is_native_vlan_Set() const;
    bool is_native_vlan_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getPortId() const;
    void setPortId(const QString &port_id);
    bool is_port_id_Set() const;
    bool is_port_id_Valid() const;

    QString getSystemName() const;
    void setSystemName(const QString &system_name);
    bool is_system_name_Set() const;
    bool is_system_name_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getVtpManagementDomain() const;
    void setVtpManagementDomain(const QString &vtp_management_domain);
    bool is_vtp_management_domain_Set() const;
    bool is_vtp_management_domain_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_management_address;
    bool m_management_address_isSet;
    bool m_management_address_isValid;

    qint32 m_native_vlan;
    bool m_native_vlan_isSet;
    bool m_native_vlan_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_port_id;
    bool m_port_id_isSet;
    bool m_port_id_isValid;

    QString m_system_name;
    bool m_system_name_isSet;
    bool m_system_name_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_vtp_management_domain;
    bool m_vtp_management_domain_isSet;
    bool m_vtp_management_domain_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp)

#endif // OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp_H
