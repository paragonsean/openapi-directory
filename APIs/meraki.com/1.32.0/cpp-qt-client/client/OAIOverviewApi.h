/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOverviewApi_H
#define OAI_OAIOverviewApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response.h"
#include "OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner.h"
#include "OAIGetOrganizationAdaptivePolicyOverview_200_response.h"
#include "OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner.h"
#include "OAIGetOrganizationClientsOverview_200_response.h"
#include "OAIGetOrganizationDevicesStatusesOverview_200_response.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOverviewApi : public QObject {
    Q_OBJECT

public:
    OAIOverviewApi(const int timeOut = 0);
    ~OAIOverviewApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsOverview(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkClientsOverview(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorAlertsCurrentOverviewByMetric(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  interval qint32 [optional]
    */
    virtual void getNetworkSensorAlertsOverviewByMetric(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyOverview(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  interval qint32 [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  operation_ids QList<QString> [optional]
    * @param[in]  source_ips QList<QString> [optional]
    * @param[in]  admin_ids QList<QString> [optional]
    * @param[in]  user_agent QString [optional]
    */
    virtual void getOrganizationApiRequestsOverviewResponseCodesByInterval(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &operation_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_ips = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &admin_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationApiRequestsOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationClientsOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationDevicesStatusesOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationLicensesOverview(const QString &organization_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceCameraAnalyticsOverviewCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsOverviewCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsCurrentOverviewByMetricCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsOverviewByMetricCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicensesOverviewCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceCameraAnalyticsOverviewSignal(QList<OAIObject> summary);
    void getNetworkClientsOverviewSignal(OAIObject summary);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignal(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary);
    void getNetworkSensorAlertsOverviewByMetricSignal(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary);
    void getOrganizationAdaptivePolicyOverviewSignal(OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignal(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary);
    void getOrganizationApiRequestsOverviewSignal(OAIObject summary);
    void getOrganizationClientsOverviewSignal(OAIGetOrganizationClientsOverview_200_response summary);
    void getOrganizationDevicesStatusesOverviewSignal(OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationLicensesOverviewSignal(OAIObject summary);


    void getDeviceCameraAnalyticsOverviewSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary);
    void getNetworkSensorAlertsOverviewByMetricSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary);
    void getOrganizationAdaptivePolicyOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary);
    void getOrganizationApiRequestsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationClientsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationClientsOverview_200_response summary);
    void getOrganizationDevicesStatusesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationLicensesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsOverviewSignalError() instead")
    void getDeviceCameraAnalyticsOverviewSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsOverviewSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsOverviewSignalError() instead")
    void getNetworkClientsOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsCurrentOverviewByMetricSignalError() instead")
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalE(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalError(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsOverviewByMetricSignalError() instead")
    void getNetworkSensorAlertsOverviewByMetricSignalE(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsOverviewByMetricSignalError(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalError() instead")
    void getOrganizationAdaptivePolicyOverviewSignalE(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalError(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalError() instead")
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalE(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalError(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewSignalError() instead")
    void getOrganizationApiRequestsOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsOverviewSignalError() instead")
    void getOrganizationClientsOverviewSignalE(OAIGetOrganizationClientsOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsOverviewSignalError(OAIGetOrganizationClientsOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalError() instead")
    void getOrganizationDevicesStatusesOverviewSignalE(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalError(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesOverviewSignalError() instead")
    void getOrganizationLicensesOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsOverviewSignalErrorFull() instead")
    void getDeviceCameraAnalyticsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsOverviewSignalErrorFull() instead")
    void getNetworkClientsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsCurrentOverviewByMetricSignalErrorFull() instead")
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsOverviewByMetricSignalErrorFull() instead")
    void getNetworkSensorAlertsOverviewByMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsOverviewByMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalErrorFull() instead")
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewSignalErrorFull() instead")
    void getOrganizationApiRequestsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsOverviewSignalErrorFull() instead")
    void getOrganizationClientsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalErrorFull() instead")
    void getOrganizationDevicesStatusesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesOverviewSignalErrorFull() instead")
    void getOrganizationLicensesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
