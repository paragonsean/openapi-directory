/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsidVpn_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsidVpn_request::OAIUpdateNetworkWirelessSsidVpn_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsidVpn_request::OAIUpdateNetworkWirelessSsidVpn_request() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsidVpn_request::~OAIUpdateNetworkWirelessSsidVpn_request() {}

void OAIUpdateNetworkWirelessSsidVpn_request::initializeModel() {

    m_concentrator_isSet = false;
    m_concentrator_isValid = false;

    m_failover_isSet = false;
    m_failover_isValid = false;

    m_split_tunnel_isSet = false;
    m_split_tunnel_isValid = false;
}

void OAIUpdateNetworkWirelessSsidVpn_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsidVpn_request::fromJsonObject(QJsonObject json) {

    m_concentrator_isValid = ::OpenAPI::fromJsonValue(m_concentrator, json[QString("concentrator")]);
    m_concentrator_isSet = !json[QString("concentrator")].isNull() && m_concentrator_isValid;

    m_failover_isValid = ::OpenAPI::fromJsonValue(m_failover, json[QString("failover")]);
    m_failover_isSet = !json[QString("failover")].isNull() && m_failover_isValid;

    m_split_tunnel_isValid = ::OpenAPI::fromJsonValue(m_split_tunnel, json[QString("splitTunnel")]);
    m_split_tunnel_isSet = !json[QString("splitTunnel")].isNull() && m_split_tunnel_isValid;
}

QString OAIUpdateNetworkWirelessSsidVpn_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsidVpn_request::asJsonObject() const {
    QJsonObject obj;
    if (m_concentrator.isSet()) {
        obj.insert(QString("concentrator"), ::OpenAPI::toJsonValue(m_concentrator));
    }
    if (m_failover.isSet()) {
        obj.insert(QString("failover"), ::OpenAPI::toJsonValue(m_failover));
    }
    if (m_split_tunnel.isSet()) {
        obj.insert(QString("splitTunnel"), ::OpenAPI::toJsonValue(m_split_tunnel));
    }
    return obj;
}

OAIUpdateNetworkWirelessSsidVpn_request_concentrator OAIUpdateNetworkWirelessSsidVpn_request::getConcentrator() const {
    return m_concentrator;
}
void OAIUpdateNetworkWirelessSsidVpn_request::setConcentrator(const OAIUpdateNetworkWirelessSsidVpn_request_concentrator &concentrator) {
    m_concentrator = concentrator;
    m_concentrator_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::is_concentrator_Set() const{
    return m_concentrator_isSet;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::is_concentrator_Valid() const{
    return m_concentrator_isValid;
}

OAIUpdateNetworkWirelessSsidVpn_request_failover OAIUpdateNetworkWirelessSsidVpn_request::getFailover() const {
    return m_failover;
}
void OAIUpdateNetworkWirelessSsidVpn_request::setFailover(const OAIUpdateNetworkWirelessSsidVpn_request_failover &failover) {
    m_failover = failover;
    m_failover_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::is_failover_Set() const{
    return m_failover_isSet;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::is_failover_Valid() const{
    return m_failover_isValid;
}

OAIUpdateNetworkWirelessSsidVpn_request_splitTunnel OAIUpdateNetworkWirelessSsidVpn_request::getSplitTunnel() const {
    return m_split_tunnel;
}
void OAIUpdateNetworkWirelessSsidVpn_request::setSplitTunnel(const OAIUpdateNetworkWirelessSsidVpn_request_splitTunnel &split_tunnel) {
    m_split_tunnel = split_tunnel;
    m_split_tunnel_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::is_split_tunnel_Set() const{
    return m_split_tunnel_isSet;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::is_split_tunnel_Valid() const{
    return m_split_tunnel_isValid;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concentrator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_tunnel.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsidVpn_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
