/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPoliciesApi_H
#define OAI_OAIPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAIGetNetworkPoliciesByClient_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationAdaptivePolicyPolicy_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIPoliciesApi(const int timeOut = 0);
    ~OAIPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_policy_request OAICreateOrganizationAdaptivePolicyPolicy_request [required]
    */
    virtual void createOrganizationAdaptivePolicyPolicy(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyPolicy_request &oai_create_organization_adaptive_policy_policy_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkPoliciesByClient(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicies(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_policy_request OAIUpdateOrganizationAdaptivePolicyPolicy_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request> &oai_update_organization_adaptive_policy_policy_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkPoliciesByClientCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPoliciesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void deleteOrganizationAdaptivePolicyPolicySignal();
    void getNetworkPoliciesByClientSignal(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary);
    void getOrganizationAdaptivePolicyPoliciesSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignal(OAIObject summary);


    void createOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker);
    void getNetworkPoliciesByClientSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary);
    void getOrganizationAdaptivePolicyPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalError() instead")
    void createOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalError() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPoliciesByClientSignalError() instead")
    void getNetworkPoliciesByClientSignalE(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPoliciesByClientSignalError(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalError() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalError() instead")
    void getOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalError() instead")
    void updateOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void createOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPoliciesByClientSignalErrorFull() instead")
    void getNetworkPoliciesByClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPoliciesByClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
