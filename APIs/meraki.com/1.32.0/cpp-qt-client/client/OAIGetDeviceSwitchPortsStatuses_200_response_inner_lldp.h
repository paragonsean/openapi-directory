/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp.h
 *
 * The Link Layer Discovery Protocol (LLDP) information of the connected device.
 */

#ifndef OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp_H
#define OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp : public OAIObject {
public:
    OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp();
    OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp(QString json);
    ~OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChassisId() const;
    void setChassisId(const QString &chassis_id);
    bool is_chassis_id_Set() const;
    bool is_chassis_id_Valid() const;

    QString getManagementAddress() const;
    void setManagementAddress(const QString &management_address);
    bool is_management_address_Set() const;
    bool is_management_address_Valid() const;

    qint32 getManagementVlan() const;
    void setManagementVlan(const qint32 &management_vlan);
    bool is_management_vlan_Set() const;
    bool is_management_vlan_Valid() const;

    QString getPortDescription() const;
    void setPortDescription(const QString &port_description);
    bool is_port_description_Set() const;
    bool is_port_description_Valid() const;

    QString getPortId() const;
    void setPortId(const QString &port_id);
    bool is_port_id_Set() const;
    bool is_port_id_Valid() const;

    qint32 getPortVlan() const;
    void setPortVlan(const qint32 &port_vlan);
    bool is_port_vlan_Set() const;
    bool is_port_vlan_Valid() const;

    QString getSystemCapabilities() const;
    void setSystemCapabilities(const QString &system_capabilities);
    bool is_system_capabilities_Set() const;
    bool is_system_capabilities_Valid() const;

    QString getSystemDescription() const;
    void setSystemDescription(const QString &system_description);
    bool is_system_description_Set() const;
    bool is_system_description_Valid() const;

    QString getSystemName() const;
    void setSystemName(const QString &system_name);
    bool is_system_name_Set() const;
    bool is_system_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chassis_id;
    bool m_chassis_id_isSet;
    bool m_chassis_id_isValid;

    QString m_management_address;
    bool m_management_address_isSet;
    bool m_management_address_isValid;

    qint32 m_management_vlan;
    bool m_management_vlan_isSet;
    bool m_management_vlan_isValid;

    QString m_port_description;
    bool m_port_description_isSet;
    bool m_port_description_isValid;

    QString m_port_id;
    bool m_port_id_isSet;
    bool m_port_id_isValid;

    qint32 m_port_vlan;
    bool m_port_vlan_isSet;
    bool m_port_vlan_isValid;

    QString m_system_capabilities;
    bool m_system_capabilities_isSet;
    bool m_system_capabilities_isValid;

    QString m_system_description;
    bool m_system_description_isSet;
    bool m_system_description_isValid;

    QString m_system_name;
    bool m_system_name_isSet;
    bool m_system_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp)

#endif // OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp_H
