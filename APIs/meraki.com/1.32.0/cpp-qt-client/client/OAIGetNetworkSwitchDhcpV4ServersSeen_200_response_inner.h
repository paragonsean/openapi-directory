/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_H
#define OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_H

#include <QJsonObject>

#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_device.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_ipv4.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastAck.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_seenBy_inner.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_device;
class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_ipv4;
class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastAck;
class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket;
class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_seenBy_inner;

class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner : public OAIObject {
public:
    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner();
    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner(QString json);
    ~OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_device getDevice() const;
    void setDevice(const OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_device &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_ipv4 getIpv4() const;
    void setIpv4(const OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_ipv4 &ipv4);
    bool is_ipv4_Set() const;
    bool is_ipv4_Valid() const;

    bool isIsAllowed() const;
    void setIsAllowed(const bool &is_allowed);
    bool is_is_allowed_Set() const;
    bool is_is_allowed_Valid() const;

    bool isIsConfigured() const;
    void setIsConfigured(const bool &is_configured);
    bool is_is_configured_Set() const;
    bool is_is_configured_Valid() const;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastAck getLastAck() const;
    void setLastAck(const OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastAck &last_ack);
    bool is_last_ack_Set() const;
    bool is_last_ack_Valid() const;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket getLastPacket() const;
    void setLastPacket(const OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket &last_packet);
    bool is_last_packet_Set() const;
    bool is_last_packet_Valid() const;

    QDateTime getLastSeenAt() const;
    void setLastSeenAt(const QDateTime &last_seen_at);
    bool is_last_seen_at_Set() const;
    bool is_last_seen_at_Valid() const;

    QString getMac() const;
    void setMac(const QString &mac);
    bool is_mac_Set() const;
    bool is_mac_Valid() const;

    QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_seenBy_inner> getSeenBy() const;
    void setSeenBy(const QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_seenBy_inner> &seen_by);
    bool is_seen_by_Set() const;
    bool is_seen_by_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getVlan() const;
    void setVlan(const qint32 &vlan);
    bool is_vlan_Set() const;
    bool is_vlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_device m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_ipv4 m_ipv4;
    bool m_ipv4_isSet;
    bool m_ipv4_isValid;

    bool m_is_allowed;
    bool m_is_allowed_isSet;
    bool m_is_allowed_isValid;

    bool m_is_configured;
    bool m_is_configured_isSet;
    bool m_is_configured_isValid;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastAck m_last_ack;
    bool m_last_ack_isSet;
    bool m_last_ack_isValid;

    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket m_last_packet;
    bool m_last_packet_isSet;
    bool m_last_packet_isValid;

    QDateTime m_last_seen_at;
    bool m_last_seen_at_isSet;
    bool m_last_seen_at_isValid;

    QString m_mac;
    bool m_mac_isSet;
    bool m_mac_isValid;

    QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_seenBy_inner> m_seen_by;
    bool m_seen_by_isSet;
    bool m_seen_by_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_vlan;
    bool m_vlan_isSet;
    bool m_vlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner)

#endif // OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_H
