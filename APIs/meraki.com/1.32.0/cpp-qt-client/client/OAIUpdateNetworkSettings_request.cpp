/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSettings_request::OAIUpdateNetworkSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSettings_request::OAIUpdateNetworkSettings_request() {
    this->initializeModel();
}

OAIUpdateNetworkSettings_request::~OAIUpdateNetworkSettings_request() {}

void OAIUpdateNetworkSettings_request::initializeModel() {

    m_local_status_page_isSet = false;
    m_local_status_page_isValid = false;

    m_local_status_page_enabled_isSet = false;
    m_local_status_page_enabled_isValid = false;

    m_remote_status_page_enabled_isSet = false;
    m_remote_status_page_enabled_isValid = false;

    m_secure_port_isSet = false;
    m_secure_port_isValid = false;
}

void OAIUpdateNetworkSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSettings_request::fromJsonObject(QJsonObject json) {

    m_local_status_page_isValid = ::OpenAPI::fromJsonValue(m_local_status_page, json[QString("localStatusPage")]);
    m_local_status_page_isSet = !json[QString("localStatusPage")].isNull() && m_local_status_page_isValid;

    m_local_status_page_enabled_isValid = ::OpenAPI::fromJsonValue(m_local_status_page_enabled, json[QString("localStatusPageEnabled")]);
    m_local_status_page_enabled_isSet = !json[QString("localStatusPageEnabled")].isNull() && m_local_status_page_enabled_isValid;

    m_remote_status_page_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_status_page_enabled, json[QString("remoteStatusPageEnabled")]);
    m_remote_status_page_enabled_isSet = !json[QString("remoteStatusPageEnabled")].isNull() && m_remote_status_page_enabled_isValid;

    m_secure_port_isValid = ::OpenAPI::fromJsonValue(m_secure_port, json[QString("securePort")]);
    m_secure_port_isSet = !json[QString("securePort")].isNull() && m_secure_port_isValid;
}

QString OAIUpdateNetworkSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_local_status_page.isSet()) {
        obj.insert(QString("localStatusPage"), ::OpenAPI::toJsonValue(m_local_status_page));
    }
    if (m_local_status_page_enabled_isSet) {
        obj.insert(QString("localStatusPageEnabled"), ::OpenAPI::toJsonValue(m_local_status_page_enabled));
    }
    if (m_remote_status_page_enabled_isSet) {
        obj.insert(QString("remoteStatusPageEnabled"), ::OpenAPI::toJsonValue(m_remote_status_page_enabled));
    }
    if (m_secure_port.isSet()) {
        obj.insert(QString("securePort"), ::OpenAPI::toJsonValue(m_secure_port));
    }
    return obj;
}

OAIUpdateNetworkSettings_request_localStatusPage OAIUpdateNetworkSettings_request::getLocalStatusPage() const {
    return m_local_status_page;
}
void OAIUpdateNetworkSettings_request::setLocalStatusPage(const OAIUpdateNetworkSettings_request_localStatusPage &local_status_page) {
    m_local_status_page = local_status_page;
    m_local_status_page_isSet = true;
}

bool OAIUpdateNetworkSettings_request::is_local_status_page_Set() const{
    return m_local_status_page_isSet;
}

bool OAIUpdateNetworkSettings_request::is_local_status_page_Valid() const{
    return m_local_status_page_isValid;
}

bool OAIUpdateNetworkSettings_request::isLocalStatusPageEnabled() const {
    return m_local_status_page_enabled;
}
void OAIUpdateNetworkSettings_request::setLocalStatusPageEnabled(const bool &local_status_page_enabled) {
    m_local_status_page_enabled = local_status_page_enabled;
    m_local_status_page_enabled_isSet = true;
}

bool OAIUpdateNetworkSettings_request::is_local_status_page_enabled_Set() const{
    return m_local_status_page_enabled_isSet;
}

bool OAIUpdateNetworkSettings_request::is_local_status_page_enabled_Valid() const{
    return m_local_status_page_enabled_isValid;
}

bool OAIUpdateNetworkSettings_request::isRemoteStatusPageEnabled() const {
    return m_remote_status_page_enabled;
}
void OAIUpdateNetworkSettings_request::setRemoteStatusPageEnabled(const bool &remote_status_page_enabled) {
    m_remote_status_page_enabled = remote_status_page_enabled;
    m_remote_status_page_enabled_isSet = true;
}

bool OAIUpdateNetworkSettings_request::is_remote_status_page_enabled_Set() const{
    return m_remote_status_page_enabled_isSet;
}

bool OAIUpdateNetworkSettings_request::is_remote_status_page_enabled_Valid() const{
    return m_remote_status_page_enabled_isValid;
}

OAIGetNetworkSettings_200_response_securePort OAIUpdateNetworkSettings_request::getSecurePort() const {
    return m_secure_port;
}
void OAIUpdateNetworkSettings_request::setSecurePort(const OAIGetNetworkSettings_200_response_securePort &secure_port) {
    m_secure_port = secure_port;
    m_secure_port_isSet = true;
}

bool OAIUpdateNetworkSettings_request::is_secure_port_Set() const{
    return m_secure_port_isSet;
}

bool OAIUpdateNetworkSettings_request::is_secure_port_Valid() const{
    return m_secure_port_isValid;
}

bool OAIUpdateNetworkSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_status_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_status_page_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_status_page_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_port.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
