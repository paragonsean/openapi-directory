/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts() {
    this->initializeModel();
}

OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::~OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts() {}

void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::initializeModel() {

    m_door_isSet = false;
    m_door_isValid = false;

    m_humidity_isSet = false;
    m_humidity_isValid = false;

    m_indoor_air_quality_isSet = false;
    m_indoor_air_quality_isValid = false;

    m_noise_isSet = false;
    m_noise_isValid = false;

    m_pm25_isSet = false;
    m_pm25_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_tvoc_isSet = false;
    m_tvoc_isValid = false;

    m_water_isSet = false;
    m_water_isValid = false;
}

void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::fromJsonObject(QJsonObject json) {

    m_door_isValid = ::OpenAPI::fromJsonValue(m_door, json[QString("door")]);
    m_door_isSet = !json[QString("door")].isNull() && m_door_isValid;

    m_humidity_isValid = ::OpenAPI::fromJsonValue(m_humidity, json[QString("humidity")]);
    m_humidity_isSet = !json[QString("humidity")].isNull() && m_humidity_isValid;

    m_indoor_air_quality_isValid = ::OpenAPI::fromJsonValue(m_indoor_air_quality, json[QString("indoorAirQuality")]);
    m_indoor_air_quality_isSet = !json[QString("indoorAirQuality")].isNull() && m_indoor_air_quality_isValid;

    m_noise_isValid = ::OpenAPI::fromJsonValue(m_noise, json[QString("noise")]);
    m_noise_isSet = !json[QString("noise")].isNull() && m_noise_isValid;

    m_pm25_isValid = ::OpenAPI::fromJsonValue(m_pm25, json[QString("pm25")]);
    m_pm25_isSet = !json[QString("pm25")].isNull() && m_pm25_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_tvoc_isValid = ::OpenAPI::fromJsonValue(m_tvoc, json[QString("tvoc")]);
    m_tvoc_isSet = !json[QString("tvoc")].isNull() && m_tvoc_isValid;

    m_water_isValid = ::OpenAPI::fromJsonValue(m_water, json[QString("water")]);
    m_water_isSet = !json[QString("water")].isNull() && m_water_isValid;
}

QString OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::asJsonObject() const {
    QJsonObject obj;
    if (m_door_isSet) {
        obj.insert(QString("door"), ::OpenAPI::toJsonValue(m_door));
    }
    if (m_humidity_isSet) {
        obj.insert(QString("humidity"), ::OpenAPI::toJsonValue(m_humidity));
    }
    if (m_indoor_air_quality_isSet) {
        obj.insert(QString("indoorAirQuality"), ::OpenAPI::toJsonValue(m_indoor_air_quality));
    }
    if (m_noise.isSet()) {
        obj.insert(QString("noise"), ::OpenAPI::toJsonValue(m_noise));
    }
    if (m_pm25_isSet) {
        obj.insert(QString("pm25"), ::OpenAPI::toJsonValue(m_pm25));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_tvoc_isSet) {
        obj.insert(QString("tvoc"), ::OpenAPI::toJsonValue(m_tvoc));
    }
    if (m_water_isSet) {
        obj.insert(QString("water"), ::OpenAPI::toJsonValue(m_water));
    }
    return obj;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getDoor() const {
    return m_door;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setDoor(const qint32 &door) {
    m_door = door;
    m_door_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_door_Set() const{
    return m_door_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_door_Valid() const{
    return m_door_isValid;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getHumidity() const {
    return m_humidity;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setHumidity(const qint32 &humidity) {
    m_humidity = humidity;
    m_humidity_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_humidity_Set() const{
    return m_humidity_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_humidity_Valid() const{
    return m_humidity_isValid;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getIndoorAirQuality() const {
    return m_indoor_air_quality;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setIndoorAirQuality(const qint32 &indoor_air_quality) {
    m_indoor_air_quality = indoor_air_quality;
    m_indoor_air_quality_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_indoor_air_quality_Set() const{
    return m_indoor_air_quality_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_indoor_air_quality_Valid() const{
    return m_indoor_air_quality_isValid;
}

OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts_noise OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getNoise() const {
    return m_noise;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setNoise(const OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts_noise &noise) {
    m_noise = noise;
    m_noise_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_noise_Set() const{
    return m_noise_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_noise_Valid() const{
    return m_noise_isValid;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getPm25() const {
    return m_pm25;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setPm25(const qint32 &pm25) {
    m_pm25 = pm25;
    m_pm25_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_pm25_Set() const{
    return m_pm25_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_pm25_Valid() const{
    return m_pm25_isValid;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getTemperature() const {
    return m_temperature;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setTemperature(const qint32 &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_temperature_Valid() const{
    return m_temperature_isValid;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getTvoc() const {
    return m_tvoc;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setTvoc(const qint32 &tvoc) {
    m_tvoc = tvoc;
    m_tvoc_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_tvoc_Set() const{
    return m_tvoc_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_tvoc_Valid() const{
    return m_tvoc_isValid;
}

qint32 OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::getWater() const {
    return m_water;
}
void OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::setWater(const qint32 &water) {
    m_water = water;
    m_water_isSet = true;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_water_Set() const{
    return m_water_isSet;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::is_water_Valid() const{
    return m_water_isValid;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_door_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_air_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noise.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm25_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tvoc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner_counts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
