/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response() {
    this->initializeModel();
}

OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::~OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response() {}

void OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::initializeModel() {

    m_hubs_isSet = false;
    m_hubs_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::fromJsonObject(QJsonObject json) {

    m_hubs_isValid = ::OpenAPI::fromJsonValue(m_hubs, json[QString("hubs")]);
    m_hubs_isSet = !json[QString("hubs")].isNull() && m_hubs_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;
}

QString OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_hubs.size() > 0) {
        obj.insert(QString("hubs"), ::OpenAPI::toJsonValue(m_hubs));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

QList<OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response_hubs_inner> OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::getHubs() const {
    return m_hubs;
}
void OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::setHubs(const QList<OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response_hubs_inner> &hubs) {
    m_hubs = hubs;
    m_hubs_isSet = true;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::is_hubs_Set() const{
    return m_hubs_isSet;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::is_hubs_Valid() const{
    return m_hubs_isValid;
}

QString OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::getMode() const {
    return m_mode;
}
void OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response_subnets_inner> OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::getSubnets() const {
    return m_subnets;
}
void OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::setSubnets(const QList<OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response_subnets_inner> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hubs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
