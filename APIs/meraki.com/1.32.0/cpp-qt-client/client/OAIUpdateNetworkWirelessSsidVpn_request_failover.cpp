/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsidVpn_request_failover.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsidVpn_request_failover::OAIUpdateNetworkWirelessSsidVpn_request_failover(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsidVpn_request_failover::OAIUpdateNetworkWirelessSsidVpn_request_failover() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsidVpn_request_failover::~OAIUpdateNetworkWirelessSsidVpn_request_failover() {}

void OAIUpdateNetworkWirelessSsidVpn_request_failover::initializeModel() {

    m_heartbeat_interval_isSet = false;
    m_heartbeat_interval_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_request_ip_isSet = false;
    m_request_ip_isValid = false;
}

void OAIUpdateNetworkWirelessSsidVpn_request_failover::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsidVpn_request_failover::fromJsonObject(QJsonObject json) {

    m_heartbeat_interval_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_interval, json[QString("heartbeatInterval")]);
    m_heartbeat_interval_isSet = !json[QString("heartbeatInterval")].isNull() && m_heartbeat_interval_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("idleTimeout")]);
    m_idle_timeout_isSet = !json[QString("idleTimeout")].isNull() && m_idle_timeout_isValid;

    m_request_ip_isValid = ::OpenAPI::fromJsonValue(m_request_ip, json[QString("requestIp")]);
    m_request_ip_isSet = !json[QString("requestIp")].isNull() && m_request_ip_isValid;
}

QString OAIUpdateNetworkWirelessSsidVpn_request_failover::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsidVpn_request_failover::asJsonObject() const {
    QJsonObject obj;
    if (m_heartbeat_interval_isSet) {
        obj.insert(QString("heartbeatInterval"), ::OpenAPI::toJsonValue(m_heartbeat_interval));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("idleTimeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_request_ip_isSet) {
        obj.insert(QString("requestIp"), ::OpenAPI::toJsonValue(m_request_ip));
    }
    return obj;
}

qint32 OAIUpdateNetworkWirelessSsidVpn_request_failover::getHeartbeatInterval() const {
    return m_heartbeat_interval;
}
void OAIUpdateNetworkWirelessSsidVpn_request_failover::setHeartbeatInterval(const qint32 &heartbeat_interval) {
    m_heartbeat_interval = heartbeat_interval;
    m_heartbeat_interval_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::is_heartbeat_interval_Set() const{
    return m_heartbeat_interval_isSet;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::is_heartbeat_interval_Valid() const{
    return m_heartbeat_interval_isValid;
}

qint32 OAIUpdateNetworkWirelessSsidVpn_request_failover::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAIUpdateNetworkWirelessSsidVpn_request_failover::setIdleTimeout(const qint32 &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

QString OAIUpdateNetworkWirelessSsidVpn_request_failover::getRequestIp() const {
    return m_request_ip;
}
void OAIUpdateNetworkWirelessSsidVpn_request_failover::setRequestIp(const QString &request_ip) {
    m_request_ip = request_ip;
    m_request_ip_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::is_request_ip_Set() const{
    return m_request_ip_isSet;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::is_request_ip_Valid() const{
    return m_request_ip_isValid;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heartbeat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsidVpn_request_failover::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
