/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides() {
    this->initializeModel();
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::~OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides() {}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::initializeModel() {

    m_allowed_vlans_isSet = false;
    m_allowed_vlans_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;

    m_voice_vlan_isSet = false;
    m_voice_vlan_isValid = false;
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::fromJsonObject(QJsonObject json) {

    m_allowed_vlans_isValid = ::OpenAPI::fromJsonValue(m_allowed_vlans, json[QString("allowedVlans")]);
    m_allowed_vlans_isSet = !json[QString("allowedVlans")].isNull() && m_allowed_vlans_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;

    m_voice_vlan_isValid = ::OpenAPI::fromJsonValue(m_voice_vlan, json[QString("voiceVlan")]);
    m_voice_vlan_isSet = !json[QString("voiceVlan")].isNull() && m_voice_vlan_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_vlans_isSet) {
        obj.insert(QString("allowedVlans"), ::OpenAPI::toJsonValue(m_allowed_vlans));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    if (m_voice_vlan_isSet) {
        obj.insert(QString("voiceVlan"), ::OpenAPI::toJsonValue(m_voice_vlan));
    }
    return obj;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::getAllowedVlans() const {
    return m_allowed_vlans;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::setAllowedVlans(const QString &allowed_vlans) {
    m_allowed_vlans = allowed_vlans;
    m_allowed_vlans_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_allowed_vlans_Set() const{
    return m_allowed_vlans_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_allowed_vlans_Valid() const{
    return m_allowed_vlans_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::getType() const {
    return m_type;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::getVlan() const {
    return m_vlan;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_vlan_Valid() const{
    return m_vlan_isValid;
}

qint32 OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::getVoiceVlan() const {
    return m_voice_vlan;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::setVoiceVlan(const qint32 &voice_vlan) {
    m_voice_vlan = voice_vlan;
    m_voice_vlan_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_voice_vlan_Set() const{
    return m_voice_vlan_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::is_voice_vlan_Valid() const{
    return m_voice_vlan_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_vlans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
