/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkApplianceSsids_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkApplianceSsids_200_response_inner::OAIGetNetworkApplianceSsids_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkApplianceSsids_200_response_inner::OAIGetNetworkApplianceSsids_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkApplianceSsids_200_response_inner::~OAIGetNetworkApplianceSsids_200_response_inner() {}

void OAIGetNetworkApplianceSsids_200_response_inner::initializeModel() {

    m_auth_mode_isSet = false;
    m_auth_mode_isValid = false;

    m_default_vlan_id_isSet = false;
    m_default_vlan_id_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_mode_isSet = false;
    m_encryption_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_radius_servers_isSet = false;
    m_radius_servers_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_wpa_encryption_mode_isSet = false;
    m_wpa_encryption_mode_isValid = false;
}

void OAIGetNetworkApplianceSsids_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkApplianceSsids_200_response_inner::fromJsonObject(QJsonObject json) {

    m_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_auth_mode, json[QString("authMode")]);
    m_auth_mode_isSet = !json[QString("authMode")].isNull() && m_auth_mode_isValid;

    m_default_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_default_vlan_id, json[QString("defaultVlanId")]);
    m_default_vlan_id_isSet = !json[QString("defaultVlanId")].isNull() && m_default_vlan_id_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_encryption_mode, json[QString("encryptionMode")]);
    m_encryption_mode_isSet = !json[QString("encryptionMode")].isNull() && m_encryption_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_radius_servers_isValid = ::OpenAPI::fromJsonValue(m_radius_servers, json[QString("radiusServers")]);
    m_radius_servers_isSet = !json[QString("radiusServers")].isNull() && m_radius_servers_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_wpa_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_wpa_encryption_mode, json[QString("wpaEncryptionMode")]);
    m_wpa_encryption_mode_isSet = !json[QString("wpaEncryptionMode")].isNull() && m_wpa_encryption_mode_isValid;
}

QString OAIGetNetworkApplianceSsids_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkApplianceSsids_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_mode_isSet) {
        obj.insert(QString("authMode"), ::OpenAPI::toJsonValue(m_auth_mode));
    }
    if (m_default_vlan_id_isSet) {
        obj.insert(QString("defaultVlanId"), ::OpenAPI::toJsonValue(m_default_vlan_id));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_mode_isSet) {
        obj.insert(QString("encryptionMode"), ::OpenAPI::toJsonValue(m_encryption_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_radius_servers.size() > 0) {
        obj.insert(QString("radiusServers"), ::OpenAPI::toJsonValue(m_radius_servers));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_wpa_encryption_mode_isSet) {
        obj.insert(QString("wpaEncryptionMode"), ::OpenAPI::toJsonValue(m_wpa_encryption_mode));
    }
    return obj;
}

QString OAIGetNetworkApplianceSsids_200_response_inner::getAuthMode() const {
    return m_auth_mode;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setAuthMode(const QString &auth_mode) {
    m_auth_mode = auth_mode;
    m_auth_mode_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_auth_mode_Set() const{
    return m_auth_mode_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_auth_mode_Valid() const{
    return m_auth_mode_isValid;
}

qint32 OAIGetNetworkApplianceSsids_200_response_inner::getDefaultVlanId() const {
    return m_default_vlan_id;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setDefaultVlanId(const qint32 &default_vlan_id) {
    m_default_vlan_id = default_vlan_id;
    m_default_vlan_id_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_default_vlan_id_Set() const{
    return m_default_vlan_id_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_default_vlan_id_Valid() const{
    return m_default_vlan_id_isValid;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::isEnabled() const {
    return m_enabled;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGetNetworkApplianceSsids_200_response_inner::getEncryptionMode() const {
    return m_encryption_mode;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setEncryptionMode(const QString &encryption_mode) {
    m_encryption_mode = encryption_mode;
    m_encryption_mode_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_encryption_mode_Set() const{
    return m_encryption_mode_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_encryption_mode_Valid() const{
    return m_encryption_mode_isValid;
}

QString OAIGetNetworkApplianceSsids_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetNetworkApplianceSsids_200_response_inner::getNumber() const {
    return m_number;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAIGetNetworkApplianceSsids_200_response_inner_radiusServers_inner> OAIGetNetworkApplianceSsids_200_response_inner::getRadiusServers() const {
    return m_radius_servers;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setRadiusServers(const QList<OAIGetNetworkApplianceSsids_200_response_inner_radiusServers_inner> &radius_servers) {
    m_radius_servers = radius_servers;
    m_radius_servers_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_radius_servers_Set() const{
    return m_radius_servers_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_radius_servers_Valid() const{
    return m_radius_servers_isValid;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::isVisible() const {
    return m_visible;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_visible_Valid() const{
    return m_visible_isValid;
}

QString OAIGetNetworkApplianceSsids_200_response_inner::getWpaEncryptionMode() const {
    return m_wpa_encryption_mode;
}
void OAIGetNetworkApplianceSsids_200_response_inner::setWpaEncryptionMode(const QString &wpa_encryption_mode) {
    m_wpa_encryption_mode = wpa_encryption_mode;
    m_wpa_encryption_mode_isSet = true;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_wpa_encryption_mode_Set() const{
    return m_wpa_encryption_mode_isSet;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::is_wpa_encryption_mode_Valid() const{
    return m_wpa_encryption_mode_isValid;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wpa_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkApplianceSsids_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
