/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISmApi_H
#define OAI_OAISmApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckinNetworkSmDevices_200_response.h"
#include "OAICheckinNetworkSmDevices_request.h"
#include "OAICreateNetworkSmBypassActivationLockAttempt_request.h"
#include "OAICreateNetworkSmTargetGroup_request.h"
#include "OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner.h"
#include "OAIGetNetworkSmDeviceCerts_200_response_inner.h"
#include "OAIGetNetworkSmDeviceConnectivity_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDesktopLogs_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner.h"
#include "OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner.h"
#include "OAIGetNetworkSmDevicePerformanceHistory_200_response_inner.h"
#include "OAIGetNetworkSmDeviceSecurityCenters_200_response_inner.h"
#include "OAIGetNetworkSmDeviceSoftwares_200_response_inner.h"
#include "OAIGetNetworkSmDeviceWlanLists_200_response_inner.h"
#include "OAIGetNetworkSmDevices_200_response_inner.h"
#include "OAIGetNetworkSmProfiles_200_response_inner.h"
#include "OAIGetNetworkSmTrustedAccessConfigs_200_response_inner.h"
#include "OAIGetNetworkSmUserAccessDevices_200_response_inner.h"
#include "OAIGetNetworkSmUsers_200_response_inner.h"
#include "OAIGetOrganizationSmApnsCert_200_response.h"
#include "OAIGetOrganizationSmVppAccounts_200_response_inner.h"
#include "OAILockNetworkSmDevices_request.h"
#include "OAIModifyNetworkSmDevicesTags_200_response_inner.h"
#include "OAIModifyNetworkSmDevicesTags_request.h"
#include "OAIMoveNetworkSmDevices_200_response.h"
#include "OAIMoveNetworkSmDevices_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSmDevicesFields_200_response_inner.h"
#include "OAIUpdateNetworkSmDevicesFields_request.h"
#include "OAIWipeNetworkSmDevices_200_response.h"
#include "OAIWipeNetworkSmDevices_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISmApi : public QObject {
    Q_OBJECT

public:
    OAISmApi(const int timeOut = 0);
    ~OAISmApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_checkin_network_sm_devices_request OAICheckinNetworkSmDevices_request [optional]
    */
    virtual void checkinNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAICheckinNetworkSmDevices_request> &oai_checkin_network_sm_devices_request = ::OpenAPI::OptionalParam<OAICheckinNetworkSmDevices_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sm_bypass_activation_lock_attempt_request OAICreateNetworkSmBypassActivationLockAttempt_request [required]
    */
    virtual void createNetworkSmBypassActivationLockAttempt(const QString &network_id, const OAICreateNetworkSmBypassActivationLockAttempt_request &oai_create_network_sm_bypass_activation_lock_attempt_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sm_target_group_request OAICreateNetworkSmTargetGroup_request [optional]
    */
    virtual void createNetworkSmTargetGroup(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request> &oai_create_network_sm_target_group_request = ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  target_group_id QString [required]
    */
    virtual void deleteNetworkSmTargetGroup(const QString &network_id, const QString &target_group_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_access_device_id QString [required]
    */
    virtual void deleteNetworkSmUserAccessDevice(const QString &network_id, const QString &user_access_device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  attempt_id QString [required]
    */
    virtual void getNetworkSmBypassActivationLockAttempt(const QString &network_id, const QString &attempt_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceCellularUsageHistory(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceCerts(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceConnectivity(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceDesktopLogs(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceDeviceCommandLogs(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceDeviceProfiles(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceNetworkAdapters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDevicePerformanceHistory(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceRestrictions(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceSecurityCenters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceSoftwares(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceWlanLists(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  wifi_macs QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  scope QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &wifi_macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &scope = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSmProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  target_group_id QString [required]
    * @param[in]  with_details bool [optional]
    */
    virtual void getNetworkSmTargetGroup(const QString &network_id, const QString &target_group_id, const ::OpenAPI::OptionalParam<bool> &with_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  with_details bool [optional]
    */
    virtual void getNetworkSmTargetGroups(const QString &network_id, const ::OpenAPI::OptionalParam<bool> &with_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmTrustedAccessConfigs(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmUserAccessDevices(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getNetworkSmUserDeviceProfiles(const QString &network_id, const QString &user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getNetworkSmUserSoftwares(const QString &network_id, const QString &user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  usernames QList<QString> [optional]
    * @param[in]  emails QList<QString> [optional]
    * @param[in]  scope QList<QString> [optional]
    */
    virtual void getNetworkSmUsers(const QString &network_id, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &usernames = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &emails = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &scope = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSmApnsCert(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  vpp_account_id QString [required]
    */
    virtual void getOrganizationSmVppAccount(const QString &organization_id, const QString &vpp_account_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSmVppAccounts(const QString &organization_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_lock_network_sm_devices_request OAILockNetworkSmDevices_request [optional]
    */
    virtual void lockNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request> &oai_lock_network_sm_devices_request = ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_modify_network_sm_devices_tags_request OAIModifyNetworkSmDevicesTags_request [required]
    */
    virtual void modifyNetworkSmDevicesTags(const QString &network_id, const OAIModifyNetworkSmDevicesTags_request &oai_modify_network_sm_devices_tags_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_move_network_sm_devices_request OAIMoveNetworkSmDevices_request [required]
    */
    virtual void moveNetworkSmDevices(const QString &network_id, const OAIMoveNetworkSmDevices_request &oai_move_network_sm_devices_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void refreshNetworkSmDeviceDetails(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void unenrollNetworkSmDevice(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_sm_devices_fields_request OAIUpdateNetworkSmDevicesFields_request [required]
    */
    virtual void updateNetworkSmDevicesFields(const QString &network_id, const OAIUpdateNetworkSmDevicesFields_request &oai_update_network_sm_devices_fields_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  target_group_id QString [required]
    * @param[in]  oai_create_network_sm_target_group_request OAICreateNetworkSmTargetGroup_request [optional]
    */
    virtual void updateNetworkSmTargetGroup(const QString &network_id, const QString &target_group_id, const ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request> &oai_create_network_sm_target_group_request = ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_wipe_network_sm_devices_request OAIWipeNetworkSmDevices_request [optional]
    */
    virtual void wipeNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevices_request> &oai_wipe_network_sm_devices_request = ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevices_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkinNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void createNetworkSmBypassActivationLockAttemptCallback(OAIHttpRequestWorker *worker);
    void createNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSmUserAccessDeviceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmBypassActivationLockAttemptCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCellularUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCertsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceConnectivityCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDesktopLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDeviceCommandLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceNetworkAdaptersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicePerformanceHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceRestrictionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceSecurityCentersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceWlanListsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmTrustedAccessConfigsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserAccessDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUsersCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSmApnsCertCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSmVppAccountCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSmVppAccountsCallback(OAIHttpRequestWorker *worker);
    void lockNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void modifyNetworkSmDevicesTagsCallback(OAIHttpRequestWorker *worker);
    void moveNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void refreshNetworkSmDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmDevicesFieldsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void wipeNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkinNetworkSmDevicesSignal(OAICheckinNetworkSmDevices_200_response summary);
    void createNetworkSmBypassActivationLockAttemptSignal(OAIObject summary);
    void createNetworkSmTargetGroupSignal(OAIObject summary);
    void deleteNetworkSmTargetGroupSignal();
    void deleteNetworkSmUserAccessDeviceSignal();
    void getNetworkSmBypassActivationLockAttemptSignal(OAIObject summary);
    void getNetworkSmDeviceCellularUsageHistorySignal(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary);
    void getNetworkSmDeviceCertsSignal(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary);
    void getNetworkSmDeviceConnectivitySignal(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary);
    void getNetworkSmDeviceDesktopLogsSignal(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceCommandLogsSignal(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceProfilesSignal(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmDeviceNetworkAdaptersSignal(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary);
    void getNetworkSmDevicePerformanceHistorySignal(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary);
    void getNetworkSmDeviceRestrictionsSignal(QList<OAIObject> summary);
    void getNetworkSmDeviceSecurityCentersSignal(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary);
    void getNetworkSmDeviceSoftwaresSignal(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmDeviceWlanListsSignal(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary);
    void getNetworkSmDevicesSignal(QList<OAIGetNetworkSmDevices_200_response_inner> summary);
    void getNetworkSmProfilesSignal(QList<OAIGetNetworkSmProfiles_200_response_inner> summary);
    void getNetworkSmTargetGroupSignal(OAIObject summary);
    void getNetworkSmTargetGroupsSignal(QList<OAIObject> summary);
    void getNetworkSmTrustedAccessConfigsSignal(QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary);
    void getNetworkSmUserAccessDevicesSignal(QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary);
    void getNetworkSmUserDeviceProfilesSignal(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmUserSoftwaresSignal(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmUsersSignal(QList<OAIGetNetworkSmUsers_200_response_inner> summary);
    void getOrganizationSmApnsCertSignal(OAIGetOrganizationSmApnsCert_200_response summary);
    void getOrganizationSmVppAccountSignal(OAIGetOrganizationSmVppAccounts_200_response_inner summary);
    void getOrganizationSmVppAccountsSignal(QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary);
    void lockNetworkSmDevicesSignal(OAICheckinNetworkSmDevices_200_response summary);
    void modifyNetworkSmDevicesTagsSignal(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary);
    void moveNetworkSmDevicesSignal(OAIMoveNetworkSmDevices_200_response summary);
    void refreshNetworkSmDeviceDetailsSignal();
    void unenrollNetworkSmDeviceSignal(OAIObject summary);
    void updateNetworkSmDevicesFieldsSignal(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary);
    void updateNetworkSmTargetGroupSignal(OAIObject summary);
    void wipeNetworkSmDevicesSignal(OAIWipeNetworkSmDevices_200_response summary);


    void checkinNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAICheckinNetworkSmDevices_200_response summary);
    void createNetworkSmBypassActivationLockAttemptSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSmUserAccessDeviceSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSmBypassActivationLockAttemptSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmDeviceCellularUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary);
    void getNetworkSmDeviceCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary);
    void getNetworkSmDeviceConnectivitySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary);
    void getNetworkSmDeviceDesktopLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceCommandLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmDeviceNetworkAdaptersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary);
    void getNetworkSmDevicePerformanceHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary);
    void getNetworkSmDeviceRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDeviceSecurityCentersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary);
    void getNetworkSmDeviceSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmDeviceWlanListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary);
    void getNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDevices_200_response_inner> summary);
    void getNetworkSmProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmProfiles_200_response_inner> summary);
    void getNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmTargetGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmTrustedAccessConfigsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary);
    void getNetworkSmUserAccessDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary);
    void getNetworkSmUserDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmUserSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmUsers_200_response_inner> summary);
    void getOrganizationSmApnsCertSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSmApnsCert_200_response summary);
    void getOrganizationSmVppAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSmVppAccounts_200_response_inner summary);
    void getOrganizationSmVppAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary);
    void lockNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAICheckinNetworkSmDevices_200_response summary);
    void modifyNetworkSmDevicesTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary);
    void moveNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIMoveNetworkSmDevices_200_response summary);
    void refreshNetworkSmDeviceDetailsSignalFull(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSmDevicesFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary);
    void updateNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void wipeNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIWipeNetworkSmDevices_200_response summary);

    Q_DECL_DEPRECATED_X("Use checkinNetworkSmDevicesSignalError() instead")
    void checkinNetworkSmDevicesSignalE(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkinNetworkSmDevicesSignalError(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmBypassActivationLockAttemptSignalError() instead")
    void createNetworkSmBypassActivationLockAttemptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmBypassActivationLockAttemptSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmTargetGroupSignalError() instead")
    void createNetworkSmTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmTargetGroupSignalError() instead")
    void deleteNetworkSmTargetGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmTargetGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmUserAccessDeviceSignalError() instead")
    void deleteNetworkSmUserAccessDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmUserAccessDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmBypassActivationLockAttemptSignalError() instead")
    void getNetworkSmBypassActivationLockAttemptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmBypassActivationLockAttemptSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCellularUsageHistorySignalError() instead")
    void getNetworkSmDeviceCellularUsageHistorySignalE(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCellularUsageHistorySignalError(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCertsSignalError() instead")
    void getNetworkSmDeviceCertsSignalE(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCertsSignalError(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceConnectivitySignalError() instead")
    void getNetworkSmDeviceConnectivitySignalE(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceConnectivitySignalError(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDesktopLogsSignalError() instead")
    void getNetworkSmDeviceDesktopLogsSignalE(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDesktopLogsSignalError(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceCommandLogsSignalError() instead")
    void getNetworkSmDeviceDeviceCommandLogsSignalE(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceCommandLogsSignalError(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceProfilesSignalError() instead")
    void getNetworkSmDeviceDeviceProfilesSignalE(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceProfilesSignalError(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceNetworkAdaptersSignalError() instead")
    void getNetworkSmDeviceNetworkAdaptersSignalE(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceNetworkAdaptersSignalError(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicePerformanceHistorySignalError() instead")
    void getNetworkSmDevicePerformanceHistorySignalE(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicePerformanceHistorySignalError(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceRestrictionsSignalError() instead")
    void getNetworkSmDeviceRestrictionsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceRestrictionsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSecurityCentersSignalError() instead")
    void getNetworkSmDeviceSecurityCentersSignalE(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSecurityCentersSignalError(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSoftwaresSignalError() instead")
    void getNetworkSmDeviceSoftwaresSignalE(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSoftwaresSignalError(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceWlanListsSignalError() instead")
    void getNetworkSmDeviceWlanListsSignalE(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceWlanListsSignalError(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalError() instead")
    void getNetworkSmDevicesSignalE(QList<OAIGetNetworkSmDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalError(QList<OAIGetNetworkSmDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalError() instead")
    void getNetworkSmProfilesSignalE(QList<OAIGetNetworkSmProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalError(QList<OAIGetNetworkSmProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupSignalError() instead")
    void getNetworkSmTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupsSignalError() instead")
    void getNetworkSmTargetGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTrustedAccessConfigsSignalError() instead")
    void getNetworkSmTrustedAccessConfigsSignalE(QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTrustedAccessConfigsSignalError(QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserAccessDevicesSignalError() instead")
    void getNetworkSmUserAccessDevicesSignalE(QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserAccessDevicesSignalError(QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserDeviceProfilesSignalError() instead")
    void getNetworkSmUserDeviceProfilesSignalE(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserDeviceProfilesSignalError(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserSoftwaresSignalError() instead")
    void getNetworkSmUserSoftwaresSignalE(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserSoftwaresSignalError(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUsersSignalError() instead")
    void getNetworkSmUsersSignalE(QList<OAIGetNetworkSmUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUsersSignalError(QList<OAIGetNetworkSmUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmApnsCertSignalError() instead")
    void getOrganizationSmApnsCertSignalE(OAIGetOrganizationSmApnsCert_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmApnsCertSignalError(OAIGetOrganizationSmApnsCert_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountSignalError() instead")
    void getOrganizationSmVppAccountSignalE(OAIGetOrganizationSmVppAccounts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountSignalError(OAIGetOrganizationSmVppAccounts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountsSignalError() instead")
    void getOrganizationSmVppAccountsSignalE(QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountsSignalError(QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalError() instead")
    void lockNetworkSmDevicesSignalE(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalError(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modifyNetworkSmDevicesTagsSignalError() instead")
    void modifyNetworkSmDevicesTagsSignalE(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modifyNetworkSmDevicesTagsSignalError(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNetworkSmDevicesSignalError() instead")
    void moveNetworkSmDevicesSignalE(OAIMoveNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNetworkSmDevicesSignalError(OAIMoveNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalError() instead")
    void refreshNetworkSmDeviceDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalError() instead")
    void unenrollNetworkSmDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesFieldsSignalError() instead")
    void updateNetworkSmDevicesFieldsSignalE(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesFieldsSignalError(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmTargetGroupSignalError() instead")
    void updateNetworkSmTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDevicesSignalError() instead")
    void wipeNetworkSmDevicesSignalE(OAIWipeNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDevicesSignalError(OAIWipeNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkinNetworkSmDevicesSignalErrorFull() instead")
    void checkinNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkinNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmBypassActivationLockAttemptSignalErrorFull() instead")
    void createNetworkSmBypassActivationLockAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmBypassActivationLockAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmTargetGroupSignalErrorFull() instead")
    void createNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmTargetGroupSignalErrorFull() instead")
    void deleteNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmUserAccessDeviceSignalErrorFull() instead")
    void deleteNetworkSmUserAccessDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmUserAccessDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmBypassActivationLockAttemptSignalErrorFull() instead")
    void getNetworkSmBypassActivationLockAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmBypassActivationLockAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCellularUsageHistorySignalErrorFull() instead")
    void getNetworkSmDeviceCellularUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCellularUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCertsSignalErrorFull() instead")
    void getNetworkSmDeviceCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceConnectivitySignalErrorFull() instead")
    void getNetworkSmDeviceConnectivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceConnectivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDesktopLogsSignalErrorFull() instead")
    void getNetworkSmDeviceDesktopLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDesktopLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceCommandLogsSignalErrorFull() instead")
    void getNetworkSmDeviceDeviceCommandLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceCommandLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmDeviceDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceNetworkAdaptersSignalErrorFull() instead")
    void getNetworkSmDeviceNetworkAdaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceNetworkAdaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicePerformanceHistorySignalErrorFull() instead")
    void getNetworkSmDevicePerformanceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicePerformanceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceRestrictionsSignalErrorFull() instead")
    void getNetworkSmDeviceRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSecurityCentersSignalErrorFull() instead")
    void getNetworkSmDeviceSecurityCentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSecurityCentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSoftwaresSignalErrorFull() instead")
    void getNetworkSmDeviceSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceWlanListsSignalErrorFull() instead")
    void getNetworkSmDeviceWlanListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceWlanListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalErrorFull() instead")
    void getNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalErrorFull() instead")
    void getNetworkSmProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupSignalErrorFull() instead")
    void getNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupsSignalErrorFull() instead")
    void getNetworkSmTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTrustedAccessConfigsSignalErrorFull() instead")
    void getNetworkSmTrustedAccessConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTrustedAccessConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserAccessDevicesSignalErrorFull() instead")
    void getNetworkSmUserAccessDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserAccessDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmUserDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserSoftwaresSignalErrorFull() instead")
    void getNetworkSmUserSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUsersSignalErrorFull() instead")
    void getNetworkSmUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmApnsCertSignalErrorFull() instead")
    void getOrganizationSmApnsCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmApnsCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountSignalErrorFull() instead")
    void getOrganizationSmVppAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountsSignalErrorFull() instead")
    void getOrganizationSmVppAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalErrorFull() instead")
    void lockNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modifyNetworkSmDevicesTagsSignalErrorFull() instead")
    void modifyNetworkSmDevicesTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modifyNetworkSmDevicesTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNetworkSmDevicesSignalErrorFull() instead")
    void moveNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalErrorFull() instead")
    void refreshNetworkSmDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalErrorFull() instead")
    void unenrollNetworkSmDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesFieldsSignalErrorFull() instead")
    void updateNetworkSmDevicesFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmTargetGroupSignalErrorFull() instead")
    void updateNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDevicesSignalErrorFull() instead")
    void wipeNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
