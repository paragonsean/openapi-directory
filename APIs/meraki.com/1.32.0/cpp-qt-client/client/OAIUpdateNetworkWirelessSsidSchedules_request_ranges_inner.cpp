/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::~OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner() {}

void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::initializeModel() {

    m_end_day_isSet = false;
    m_end_day_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_day_isSet = false;
    m_start_day_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::fromJsonObject(QJsonObject json) {

    m_end_day_isValid = ::OpenAPI::fromJsonValue(m_end_day, json[QString("endDay")]);
    m_end_day_isSet = !json[QString("endDay")].isNull() && m_end_day_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_day_isValid = ::OpenAPI::fromJsonValue(m_start_day, json[QString("startDay")]);
    m_start_day_isSet = !json[QString("startDay")].isNull() && m_start_day_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_end_day_isSet) {
        obj.insert(QString("endDay"), ::OpenAPI::toJsonValue(m_end_day));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_day_isSet) {
        obj.insert(QString("startDay"), ::OpenAPI::toJsonValue(m_start_day));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::getEndDay() const {
    return m_end_day;
}
void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::setEndDay(const QString &end_day) {
    m_end_day = end_day;
    m_end_day_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_end_day_Set() const{
    return m_end_day_isSet;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_end_day_Valid() const{
    return m_end_day_isValid;
}

QString OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::getEndTime() const {
    return m_end_time;
}
void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::getStartDay() const {
    return m_start_day;
}
void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::setStartDay(const QString &start_day) {
    m_start_day = start_day;
    m_start_day_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_start_day_Set() const{
    return m_start_day_isSet;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_start_day_Valid() const{
    return m_start_day_isValid;
}

QString OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::getStartTime() const {
    return m_start_time;
}
void OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsidSchedules_request_ranges_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_day_isValid && m_end_time_isValid && m_start_day_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
