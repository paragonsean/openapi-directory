/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkClient_200_response_clientVpnConnections_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkClient_200_response_clientVpnConnections_inner::OAIGetNetworkClient_200_response_clientVpnConnections_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkClient_200_response_clientVpnConnections_inner::OAIGetNetworkClient_200_response_clientVpnConnections_inner() {
    this->initializeModel();
}

OAIGetNetworkClient_200_response_clientVpnConnections_inner::~OAIGetNetworkClient_200_response_clientVpnConnections_inner() {}

void OAIGetNetworkClient_200_response_clientVpnConnections_inner::initializeModel() {

    m_connected_at_isSet = false;
    m_connected_at_isValid = false;

    m_disconnected_at_isSet = false;
    m_disconnected_at_isValid = false;

    m_remote_ip_isSet = false;
    m_remote_ip_isValid = false;
}

void OAIGetNetworkClient_200_response_clientVpnConnections_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkClient_200_response_clientVpnConnections_inner::fromJsonObject(QJsonObject json) {

    m_connected_at_isValid = ::OpenAPI::fromJsonValue(m_connected_at, json[QString("connectedAt")]);
    m_connected_at_isSet = !json[QString("connectedAt")].isNull() && m_connected_at_isValid;

    m_disconnected_at_isValid = ::OpenAPI::fromJsonValue(m_disconnected_at, json[QString("disconnectedAt")]);
    m_disconnected_at_isSet = !json[QString("disconnectedAt")].isNull() && m_disconnected_at_isValid;

    m_remote_ip_isValid = ::OpenAPI::fromJsonValue(m_remote_ip, json[QString("remoteIp")]);
    m_remote_ip_isSet = !json[QString("remoteIp")].isNull() && m_remote_ip_isValid;
}

QString OAIGetNetworkClient_200_response_clientVpnConnections_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkClient_200_response_clientVpnConnections_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_at_isSet) {
        obj.insert(QString("connectedAt"), ::OpenAPI::toJsonValue(m_connected_at));
    }
    if (m_disconnected_at_isSet) {
        obj.insert(QString("disconnectedAt"), ::OpenAPI::toJsonValue(m_disconnected_at));
    }
    if (m_remote_ip_isSet) {
        obj.insert(QString("remoteIp"), ::OpenAPI::toJsonValue(m_remote_ip));
    }
    return obj;
}

qint32 OAIGetNetworkClient_200_response_clientVpnConnections_inner::getConnectedAt() const {
    return m_connected_at;
}
void OAIGetNetworkClient_200_response_clientVpnConnections_inner::setConnectedAt(const qint32 &connected_at) {
    m_connected_at = connected_at;
    m_connected_at_isSet = true;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::is_connected_at_Set() const{
    return m_connected_at_isSet;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::is_connected_at_Valid() const{
    return m_connected_at_isValid;
}

qint32 OAIGetNetworkClient_200_response_clientVpnConnections_inner::getDisconnectedAt() const {
    return m_disconnected_at;
}
void OAIGetNetworkClient_200_response_clientVpnConnections_inner::setDisconnectedAt(const qint32 &disconnected_at) {
    m_disconnected_at = disconnected_at;
    m_disconnected_at_isSet = true;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::is_disconnected_at_Set() const{
    return m_disconnected_at_isSet;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::is_disconnected_at_Valid() const{
    return m_disconnected_at_isValid;
}

QString OAIGetNetworkClient_200_response_clientVpnConnections_inner::getRemoteIp() const {
    return m_remote_ip;
}
void OAIGetNetworkClient_200_response_clientVpnConnections_inner::setRemoteIp(const QString &remote_ip) {
    m_remote_ip = remote_ip;
    m_remote_ip_isSet = true;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::is_remote_ip_Set() const{
    return m_remote_ip_isSet;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::is_remote_ip_Valid() const{
    return m_remote_ip_isValid;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disconnected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkClient_200_response_clientVpnConnections_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
