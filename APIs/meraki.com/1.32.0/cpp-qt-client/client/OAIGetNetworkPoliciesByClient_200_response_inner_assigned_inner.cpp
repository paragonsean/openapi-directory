/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner() {
    this->initializeModel();
}

OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::~OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner() {}

void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::initializeModel() {

    m_group_policy_id_isSet = false;
    m_group_policy_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::fromJsonObject(QJsonObject json) {

    m_group_policy_id_isValid = ::OpenAPI::fromJsonValue(m_group_policy_id, json[QString("groupPolicyId")]);
    m_group_policy_id_isSet = !json[QString("groupPolicyId")].isNull() && m_group_policy_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_group_policy_id_isSet) {
        obj.insert(QString("groupPolicyId"), ::OpenAPI::toJsonValue(m_group_policy_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ssid.size() > 0) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::getGroupPolicyId() const {
    return m_group_policy_id;
}
void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::setGroupPolicyId(const QString &group_policy_id) {
    m_group_policy_id = group_policy_id;
    m_group_policy_id_isSet = true;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_group_policy_id_Set() const{
    return m_group_policy_id_isSet;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_group_policy_id_Valid() const{
    return m_group_policy_id_isValid;
}

QString OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::getName() const {
    return m_name;
}
void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner_ssid_inner> OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::getSsid() const {
    return m_ssid;
}
void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::setSsid(const QList<OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner_ssid_inner> &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_ssid_Valid() const{
    return m_ssid_isValid;
}

QString OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::getType() const {
    return m_type;
}
void OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkPoliciesByClient_200_response_inner_assigned_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
