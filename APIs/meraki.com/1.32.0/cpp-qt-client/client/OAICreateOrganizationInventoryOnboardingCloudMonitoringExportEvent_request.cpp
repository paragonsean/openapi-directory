/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request() {
    this->initializeModel();
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::~OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request() {}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::initializeModel() {

    m_log_event_isSet = false;
    m_log_event_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_target_os_isSet = false;
    m_target_os_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::fromJsonObject(QJsonObject json) {

    m_log_event_isValid = ::OpenAPI::fromJsonValue(m_log_event, json[QString("logEvent")]);
    m_log_event_isSet = !json[QString("logEvent")].isNull() && m_log_event_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_target_os_isValid = ::OpenAPI::fromJsonValue(m_target_os, json[QString("targetOS")]);
    m_target_os_isSet = !json[QString("targetOS")].isNull() && m_target_os_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_log_event_isSet) {
        obj.insert(QString("logEvent"), ::OpenAPI::toJsonValue(m_log_event));
    }
    if (m_request_isSet) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_target_os_isSet) {
        obj.insert(QString("targetOS"), ::OpenAPI::toJsonValue(m_target_os));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::getLogEvent() const {
    return m_log_event;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::setLogEvent(const QString &log_event) {
    m_log_event = log_event;
    m_log_event_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_log_event_Set() const{
    return m_log_event_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_log_event_Valid() const{
    return m_log_event_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::getRequest() const {
    return m_request;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::setRequest(const QString &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_request_Set() const{
    return m_request_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_request_Valid() const{
    return m_request_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::getTargetOs() const {
    return m_target_os;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::setTargetOs(const QString &target_os) {
    m_target_os = target_os;
    m_target_os_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_target_os_Set() const{
    return m_target_os_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_target_os_Valid() const{
    return m_target_os_isValid;
}

qint32 OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::getTimestamp() const {
    return m_timestamp;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_event_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
