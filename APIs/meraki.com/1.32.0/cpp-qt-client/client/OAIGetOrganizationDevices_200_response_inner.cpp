/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationDevices_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationDevices_200_response_inner::OAIGetOrganizationDevices_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationDevices_200_response_inner::OAIGetOrganizationDevices_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationDevices_200_response_inner::~OAIGetOrganizationDevices_200_response_inner() {}

void OAIGetOrganizationDevices_200_response_inner::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_lan_ip_isSet = false;
    m_lan_ip_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetOrganizationDevices_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationDevices_200_response_inner::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_lan_ip_isValid = ::OpenAPI::fromJsonValue(m_lan_ip, json[QString("lanIp")]);
    m_lan_ip_isSet = !json[QString("lanIp")].isNull() && m_lan_ip_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationDevices_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_lan_ip_isSet) {
        obj.insert(QString("lanIp"), ::OpenAPI::toJsonValue(m_lan_ip));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetOrganizationDevices_200_response_inner::getAddress() const {
    return m_address;
}
void OAIGetOrganizationDevices_200_response_inner::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getFirmware() const {
    return m_firmware;
}
void OAIGetOrganizationDevices_200_response_inner::setFirmware(const QString &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_firmware_Valid() const{
    return m_firmware_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getLanIp() const {
    return m_lan_ip;
}
void OAIGetOrganizationDevices_200_response_inner::setLanIp(const QString &lan_ip) {
    m_lan_ip = lan_ip;
    m_lan_ip_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_lan_ip_Set() const{
    return m_lan_ip_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_lan_ip_Valid() const{
    return m_lan_ip_isValid;
}

float OAIGetOrganizationDevices_200_response_inner::getLat() const {
    return m_lat;
}
void OAIGetOrganizationDevices_200_response_inner::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIGetOrganizationDevices_200_response_inner::getLng() const {
    return m_lng;
}
void OAIGetOrganizationDevices_200_response_inner::setLng(const float &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getMac() const {
    return m_mac;
}
void OAIGetOrganizationDevices_200_response_inner::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getModel() const {
    return m_model;
}
void OAIGetOrganizationDevices_200_response_inner::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getName() const {
    return m_name;
}
void OAIGetOrganizationDevices_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getNetworkId() const {
    return m_network_id;
}
void OAIGetOrganizationDevices_200_response_inner::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getNotes() const {
    return m_notes;
}
void OAIGetOrganizationDevices_200_response_inner::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getProductType() const {
    return m_product_type;
}
void OAIGetOrganizationDevices_200_response_inner::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIGetOrganizationDevices_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetOrganizationDevices_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

QList<QString> OAIGetOrganizationDevices_200_response_inner::getTags() const {
    return m_tags;
}
void OAIGetOrganizationDevices_200_response_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetOrganizationDevices_200_response_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetOrganizationDevices_200_response_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetOrganizationDevices_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lan_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationDevices_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
