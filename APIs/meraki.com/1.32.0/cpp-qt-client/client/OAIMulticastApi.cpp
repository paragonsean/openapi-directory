/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMulticastApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMulticastApi::OAIMulticastApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMulticastApi::~OAIMulticastApi() {
}

void OAIMulticastApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.meraki.com/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createNetworkSwitchRoutingMulticastRendezvousPoint", defaultConf);
    _serverIndices.insert("createNetworkSwitchRoutingMulticastRendezvousPoint", 0);
    _serverConfigs.insert("deleteNetworkSwitchRoutingMulticastRendezvousPoint", defaultConf);
    _serverIndices.insert("deleteNetworkSwitchRoutingMulticastRendezvousPoint", 0);
    _serverConfigs.insert("getNetworkSwitchRoutingMulticastRendezvousPoint", defaultConf);
    _serverIndices.insert("getNetworkSwitchRoutingMulticastRendezvousPoint", 0);
    _serverConfigs.insert("getNetworkSwitchRoutingMulticastRendezvousPoints", defaultConf);
    _serverIndices.insert("getNetworkSwitchRoutingMulticastRendezvousPoints", 0);
    _serverConfigs.insert("getNetworkSwitchRoutingMulticast", defaultConf);
    _serverIndices.insert("getNetworkSwitchRoutingMulticast", 0);
    _serverConfigs.insert("updateNetworkSwitchRoutingMulticastRendezvousPoint", defaultConf);
    _serverIndices.insert("updateNetworkSwitchRoutingMulticastRendezvousPoint", 0);
    _serverConfigs.insert("updateNetworkSwitchRoutingMulticast", defaultConf);
    _serverIndices.insert("updateNetworkSwitchRoutingMulticast", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMulticastApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMulticastApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMulticastApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMulticastApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMulticastApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMulticastApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMulticastApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMulticastApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMulticastApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMulticastApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMulticastApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMulticastApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMulticastApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMulticastApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMulticastApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMulticastApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMulticastApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMulticastApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMulticastApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMulticastApi::createNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_create_network_switch_routing_multicast_rendezvous_point_request) {
    QString fullPath = QString(_serverConfigs["createNetworkSwitchRoutingMulticastRendezvousPoint"][_serverIndices.value("createNetworkSwitchRoutingMulticastRendezvousPoint")].URL()+"/networks/{networkId}/switch/routing/multicast/rendezvousPoints");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_network_switch_routing_multicast_rendezvous_point_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::createNetworkSwitchRoutingMulticastRendezvousPointCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::createNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNetworkSwitchRoutingMulticastRendezvousPointSignal(output);
        Q_EMIT createNetworkSwitchRoutingMulticastRendezvousPointSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNetworkSwitchRoutingMulticastRendezvousPointSignalE(output, error_type, error_str);
        Q_EMIT createNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNetworkSwitchRoutingMulticastRendezvousPointSignalError(output, error_type, error_str);
        Q_EMIT createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::deleteNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id) {
    QString fullPath = QString(_serverConfigs["deleteNetworkSwitchRoutingMulticastRendezvousPoint"][_serverIndices.value("deleteNetworkSwitchRoutingMulticastRendezvousPoint")].URL()+"/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    
    {
        QString rendezvous_point_idPathParam("{");
        rendezvous_point_idPathParam.append("rendezvousPointId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendezvousPointId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendezvousPointId"+pathSuffix : pathPrefix;
        fullPath.replace(rendezvous_point_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendezvous_point_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::deleteNetworkSwitchRoutingMulticastRendezvousPointCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::deleteNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteNetworkSwitchRoutingMulticastRendezvousPointSignal();
        Q_EMIT deleteNetworkSwitchRoutingMulticastRendezvousPointSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteNetworkSwitchRoutingMulticastRendezvousPointSignalE(error_type, error_str);
        Q_EMIT deleteNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError(error_type, error_str);
        Q_EMIT deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::getNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id) {
    QString fullPath = QString(_serverConfigs["getNetworkSwitchRoutingMulticastRendezvousPoint"][_serverIndices.value("getNetworkSwitchRoutingMulticastRendezvousPoint")].URL()+"/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    
    {
        QString rendezvous_point_idPathParam("{");
        rendezvous_point_idPathParam.append("rendezvousPointId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendezvousPointId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendezvousPointId"+pathSuffix : pathPrefix;
        fullPath.replace(rendezvous_point_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendezvous_point_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::getNetworkSwitchRoutingMulticastRendezvousPointCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::getNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointSignal(output);
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointSignalE(output, error_type, error_str);
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointSignalError(output, error_type, error_str);
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::getNetworkSwitchRoutingMulticastRendezvousPoints(const QString &network_id) {
    QString fullPath = QString(_serverConfigs["getNetworkSwitchRoutingMulticastRendezvousPoints"][_serverIndices.value("getNetworkSwitchRoutingMulticastRendezvousPoints")].URL()+"/networks/{networkId}/switch/routing/multicast/rendezvousPoints");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::getNetworkSwitchRoutingMulticastRendezvousPointsCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::getNetworkSwitchRoutingMulticastRendezvousPointsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QList<OAIObject>> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QList val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointsSignal(output);
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointsSignalE(output, error_type, error_str);
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointsSignalError(output, error_type, error_str);
        Q_EMIT getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::getNetworkSwitchRoutingMulticast(const QString &network_id) {
    QString fullPath = QString(_serverConfigs["getNetworkSwitchRoutingMulticast"][_serverIndices.value("getNetworkSwitchRoutingMulticast")].URL()+"/networks/{networkId}/switch/routing/multicast");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::getNetworkSwitchRoutingMulticastCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::getNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkSwitchRoutingMulticastSignal(output);
        Q_EMIT getNetworkSwitchRoutingMulticastSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkSwitchRoutingMulticastSignalE(output, error_type, error_str);
        Q_EMIT getNetworkSwitchRoutingMulticastSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkSwitchRoutingMulticastSignalError(output, error_type, error_str);
        Q_EMIT getNetworkSwitchRoutingMulticastSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::updateNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id, const OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_update_network_switch_routing_multicast_rendezvous_point_request) {
    QString fullPath = QString(_serverConfigs["updateNetworkSwitchRoutingMulticastRendezvousPoint"][_serverIndices.value("updateNetworkSwitchRoutingMulticastRendezvousPoint")].URL()+"/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    
    {
        QString rendezvous_point_idPathParam("{");
        rendezvous_point_idPathParam.append("rendezvousPointId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendezvousPointId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendezvousPointId"+pathSuffix : pathPrefix;
        fullPath.replace(rendezvous_point_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendezvous_point_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_network_switch_routing_multicast_rendezvous_point_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::updateNetworkSwitchRoutingMulticastRendezvousPointCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::updateNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateNetworkSwitchRoutingMulticastRendezvousPointSignal(output);
        Q_EMIT updateNetworkSwitchRoutingMulticastRendezvousPointSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateNetworkSwitchRoutingMulticastRendezvousPointSignalE(output, error_type, error_str);
        Q_EMIT updateNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateNetworkSwitchRoutingMulticastRendezvousPointSignalError(output, error_type, error_str);
        Q_EMIT updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::updateNetworkSwitchRoutingMulticast(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request> &oai_update_network_switch_routing_multicast_request) {
    QString fullPath = QString(_serverConfigs["updateNetworkSwitchRoutingMulticast"][_serverIndices.value("updateNetworkSwitchRoutingMulticast")].URL()+"/networks/{networkId}/switch/routing/multicast");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_update_network_switch_routing_multicast_request.hasValue()){

        
        QByteArray output = oai_update_network_switch_routing_multicast_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMulticastApi::updateNetworkSwitchRoutingMulticastCallback);
    connect(this, &OAIMulticastApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMulticastApi::updateNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateNetworkSwitchRoutingMulticastSignal(output);
        Q_EMIT updateNetworkSwitchRoutingMulticastSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateNetworkSwitchRoutingMulticastSignalE(output, error_type, error_str);
        Q_EMIT updateNetworkSwitchRoutingMulticastSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateNetworkSwitchRoutingMulticastSignalError(output, error_type, error_str);
        Q_EMIT updateNetworkSwitchRoutingMulticastSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMulticastApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
