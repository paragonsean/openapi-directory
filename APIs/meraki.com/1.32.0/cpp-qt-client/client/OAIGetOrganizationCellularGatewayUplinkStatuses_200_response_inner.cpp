/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::~OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner() {}

void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::initializeModel() {

    m_last_reported_at_isSet = false;
    m_last_reported_at_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_uplinks_isSet = false;
    m_uplinks_isValid = false;
}

void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::fromJsonObject(QJsonObject json) {

    m_last_reported_at_isValid = ::OpenAPI::fromJsonValue(m_last_reported_at, json[QString("lastReportedAt")]);
    m_last_reported_at_isSet = !json[QString("lastReportedAt")].isNull() && m_last_reported_at_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_uplinks_isValid = ::OpenAPI::fromJsonValue(m_uplinks, json[QString("uplinks")]);
    m_uplinks_isSet = !json[QString("uplinks")].isNull() && m_uplinks_isValid;
}

QString OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_last_reported_at_isSet) {
        obj.insert(QString("lastReportedAt"), ::OpenAPI::toJsonValue(m_last_reported_at));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_uplinks.size() > 0) {
        obj.insert(QString("uplinks"), ::OpenAPI::toJsonValue(m_uplinks));
    }
    return obj;
}

QDateTime OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::getLastReportedAt() const {
    return m_last_reported_at;
}
void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::setLastReportedAt(const QDateTime &last_reported_at) {
    m_last_reported_at = last_reported_at;
    m_last_reported_at_isSet = true;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_last_reported_at_Set() const{
    return m_last_reported_at_isSet;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_last_reported_at_Valid() const{
    return m_last_reported_at_isValid;
}

QString OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::getModel() const {
    return m_model;
}
void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::getNetworkId() const {
    return m_network_id;
}
void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner_uplinks_inner> OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::getUplinks() const {
    return m_uplinks;
}
void OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::setUplinks(const QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner_uplinks_inner> &uplinks) {
    m_uplinks = uplinks;
    m_uplinks_isSet = true;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_uplinks_Set() const{
    return m_uplinks_isSet;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::is_uplinks_Valid() const{
    return m_uplinks_isValid;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_reported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
