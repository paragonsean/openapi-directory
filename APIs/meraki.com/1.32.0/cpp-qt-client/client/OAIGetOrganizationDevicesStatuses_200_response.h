/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOrganizationDevicesStatuses_200_response.h
 *
 * 
 */

#ifndef OAIGetOrganizationDevicesStatuses_200_response_H
#define OAIGetOrganizationDevicesStatuses_200_response_H

#include <QJsonObject>

#include "OAIGetOrganizationDevicesStatuses_200_response_components.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetOrganizationDevicesStatuses_200_response_components;

class OAIGetOrganizationDevicesStatuses_200_response : public OAIObject {
public:
    OAIGetOrganizationDevicesStatuses_200_response();
    OAIGetOrganizationDevicesStatuses_200_response(QString json);
    ~OAIGetOrganizationDevicesStatuses_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetOrganizationDevicesStatuses_200_response_components getComponents() const;
    void setComponents(const OAIGetOrganizationDevicesStatuses_200_response_components &components);
    bool is_components_Set() const;
    bool is_components_Valid() const;

    QString getGateway() const;
    void setGateway(const QString &gateway);
    bool is_gateway_Set() const;
    bool is_gateway_Valid() const;

    QString getIpType() const;
    void setIpType(const QString &ip_type);
    bool is_ip_type_Set() const;
    bool is_ip_type_Valid() const;

    QString getLanIp() const;
    void setLanIp(const QString &lan_ip);
    bool is_lan_ip_Set() const;
    bool is_lan_ip_Valid() const;

    QString getLastReportedAt() const;
    void setLastReportedAt(const QString &last_reported_at);
    bool is_last_reported_at_Set() const;
    bool is_last_reported_at_Valid() const;

    QString getMac() const;
    void setMac(const QString &mac);
    bool is_mac_Set() const;
    bool is_mac_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetworkId() const;
    void setNetworkId(const QString &network_id);
    bool is_network_id_Set() const;
    bool is_network_id_Valid() const;

    QString getPrimaryDns() const;
    void setPrimaryDns(const QString &primary_dns);
    bool is_primary_dns_Set() const;
    bool is_primary_dns_Valid() const;

    QString getProductType() const;
    void setProductType(const QString &product_type);
    bool is_product_type_Set() const;
    bool is_product_type_Valid() const;

    QString getPublicIp() const;
    void setPublicIp(const QString &public_ip);
    bool is_public_ip_Set() const;
    bool is_public_ip_Valid() const;

    QString getSecondaryDns() const;
    void setSecondaryDns(const QString &secondary_dns);
    bool is_secondary_dns_Set() const;
    bool is_secondary_dns_Valid() const;

    QString getSerial() const;
    void setSerial(const QString &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetOrganizationDevicesStatuses_200_response_components m_components;
    bool m_components_isSet;
    bool m_components_isValid;

    QString m_gateway;
    bool m_gateway_isSet;
    bool m_gateway_isValid;

    QString m_ip_type;
    bool m_ip_type_isSet;
    bool m_ip_type_isValid;

    QString m_lan_ip;
    bool m_lan_ip_isSet;
    bool m_lan_ip_isValid;

    QString m_last_reported_at;
    bool m_last_reported_at_isSet;
    bool m_last_reported_at_isValid;

    QString m_mac;
    bool m_mac_isSet;
    bool m_mac_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network_id;
    bool m_network_id_isSet;
    bool m_network_id_isValid;

    QString m_primary_dns;
    bool m_primary_dns_isSet;
    bool m_primary_dns_isValid;

    QString m_product_type;
    bool m_product_type_isSet;
    bool m_product_type_isValid;

    QString m_public_ip;
    bool m_public_ip_isSet;
    bool m_public_ip_isValid;

    QString m_secondary_dns;
    bool m_secondary_dns_isSet;
    bool m_secondary_dns_isValid;

    QString m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOrganizationDevicesStatuses_200_response)

#endif // OAIGetOrganizationDevicesStatuses_200_response_H
