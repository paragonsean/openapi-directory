/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationApiRequests_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationApiRequests_200_response_inner::OAIGetOrganizationApiRequests_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationApiRequests_200_response_inner::OAIGetOrganizationApiRequests_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationApiRequests_200_response_inner::~OAIGetOrganizationApiRequests_200_response_inner() {}

void OAIGetOrganizationApiRequests_200_response_inner::initializeModel() {

    m_admin_id_isSet = false;
    m_admin_id_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetOrganizationApiRequests_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationApiRequests_200_response_inner::fromJsonObject(QJsonObject json) {

    m_admin_id_isValid = ::OpenAPI::fromJsonValue(m_admin_id, json[QString("adminId")]);
    m_admin_id_isSet = !json[QString("adminId")].isNull() && m_admin_id_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("queryString")]);
    m_query_string_isSet = !json[QString("queryString")].isNull() && m_query_string_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("responseCode")]);
    m_response_code_isSet = !json[QString("responseCode")].isNull() && m_response_code_isValid;

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("sourceIp")]);
    m_source_ip_isSet = !json[QString("sourceIp")].isNull() && m_source_ip_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationApiRequests_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_id_isSet) {
        obj.insert(QString("adminId"), ::OpenAPI::toJsonValue(m_admin_id));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_query_string_isSet) {
        obj.insert(QString("queryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("responseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_source_ip_isSet) {
        obj.insert(QString("sourceIp"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getAdminId() const {
    return m_admin_id;
}
void OAIGetOrganizationApiRequests_200_response_inner::setAdminId(const QString &admin_id) {
    m_admin_id = admin_id;
    m_admin_id_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_admin_id_Set() const{
    return m_admin_id_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_admin_id_Valid() const{
    return m_admin_id_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getHost() const {
    return m_host;
}
void OAIGetOrganizationApiRequests_200_response_inner::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_host_Set() const{
    return m_host_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getMethod() const {
    return m_method;
}
void OAIGetOrganizationApiRequests_200_response_inner::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_method_Set() const{
    return m_method_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getOperationId() const {
    return m_operation_id;
}
void OAIGetOrganizationApiRequests_200_response_inner::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getPath() const {
    return m_path;
}
void OAIGetOrganizationApiRequests_200_response_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getQueryString() const {
    return m_query_string;
}
void OAIGetOrganizationApiRequests_200_response_inner::setQueryString(const QString &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_query_string_Valid() const{
    return m_query_string_isValid;
}

qint32 OAIGetOrganizationApiRequests_200_response_inner::getResponseCode() const {
    return m_response_code;
}
void OAIGetOrganizationApiRequests_200_response_inner::setResponseCode(const qint32 &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_response_code_Valid() const{
    return m_response_code_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getSourceIp() const {
    return m_source_ip;
}
void OAIGetOrganizationApiRequests_200_response_inner::setSourceIp(const QString &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

QDateTime OAIGetOrganizationApiRequests_200_response_inner::getTs() const {
    return m_ts;
}
void OAIGetOrganizationApiRequests_200_response_inner::setTs(const QDateTime &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIGetOrganizationApiRequests_200_response_inner::getUserAgent() const {
    return m_user_agent;
}
void OAIGetOrganizationApiRequests_200_response_inner::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

qint32 OAIGetOrganizationApiRequests_200_response_inner::getVersion() const {
    return m_version;
}
void OAIGetOrganizationApiRequests_200_response_inner::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetOrganizationApiRequests_200_response_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetOrganizationApiRequests_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationApiRequests_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
