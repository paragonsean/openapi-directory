/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkFirmwareUpgradesStagedGroup_request.h"
#include "OAICreateOrganizationAdaptivePolicyGroup_request.h"
#include "OAICreateOrganizationPolicyObjectsGroup_request.h"
#include "OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationAdaptivePolicyGroup_request.h"
#include "OAIUpdateOrganizationPolicyObjectsGroup_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_group_request OAICreateNetworkFirmwareUpgradesStagedGroup_request [required]
    */
    virtual void createNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedGroup_request &oai_create_network_firmware_upgrades_staged_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_group_request OAICreateOrganizationAdaptivePolicyGroup_request [required]
    */
    virtual void createOrganizationAdaptivePolicyGroup(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyGroup_request &oai_create_organization_adaptive_policy_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_objects_group_request OAICreateOrganizationPolicyObjectsGroup_request [required]
    */
    virtual void createOrganizationPolicyObjectsGroup(const QString &organization_id, const OAICreateOrganizationPolicyObjectsGroup_request &oai_create_organization_policy_objects_group_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void deleteNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void deleteOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedGroups(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroups(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void getOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjectsGroups(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_group_request OAICreateNetworkFirmwareUpgradesStagedGroup_request [required]
    */
    virtual void updateNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id, const OAICreateNetworkFirmwareUpgradesStagedGroup_request &oai_create_network_firmware_upgrades_staged_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_group_request OAIUpdateOrganizationAdaptivePolicyGroup_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request> &oai_update_organization_adaptive_policy_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    * @param[in]  oai_update_organization_policy_objects_group_request OAIUpdateOrganizationPolicyObjectsGroup_request [optional]
    */
    virtual void updateOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request> &oai_update_organization_policy_objects_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkFirmwareUpgradesStagedGroupSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void deleteNetworkFirmwareUpgradesStagedGroupSignal();
    void deleteOrganizationAdaptivePolicyGroupSignal();
    void deleteOrganizationPolicyObjectsGroupSignal();
    void getNetworkFirmwareUpgradesStagedGroupSignal(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary);
    void getNetworkFirmwareUpgradesStagedGroupsSignal(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary);
    void getOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignal(QList<OAIObject> summary);
    void getOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignal(QList<OAIObject> summary);
    void updateNetworkFirmwareUpgradesStagedGroupSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignal(OAIObject summary);


    void createNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary);
    void getNetworkFirmwareUpgradesStagedGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary);
    void getOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void createNetworkFirmwareUpgradesStagedGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalError() instead")
    void createOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalError() instead")
    void createOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void deleteNetworkFirmwareUpgradesStagedGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalError() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalError() instead")
    void deleteOrganizationPolicyObjectsGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void getNetworkFirmwareUpgradesStagedGroupSignalE(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupSignalError(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupsSignalError() instead")
    void getNetworkFirmwareUpgradesStagedGroupsSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupsSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalError() instead")
    void getOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalError() instead")
    void getOrganizationAdaptivePolicyGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalError() instead")
    void getOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalError() instead")
    void getOrganizationPolicyObjectsGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalError() instead")
    void updateOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalError() instead")
    void updateOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void createOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void deleteNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupsSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void updateOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
