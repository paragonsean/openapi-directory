/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEventsApi::OAIEventsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEventsApi::~OAIEventsApi() {
}

void OAIEventsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.meraki.com/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createNetworkFirmwareUpgradesStagedEvent", defaultConf);
    _serverIndices.insert("createNetworkFirmwareUpgradesStagedEvent", 0);
    _serverConfigs.insert("deferNetworkFirmwareUpgradesStagedEvents", defaultConf);
    _serverIndices.insert("deferNetworkFirmwareUpgradesStagedEvents", 0);
    _serverConfigs.insert("getNetworkApplianceClientSecurityEvents", defaultConf);
    _serverIndices.insert("getNetworkApplianceClientSecurityEvents", 0);
    _serverConfigs.insert("getNetworkApplianceSecurityEvents", defaultConf);
    _serverIndices.insert("getNetworkApplianceSecurityEvents", 0);
    _serverConfigs.insert("getNetworkEventsEventTypes", defaultConf);
    _serverIndices.insert("getNetworkEventsEventTypes", 0);
    _serverConfigs.insert("getNetworkEvents", defaultConf);
    _serverIndices.insert("getNetworkEvents", 0);
    _serverConfigs.insert("getNetworkFirmwareUpgradesStagedEvents", defaultConf);
    _serverIndices.insert("getNetworkFirmwareUpgradesStagedEvents", 0);
    _serverConfigs.insert("getOrganizationApplianceSecurityEvents", defaultConf);
    _serverIndices.insert("getOrganizationApplianceSecurityEvents", 0);
    _serverConfigs.insert("rollbacksNetworkFirmwareUpgradesStagedEvents", defaultConf);
    _serverIndices.insert("rollbacksNetworkFirmwareUpgradesStagedEvents", 0);
    _serverConfigs.insert("updateNetworkFirmwareUpgradesStagedEvents", defaultConf);
    _serverIndices.insert("updateNetworkFirmwareUpgradesStagedEvents", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEventsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEventsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEventsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEventsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEventsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEventsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEventsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEventsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEventsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEventsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEventsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEventsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEventsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEventsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEventsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEventsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEventsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEventsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEventsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEventsApi::createNetworkFirmwareUpgradesStagedEvent(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedEvent_request &oai_create_network_firmware_upgrades_staged_event_request) {
    QString fullPath = QString(_serverConfigs["createNetworkFirmwareUpgradesStagedEvent"][_serverIndices.value("createNetworkFirmwareUpgradesStagedEvent")].URL()+"/networks/{networkId}/firmwareUpgrades/staged/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_network_firmware_upgrades_staged_event_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::createNetworkFirmwareUpgradesStagedEventCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::createNetworkFirmwareUpgradesStagedEventCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetNetworkFirmwareUpgradesStagedEvents_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNetworkFirmwareUpgradesStagedEventSignal(output);
        Q_EMIT createNetworkFirmwareUpgradesStagedEventSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNetworkFirmwareUpgradesStagedEventSignalE(output, error_type, error_str);
        Q_EMIT createNetworkFirmwareUpgradesStagedEventSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNetworkFirmwareUpgradesStagedEventSignalError(output, error_type, error_str);
        Q_EMIT createNetworkFirmwareUpgradesStagedEventSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::deferNetworkFirmwareUpgradesStagedEvents(const QString &network_id) {
    QString fullPath = QString(_serverConfigs["deferNetworkFirmwareUpgradesStagedEvents"][_serverIndices.value("deferNetworkFirmwareUpgradesStagedEvents")].URL()+"/networks/{networkId}/firmwareUpgrades/staged/events/defer");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::deferNetworkFirmwareUpgradesStagedEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::deferNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetNetworkFirmwareUpgradesStagedEvents_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deferNetworkFirmwareUpgradesStagedEventsSignal(output);
        Q_EMIT deferNetworkFirmwareUpgradesStagedEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deferNetworkFirmwareUpgradesStagedEventsSignalE(output, error_type, error_str);
        Q_EMIT deferNetworkFirmwareUpgradesStagedEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deferNetworkFirmwareUpgradesStagedEventsSignalError(output, error_type, error_str);
        Q_EMIT deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::getNetworkApplianceClientSecurityEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0, const ::OpenAPI::OptionalParam<QString> &t1, const ::OpenAPI::OptionalParam<float> &timespan, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<QString> &starting_after, const ::OpenAPI::OptionalParam<QString> &ending_before, const ::OpenAPI::OptionalParam<QString> &sort_order) {
    QString fullPath = QString(_serverConfigs["getNetworkApplianceClientSecurityEvents"][_serverIndices.value("getNetworkApplianceClientSecurityEvents")].URL()+"/networks/{networkId}/appliance/clients/{clientId}/security/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    
    {
        QString client_idPathParam("{");
        client_idPathParam.append("clientId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "clientId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"clientId"+pathSuffix : pathPrefix;
        fullPath.replace(client_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (t0.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "t0", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("t0")).append(querySuffix).append(QUrl::toPercentEncoding(t0.stringValue()));
    }
    if (t1.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "t1", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("t1")).append(querySuffix).append(QUrl::toPercentEncoding(t1.stringValue()));
    }
    if (timespan.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timespan", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timespan")).append(querySuffix).append(QUrl::toPercentEncoding(timespan.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "perPage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("perPage")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (starting_after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startingAfter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startingAfter")).append(querySuffix).append(QUrl::toPercentEncoding(starting_after.stringValue()));
    }
    if (ending_before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "endingBefore", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("endingBefore")).append(querySuffix).append(QUrl::toPercentEncoding(ending_before.stringValue()));
    }
    if (sort_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortOrder")).append(querySuffix).append(QUrl::toPercentEncoding(sort_order.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::getNetworkApplianceClientSecurityEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::getNetworkApplianceClientSecurityEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkApplianceClientSecurityEventsSignal(output);
        Q_EMIT getNetworkApplianceClientSecurityEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkApplianceClientSecurityEventsSignalE(output, error_type, error_str);
        Q_EMIT getNetworkApplianceClientSecurityEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkApplianceClientSecurityEventsSignalError(output, error_type, error_str);
        Q_EMIT getNetworkApplianceClientSecurityEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::getNetworkApplianceSecurityEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0, const ::OpenAPI::OptionalParam<QString> &t1, const ::OpenAPI::OptionalParam<float> &timespan, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<QString> &starting_after, const ::OpenAPI::OptionalParam<QString> &ending_before, const ::OpenAPI::OptionalParam<QString> &sort_order) {
    QString fullPath = QString(_serverConfigs["getNetworkApplianceSecurityEvents"][_serverIndices.value("getNetworkApplianceSecurityEvents")].URL()+"/networks/{networkId}/appliance/security/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (t0.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "t0", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("t0")).append(querySuffix).append(QUrl::toPercentEncoding(t0.stringValue()));
    }
    if (t1.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "t1", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("t1")).append(querySuffix).append(QUrl::toPercentEncoding(t1.stringValue()));
    }
    if (timespan.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timespan", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timespan")).append(querySuffix).append(QUrl::toPercentEncoding(timespan.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "perPage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("perPage")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (starting_after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startingAfter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startingAfter")).append(querySuffix).append(QUrl::toPercentEncoding(starting_after.stringValue()));
    }
    if (ending_before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "endingBefore", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("endingBefore")).append(querySuffix).append(QUrl::toPercentEncoding(ending_before.stringValue()));
    }
    if (sort_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortOrder")).append(querySuffix).append(QUrl::toPercentEncoding(sort_order.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::getNetworkApplianceSecurityEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::getNetworkApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkApplianceSecurityEventsSignal(output);
        Q_EMIT getNetworkApplianceSecurityEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkApplianceSecurityEventsSignalE(output, error_type, error_str);
        Q_EMIT getNetworkApplianceSecurityEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkApplianceSecurityEventsSignalError(output, error_type, error_str);
        Q_EMIT getNetworkApplianceSecurityEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::getNetworkEventsEventTypes(const QString &network_id) {
    QString fullPath = QString(_serverConfigs["getNetworkEventsEventTypes"][_serverIndices.value("getNetworkEventsEventTypes")].URL()+"/networks/{networkId}/events/eventTypes");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::getNetworkEventsEventTypesCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::getNetworkEventsEventTypesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGetNetworkEventsEventTypes_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGetNetworkEventsEventTypes_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkEventsEventTypesSignal(output);
        Q_EMIT getNetworkEventsEventTypesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkEventsEventTypesSignalE(output, error_type, error_str);
        Q_EMIT getNetworkEventsEventTypesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkEventsEventTypesSignalError(output, error_type, error_str);
        Q_EMIT getNetworkEventsEventTypesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::getNetworkEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &product_type, const ::OpenAPI::OptionalParam<QList<QString>> &included_event_types, const ::OpenAPI::OptionalParam<QList<QString>> &excluded_event_types, const ::OpenAPI::OptionalParam<QString> &device_mac, const ::OpenAPI::OptionalParam<QString> &device_serial, const ::OpenAPI::OptionalParam<QString> &device_name, const ::OpenAPI::OptionalParam<QString> &client_ip, const ::OpenAPI::OptionalParam<QString> &client_mac, const ::OpenAPI::OptionalParam<QString> &client_name, const ::OpenAPI::OptionalParam<QString> &sm_device_mac, const ::OpenAPI::OptionalParam<QString> &sm_device_name, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<QString> &starting_after, const ::OpenAPI::OptionalParam<QString> &ending_before) {
    QString fullPath = QString(_serverConfigs["getNetworkEvents"][_serverIndices.value("getNetworkEvents")].URL()+"/networks/{networkId}/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (product_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "productType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("productType")).append(querySuffix).append(QUrl::toPercentEncoding(product_type.stringValue()));
    }
    if (included_event_types.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includedEventTypes", false);
        if (included_event_types.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : included_event_types.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("includedEventTypes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_event_types.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_event_types.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_event_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_event_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_event_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (excluded_event_types.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedEventTypes", false);
        if (excluded_event_types.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : excluded_event_types.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("excludedEventTypes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("excludedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : excluded_event_types.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("excludedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : excluded_event_types.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("excludedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : excluded_event_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("excludedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : excluded_event_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("excludedEventTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : excluded_event_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (device_mac.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deviceMac", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deviceMac")).append(querySuffix).append(QUrl::toPercentEncoding(device_mac.stringValue()));
    }
    if (device_serial.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deviceSerial", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deviceSerial")).append(querySuffix).append(QUrl::toPercentEncoding(device_serial.stringValue()));
    }
    if (device_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deviceName", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deviceName")).append(querySuffix).append(QUrl::toPercentEncoding(device_name.stringValue()));
    }
    if (client_ip.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientIp", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientIp")).append(querySuffix).append(QUrl::toPercentEncoding(client_ip.stringValue()));
    }
    if (client_mac.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientMac", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientMac")).append(querySuffix).append(QUrl::toPercentEncoding(client_mac.stringValue()));
    }
    if (client_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientName", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientName")).append(querySuffix).append(QUrl::toPercentEncoding(client_name.stringValue()));
    }
    if (sm_device_mac.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "smDeviceMac", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("smDeviceMac")).append(querySuffix).append(QUrl::toPercentEncoding(sm_device_mac.stringValue()));
    }
    if (sm_device_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "smDeviceName", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("smDeviceName")).append(querySuffix).append(QUrl::toPercentEncoding(sm_device_name.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "perPage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("perPage")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (starting_after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startingAfter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startingAfter")).append(querySuffix).append(QUrl::toPercentEncoding(starting_after.stringValue()));
    }
    if (ending_before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "endingBefore", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("endingBefore")).append(querySuffix).append(QUrl::toPercentEncoding(ending_before.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::getNetworkEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::getNetworkEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetNetworkEvents_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkEventsSignal(output);
        Q_EMIT getNetworkEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkEventsSignalE(output, error_type, error_str);
        Q_EMIT getNetworkEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkEventsSignalError(output, error_type, error_str);
        Q_EMIT getNetworkEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::getNetworkFirmwareUpgradesStagedEvents(const QString &network_id) {
    QString fullPath = QString(_serverConfigs["getNetworkFirmwareUpgradesStagedEvents"][_serverIndices.value("getNetworkFirmwareUpgradesStagedEvents")].URL()+"/networks/{networkId}/firmwareUpgrades/staged/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::getNetworkFirmwareUpgradesStagedEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::getNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetNetworkFirmwareUpgradesStagedEvents_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkFirmwareUpgradesStagedEventsSignal(output);
        Q_EMIT getNetworkFirmwareUpgradesStagedEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkFirmwareUpgradesStagedEventsSignalE(output, error_type, error_str);
        Q_EMIT getNetworkFirmwareUpgradesStagedEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkFirmwareUpgradesStagedEventsSignalError(output, error_type, error_str);
        Q_EMIT getNetworkFirmwareUpgradesStagedEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::getOrganizationApplianceSecurityEvents(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0, const ::OpenAPI::OptionalParam<QString> &t1, const ::OpenAPI::OptionalParam<float> &timespan, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<QString> &starting_after, const ::OpenAPI::OptionalParam<QString> &ending_before, const ::OpenAPI::OptionalParam<QString> &sort_order) {
    QString fullPath = QString(_serverConfigs["getOrganizationApplianceSecurityEvents"][_serverIndices.value("getOrganizationApplianceSecurityEvents")].URL()+"/organizations/{organizationId}/appliance/security/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString organization_idPathParam("{");
        organization_idPathParam.append("organizationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizationId"+pathSuffix : pathPrefix;
        fullPath.replace(organization_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (t0.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "t0", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("t0")).append(querySuffix).append(QUrl::toPercentEncoding(t0.stringValue()));
    }
    if (t1.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "t1", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("t1")).append(querySuffix).append(QUrl::toPercentEncoding(t1.stringValue()));
    }
    if (timespan.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timespan", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timespan")).append(querySuffix).append(QUrl::toPercentEncoding(timespan.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "perPage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("perPage")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (starting_after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startingAfter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startingAfter")).append(querySuffix).append(QUrl::toPercentEncoding(starting_after.stringValue()));
    }
    if (ending_before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "endingBefore", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("endingBefore")).append(querySuffix).append(QUrl::toPercentEncoding(ending_before.stringValue()));
    }
    if (sort_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortOrder")).append(querySuffix).append(QUrl::toPercentEncoding(sort_order.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::getOrganizationApplianceSecurityEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::getOrganizationApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOrganizationApplianceSecurityEventsSignal(output);
        Q_EMIT getOrganizationApplianceSecurityEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOrganizationApplianceSecurityEventsSignalE(output, error_type, error_str);
        Q_EMIT getOrganizationApplianceSecurityEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOrganizationApplianceSecurityEventsSignalError(output, error_type, error_str);
        Q_EMIT getOrganizationApplianceSecurityEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::rollbacksNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request &oai_rollbacks_network_firmware_upgrades_staged_events_request) {
    QString fullPath = QString(_serverConfigs["rollbacksNetworkFirmwareUpgradesStagedEvents"][_serverIndices.value("rollbacksNetworkFirmwareUpgradesStagedEvents")].URL()+"/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_rollbacks_network_firmware_upgrades_staged_events_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::rollbacksNetworkFirmwareUpgradesStagedEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::rollbacksNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetNetworkFirmwareUpgradesStagedEvents_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT rollbacksNetworkFirmwareUpgradesStagedEventsSignal(output);
        Q_EMIT rollbacksNetworkFirmwareUpgradesStagedEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT rollbacksNetworkFirmwareUpgradesStagedEventsSignalE(output, error_type, error_str);
        Q_EMIT rollbacksNetworkFirmwareUpgradesStagedEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT rollbacksNetworkFirmwareUpgradesStagedEventsSignalError(output, error_type, error_str);
        Q_EMIT rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::updateNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIUpdateNetworkFirmwareUpgradesStagedEvents_request &oai_update_network_firmware_upgrades_staged_events_request) {
    QString fullPath = QString(_serverConfigs["updateNetworkFirmwareUpgradesStagedEvents"][_serverIndices.value("updateNetworkFirmwareUpgradesStagedEvents")].URL()+"/networks/{networkId}/firmwareUpgrades/staged/events");
    
    if (_apiKeys.contains("meraki_api_key")) {
        addHeaders("meraki_api_key",_apiKeys.find("meraki_api_key").value());
    }
    
    
    {
        QString network_idPathParam("{");
        network_idPathParam.append("networkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkId"+pathSuffix : pathPrefix;
        fullPath.replace(network_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_network_firmware_upgrades_staged_events_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::updateNetworkFirmwareUpgradesStagedEventsCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::updateNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetNetworkFirmwareUpgradesStagedEvents_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateNetworkFirmwareUpgradesStagedEventsSignal(output);
        Q_EMIT updateNetworkFirmwareUpgradesStagedEventsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateNetworkFirmwareUpgradesStagedEventsSignalE(output, error_type, error_str);
        Q_EMIT updateNetworkFirmwareUpgradesStagedEventsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateNetworkFirmwareUpgradesStagedEventsSignalError(output, error_type, error_str);
        Q_EMIT updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
