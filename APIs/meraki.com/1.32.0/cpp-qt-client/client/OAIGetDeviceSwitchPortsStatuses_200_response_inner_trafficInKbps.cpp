/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps() {
    this->initializeModel();
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::~OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps() {}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::initializeModel() {

    m_recv_isSet = false;
    m_recv_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::fromJsonObject(QJsonObject json) {

    m_recv_isValid = ::OpenAPI::fromJsonValue(m_recv, json[QString("recv")]);
    m_recv_isSet = !json[QString("recv")].isNull() && m_recv_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::asJsonObject() const {
    QJsonObject obj;
    if (m_recv_isSet) {
        obj.insert(QString("recv"), ::OpenAPI::toJsonValue(m_recv));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

float OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::getRecv() const {
    return m_recv;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::setRecv(const float &recv) {
    m_recv = recv;
    m_recv_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::is_recv_Set() const{
    return m_recv_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::is_recv_Valid() const{
    return m_recv_isValid;
}

float OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::getSent() const {
    return m_sent;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::setSent(const float &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::is_sent_Valid() const{
    return m_sent_isValid;
}

float OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::getTotal() const {
    return m_total;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::setTotal(const float &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
