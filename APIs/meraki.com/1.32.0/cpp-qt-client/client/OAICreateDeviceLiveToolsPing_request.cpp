/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeviceLiveToolsPing_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeviceLiveToolsPing_request::OAICreateDeviceLiveToolsPing_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeviceLiveToolsPing_request::OAICreateDeviceLiveToolsPing_request() {
    this->initializeModel();
}

OAICreateDeviceLiveToolsPing_request::~OAICreateDeviceLiveToolsPing_request() {}

void OAICreateDeviceLiveToolsPing_request::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAICreateDeviceLiveToolsPing_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeviceLiveToolsPing_request::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAICreateDeviceLiveToolsPing_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeviceLiveToolsPing_request::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

qint32 OAICreateDeviceLiveToolsPing_request::getCount() const {
    return m_count;
}
void OAICreateDeviceLiveToolsPing_request::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICreateDeviceLiveToolsPing_request::is_count_Set() const{
    return m_count_isSet;
}

bool OAICreateDeviceLiveToolsPing_request::is_count_Valid() const{
    return m_count_isValid;
}

QString OAICreateDeviceLiveToolsPing_request::getTarget() const {
    return m_target;
}
void OAICreateDeviceLiveToolsPing_request::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICreateDeviceLiveToolsPing_request::is_target_Set() const{
    return m_target_isSet;
}

bool OAICreateDeviceLiveToolsPing_request::is_target_Valid() const{
    return m_target_isValid;
}

bool OAICreateDeviceLiveToolsPing_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeviceLiveToolsPing_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_isValid && true;
}

} // namespace OpenAPI
