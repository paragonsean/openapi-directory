/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSettings_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSettings_200_response::OAIGetNetworkSettings_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSettings_200_response::OAIGetNetworkSettings_200_response() {
    this->initializeModel();
}

OAIGetNetworkSettings_200_response::~OAIGetNetworkSettings_200_response() {}

void OAIGetNetworkSettings_200_response::initializeModel() {

    m_client_privacy_isSet = false;
    m_client_privacy_isValid = false;

    m_fips_isSet = false;
    m_fips_isValid = false;

    m_local_status_page_isSet = false;
    m_local_status_page_isValid = false;

    m_local_status_page_enabled_isSet = false;
    m_local_status_page_enabled_isValid = false;

    m_named_vlans_isSet = false;
    m_named_vlans_isValid = false;

    m_remote_status_page_enabled_isSet = false;
    m_remote_status_page_enabled_isValid = false;

    m_secure_port_isSet = false;
    m_secure_port_isValid = false;
}

void OAIGetNetworkSettings_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSettings_200_response::fromJsonObject(QJsonObject json) {

    m_client_privacy_isValid = ::OpenAPI::fromJsonValue(m_client_privacy, json[QString("clientPrivacy")]);
    m_client_privacy_isSet = !json[QString("clientPrivacy")].isNull() && m_client_privacy_isValid;

    m_fips_isValid = ::OpenAPI::fromJsonValue(m_fips, json[QString("fips")]);
    m_fips_isSet = !json[QString("fips")].isNull() && m_fips_isValid;

    m_local_status_page_isValid = ::OpenAPI::fromJsonValue(m_local_status_page, json[QString("localStatusPage")]);
    m_local_status_page_isSet = !json[QString("localStatusPage")].isNull() && m_local_status_page_isValid;

    m_local_status_page_enabled_isValid = ::OpenAPI::fromJsonValue(m_local_status_page_enabled, json[QString("localStatusPageEnabled")]);
    m_local_status_page_enabled_isSet = !json[QString("localStatusPageEnabled")].isNull() && m_local_status_page_enabled_isValid;

    m_named_vlans_isValid = ::OpenAPI::fromJsonValue(m_named_vlans, json[QString("namedVlans")]);
    m_named_vlans_isSet = !json[QString("namedVlans")].isNull() && m_named_vlans_isValid;

    m_remote_status_page_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_status_page_enabled, json[QString("remoteStatusPageEnabled")]);
    m_remote_status_page_enabled_isSet = !json[QString("remoteStatusPageEnabled")].isNull() && m_remote_status_page_enabled_isValid;

    m_secure_port_isValid = ::OpenAPI::fromJsonValue(m_secure_port, json[QString("securePort")]);
    m_secure_port_isSet = !json[QString("securePort")].isNull() && m_secure_port_isValid;
}

QString OAIGetNetworkSettings_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSettings_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_client_privacy.isSet()) {
        obj.insert(QString("clientPrivacy"), ::OpenAPI::toJsonValue(m_client_privacy));
    }
    if (m_fips.isSet()) {
        obj.insert(QString("fips"), ::OpenAPI::toJsonValue(m_fips));
    }
    if (m_local_status_page.isSet()) {
        obj.insert(QString("localStatusPage"), ::OpenAPI::toJsonValue(m_local_status_page));
    }
    if (m_local_status_page_enabled_isSet) {
        obj.insert(QString("localStatusPageEnabled"), ::OpenAPI::toJsonValue(m_local_status_page_enabled));
    }
    if (m_named_vlans.isSet()) {
        obj.insert(QString("namedVlans"), ::OpenAPI::toJsonValue(m_named_vlans));
    }
    if (m_remote_status_page_enabled_isSet) {
        obj.insert(QString("remoteStatusPageEnabled"), ::OpenAPI::toJsonValue(m_remote_status_page_enabled));
    }
    if (m_secure_port.isSet()) {
        obj.insert(QString("securePort"), ::OpenAPI::toJsonValue(m_secure_port));
    }
    return obj;
}

OAIGetNetworkSettings_200_response_clientPrivacy OAIGetNetworkSettings_200_response::getClientPrivacy() const {
    return m_client_privacy;
}
void OAIGetNetworkSettings_200_response::setClientPrivacy(const OAIGetNetworkSettings_200_response_clientPrivacy &client_privacy) {
    m_client_privacy = client_privacy;
    m_client_privacy_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_client_privacy_Set() const{
    return m_client_privacy_isSet;
}

bool OAIGetNetworkSettings_200_response::is_client_privacy_Valid() const{
    return m_client_privacy_isValid;
}

OAIGetNetworkSettings_200_response_fips OAIGetNetworkSettings_200_response::getFips() const {
    return m_fips;
}
void OAIGetNetworkSettings_200_response::setFips(const OAIGetNetworkSettings_200_response_fips &fips) {
    m_fips = fips;
    m_fips_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_fips_Set() const{
    return m_fips_isSet;
}

bool OAIGetNetworkSettings_200_response::is_fips_Valid() const{
    return m_fips_isValid;
}

OAIGetNetworkSettings_200_response_localStatusPage OAIGetNetworkSettings_200_response::getLocalStatusPage() const {
    return m_local_status_page;
}
void OAIGetNetworkSettings_200_response::setLocalStatusPage(const OAIGetNetworkSettings_200_response_localStatusPage &local_status_page) {
    m_local_status_page = local_status_page;
    m_local_status_page_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_local_status_page_Set() const{
    return m_local_status_page_isSet;
}

bool OAIGetNetworkSettings_200_response::is_local_status_page_Valid() const{
    return m_local_status_page_isValid;
}

bool OAIGetNetworkSettings_200_response::isLocalStatusPageEnabled() const {
    return m_local_status_page_enabled;
}
void OAIGetNetworkSettings_200_response::setLocalStatusPageEnabled(const bool &local_status_page_enabled) {
    m_local_status_page_enabled = local_status_page_enabled;
    m_local_status_page_enabled_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_local_status_page_enabled_Set() const{
    return m_local_status_page_enabled_isSet;
}

bool OAIGetNetworkSettings_200_response::is_local_status_page_enabled_Valid() const{
    return m_local_status_page_enabled_isValid;
}

OAIGetNetworkSettings_200_response_namedVlans OAIGetNetworkSettings_200_response::getNamedVlans() const {
    return m_named_vlans;
}
void OAIGetNetworkSettings_200_response::setNamedVlans(const OAIGetNetworkSettings_200_response_namedVlans &named_vlans) {
    m_named_vlans = named_vlans;
    m_named_vlans_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_named_vlans_Set() const{
    return m_named_vlans_isSet;
}

bool OAIGetNetworkSettings_200_response::is_named_vlans_Valid() const{
    return m_named_vlans_isValid;
}

bool OAIGetNetworkSettings_200_response::isRemoteStatusPageEnabled() const {
    return m_remote_status_page_enabled;
}
void OAIGetNetworkSettings_200_response::setRemoteStatusPageEnabled(const bool &remote_status_page_enabled) {
    m_remote_status_page_enabled = remote_status_page_enabled;
    m_remote_status_page_enabled_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_remote_status_page_enabled_Set() const{
    return m_remote_status_page_enabled_isSet;
}

bool OAIGetNetworkSettings_200_response::is_remote_status_page_enabled_Valid() const{
    return m_remote_status_page_enabled_isValid;
}

OAIGetNetworkSettings_200_response_securePort OAIGetNetworkSettings_200_response::getSecurePort() const {
    return m_secure_port;
}
void OAIGetNetworkSettings_200_response::setSecurePort(const OAIGetNetworkSettings_200_response_securePort &secure_port) {
    m_secure_port = secure_port;
    m_secure_port_isSet = true;
}

bool OAIGetNetworkSettings_200_response::is_secure_port_Set() const{
    return m_secure_port_isSet;
}

bool OAIGetNetworkSettings_200_response::is_secure_port_Valid() const{
    return m_secure_port_isValid;
}

bool OAIGetNetworkSettings_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fips.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_status_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_status_page_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_vlans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_status_page_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_port.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSettings_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
