/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkNetflow_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkNetflow_request::OAIUpdateNetworkNetflow_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkNetflow_request::OAIUpdateNetworkNetflow_request() {
    this->initializeModel();
}

OAIUpdateNetworkNetflow_request::~OAIUpdateNetworkNetflow_request() {}

void OAIUpdateNetworkNetflow_request::initializeModel() {

    m_collector_ip_isSet = false;
    m_collector_ip_isValid = false;

    m_collector_port_isSet = false;
    m_collector_port_isValid = false;

    m_eta_dst_port_isSet = false;
    m_eta_dst_port_isValid = false;

    m_eta_enabled_isSet = false;
    m_eta_enabled_isValid = false;

    m_reporting_enabled_isSet = false;
    m_reporting_enabled_isValid = false;
}

void OAIUpdateNetworkNetflow_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkNetflow_request::fromJsonObject(QJsonObject json) {

    m_collector_ip_isValid = ::OpenAPI::fromJsonValue(m_collector_ip, json[QString("collectorIp")]);
    m_collector_ip_isSet = !json[QString("collectorIp")].isNull() && m_collector_ip_isValid;

    m_collector_port_isValid = ::OpenAPI::fromJsonValue(m_collector_port, json[QString("collectorPort")]);
    m_collector_port_isSet = !json[QString("collectorPort")].isNull() && m_collector_port_isValid;

    m_eta_dst_port_isValid = ::OpenAPI::fromJsonValue(m_eta_dst_port, json[QString("etaDstPort")]);
    m_eta_dst_port_isSet = !json[QString("etaDstPort")].isNull() && m_eta_dst_port_isValid;

    m_eta_enabled_isValid = ::OpenAPI::fromJsonValue(m_eta_enabled, json[QString("etaEnabled")]);
    m_eta_enabled_isSet = !json[QString("etaEnabled")].isNull() && m_eta_enabled_isValid;

    m_reporting_enabled_isValid = ::OpenAPI::fromJsonValue(m_reporting_enabled, json[QString("reportingEnabled")]);
    m_reporting_enabled_isSet = !json[QString("reportingEnabled")].isNull() && m_reporting_enabled_isValid;
}

QString OAIUpdateNetworkNetflow_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkNetflow_request::asJsonObject() const {
    QJsonObject obj;
    if (m_collector_ip_isSet) {
        obj.insert(QString("collectorIp"), ::OpenAPI::toJsonValue(m_collector_ip));
    }
    if (m_collector_port_isSet) {
        obj.insert(QString("collectorPort"), ::OpenAPI::toJsonValue(m_collector_port));
    }
    if (m_eta_dst_port_isSet) {
        obj.insert(QString("etaDstPort"), ::OpenAPI::toJsonValue(m_eta_dst_port));
    }
    if (m_eta_enabled_isSet) {
        obj.insert(QString("etaEnabled"), ::OpenAPI::toJsonValue(m_eta_enabled));
    }
    if (m_reporting_enabled_isSet) {
        obj.insert(QString("reportingEnabled"), ::OpenAPI::toJsonValue(m_reporting_enabled));
    }
    return obj;
}

QString OAIUpdateNetworkNetflow_request::getCollectorIp() const {
    return m_collector_ip;
}
void OAIUpdateNetworkNetflow_request::setCollectorIp(const QString &collector_ip) {
    m_collector_ip = collector_ip;
    m_collector_ip_isSet = true;
}

bool OAIUpdateNetworkNetflow_request::is_collector_ip_Set() const{
    return m_collector_ip_isSet;
}

bool OAIUpdateNetworkNetflow_request::is_collector_ip_Valid() const{
    return m_collector_ip_isValid;
}

qint32 OAIUpdateNetworkNetflow_request::getCollectorPort() const {
    return m_collector_port;
}
void OAIUpdateNetworkNetflow_request::setCollectorPort(const qint32 &collector_port) {
    m_collector_port = collector_port;
    m_collector_port_isSet = true;
}

bool OAIUpdateNetworkNetflow_request::is_collector_port_Set() const{
    return m_collector_port_isSet;
}

bool OAIUpdateNetworkNetflow_request::is_collector_port_Valid() const{
    return m_collector_port_isValid;
}

qint32 OAIUpdateNetworkNetflow_request::getEtaDstPort() const {
    return m_eta_dst_port;
}
void OAIUpdateNetworkNetflow_request::setEtaDstPort(const qint32 &eta_dst_port) {
    m_eta_dst_port = eta_dst_port;
    m_eta_dst_port_isSet = true;
}

bool OAIUpdateNetworkNetflow_request::is_eta_dst_port_Set() const{
    return m_eta_dst_port_isSet;
}

bool OAIUpdateNetworkNetflow_request::is_eta_dst_port_Valid() const{
    return m_eta_dst_port_isValid;
}

bool OAIUpdateNetworkNetflow_request::isEtaEnabled() const {
    return m_eta_enabled;
}
void OAIUpdateNetworkNetflow_request::setEtaEnabled(const bool &eta_enabled) {
    m_eta_enabled = eta_enabled;
    m_eta_enabled_isSet = true;
}

bool OAIUpdateNetworkNetflow_request::is_eta_enabled_Set() const{
    return m_eta_enabled_isSet;
}

bool OAIUpdateNetworkNetflow_request::is_eta_enabled_Valid() const{
    return m_eta_enabled_isValid;
}

bool OAIUpdateNetworkNetflow_request::isReportingEnabled() const {
    return m_reporting_enabled;
}
void OAIUpdateNetworkNetflow_request::setReportingEnabled(const bool &reporting_enabled) {
    m_reporting_enabled = reporting_enabled;
    m_reporting_enabled_isSet = true;
}

bool OAIUpdateNetworkNetflow_request::is_reporting_enabled_Set() const{
    return m_reporting_enabled_isSet;
}

bool OAIUpdateNetworkNetflow_request::is_reporting_enabled_Valid() const{
    return m_reporting_enabled_isValid;
}

bool OAIUpdateNetworkNetflow_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collector_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collector_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eta_dst_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eta_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkNetflow_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
