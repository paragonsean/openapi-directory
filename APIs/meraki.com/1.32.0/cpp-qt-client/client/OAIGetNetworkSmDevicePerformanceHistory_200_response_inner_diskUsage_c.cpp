/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c() {
    this->initializeModel();
}

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::~OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c() {}

void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::initializeModel() {

    m_space_isSet = false;
    m_space_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::fromJsonObject(QJsonObject json) {

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::asJsonObject() const {
    QJsonObject obj;
    if (m_space_isSet) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::getSpace() const {
    return m_space;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::setSpace(const qint32 &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::is_space_Set() const{
    return m_space_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::is_space_Valid() const{
    return m_space_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::getUsed() const {
    return m_used;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::setUsed(const qint32 &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::is_used_Set() const{
    return m_used_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage_c::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
