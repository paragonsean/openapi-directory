/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkTrafficAnalysis_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkTrafficAnalysis_request::OAIUpdateNetworkTrafficAnalysis_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkTrafficAnalysis_request::OAIUpdateNetworkTrafficAnalysis_request() {
    this->initializeModel();
}

OAIUpdateNetworkTrafficAnalysis_request::~OAIUpdateNetworkTrafficAnalysis_request() {}

void OAIUpdateNetworkTrafficAnalysis_request::initializeModel() {

    m_custom_pie_chart_items_isSet = false;
    m_custom_pie_chart_items_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIUpdateNetworkTrafficAnalysis_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkTrafficAnalysis_request::fromJsonObject(QJsonObject json) {

    m_custom_pie_chart_items_isValid = ::OpenAPI::fromJsonValue(m_custom_pie_chart_items, json[QString("customPieChartItems")]);
    m_custom_pie_chart_items_isSet = !json[QString("customPieChartItems")].isNull() && m_custom_pie_chart_items_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAIUpdateNetworkTrafficAnalysis_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkTrafficAnalysis_request::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_pie_chart_items.size() > 0) {
        obj.insert(QString("customPieChartItems"), ::OpenAPI::toJsonValue(m_custom_pie_chart_items));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

QList<OAIUpdateNetworkTrafficAnalysis_request_customPieChartItems_inner> OAIUpdateNetworkTrafficAnalysis_request::getCustomPieChartItems() const {
    return m_custom_pie_chart_items;
}
void OAIUpdateNetworkTrafficAnalysis_request::setCustomPieChartItems(const QList<OAIUpdateNetworkTrafficAnalysis_request_customPieChartItems_inner> &custom_pie_chart_items) {
    m_custom_pie_chart_items = custom_pie_chart_items;
    m_custom_pie_chart_items_isSet = true;
}

bool OAIUpdateNetworkTrafficAnalysis_request::is_custom_pie_chart_items_Set() const{
    return m_custom_pie_chart_items_isSet;
}

bool OAIUpdateNetworkTrafficAnalysis_request::is_custom_pie_chart_items_Valid() const{
    return m_custom_pie_chart_items_isValid;
}

QString OAIUpdateNetworkTrafficAnalysis_request::getMode() const {
    return m_mode;
}
void OAIUpdateNetworkTrafficAnalysis_request::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIUpdateNetworkTrafficAnalysis_request::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIUpdateNetworkTrafficAnalysis_request::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIUpdateNetworkTrafficAnalysis_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_pie_chart_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkTrafficAnalysis_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
