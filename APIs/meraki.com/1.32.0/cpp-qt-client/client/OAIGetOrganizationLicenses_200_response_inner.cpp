/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationLicenses_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationLicenses_200_response_inner::OAIGetOrganizationLicenses_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationLicenses_200_response_inner::OAIGetOrganizationLicenses_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationLicenses_200_response_inner::~OAIGetOrganizationLicenses_200_response_inner() {}

void OAIGetOrganizationLicenses_200_response_inner::initializeModel() {

    m_activation_date_isSet = false;
    m_activation_date_isValid = false;

    m_claim_date_isSet = false;
    m_claim_date_isValid = false;

    m_device_serial_isSet = false;
    m_device_serial_isValid = false;

    m_duration_in_days_isSet = false;
    m_duration_in_days_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_head_license_id_isSet = false;
    m_head_license_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_key_isSet = false;
    m_license_key_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_permanently_queued_licenses_isSet = false;
    m_permanently_queued_licenses_isValid = false;

    m_seat_count_isSet = false;
    m_seat_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_total_duration_in_days_isSet = false;
    m_total_duration_in_days_isValid = false;
}

void OAIGetOrganizationLicenses_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationLicenses_200_response_inner::fromJsonObject(QJsonObject json) {

    m_activation_date_isValid = ::OpenAPI::fromJsonValue(m_activation_date, json[QString("activationDate")]);
    m_activation_date_isSet = !json[QString("activationDate")].isNull() && m_activation_date_isValid;

    m_claim_date_isValid = ::OpenAPI::fromJsonValue(m_claim_date, json[QString("claimDate")]);
    m_claim_date_isSet = !json[QString("claimDate")].isNull() && m_claim_date_isValid;

    m_device_serial_isValid = ::OpenAPI::fromJsonValue(m_device_serial, json[QString("deviceSerial")]);
    m_device_serial_isSet = !json[QString("deviceSerial")].isNull() && m_device_serial_isValid;

    m_duration_in_days_isValid = ::OpenAPI::fromJsonValue(m_duration_in_days, json[QString("durationInDays")]);
    m_duration_in_days_isSet = !json[QString("durationInDays")].isNull() && m_duration_in_days_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_head_license_id_isValid = ::OpenAPI::fromJsonValue(m_head_license_id, json[QString("headLicenseId")]);
    m_head_license_id_isSet = !json[QString("headLicenseId")].isNull() && m_head_license_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_key_isValid = ::OpenAPI::fromJsonValue(m_license_key, json[QString("licenseKey")]);
    m_license_key_isSet = !json[QString("licenseKey")].isNull() && m_license_key_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_permanently_queued_licenses_isValid = ::OpenAPI::fromJsonValue(m_permanently_queued_licenses, json[QString("permanentlyQueuedLicenses")]);
    m_permanently_queued_licenses_isSet = !json[QString("permanentlyQueuedLicenses")].isNull() && m_permanently_queued_licenses_isValid;

    m_seat_count_isValid = ::OpenAPI::fromJsonValue(m_seat_count, json[QString("seatCount")]);
    m_seat_count_isSet = !json[QString("seatCount")].isNull() && m_seat_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_total_duration_in_days_isValid = ::OpenAPI::fromJsonValue(m_total_duration_in_days, json[QString("totalDurationInDays")]);
    m_total_duration_in_days_isSet = !json[QString("totalDurationInDays")].isNull() && m_total_duration_in_days_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationLicenses_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_date_isSet) {
        obj.insert(QString("activationDate"), ::OpenAPI::toJsonValue(m_activation_date));
    }
    if (m_claim_date_isSet) {
        obj.insert(QString("claimDate"), ::OpenAPI::toJsonValue(m_claim_date));
    }
    if (m_device_serial_isSet) {
        obj.insert(QString("deviceSerial"), ::OpenAPI::toJsonValue(m_device_serial));
    }
    if (m_duration_in_days_isSet) {
        obj.insert(QString("durationInDays"), ::OpenAPI::toJsonValue(m_duration_in_days));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_head_license_id_isSet) {
        obj.insert(QString("headLicenseId"), ::OpenAPI::toJsonValue(m_head_license_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_key_isSet) {
        obj.insert(QString("licenseKey"), ::OpenAPI::toJsonValue(m_license_key));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_permanently_queued_licenses.size() > 0) {
        obj.insert(QString("permanentlyQueuedLicenses"), ::OpenAPI::toJsonValue(m_permanently_queued_licenses));
    }
    if (m_seat_count_isSet) {
        obj.insert(QString("seatCount"), ::OpenAPI::toJsonValue(m_seat_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_total_duration_in_days_isSet) {
        obj.insert(QString("totalDurationInDays"), ::OpenAPI::toJsonValue(m_total_duration_in_days));
    }
    return obj;
}

QString OAIGetOrganizationLicenses_200_response_inner::getActivationDate() const {
    return m_activation_date;
}
void OAIGetOrganizationLicenses_200_response_inner::setActivationDate(const QString &activation_date) {
    m_activation_date = activation_date;
    m_activation_date_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_activation_date_Set() const{
    return m_activation_date_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_activation_date_Valid() const{
    return m_activation_date_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getClaimDate() const {
    return m_claim_date;
}
void OAIGetOrganizationLicenses_200_response_inner::setClaimDate(const QString &claim_date) {
    m_claim_date = claim_date;
    m_claim_date_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_claim_date_Set() const{
    return m_claim_date_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_claim_date_Valid() const{
    return m_claim_date_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getDeviceSerial() const {
    return m_device_serial;
}
void OAIGetOrganizationLicenses_200_response_inner::setDeviceSerial(const QString &device_serial) {
    m_device_serial = device_serial;
    m_device_serial_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_device_serial_Set() const{
    return m_device_serial_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_device_serial_Valid() const{
    return m_device_serial_isValid;
}

qint32 OAIGetOrganizationLicenses_200_response_inner::getDurationInDays() const {
    return m_duration_in_days;
}
void OAIGetOrganizationLicenses_200_response_inner::setDurationInDays(const qint32 &duration_in_days) {
    m_duration_in_days = duration_in_days;
    m_duration_in_days_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_duration_in_days_Set() const{
    return m_duration_in_days_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_duration_in_days_Valid() const{
    return m_duration_in_days_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getExpirationDate() const {
    return m_expiration_date;
}
void OAIGetOrganizationLicenses_200_response_inner::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getHeadLicenseId() const {
    return m_head_license_id;
}
void OAIGetOrganizationLicenses_200_response_inner::setHeadLicenseId(const QString &head_license_id) {
    m_head_license_id = head_license_id;
    m_head_license_id_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_head_license_id_Set() const{
    return m_head_license_id_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_head_license_id_Valid() const{
    return m_head_license_id_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getId() const {
    return m_id;
}
void OAIGetOrganizationLicenses_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getLicenseKey() const {
    return m_license_key;
}
void OAIGetOrganizationLicenses_200_response_inner::setLicenseKey(const QString &license_key) {
    m_license_key = license_key;
    m_license_key_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_license_key_Set() const{
    return m_license_key_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_license_key_Valid() const{
    return m_license_key_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getLicenseType() const {
    return m_license_type;
}
void OAIGetOrganizationLicenses_200_response_inner::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getNetworkId() const {
    return m_network_id;
}
void OAIGetOrganizationLicenses_200_response_inner::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getOrderNumber() const {
    return m_order_number;
}
void OAIGetOrganizationLicenses_200_response_inner::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QList<OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner> OAIGetOrganizationLicenses_200_response_inner::getPermanentlyQueuedLicenses() const {
    return m_permanently_queued_licenses;
}
void OAIGetOrganizationLicenses_200_response_inner::setPermanentlyQueuedLicenses(const QList<OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner> &permanently_queued_licenses) {
    m_permanently_queued_licenses = permanently_queued_licenses;
    m_permanently_queued_licenses_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_permanently_queued_licenses_Set() const{
    return m_permanently_queued_licenses_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_permanently_queued_licenses_Valid() const{
    return m_permanently_queued_licenses_isValid;
}

qint32 OAIGetOrganizationLicenses_200_response_inner::getSeatCount() const {
    return m_seat_count;
}
void OAIGetOrganizationLicenses_200_response_inner::setSeatCount(const qint32 &seat_count) {
    m_seat_count = seat_count;
    m_seat_count_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_seat_count_Set() const{
    return m_seat_count_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_seat_count_Valid() const{
    return m_seat_count_isValid;
}

QString OAIGetOrganizationLicenses_200_response_inner::getState() const {
    return m_state;
}
void OAIGetOrganizationLicenses_200_response_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIGetOrganizationLicenses_200_response_inner::getTotalDurationInDays() const {
    return m_total_duration_in_days;
}
void OAIGetOrganizationLicenses_200_response_inner::setTotalDurationInDays(const qint32 &total_duration_in_days) {
    m_total_duration_in_days = total_duration_in_days;
    m_total_duration_in_days_isSet = true;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_total_duration_in_days_Set() const{
    return m_total_duration_in_days_isSet;
}

bool OAIGetOrganizationLicenses_200_response_inner::is_total_duration_in_days_Valid() const{
    return m_total_duration_in_days_isValid;
}

bool OAIGetOrganizationLicenses_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_license_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permanently_queued_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_duration_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationLicenses_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
