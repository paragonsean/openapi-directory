/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkMqttBroker_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkMqttBroker_request::OAIUpdateNetworkMqttBroker_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkMqttBroker_request::OAIUpdateNetworkMqttBroker_request() {
    this->initializeModel();
}

OAIUpdateNetworkMqttBroker_request::~OAIUpdateNetworkMqttBroker_request() {}

void OAIUpdateNetworkMqttBroker_request::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;
}

void OAIUpdateNetworkMqttBroker_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkMqttBroker_request::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;
}

QString OAIUpdateNetworkMqttBroker_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkMqttBroker_request::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_isSet) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_security.isSet()) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    return obj;
}

OAIObject OAIUpdateNetworkMqttBroker_request::getAuthentication() const {
    return m_authentication;
}
void OAIUpdateNetworkMqttBroker_request::setAuthentication(const OAIObject &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIUpdateNetworkMqttBroker_request::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIUpdateNetworkMqttBroker_request::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIUpdateNetworkMqttBroker_request::getHost() const {
    return m_host;
}
void OAIUpdateNetworkMqttBroker_request::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIUpdateNetworkMqttBroker_request::is_host_Set() const{
    return m_host_isSet;
}

bool OAIUpdateNetworkMqttBroker_request::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIUpdateNetworkMqttBroker_request::getName() const {
    return m_name;
}
void OAIUpdateNetworkMqttBroker_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkMqttBroker_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkMqttBroker_request::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIUpdateNetworkMqttBroker_request::getPort() const {
    return m_port;
}
void OAIUpdateNetworkMqttBroker_request::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIUpdateNetworkMqttBroker_request::is_port_Set() const{
    return m_port_isSet;
}

bool OAIUpdateNetworkMqttBroker_request::is_port_Valid() const{
    return m_port_isValid;
}

OAICreateNetworkMqttBroker_request_security OAIUpdateNetworkMqttBroker_request::getSecurity() const {
    return m_security;
}
void OAIUpdateNetworkMqttBroker_request::setSecurity(const OAICreateNetworkMqttBroker_request_security &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIUpdateNetworkMqttBroker_request::is_security_Set() const{
    return m_security_isSet;
}

bool OAIUpdateNetworkMqttBroker_request::is_security_Valid() const{
    return m_security_isValid;
}

bool OAIUpdateNetworkMqttBroker_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkMqttBroker_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
