/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDeviceDesktopLogs_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::OAIGetNetworkSmDeviceDesktopLogs_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::OAIGetNetworkSmDeviceDesktopLogs_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::~OAIGetNetworkSmDeviceDesktopLogs_200_response_inner() {}

void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::initializeModel() {

    m_dhcp_server_isSet = false;
    m_dhcp_server_isValid = false;

    m_dns_server_isSet = false;
    m_dns_server_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_measured_at_isSet = false;
    m_measured_at_isValid = false;

    m_network_device_isSet = false;
    m_network_device_isValid = false;

    m_network_driver_isSet = false;
    m_network_driver_isValid = false;

    m_network_mtu_isSet = false;
    m_network_mtu_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_wifi_auth_isSet = false;
    m_wifi_auth_isValid = false;

    m_wifi_bssid_isSet = false;
    m_wifi_bssid_isValid = false;

    m_wifi_channel_isSet = false;
    m_wifi_channel_isValid = false;

    m_wifi_noise_isSet = false;
    m_wifi_noise_isValid = false;

    m_wifi_rssi_isSet = false;
    m_wifi_rssi_isValid = false;

    m_wifi_ssid_isSet = false;
    m_wifi_ssid_isValid = false;
}

void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::fromJsonObject(QJsonObject json) {

    m_dhcp_server_isValid = ::OpenAPI::fromJsonValue(m_dhcp_server, json[QString("dhcpServer")]);
    m_dhcp_server_isSet = !json[QString("dhcpServer")].isNull() && m_dhcp_server_isValid;

    m_dns_server_isValid = ::OpenAPI::fromJsonValue(m_dns_server, json[QString("dnsServer")]);
    m_dns_server_isSet = !json[QString("dnsServer")].isNull() && m_dns_server_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_measured_at_isValid = ::OpenAPI::fromJsonValue(m_measured_at, json[QString("measuredAt")]);
    m_measured_at_isSet = !json[QString("measuredAt")].isNull() && m_measured_at_isValid;

    m_network_device_isValid = ::OpenAPI::fromJsonValue(m_network_device, json[QString("networkDevice")]);
    m_network_device_isSet = !json[QString("networkDevice")].isNull() && m_network_device_isValid;

    m_network_driver_isValid = ::OpenAPI::fromJsonValue(m_network_driver, json[QString("networkDriver")]);
    m_network_driver_isSet = !json[QString("networkDriver")].isNull() && m_network_driver_isValid;

    m_network_mtu_isValid = ::OpenAPI::fromJsonValue(m_network_mtu, json[QString("networkMTU")]);
    m_network_mtu_isSet = !json[QString("networkMTU")].isNull() && m_network_mtu_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIP")]);
    m_public_ip_isSet = !json[QString("publicIP")].isNull() && m_public_ip_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_wifi_auth_isValid = ::OpenAPI::fromJsonValue(m_wifi_auth, json[QString("wifiAuth")]);
    m_wifi_auth_isSet = !json[QString("wifiAuth")].isNull() && m_wifi_auth_isValid;

    m_wifi_bssid_isValid = ::OpenAPI::fromJsonValue(m_wifi_bssid, json[QString("wifiBssid")]);
    m_wifi_bssid_isSet = !json[QString("wifiBssid")].isNull() && m_wifi_bssid_isValid;

    m_wifi_channel_isValid = ::OpenAPI::fromJsonValue(m_wifi_channel, json[QString("wifiChannel")]);
    m_wifi_channel_isSet = !json[QString("wifiChannel")].isNull() && m_wifi_channel_isValid;

    m_wifi_noise_isValid = ::OpenAPI::fromJsonValue(m_wifi_noise, json[QString("wifiNoise")]);
    m_wifi_noise_isSet = !json[QString("wifiNoise")].isNull() && m_wifi_noise_isValid;

    m_wifi_rssi_isValid = ::OpenAPI::fromJsonValue(m_wifi_rssi, json[QString("wifiRssi")]);
    m_wifi_rssi_isSet = !json[QString("wifiRssi")].isNull() && m_wifi_rssi_isValid;

    m_wifi_ssid_isValid = ::OpenAPI::fromJsonValue(m_wifi_ssid, json[QString("wifiSsid")]);
    m_wifi_ssid_isSet = !json[QString("wifiSsid")].isNull() && m_wifi_ssid_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_dhcp_server_isSet) {
        obj.insert(QString("dhcpServer"), ::OpenAPI::toJsonValue(m_dhcp_server));
    }
    if (m_dns_server_isSet) {
        obj.insert(QString("dnsServer"), ::OpenAPI::toJsonValue(m_dns_server));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_measured_at_isSet) {
        obj.insert(QString("measuredAt"), ::OpenAPI::toJsonValue(m_measured_at));
    }
    if (m_network_device_isSet) {
        obj.insert(QString("networkDevice"), ::OpenAPI::toJsonValue(m_network_device));
    }
    if (m_network_driver_isSet) {
        obj.insert(QString("networkDriver"), ::OpenAPI::toJsonValue(m_network_driver));
    }
    if (m_network_mtu_isSet) {
        obj.insert(QString("networkMTU"), ::OpenAPI::toJsonValue(m_network_mtu));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIP"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_wifi_auth_isSet) {
        obj.insert(QString("wifiAuth"), ::OpenAPI::toJsonValue(m_wifi_auth));
    }
    if (m_wifi_bssid_isSet) {
        obj.insert(QString("wifiBssid"), ::OpenAPI::toJsonValue(m_wifi_bssid));
    }
    if (m_wifi_channel_isSet) {
        obj.insert(QString("wifiChannel"), ::OpenAPI::toJsonValue(m_wifi_channel));
    }
    if (m_wifi_noise_isSet) {
        obj.insert(QString("wifiNoise"), ::OpenAPI::toJsonValue(m_wifi_noise));
    }
    if (m_wifi_rssi_isSet) {
        obj.insert(QString("wifiRssi"), ::OpenAPI::toJsonValue(m_wifi_rssi));
    }
    if (m_wifi_ssid_isSet) {
        obj.insert(QString("wifiSsid"), ::OpenAPI::toJsonValue(m_wifi_ssid));
    }
    return obj;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getDhcpServer() const {
    return m_dhcp_server;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setDhcpServer(const QString &dhcp_server) {
    m_dhcp_server = dhcp_server;
    m_dhcp_server_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_dhcp_server_Set() const{
    return m_dhcp_server_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_dhcp_server_Valid() const{
    return m_dhcp_server_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getDnsServer() const {
    return m_dns_server;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setDnsServer(const QString &dns_server) {
    m_dns_server = dns_server;
    m_dns_server_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_dns_server_Set() const{
    return m_dns_server_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_dns_server_Valid() const{
    return m_dns_server_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getGateway() const {
    return m_gateway;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getIp() const {
    return m_ip;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getMeasuredAt() const {
    return m_measured_at;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setMeasuredAt(const QString &measured_at) {
    m_measured_at = measured_at;
    m_measured_at_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_measured_at_Set() const{
    return m_measured_at_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_measured_at_Valid() const{
    return m_measured_at_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getNetworkDevice() const {
    return m_network_device;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setNetworkDevice(const QString &network_device) {
    m_network_device = network_device;
    m_network_device_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_network_device_Set() const{
    return m_network_device_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_network_device_Valid() const{
    return m_network_device_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getNetworkDriver() const {
    return m_network_driver;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setNetworkDriver(const QString &network_driver) {
    m_network_driver = network_driver;
    m_network_driver_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_network_driver_Set() const{
    return m_network_driver_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_network_driver_Valid() const{
    return m_network_driver_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getNetworkMtu() const {
    return m_network_mtu;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setNetworkMtu(const QString &network_mtu) {
    m_network_mtu = network_mtu;
    m_network_mtu_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_network_mtu_Set() const{
    return m_network_mtu_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_network_mtu_Valid() const{
    return m_network_mtu_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getPublicIp() const {
    return m_public_ip;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getSubnet() const {
    return m_subnet;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_subnet_Valid() const{
    return m_subnet_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getTs() const {
    return m_ts;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getUser() const {
    return m_user;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getWifiAuth() const {
    return m_wifi_auth;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setWifiAuth(const QString &wifi_auth) {
    m_wifi_auth = wifi_auth;
    m_wifi_auth_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_auth_Set() const{
    return m_wifi_auth_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_auth_Valid() const{
    return m_wifi_auth_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getWifiBssid() const {
    return m_wifi_bssid;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setWifiBssid(const QString &wifi_bssid) {
    m_wifi_bssid = wifi_bssid;
    m_wifi_bssid_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_bssid_Set() const{
    return m_wifi_bssid_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_bssid_Valid() const{
    return m_wifi_bssid_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getWifiChannel() const {
    return m_wifi_channel;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setWifiChannel(const QString &wifi_channel) {
    m_wifi_channel = wifi_channel;
    m_wifi_channel_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_channel_Set() const{
    return m_wifi_channel_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_channel_Valid() const{
    return m_wifi_channel_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getWifiNoise() const {
    return m_wifi_noise;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setWifiNoise(const QString &wifi_noise) {
    m_wifi_noise = wifi_noise;
    m_wifi_noise_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_noise_Set() const{
    return m_wifi_noise_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_noise_Valid() const{
    return m_wifi_noise_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getWifiRssi() const {
    return m_wifi_rssi;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setWifiRssi(const QString &wifi_rssi) {
    m_wifi_rssi = wifi_rssi;
    m_wifi_rssi_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_rssi_Set() const{
    return m_wifi_rssi_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_rssi_Valid() const{
    return m_wifi_rssi_isValid;
}

QString OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::getWifiSsid() const {
    return m_wifi_ssid;
}
void OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::setWifiSsid(const QString &wifi_ssid) {
    m_wifi_ssid = wifi_ssid;
    m_wifi_ssid_isSet = true;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_ssid_Set() const{
    return m_wifi_ssid_isSet;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::is_wifi_ssid_Valid() const{
    return m_wifi_ssid_isValid;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dhcp_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measured_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_bssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_noise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_rssi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDeviceDesktopLogs_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
