/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeviceSwitchPortsStatuses_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetDeviceSwitchPortsStatuses_200_response_inner_H
#define OAIGetDeviceSwitchPortsStatuses_200_response_inner_H

#include <QJsonObject>

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp;
class OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp;
class OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort;
class OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps;
class OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb;

class OAIGetDeviceSwitchPortsStatuses_200_response_inner : public OAIObject {
public:
    OAIGetDeviceSwitchPortsStatuses_200_response_inner();
    OAIGetDeviceSwitchPortsStatuses_200_response_inner(QString json);
    ~OAIGetDeviceSwitchPortsStatuses_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp getCdp() const;
    void setCdp(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp &cdp);
    bool is_cdp_Set() const;
    bool is_cdp_Valid() const;

    qint32 getClientCount() const;
    void setClientCount(const qint32 &client_count);
    bool is_client_count_Set() const;
    bool is_client_count_Valid() const;

    QString getDuplex() const;
    void setDuplex(const QString &duplex);
    bool is_duplex_Set() const;
    bool is_duplex_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QList<QString> getErrors() const;
    void setErrors(const QList<QString> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    bool isIsUplink() const;
    void setIsUplink(const bool &is_uplink);
    bool is_is_uplink_Set() const;
    bool is_is_uplink_Valid() const;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp getLldp() const;
    void setLldp(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp &lldp);
    bool is_lldp_Set() const;
    bool is_lldp_Valid() const;

    QString getPortId() const;
    void setPortId(const QString &port_id);
    bool is_port_id_Set() const;
    bool is_port_id_Valid() const;

    float getPowerUsageInWh() const;
    void setPowerUsageInWh(const float &power_usage_in_wh);
    bool is_power_usage_in_wh_Set() const;
    bool is_power_usage_in_wh_Valid() const;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort getSecurePort() const;
    void setSecurePort(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort &secure_port);
    bool is_secure_port_Set() const;
    bool is_secure_port_Valid() const;

    QString getSpeed() const;
    void setSpeed(const QString &speed);
    bool is_speed_Set() const;
    bool is_speed_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps getTrafficInKbps() const;
    void setTrafficInKbps(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps &traffic_in_kbps);
    bool is_traffic_in_kbps_Set() const;
    bool is_traffic_in_kbps_Valid() const;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb getUsageInKb() const;
    void setUsageInKb(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb &usage_in_kb);
    bool is_usage_in_kb_Set() const;
    bool is_usage_in_kb_Valid() const;

    QList<QString> getWarnings() const;
    void setWarnings(const QList<QString> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp m_cdp;
    bool m_cdp_isSet;
    bool m_cdp_isValid;

    qint32 m_client_count;
    bool m_client_count_isSet;
    bool m_client_count_isValid;

    QString m_duplex;
    bool m_duplex_isSet;
    bool m_duplex_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QList<QString> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    bool m_is_uplink;
    bool m_is_uplink_isSet;
    bool m_is_uplink_isValid;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp m_lldp;
    bool m_lldp_isSet;
    bool m_lldp_isValid;

    QString m_port_id;
    bool m_port_id_isSet;
    bool m_port_id_isValid;

    float m_power_usage_in_wh;
    bool m_power_usage_in_wh_isSet;
    bool m_power_usage_in_wh_isValid;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort m_secure_port;
    bool m_secure_port_isSet;
    bool m_secure_port_isValid;

    QString m_speed;
    bool m_speed_isSet;
    bool m_speed_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps m_traffic_in_kbps;
    bool m_traffic_in_kbps_isSet;
    bool m_traffic_in_kbps_isValid;

    OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb m_usage_in_kb;
    bool m_usage_in_kb_isSet;
    bool m_usage_in_kb_isValid;

    QList<QString> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeviceSwitchPortsStatuses_200_response_inner)

#endif // OAIGetDeviceSwitchPortsStatuses_200_response_inner_H
