/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::~OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner() {}

void OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::initializeModel() {

    m_cos_isSet = false;
    m_cos_isValid = false;

    m_dscp_isSet = false;
    m_dscp_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::fromJsonObject(QJsonObject json) {

    m_cos_isValid = ::OpenAPI::fromJsonValue(m_cos, json[QString("cos")]);
    m_cos_isSet = !json[QString("cos")].isNull() && m_cos_isValid;

    m_dscp_isValid = ::OpenAPI::fromJsonValue(m_dscp, json[QString("dscp")]);
    m_dscp_isSet = !json[QString("dscp")].isNull() && m_dscp_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cos_isSet) {
        obj.insert(QString("cos"), ::OpenAPI::toJsonValue(m_cos));
    }
    if (m_dscp_isSet) {
        obj.insert(QString("dscp"), ::OpenAPI::toJsonValue(m_dscp));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::getCos() const {
    return m_cos;
}
void OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::setCos(const qint32 &cos) {
    m_cos = cos;
    m_cos_isSet = true;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::is_cos_Set() const{
    return m_cos_isSet;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::is_cos_Valid() const{
    return m_cos_isValid;
}

qint32 OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::getDscp() const {
    return m_dscp;
}
void OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::setDscp(const qint32 &dscp) {
    m_dscp = dscp;
    m_dscp_isSet = true;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::is_dscp_Set() const{
    return m_dscp_isSet;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::is_dscp_Valid() const{
    return m_dscp_isValid;
}

QString OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::getTitle() const {
    return m_title;
}
void OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dscp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchDscpToCosMappings_request_mappings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cos_isValid && m_dscp_isValid && true;
}

} // namespace OpenAPI
