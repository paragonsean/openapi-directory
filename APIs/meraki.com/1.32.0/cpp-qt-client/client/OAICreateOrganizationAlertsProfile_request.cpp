/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationAlertsProfile_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationAlertsProfile_request::OAICreateOrganizationAlertsProfile_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationAlertsProfile_request::OAICreateOrganizationAlertsProfile_request() {
    this->initializeModel();
}

OAICreateOrganizationAlertsProfile_request::~OAICreateOrganizationAlertsProfile_request() {}

void OAICreateOrganizationAlertsProfile_request::initializeModel() {

    m_alert_condition_isSet = false;
    m_alert_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateOrganizationAlertsProfile_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationAlertsProfile_request::fromJsonObject(QJsonObject json) {

    m_alert_condition_isValid = ::OpenAPI::fromJsonValue(m_alert_condition, json[QString("alertCondition")]);
    m_alert_condition_isSet = !json[QString("alertCondition")].isNull() && m_alert_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateOrganizationAlertsProfile_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationAlertsProfile_request::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_condition.isSet()) {
        obj.insert(QString("alertCondition"), ::OpenAPI::toJsonValue(m_alert_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_recipients.isSet()) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICreateOrganizationAlertsProfile_request_alertCondition OAICreateOrganizationAlertsProfile_request::getAlertCondition() const {
    return m_alert_condition;
}
void OAICreateOrganizationAlertsProfile_request::setAlertCondition(const OAICreateOrganizationAlertsProfile_request_alertCondition &alert_condition) {
    m_alert_condition = alert_condition;
    m_alert_condition_isSet = true;
}

bool OAICreateOrganizationAlertsProfile_request::is_alert_condition_Set() const{
    return m_alert_condition_isSet;
}

bool OAICreateOrganizationAlertsProfile_request::is_alert_condition_Valid() const{
    return m_alert_condition_isValid;
}

QString OAICreateOrganizationAlertsProfile_request::getDescription() const {
    return m_description;
}
void OAICreateOrganizationAlertsProfile_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateOrganizationAlertsProfile_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateOrganizationAlertsProfile_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAICreateOrganizationAlertsProfile_request::getNetworkTags() const {
    return m_network_tags;
}
void OAICreateOrganizationAlertsProfile_request::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAICreateOrganizationAlertsProfile_request::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAICreateOrganizationAlertsProfile_request::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

OAICreateOrganizationAlertsProfile_request_recipients OAICreateOrganizationAlertsProfile_request::getRecipients() const {
    return m_recipients;
}
void OAICreateOrganizationAlertsProfile_request::setRecipients(const OAICreateOrganizationAlertsProfile_request_recipients &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAICreateOrganizationAlertsProfile_request::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAICreateOrganizationAlertsProfile_request::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAICreateOrganizationAlertsProfile_request::getType() const {
    return m_type;
}
void OAICreateOrganizationAlertsProfile_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateOrganizationAlertsProfile_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateOrganizationAlertsProfile_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateOrganizationAlertsProfile_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationAlertsProfile_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_condition_isValid && m_network_tags_isValid && m_recipients_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
