/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel() {
    this->initializeModel();
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::~OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel() {}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_root_certificate_isSet = false;
    m_root_certificate_isValid = false;
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_root_certificate_isValid = ::OpenAPI::fromJsonValue(m_root_certificate, json[QString("rootCertificate")]);
    m_root_certificate_isSet = !json[QString("rootCertificate")].isNull() && m_root_certificate_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_root_certificate.isSet()) {
        obj.insert(QString("rootCertificate"), ::OpenAPI::toJsonValue(m_root_certificate));
    }
    return obj;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::getHost() const {
    return m_host;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_host_Set() const{
    return m_host_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_host_Valid() const{
    return m_host_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::getMode() const {
    return m_mode;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::getName() const {
    return m_name;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::getPort() const {
    return m_port;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_port_Valid() const{
    return m_port_isValid;
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel_rootCertificate OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::getRootCertificate() const {
    return m_root_certificate;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::setRootCertificate(const OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel_rootCertificate &root_certificate) {
    m_root_certificate = root_certificate;
    m_root_certificate_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_root_certificate_Set() const{
    return m_root_certificate_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::is_root_certificate_Valid() const{
    return m_root_certificate_isValid;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
