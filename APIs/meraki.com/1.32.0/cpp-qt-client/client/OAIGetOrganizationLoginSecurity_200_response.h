/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOrganizationLoginSecurity_200_response.h
 *
 * 
 */

#ifndef OAIGetOrganizationLoginSecurity_200_response_H
#define OAIGetOrganizationLoginSecurity_200_response_H

#include <QJsonObject>

#include "OAIGetOrganizationLoginSecurity_200_response_apiAuthentication.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetOrganizationLoginSecurity_200_response_apiAuthentication;

class OAIGetOrganizationLoginSecurity_200_response : public OAIObject {
public:
    OAIGetOrganizationLoginSecurity_200_response();
    OAIGetOrganizationLoginSecurity_200_response(QString json);
    ~OAIGetOrganizationLoginSecurity_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccountLockoutAttempts() const;
    void setAccountLockoutAttempts(const qint32 &account_lockout_attempts);
    bool is_account_lockout_attempts_Set() const;
    bool is_account_lockout_attempts_Valid() const;

    OAIGetOrganizationLoginSecurity_200_response_apiAuthentication getApiAuthentication() const;
    void setApiAuthentication(const OAIGetOrganizationLoginSecurity_200_response_apiAuthentication &api_authentication);
    bool is_api_authentication_Set() const;
    bool is_api_authentication_Valid() const;

    bool isEnforceAccountLockout() const;
    void setEnforceAccountLockout(const bool &enforce_account_lockout);
    bool is_enforce_account_lockout_Set() const;
    bool is_enforce_account_lockout_Valid() const;

    bool isEnforceDifferentPasswords() const;
    void setEnforceDifferentPasswords(const bool &enforce_different_passwords);
    bool is_enforce_different_passwords_Set() const;
    bool is_enforce_different_passwords_Valid() const;

    bool isEnforceIdleTimeout() const;
    void setEnforceIdleTimeout(const bool &enforce_idle_timeout);
    bool is_enforce_idle_timeout_Set() const;
    bool is_enforce_idle_timeout_Valid() const;

    bool isEnforceLoginIpRanges() const;
    void setEnforceLoginIpRanges(const bool &enforce_login_ip_ranges);
    bool is_enforce_login_ip_ranges_Set() const;
    bool is_enforce_login_ip_ranges_Valid() const;

    bool isEnforcePasswordExpiration() const;
    void setEnforcePasswordExpiration(const bool &enforce_password_expiration);
    bool is_enforce_password_expiration_Set() const;
    bool is_enforce_password_expiration_Valid() const;

    bool isEnforceStrongPasswords() const;
    void setEnforceStrongPasswords(const bool &enforce_strong_passwords);
    bool is_enforce_strong_passwords_Set() const;
    bool is_enforce_strong_passwords_Valid() const;

    bool isEnforceTwoFactorAuth() const;
    void setEnforceTwoFactorAuth(const bool &enforce_two_factor_auth);
    bool is_enforce_two_factor_auth_Set() const;
    bool is_enforce_two_factor_auth_Valid() const;

    qint32 getIdleTimeoutMinutes() const;
    void setIdleTimeoutMinutes(const qint32 &idle_timeout_minutes);
    bool is_idle_timeout_minutes_Set() const;
    bool is_idle_timeout_minutes_Valid() const;

    QList<QString> getLoginIpRanges() const;
    void setLoginIpRanges(const QList<QString> &login_ip_ranges);
    bool is_login_ip_ranges_Set() const;
    bool is_login_ip_ranges_Valid() const;

    qint32 getNumDifferentPasswords() const;
    void setNumDifferentPasswords(const qint32 &num_different_passwords);
    bool is_num_different_passwords_Set() const;
    bool is_num_different_passwords_Valid() const;

    qint32 getPasswordExpirationDays() const;
    void setPasswordExpirationDays(const qint32 &password_expiration_days);
    bool is_password_expiration_days_Set() const;
    bool is_password_expiration_days_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_account_lockout_attempts;
    bool m_account_lockout_attempts_isSet;
    bool m_account_lockout_attempts_isValid;

    OAIGetOrganizationLoginSecurity_200_response_apiAuthentication m_api_authentication;
    bool m_api_authentication_isSet;
    bool m_api_authentication_isValid;

    bool m_enforce_account_lockout;
    bool m_enforce_account_lockout_isSet;
    bool m_enforce_account_lockout_isValid;

    bool m_enforce_different_passwords;
    bool m_enforce_different_passwords_isSet;
    bool m_enforce_different_passwords_isValid;

    bool m_enforce_idle_timeout;
    bool m_enforce_idle_timeout_isSet;
    bool m_enforce_idle_timeout_isValid;

    bool m_enforce_login_ip_ranges;
    bool m_enforce_login_ip_ranges_isSet;
    bool m_enforce_login_ip_ranges_isValid;

    bool m_enforce_password_expiration;
    bool m_enforce_password_expiration_isSet;
    bool m_enforce_password_expiration_isValid;

    bool m_enforce_strong_passwords;
    bool m_enforce_strong_passwords_isSet;
    bool m_enforce_strong_passwords_isValid;

    bool m_enforce_two_factor_auth;
    bool m_enforce_two_factor_auth_isSet;
    bool m_enforce_two_factor_auth_isValid;

    qint32 m_idle_timeout_minutes;
    bool m_idle_timeout_minutes_isSet;
    bool m_idle_timeout_minutes_isValid;

    QList<QString> m_login_ip_ranges;
    bool m_login_ip_ranges_isSet;
    bool m_login_ip_ranges_isValid;

    qint32 m_num_different_passwords;
    bool m_num_different_passwords_isSet;
    bool m_num_different_passwords_isValid;

    qint32 m_password_expiration_days;
    bool m_password_expiration_days_isSet;
    bool m_password_expiration_days_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOrganizationLoginSecurity_200_response)

#endif // OAIGetOrganizationLoginSecurity_200_response_H
