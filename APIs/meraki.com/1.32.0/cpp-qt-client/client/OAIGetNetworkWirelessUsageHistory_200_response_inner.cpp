/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkWirelessUsageHistory_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkWirelessUsageHistory_200_response_inner::OAIGetNetworkWirelessUsageHistory_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkWirelessUsageHistory_200_response_inner::OAIGetNetworkWirelessUsageHistory_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkWirelessUsageHistory_200_response_inner::~OAIGetNetworkWirelessUsageHistory_200_response_inner() {}

void OAIGetNetworkWirelessUsageHistory_200_response_inner::initializeModel() {

    m_end_ts_isSet = false;
    m_end_ts_isValid = false;

    m_received_kbps_isSet = false;
    m_received_kbps_isValid = false;

    m_sent_kbps_isSet = false;
    m_sent_kbps_isValid = false;

    m_start_ts_isSet = false;
    m_start_ts_isValid = false;

    m_total_kbps_isSet = false;
    m_total_kbps_isValid = false;
}

void OAIGetNetworkWirelessUsageHistory_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkWirelessUsageHistory_200_response_inner::fromJsonObject(QJsonObject json) {

    m_end_ts_isValid = ::OpenAPI::fromJsonValue(m_end_ts, json[QString("endTs")]);
    m_end_ts_isSet = !json[QString("endTs")].isNull() && m_end_ts_isValid;

    m_received_kbps_isValid = ::OpenAPI::fromJsonValue(m_received_kbps, json[QString("receivedKbps")]);
    m_received_kbps_isSet = !json[QString("receivedKbps")].isNull() && m_received_kbps_isValid;

    m_sent_kbps_isValid = ::OpenAPI::fromJsonValue(m_sent_kbps, json[QString("sentKbps")]);
    m_sent_kbps_isSet = !json[QString("sentKbps")].isNull() && m_sent_kbps_isValid;

    m_start_ts_isValid = ::OpenAPI::fromJsonValue(m_start_ts, json[QString("startTs")]);
    m_start_ts_isSet = !json[QString("startTs")].isNull() && m_start_ts_isValid;

    m_total_kbps_isValid = ::OpenAPI::fromJsonValue(m_total_kbps, json[QString("totalKbps")]);
    m_total_kbps_isSet = !json[QString("totalKbps")].isNull() && m_total_kbps_isValid;
}

QString OAIGetNetworkWirelessUsageHistory_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkWirelessUsageHistory_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_end_ts_isSet) {
        obj.insert(QString("endTs"), ::OpenAPI::toJsonValue(m_end_ts));
    }
    if (m_received_kbps_isSet) {
        obj.insert(QString("receivedKbps"), ::OpenAPI::toJsonValue(m_received_kbps));
    }
    if (m_sent_kbps_isSet) {
        obj.insert(QString("sentKbps"), ::OpenAPI::toJsonValue(m_sent_kbps));
    }
    if (m_start_ts_isSet) {
        obj.insert(QString("startTs"), ::OpenAPI::toJsonValue(m_start_ts));
    }
    if (m_total_kbps_isSet) {
        obj.insert(QString("totalKbps"), ::OpenAPI::toJsonValue(m_total_kbps));
    }
    return obj;
}

QDateTime OAIGetNetworkWirelessUsageHistory_200_response_inner::getEndTs() const {
    return m_end_ts;
}
void OAIGetNetworkWirelessUsageHistory_200_response_inner::setEndTs(const QDateTime &end_ts) {
    m_end_ts = end_ts;
    m_end_ts_isSet = true;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_end_ts_Set() const{
    return m_end_ts_isSet;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_end_ts_Valid() const{
    return m_end_ts_isValid;
}

qint32 OAIGetNetworkWirelessUsageHistory_200_response_inner::getReceivedKbps() const {
    return m_received_kbps;
}
void OAIGetNetworkWirelessUsageHistory_200_response_inner::setReceivedKbps(const qint32 &received_kbps) {
    m_received_kbps = received_kbps;
    m_received_kbps_isSet = true;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_received_kbps_Set() const{
    return m_received_kbps_isSet;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_received_kbps_Valid() const{
    return m_received_kbps_isValid;
}

qint32 OAIGetNetworkWirelessUsageHistory_200_response_inner::getSentKbps() const {
    return m_sent_kbps;
}
void OAIGetNetworkWirelessUsageHistory_200_response_inner::setSentKbps(const qint32 &sent_kbps) {
    m_sent_kbps = sent_kbps;
    m_sent_kbps_isSet = true;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_sent_kbps_Set() const{
    return m_sent_kbps_isSet;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_sent_kbps_Valid() const{
    return m_sent_kbps_isValid;
}

QDateTime OAIGetNetworkWirelessUsageHistory_200_response_inner::getStartTs() const {
    return m_start_ts;
}
void OAIGetNetworkWirelessUsageHistory_200_response_inner::setStartTs(const QDateTime &start_ts) {
    m_start_ts = start_ts;
    m_start_ts_isSet = true;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_start_ts_Set() const{
    return m_start_ts_isSet;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_start_ts_Valid() const{
    return m_start_ts_isValid;
}

qint32 OAIGetNetworkWirelessUsageHistory_200_response_inner::getTotalKbps() const {
    return m_total_kbps;
}
void OAIGetNetworkWirelessUsageHistory_200_response_inner::setTotalKbps(const qint32 &total_kbps) {
    m_total_kbps = total_kbps;
    m_total_kbps_isSet = true;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_total_kbps_Set() const{
    return m_total_kbps_isSet;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::is_total_kbps_Valid() const{
    return m_total_kbps_isValid;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_kbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_kbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_kbps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkWirelessUsageHistory_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
