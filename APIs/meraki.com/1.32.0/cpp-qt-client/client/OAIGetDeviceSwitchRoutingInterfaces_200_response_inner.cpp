/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::OAIGetDeviceSwitchRoutingInterfaces_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::OAIGetDeviceSwitchRoutingInterfaces_200_response_inner() {
    this->initializeModel();
}

OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::~OAIGetDeviceSwitchRoutingInterfaces_200_response_inner() {}

void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::initializeModel() {

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_interface_id_isSet = false;
    m_interface_id_isValid = false;

    m_interface_ip_isSet = false;
    m_interface_ip_isValid = false;

    m_ipv6_isSet = false;
    m_ipv6_isValid = false;

    m_multicast_routing_isSet = false;
    m_multicast_routing_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ospf_settings_isSet = false;
    m_ospf_settings_isValid = false;

    m_ospf_v3_isSet = false;
    m_ospf_v3_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;
}

void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::fromJsonObject(QJsonObject json) {

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("defaultGateway")]);
    m_default_gateway_isSet = !json[QString("defaultGateway")].isNull() && m_default_gateway_isValid;

    m_interface_id_isValid = ::OpenAPI::fromJsonValue(m_interface_id, json[QString("interfaceId")]);
    m_interface_id_isSet = !json[QString("interfaceId")].isNull() && m_interface_id_isValid;

    m_interface_ip_isValid = ::OpenAPI::fromJsonValue(m_interface_ip, json[QString("interfaceIp")]);
    m_interface_ip_isSet = !json[QString("interfaceIp")].isNull() && m_interface_ip_isValid;

    m_ipv6_isValid = ::OpenAPI::fromJsonValue(m_ipv6, json[QString("ipv6")]);
    m_ipv6_isSet = !json[QString("ipv6")].isNull() && m_ipv6_isValid;

    m_multicast_routing_isValid = ::OpenAPI::fromJsonValue(m_multicast_routing, json[QString("multicastRouting")]);
    m_multicast_routing_isSet = !json[QString("multicastRouting")].isNull() && m_multicast_routing_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ospf_settings_isValid = ::OpenAPI::fromJsonValue(m_ospf_settings, json[QString("ospfSettings")]);
    m_ospf_settings_isSet = !json[QString("ospfSettings")].isNull() && m_ospf_settings_isValid;

    m_ospf_v3_isValid = ::OpenAPI::fromJsonValue(m_ospf_v3, json[QString("ospfV3")]);
    m_ospf_v3_isSet = !json[QString("ospfV3")].isNull() && m_ospf_v3_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_default_gateway_isSet) {
        obj.insert(QString("defaultGateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_interface_id_isSet) {
        obj.insert(QString("interfaceId"), ::OpenAPI::toJsonValue(m_interface_id));
    }
    if (m_interface_ip_isSet) {
        obj.insert(QString("interfaceIp"), ::OpenAPI::toJsonValue(m_interface_ip));
    }
    if (m_ipv6.isSet()) {
        obj.insert(QString("ipv6"), ::OpenAPI::toJsonValue(m_ipv6));
    }
    if (m_multicast_routing_isSet) {
        obj.insert(QString("multicastRouting"), ::OpenAPI::toJsonValue(m_multicast_routing));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ospf_settings.isSet()) {
        obj.insert(QString("ospfSettings"), ::OpenAPI::toJsonValue(m_ospf_settings));
    }
    if (m_ospf_v3.isSet()) {
        obj.insert(QString("ospfV3"), ::OpenAPI::toJsonValue(m_ospf_v3));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    return obj;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getDefaultGateway() const {
    return m_default_gateway;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setDefaultGateway(const QString &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getInterfaceId() const {
    return m_interface_id;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setInterfaceId(const QString &interface_id) {
    m_interface_id = interface_id;
    m_interface_id_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_interface_id_Set() const{
    return m_interface_id_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_interface_id_Valid() const{
    return m_interface_id_isValid;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getInterfaceIp() const {
    return m_interface_ip;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setInterfaceIp(const QString &interface_ip) {
    m_interface_ip = interface_ip;
    m_interface_ip_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_interface_ip_Set() const{
    return m_interface_ip_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_interface_ip_Valid() const{
    return m_interface_ip_isValid;
}

OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6 OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getIpv6() const {
    return m_ipv6;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setIpv6(const OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6 &ipv6) {
    m_ipv6 = ipv6;
    m_ipv6_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_ipv6_Set() const{
    return m_ipv6_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_ipv6_Valid() const{
    return m_ipv6_isValid;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getMulticastRouting() const {
    return m_multicast_routing;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setMulticastRouting(const QString &multicast_routing) {
    m_multicast_routing = multicast_routing;
    m_multicast_routing_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_multicast_routing_Set() const{
    return m_multicast_routing_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_multicast_routing_Valid() const{
    return m_multicast_routing_isValid;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getName() const {
    return m_name;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getOspfSettings() const {
    return m_ospf_settings;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setOspfSettings(const OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings &ospf_settings) {
    m_ospf_settings = ospf_settings;
    m_ospf_settings_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_ospf_settings_Set() const{
    return m_ospf_settings_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_ospf_settings_Valid() const{
    return m_ospf_settings_isValid;
}

OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3 OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getOspfV3() const {
    return m_ospf_v3;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setOspfV3(const OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3 &ospf_v3) {
    m_ospf_v3 = ospf_v3;
    m_ospf_v3_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_ospf_v3_Set() const{
    return m_ospf_v3_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_ospf_v3_Valid() const{
    return m_ospf_v3_isValid;
}

QString OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getSubnet() const {
    return m_subnet;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_subnet_Valid() const{
    return m_subnet_isValid;
}

qint32 OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::getVlanId() const {
    return m_vlan_id;
}
void OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::setVlanId(const qint32 &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ospf_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ospf_v3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceSwitchRoutingInterfaces_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
