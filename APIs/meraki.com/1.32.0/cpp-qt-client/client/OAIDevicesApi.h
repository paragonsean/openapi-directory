/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDevicesApi_H
#define OAI_OAIDevicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBlinkDeviceLeds_request.h"
#include "OAICheckinNetworkSmDevices_200_response.h"
#include "OAICheckinNetworkSmDevices_request.h"
#include "OAIClaimNetworkDevices_request.h"
#include "OAICloneOrganizationSwitchDevices_request.h"
#include "OAICreateDeviceLiveToolsPingDevice_request.h"
#include "OAICreateDeviceLiveToolsPing_201_response.h"
#include "OAICreateDeviceLiveToolsPing_request.h"
#include "OAIGetDeviceLiveToolsPing_200_response.h"
#include "OAIGetDeviceWirelessConnectionStats_200_response.h"
#include "OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner.h"
#include "OAIGetNetworkSmDeviceCerts_200_response_inner.h"
#include "OAIGetNetworkSmDeviceConnectivity_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDesktopLogs_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner.h"
#include "OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner.h"
#include "OAIGetNetworkSmDevicePerformanceHistory_200_response_inner.h"
#include "OAIGetNetworkSmDeviceSecurityCenters_200_response_inner.h"
#include "OAIGetNetworkSmDeviceSoftwares_200_response_inner.h"
#include "OAIGetNetworkSmDeviceWlanLists_200_response_inner.h"
#include "OAIGetNetworkSmDevices_200_response_inner.h"
#include "OAIGetOrganizationDevicesAvailabilities_200_response_inner.h"
#include "OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesStatusesOverview_200_response.h"
#include "OAIGetOrganizationDevicesStatuses_200_response.h"
#include "OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner.h"
#include "OAIGetOrganizationDevices_200_response_inner.h"
#include "OAIGetOrganizationInventoryDevices_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner.h"
#include "OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner.h"
#include "OAILockNetworkSmDevices_request.h"
#include "OAIModifyNetworkSmDevicesTags_200_response_inner.h"
#include "OAIModifyNetworkSmDevicesTags_request.h"
#include "OAIMoveNetworkSmDevices_200_response.h"
#include "OAIMoveNetworkSmDevices_request.h"
#include "OAIObject.h"
#include "OAIRemoveNetworkDevices_request.h"
#include "OAIUpdateDeviceCellularSims_request.h"
#include "OAIUpdateDeviceManagementInterface_request.h"
#include "OAIUpdateDevice_request.h"
#include "OAIUpdateNetworkSmDevicesFields_200_response_inner.h"
#include "OAIUpdateNetworkSmDevicesFields_request.h"
#include "OAIVmxNetworkDevicesClaim_request.h"
#include "OAIWipeNetworkSmDevices_200_response.h"
#include "OAIWipeNetworkSmDevices_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDevicesApi : public QObject {
    Q_OBJECT

public:
    OAIDevicesApi(const int timeOut = 0);
    ~OAIDevicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_blink_device_leds_request OAIBlinkDeviceLeds_request [optional]
    */
    virtual void blinkDeviceLeds(const QString &serial, const ::OpenAPI::OptionalParam<OAIBlinkDeviceLeds_request> &oai_blink_device_leds_request = ::OpenAPI::OptionalParam<OAIBlinkDeviceLeds_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_checkin_network_sm_devices_request OAICheckinNetworkSmDevices_request [optional]
    */
    virtual void checkinNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAICheckinNetworkSmDevices_request> &oai_checkin_network_sm_devices_request = ::OpenAPI::OptionalParam<OAICheckinNetworkSmDevices_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_claim_network_devices_request OAIClaimNetworkDevices_request [required]
    */
    virtual void claimNetworkDevices(const QString &network_id, const OAIClaimNetworkDevices_request &oai_claim_network_devices_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_clone_organization_switch_devices_request OAICloneOrganizationSwitchDevices_request [required]
    */
    virtual void cloneOrganizationSwitchDevices(const QString &organization_id, const OAICloneOrganizationSwitchDevices_request &oai_clone_organization_switch_devices_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_live_tools_ping_request OAICreateDeviceLiveToolsPing_request [required]
    */
    virtual void createDeviceLiveToolsPing(const QString &serial, const OAICreateDeviceLiveToolsPing_request &oai_create_device_live_tools_ping_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_live_tools_ping_device_request OAICreateDeviceLiveToolsPingDevice_request [optional]
    */
    virtual void createDeviceLiveToolsPingDevice(const QString &serial, const ::OpenAPI::OptionalParam<OAICreateDeviceLiveToolsPingDevice_request> &oai_create_device_live_tools_ping_device_request = ::OpenAPI::OptionalParam<OAICreateDeviceLiveToolsPingDevice_request>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDevice(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCellularSims(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceClients(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getDeviceLiveToolsPing(const QString &serial, const QString &id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getDeviceLiveToolsPingDevice(const QString &serial, const QString &id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceLldpCdp(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  ip QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  uplink QString [optional]
    */
    virtual void getDeviceLossAndLatencyHistory(const QString &serial, const QString &ip, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceManagementInterface(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkDevices(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceCellularUsageHistory(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceCerts(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceConnectivity(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceDesktopLogs(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceDeviceCommandLogs(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceDeviceProfiles(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceNetworkAdapters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDevicePerformanceHistory(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceRestrictions(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceSecurityCenters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceSoftwares(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceWlanLists(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  wifi_macs QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  scope QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &wifi_macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &scope = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessDevicesConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessDevicesLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesAvailabilities(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesPowerModulesStatusesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationDevicesStatusesOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesUplinksAddressesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  uplink QString [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void getOrganizationDevicesUplinksLossAndLatency(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  configuration_updated_after QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  sensor_metrics QList<QString> [optional]
    * @param[in]  sensor_alert_profile_ids QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    */
    virtual void getOrganizationDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sensor_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sensor_alert_profile_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void getOrganizationInventoryDevice(const QString &organization_id, const QString &serial);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  used_state QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  order_numbers QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  product_types QList<QString> [optional]
    */
    virtual void getOrganizationInventoryDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &used_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_numbers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopDevicesByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopDevicesModelsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationWirelessDevicesEthernetStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_lock_network_sm_devices_request OAILockNetworkSmDevices_request [optional]
    */
    virtual void lockNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request> &oai_lock_network_sm_devices_request = ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_modify_network_sm_devices_tags_request OAIModifyNetworkSmDevicesTags_request [required]
    */
    virtual void modifyNetworkSmDevicesTags(const QString &network_id, const OAIModifyNetworkSmDevicesTags_request &oai_modify_network_sm_devices_tags_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_move_network_sm_devices_request OAIMoveNetworkSmDevices_request [required]
    */
    virtual void moveNetworkSmDevices(const QString &network_id, const OAIMoveNetworkSmDevices_request &oai_move_network_sm_devices_request);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void rebootDevice(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void refreshNetworkSmDeviceDetails(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_remove_network_devices_request OAIRemoveNetworkDevices_request [required]
    */
    virtual void removeNetworkDevices(const QString &network_id, const OAIRemoveNetworkDevices_request &oai_remove_network_devices_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void unenrollNetworkSmDevice(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_request OAIUpdateDevice_request [optional]
    */
    virtual void updateDevice(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDevice_request> &oai_update_device_request = ::OpenAPI::OptionalParam<OAIUpdateDevice_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_cellular_sims_request OAIUpdateDeviceCellularSims_request [optional]
    */
    virtual void updateDeviceCellularSims(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularSims_request> &oai_update_device_cellular_sims_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularSims_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_management_interface_request OAIUpdateDeviceManagementInterface_request [optional]
    */
    virtual void updateDeviceManagementInterface(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceManagementInterface_request> &oai_update_device_management_interface_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceManagementInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_sm_devices_fields_request OAIUpdateNetworkSmDevicesFields_request [required]
    */
    virtual void updateNetworkSmDevicesFields(const QString &network_id, const OAIUpdateNetworkSmDevicesFields_request &oai_update_network_sm_devices_fields_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_vmx_network_devices_claim_request OAIVmxNetworkDevicesClaim_request [required]
    */
    virtual void vmxNetworkDevicesClaim(const QString &network_id, const OAIVmxNetworkDevicesClaim_request &oai_vmx_network_devices_claim_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_wipe_network_sm_devices_request OAIWipeNetworkSmDevices_request [optional]
    */
    virtual void wipeNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevices_request> &oai_wipe_network_sm_devices_request = ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevices_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void blinkDeviceLedsCallback(OAIHttpRequestWorker *worker);
    void checkinNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void claimNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void cloneOrganizationSwitchDevicesCallback(OAIHttpRequestWorker *worker);
    void createDeviceLiveToolsPingCallback(OAIHttpRequestWorker *worker);
    void createDeviceLiveToolsPingDeviceCallback(OAIHttpRequestWorker *worker);
    void getDeviceCallback(OAIHttpRequestWorker *worker);
    void getDeviceCellularSimsCallback(OAIHttpRequestWorker *worker);
    void getDeviceClientsCallback(OAIHttpRequestWorker *worker);
    void getDeviceLiveToolsPingCallback(OAIHttpRequestWorker *worker);
    void getDeviceLiveToolsPingDeviceCallback(OAIHttpRequestWorker *worker);
    void getDeviceLldpCdpCallback(OAIHttpRequestWorker *worker);
    void getDeviceLossAndLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getDeviceManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCellularUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCertsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceConnectivityCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDesktopLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDeviceCommandLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceNetworkAdaptersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicePerformanceHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceRestrictionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceSecurityCentersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceWlanListsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDevicesConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDevicesLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesAvailabilitiesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesPowerModulesStatusesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesUplinksAddressesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesUplinksLossAndLatencyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopDevicesByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopDevicesModelsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWirelessDevicesEthernetStatusesCallback(OAIHttpRequestWorker *worker);
    void lockNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void modifyNetworkSmDevicesTagsCallback(OAIHttpRequestWorker *worker);
    void moveNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void rebootDeviceCallback(OAIHttpRequestWorker *worker);
    void refreshNetworkSmDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void removeNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCellularSimsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmDevicesFieldsCallback(OAIHttpRequestWorker *worker);
    void vmxNetworkDevicesClaimCallback(OAIHttpRequestWorker *worker);
    void wipeNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void blinkDeviceLedsSignal(OAIObject summary);
    void checkinNetworkSmDevicesSignal(OAICheckinNetworkSmDevices_200_response summary);
    void claimNetworkDevicesSignal();
    void cloneOrganizationSwitchDevicesSignal(OAIObject summary);
    void createDeviceLiveToolsPingSignal(OAICreateDeviceLiveToolsPing_201_response summary);
    void createDeviceLiveToolsPingDeviceSignal(OAICreateDeviceLiveToolsPing_201_response summary);
    void getDeviceSignal(OAIObject summary);
    void getDeviceCellularSimsSignal(OAIObject summary);
    void getDeviceClientsSignal(QList<OAIObject> summary);
    void getDeviceLiveToolsPingSignal(OAIGetDeviceLiveToolsPing_200_response summary);
    void getDeviceLiveToolsPingDeviceSignal(OAIGetDeviceLiveToolsPing_200_response summary);
    void getDeviceLldpCdpSignal(OAIObject summary);
    void getDeviceLossAndLatencyHistorySignal(QList<OAIObject> summary);
    void getDeviceManagementInterfaceSignal(OAIObject summary);
    void getNetworkDevicesSignal(QList<OAIObject> summary);
    void getNetworkSmDeviceCellularUsageHistorySignal(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary);
    void getNetworkSmDeviceCertsSignal(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary);
    void getNetworkSmDeviceConnectivitySignal(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary);
    void getNetworkSmDeviceDesktopLogsSignal(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceCommandLogsSignal(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceProfilesSignal(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmDeviceNetworkAdaptersSignal(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary);
    void getNetworkSmDevicePerformanceHistorySignal(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary);
    void getNetworkSmDeviceRestrictionsSignal(QList<OAIObject> summary);
    void getNetworkSmDeviceSecurityCentersSignal(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary);
    void getNetworkSmDeviceSoftwaresSignal(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmDeviceWlanListsSignal(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary);
    void getNetworkSmDevicesSignal(QList<OAIGetNetworkSmDevices_200_response_inner> summary);
    void getNetworkWirelessDevicesConnectionStatsSignal(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary);
    void getNetworkWirelessDevicesLatencyStatsSignal(QList<OAIObject> summary);
    void getOrganizationDevicesAvailabilitiesSignal(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignal(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesOverviewSignal(OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesStatusesSignal(OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationDevicesUplinksAddressesByDeviceSignal(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary);
    void getOrganizationDevicesUplinksLossAndLatencySignal(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary);
    void getOrganizationDevicesSignal(QList<OAIGetOrganizationDevices_200_response_inner> summary);
    void getOrganizationInventoryDeviceSignal(OAIGetOrganizationInventoryDevices_200_response_inner summary);
    void getOrganizationInventoryDevicesSignal(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesByUsageSignal(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesModelsByUsageSignal(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignal(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void lockNetworkSmDevicesSignal(OAICheckinNetworkSmDevices_200_response summary);
    void modifyNetworkSmDevicesTagsSignal(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary);
    void moveNetworkSmDevicesSignal(OAIMoveNetworkSmDevices_200_response summary);
    void rebootDeviceSignal(OAIObject summary);
    void refreshNetworkSmDeviceDetailsSignal();
    void removeNetworkDevicesSignal();
    void unenrollNetworkSmDeviceSignal(OAIObject summary);
    void updateDeviceSignal(OAIObject summary);
    void updateDeviceCellularSimsSignal(OAIObject summary);
    void updateDeviceManagementInterfaceSignal(OAIObject summary);
    void updateNetworkSmDevicesFieldsSignal(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary);
    void vmxNetworkDevicesClaimSignal(OAIObject summary);
    void wipeNetworkSmDevicesSignal(OAIWipeNetworkSmDevices_200_response summary);


    void blinkDeviceLedsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void checkinNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAICheckinNetworkSmDevices_200_response summary);
    void claimNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void cloneOrganizationSwitchDevicesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createDeviceLiveToolsPingSignalFull(OAIHttpRequestWorker *worker, OAICreateDeviceLiveToolsPing_201_response summary);
    void createDeviceLiveToolsPingDeviceSignalFull(OAIHttpRequestWorker *worker, OAICreateDeviceLiveToolsPing_201_response summary);
    void getDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCellularSimsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceClientsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceLiveToolsPingSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceLiveToolsPing_200_response summary);
    void getDeviceLiveToolsPingDeviceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceLiveToolsPing_200_response summary);
    void getDeviceLldpCdpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceLossAndLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDeviceCellularUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary);
    void getNetworkSmDeviceCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary);
    void getNetworkSmDeviceConnectivitySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary);
    void getNetworkSmDeviceDesktopLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceCommandLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmDeviceNetworkAdaptersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary);
    void getNetworkSmDevicePerformanceHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary);
    void getNetworkSmDeviceRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDeviceSecurityCentersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary);
    void getNetworkSmDeviceSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmDeviceWlanListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary);
    void getNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDevices_200_response_inner> summary);
    void getNetworkWirelessDevicesConnectionStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceWirelessConnectionStats_200_response> summary);
    void getNetworkWirelessDevicesLatencyStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationDevicesAvailabilitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesStatusesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary);
    void getOrganizationDevicesUplinksLossAndLatencySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary);
    void getOrganizationDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevices_200_response_inner> summary);
    void getOrganizationInventoryDeviceSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationInventoryDevices_200_response_inner summary);
    void getOrganizationInventoryDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void lockNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAICheckinNetworkSmDevices_200_response summary);
    void modifyNetworkSmDevicesTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary);
    void moveNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIMoveNetworkSmDevices_200_response summary);
    void rebootDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void refreshNetworkSmDeviceDetailsSignalFull(OAIHttpRequestWorker *worker);
    void removeNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCellularSimsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSmDevicesFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary);
    void vmxNetworkDevicesClaimSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void wipeNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIWipeNetworkSmDevices_200_response summary);

    Q_DECL_DEPRECATED_X("Use blinkDeviceLedsSignalError() instead")
    void blinkDeviceLedsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blinkDeviceLedsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkinNetworkSmDevicesSignalError() instead")
    void checkinNetworkSmDevicesSignalE(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkinNetworkSmDevicesSignalError(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalError() instead")
    void claimNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSwitchDevicesSignalError() instead")
    void cloneOrganizationSwitchDevicesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSwitchDevicesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingSignalError() instead")
    void createDeviceLiveToolsPingSignalE(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingSignalError(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingDeviceSignalError() instead")
    void createDeviceLiveToolsPingDeviceSignalE(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingDeviceSignalError(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSignalError() instead")
    void getDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularSimsSignalError() instead")
    void getDeviceCellularSimsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularSimsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceClientsSignalError() instead")
    void getDeviceClientsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceClientsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingSignalError() instead")
    void getDeviceLiveToolsPingSignalE(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingSignalError(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingDeviceSignalError() instead")
    void getDeviceLiveToolsPingDeviceSignalE(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingDeviceSignalError(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLldpCdpSignalError() instead")
    void getDeviceLldpCdpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLldpCdpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLossAndLatencyHistorySignalError() instead")
    void getDeviceLossAndLatencyHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLossAndLatencyHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceManagementInterfaceSignalError() instead")
    void getDeviceManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalError() instead")
    void getNetworkDevicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCellularUsageHistorySignalError() instead")
    void getNetworkSmDeviceCellularUsageHistorySignalE(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCellularUsageHistorySignalError(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCertsSignalError() instead")
    void getNetworkSmDeviceCertsSignalE(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCertsSignalError(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceConnectivitySignalError() instead")
    void getNetworkSmDeviceConnectivitySignalE(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceConnectivitySignalError(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDesktopLogsSignalError() instead")
    void getNetworkSmDeviceDesktopLogsSignalE(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDesktopLogsSignalError(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceCommandLogsSignalError() instead")
    void getNetworkSmDeviceDeviceCommandLogsSignalE(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceCommandLogsSignalError(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceProfilesSignalError() instead")
    void getNetworkSmDeviceDeviceProfilesSignalE(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceProfilesSignalError(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceNetworkAdaptersSignalError() instead")
    void getNetworkSmDeviceNetworkAdaptersSignalE(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceNetworkAdaptersSignalError(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicePerformanceHistorySignalError() instead")
    void getNetworkSmDevicePerformanceHistorySignalE(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicePerformanceHistorySignalError(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceRestrictionsSignalError() instead")
    void getNetworkSmDeviceRestrictionsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceRestrictionsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSecurityCentersSignalError() instead")
    void getNetworkSmDeviceSecurityCentersSignalE(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSecurityCentersSignalError(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSoftwaresSignalError() instead")
    void getNetworkSmDeviceSoftwaresSignalE(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSoftwaresSignalError(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceWlanListsSignalError() instead")
    void getNetworkSmDeviceWlanListsSignalE(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceWlanListsSignalError(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalError() instead")
    void getNetworkSmDevicesSignalE(QList<OAIGetNetworkSmDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalError(QList<OAIGetNetworkSmDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesConnectionStatsSignalError() instead")
    void getNetworkWirelessDevicesConnectionStatsSignalE(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesConnectionStatsSignalError(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesLatencyStatsSignalError() instead")
    void getNetworkWirelessDevicesLatencyStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesLatencyStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesAvailabilitiesSignalError() instead")
    void getOrganizationDevicesAvailabilitiesSignalE(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesAvailabilitiesSignalError(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalError() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalE(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalError(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalError() instead")
    void getOrganizationDevicesStatusesOverviewSignalE(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalError(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalError() instead")
    void getOrganizationDevicesStatusesSignalE(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalError(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksAddressesByDeviceSignalError() instead")
    void getOrganizationDevicesUplinksAddressesByDeviceSignalE(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalError(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksLossAndLatencySignalError() instead")
    void getOrganizationDevicesUplinksLossAndLatencySignalE(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksLossAndLatencySignalError(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalError() instead")
    void getOrganizationDevicesSignalE(QList<OAIGetOrganizationDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalError(QList<OAIGetOrganizationDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDeviceSignalError() instead")
    void getOrganizationInventoryDeviceSignalE(OAIGetOrganizationInventoryDevices_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDeviceSignalError(OAIGetOrganizationInventoryDevices_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDevicesSignalError() instead")
    void getOrganizationInventoryDevicesSignalE(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDevicesSignalError(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesByUsageSignalError() instead")
    void getOrganizationSummaryTopDevicesByUsageSignalE(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesByUsageSignalError(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesModelsByUsageSignalError() instead")
    void getOrganizationSummaryTopDevicesModelsByUsageSignalE(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalError(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalError() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalE(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalError(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalError() instead")
    void lockNetworkSmDevicesSignalE(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalError(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modifyNetworkSmDevicesTagsSignalError() instead")
    void modifyNetworkSmDevicesTagsSignalE(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modifyNetworkSmDevicesTagsSignalError(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNetworkSmDevicesSignalError() instead")
    void moveNetworkSmDevicesSignalE(OAIMoveNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNetworkSmDevicesSignalError(OAIMoveNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebootDeviceSignalError() instead")
    void rebootDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rebootDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalError() instead")
    void refreshNetworkSmDeviceDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDevicesSignalError() instead")
    void removeNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalError() instead")
    void unenrollNetworkSmDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSignalError() instead")
    void updateDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularSimsSignalError() instead")
    void updateDeviceCellularSimsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularSimsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceManagementInterfaceSignalError() instead")
    void updateDeviceManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesFieldsSignalError() instead")
    void updateNetworkSmDevicesFieldsSignalE(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesFieldsSignalError(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vmxNetworkDevicesClaimSignalError() instead")
    void vmxNetworkDevicesClaimSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vmxNetworkDevicesClaimSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDevicesSignalError() instead")
    void wipeNetworkSmDevicesSignalE(OAIWipeNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDevicesSignalError(OAIWipeNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use blinkDeviceLedsSignalErrorFull() instead")
    void blinkDeviceLedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blinkDeviceLedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkinNetworkSmDevicesSignalErrorFull() instead")
    void checkinNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkinNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalErrorFull() instead")
    void claimNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSwitchDevicesSignalErrorFull() instead")
    void cloneOrganizationSwitchDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSwitchDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingSignalErrorFull() instead")
    void createDeviceLiveToolsPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingDeviceSignalErrorFull() instead")
    void createDeviceLiveToolsPingDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSignalErrorFull() instead")
    void getDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularSimsSignalErrorFull() instead")
    void getDeviceCellularSimsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularSimsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceClientsSignalErrorFull() instead")
    void getDeviceClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingSignalErrorFull() instead")
    void getDeviceLiveToolsPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingDeviceSignalErrorFull() instead")
    void getDeviceLiveToolsPingDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLldpCdpSignalErrorFull() instead")
    void getDeviceLldpCdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLldpCdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLossAndLatencyHistorySignalErrorFull() instead")
    void getDeviceLossAndLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLossAndLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceManagementInterfaceSignalErrorFull() instead")
    void getDeviceManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalErrorFull() instead")
    void getNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCellularUsageHistorySignalErrorFull() instead")
    void getNetworkSmDeviceCellularUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCellularUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCertsSignalErrorFull() instead")
    void getNetworkSmDeviceCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceConnectivitySignalErrorFull() instead")
    void getNetworkSmDeviceConnectivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceConnectivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDesktopLogsSignalErrorFull() instead")
    void getNetworkSmDeviceDesktopLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDesktopLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceCommandLogsSignalErrorFull() instead")
    void getNetworkSmDeviceDeviceCommandLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceCommandLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmDeviceDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceNetworkAdaptersSignalErrorFull() instead")
    void getNetworkSmDeviceNetworkAdaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceNetworkAdaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicePerformanceHistorySignalErrorFull() instead")
    void getNetworkSmDevicePerformanceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicePerformanceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceRestrictionsSignalErrorFull() instead")
    void getNetworkSmDeviceRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSecurityCentersSignalErrorFull() instead")
    void getNetworkSmDeviceSecurityCentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSecurityCentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSoftwaresSignalErrorFull() instead")
    void getNetworkSmDeviceSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceWlanListsSignalErrorFull() instead")
    void getNetworkSmDeviceWlanListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceWlanListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalErrorFull() instead")
    void getNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessDevicesConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessDevicesLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesAvailabilitiesSignalErrorFull() instead")
    void getOrganizationDevicesAvailabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesAvailabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalErrorFull() instead")
    void getOrganizationDevicesStatusesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalErrorFull() instead")
    void getOrganizationDevicesStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksAddressesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesUplinksAddressesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksLossAndLatencySignalErrorFull() instead")
    void getOrganizationDevicesUplinksLossAndLatencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksLossAndLatencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalErrorFull() instead")
    void getOrganizationDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDeviceSignalErrorFull() instead")
    void getOrganizationInventoryDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDevicesSignalErrorFull() instead")
    void getOrganizationInventoryDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopDevicesByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesModelsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopDevicesModelsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalErrorFull() instead")
    void lockNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modifyNetworkSmDevicesTagsSignalErrorFull() instead")
    void modifyNetworkSmDevicesTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modifyNetworkSmDevicesTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNetworkSmDevicesSignalErrorFull() instead")
    void moveNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebootDeviceSignalErrorFull() instead")
    void rebootDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rebootDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalErrorFull() instead")
    void refreshNetworkSmDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDevicesSignalErrorFull() instead")
    void removeNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalErrorFull() instead")
    void unenrollNetworkSmDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSignalErrorFull() instead")
    void updateDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularSimsSignalErrorFull() instead")
    void updateDeviceCellularSimsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularSimsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceManagementInterfaceSignalErrorFull() instead")
    void updateDeviceManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesFieldsSignalErrorFull() instead")
    void updateNetworkSmDevicesFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vmxNetworkDevicesClaimSignalErrorFull() instead")
    void vmxNetworkDevicesClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vmxNetworkDevicesClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDevicesSignalErrorFull() instead")
    void wipeNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
