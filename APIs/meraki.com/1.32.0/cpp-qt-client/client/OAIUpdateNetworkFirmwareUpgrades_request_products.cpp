/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkFirmwareUpgrades_request_products.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkFirmwareUpgrades_request_products::OAIUpdateNetworkFirmwareUpgrades_request_products(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkFirmwareUpgrades_request_products::OAIUpdateNetworkFirmwareUpgrades_request_products() {
    this->initializeModel();
}

OAIUpdateNetworkFirmwareUpgrades_request_products::~OAIUpdateNetworkFirmwareUpgrades_request_products() {}

void OAIUpdateNetworkFirmwareUpgrades_request_products::initializeModel() {

    m_appliance_isSet = false;
    m_appliance_isValid = false;

    m_camera_isSet = false;
    m_camera_isValid = false;

    m_cellular_gateway_isSet = false;
    m_cellular_gateway_isValid = false;

    m_sensor_isSet = false;
    m_sensor_isValid = false;

    m_r_switch_isSet = false;
    m_r_switch_isValid = false;

    m_wireless_isSet = false;
    m_wireless_isValid = false;
}

void OAIUpdateNetworkFirmwareUpgrades_request_products::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkFirmwareUpgrades_request_products::fromJsonObject(QJsonObject json) {

    m_appliance_isValid = ::OpenAPI::fromJsonValue(m_appliance, json[QString("appliance")]);
    m_appliance_isSet = !json[QString("appliance")].isNull() && m_appliance_isValid;

    m_camera_isValid = ::OpenAPI::fromJsonValue(m_camera, json[QString("camera")]);
    m_camera_isSet = !json[QString("camera")].isNull() && m_camera_isValid;

    m_cellular_gateway_isValid = ::OpenAPI::fromJsonValue(m_cellular_gateway, json[QString("cellularGateway")]);
    m_cellular_gateway_isSet = !json[QString("cellularGateway")].isNull() && m_cellular_gateway_isValid;

    m_sensor_isValid = ::OpenAPI::fromJsonValue(m_sensor, json[QString("sensor")]);
    m_sensor_isSet = !json[QString("sensor")].isNull() && m_sensor_isValid;

    m_r_switch_isValid = ::OpenAPI::fromJsonValue(m_r_switch, json[QString("switch")]);
    m_r_switch_isSet = !json[QString("switch")].isNull() && m_r_switch_isValid;

    m_wireless_isValid = ::OpenAPI::fromJsonValue(m_wireless, json[QString("wireless")]);
    m_wireless_isSet = !json[QString("wireless")].isNull() && m_wireless_isValid;
}

QString OAIUpdateNetworkFirmwareUpgrades_request_products::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkFirmwareUpgrades_request_products::asJsonObject() const {
    QJsonObject obj;
    if (m_appliance.isSet()) {
        obj.insert(QString("appliance"), ::OpenAPI::toJsonValue(m_appliance));
    }
    if (m_camera.isSet()) {
        obj.insert(QString("camera"), ::OpenAPI::toJsonValue(m_camera));
    }
    if (m_cellular_gateway.isSet()) {
        obj.insert(QString("cellularGateway"), ::OpenAPI::toJsonValue(m_cellular_gateway));
    }
    if (m_sensor.isSet()) {
        obj.insert(QString("sensor"), ::OpenAPI::toJsonValue(m_sensor));
    }
    if (m_r_switch.isSet()) {
        obj.insert(QString("switch"), ::OpenAPI::toJsonValue(m_r_switch));
    }
    if (m_wireless.isSet()) {
        obj.insert(QString("wireless"), ::OpenAPI::toJsonValue(m_wireless));
    }
    return obj;
}

OAIUpdateNetworkFirmwareUpgrades_request_products_appliance OAIUpdateNetworkFirmwareUpgrades_request_products::getAppliance() const {
    return m_appliance;
}
void OAIUpdateNetworkFirmwareUpgrades_request_products::setAppliance(const OAIUpdateNetworkFirmwareUpgrades_request_products_appliance &appliance) {
    m_appliance = appliance;
    m_appliance_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_appliance_Set() const{
    return m_appliance_isSet;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_appliance_Valid() const{
    return m_appliance_isValid;
}

OAIUpdateNetworkFirmwareUpgrades_request_products_appliance OAIUpdateNetworkFirmwareUpgrades_request_products::getCamera() const {
    return m_camera;
}
void OAIUpdateNetworkFirmwareUpgrades_request_products::setCamera(const OAIUpdateNetworkFirmwareUpgrades_request_products_appliance &camera) {
    m_camera = camera;
    m_camera_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_camera_Set() const{
    return m_camera_isSet;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_camera_Valid() const{
    return m_camera_isValid;
}

OAIUpdateNetworkFirmwareUpgrades_request_products_appliance OAIUpdateNetworkFirmwareUpgrades_request_products::getCellularGateway() const {
    return m_cellular_gateway;
}
void OAIUpdateNetworkFirmwareUpgrades_request_products::setCellularGateway(const OAIUpdateNetworkFirmwareUpgrades_request_products_appliance &cellular_gateway) {
    m_cellular_gateway = cellular_gateway;
    m_cellular_gateway_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_cellular_gateway_Set() const{
    return m_cellular_gateway_isSet;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_cellular_gateway_Valid() const{
    return m_cellular_gateway_isValid;
}

OAIUpdateNetworkFirmwareUpgrades_request_products_appliance OAIUpdateNetworkFirmwareUpgrades_request_products::getSensor() const {
    return m_sensor;
}
void OAIUpdateNetworkFirmwareUpgrades_request_products::setSensor(const OAIUpdateNetworkFirmwareUpgrades_request_products_appliance &sensor) {
    m_sensor = sensor;
    m_sensor_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_sensor_Set() const{
    return m_sensor_isSet;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_sensor_Valid() const{
    return m_sensor_isValid;
}

OAIUpdateNetworkFirmwareUpgrades_request_products_appliance OAIUpdateNetworkFirmwareUpgrades_request_products::getRSwitch() const {
    return m_r_switch;
}
void OAIUpdateNetworkFirmwareUpgrades_request_products::setRSwitch(const OAIUpdateNetworkFirmwareUpgrades_request_products_appliance &r_switch) {
    m_r_switch = r_switch;
    m_r_switch_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_r_switch_Set() const{
    return m_r_switch_isSet;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_r_switch_Valid() const{
    return m_r_switch_isValid;
}

OAIUpdateNetworkFirmwareUpgrades_request_products_appliance OAIUpdateNetworkFirmwareUpgrades_request_products::getWireless() const {
    return m_wireless;
}
void OAIUpdateNetworkFirmwareUpgrades_request_products::setWireless(const OAIUpdateNetworkFirmwareUpgrades_request_products_appliance &wireless) {
    m_wireless = wireless;
    m_wireless_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_wireless_Set() const{
    return m_wireless_isSet;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::is_wireless_Valid() const{
    return m_wireless_isValid;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cellular_gateway.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_switch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkFirmwareUpgrades_request_products::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
