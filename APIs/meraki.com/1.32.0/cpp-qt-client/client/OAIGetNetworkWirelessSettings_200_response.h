/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkWirelessSettings_200_response.h
 *
 * 
 */

#ifndef OAIGetNetworkWirelessSettings_200_response_H
#define OAIGetNetworkWirelessSettings_200_response_H

#include <QJsonObject>

#include "OAIGetNetworkWirelessSettings_200_response_namedVlans.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkWirelessSettings_200_response_namedVlans;

class OAIGetNetworkWirelessSettings_200_response : public OAIObject {
public:
    OAIGetNetworkWirelessSettings_200_response();
    OAIGetNetworkWirelessSettings_200_response(QString json);
    ~OAIGetNetworkWirelessSettings_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIpv6BridgeEnabled() const;
    void setIpv6BridgeEnabled(const bool &ipv6_bridge_enabled);
    bool is_ipv6_bridge_enabled_Set() const;
    bool is_ipv6_bridge_enabled_Valid() const;

    bool isLedLightsOn() const;
    void setLedLightsOn(const bool &led_lights_on);
    bool is_led_lights_on_Set() const;
    bool is_led_lights_on_Valid() const;

    bool isLocationAnalyticsEnabled() const;
    void setLocationAnalyticsEnabled(const bool &location_analytics_enabled);
    bool is_location_analytics_enabled_Set() const;
    bool is_location_analytics_enabled_Valid() const;

    bool isMeshingEnabled() const;
    void setMeshingEnabled(const bool &meshing_enabled);
    bool is_meshing_enabled_Set() const;
    bool is_meshing_enabled_Valid() const;

    OAIGetNetworkWirelessSettings_200_response_namedVlans getNamedVlans() const;
    void setNamedVlans(const OAIGetNetworkWirelessSettings_200_response_namedVlans &named_vlans);
    bool is_named_vlans_Set() const;
    bool is_named_vlans_Valid() const;

    QString getUpgradeStrategy() const;
    void setUpgradeStrategy(const QString &upgrade_strategy);
    bool is_upgrade_strategy_Set() const;
    bool is_upgrade_strategy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_ipv6_bridge_enabled;
    bool m_ipv6_bridge_enabled_isSet;
    bool m_ipv6_bridge_enabled_isValid;

    bool m_led_lights_on;
    bool m_led_lights_on_isSet;
    bool m_led_lights_on_isValid;

    bool m_location_analytics_enabled;
    bool m_location_analytics_enabled_isSet;
    bool m_location_analytics_enabled_isValid;

    bool m_meshing_enabled;
    bool m_meshing_enabled_isSet;
    bool m_meshing_enabled_isValid;

    OAIGetNetworkWirelessSettings_200_response_namedVlans m_named_vlans;
    bool m_named_vlans_isSet;
    bool m_named_vlans_isValid;

    QString m_upgrade_strategy;
    bool m_upgrade_strategy_isSet;
    bool m_upgrade_strategy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkWirelessSettings_200_response)

#endif // OAIGetNetworkWirelessSettings_200_response_H
