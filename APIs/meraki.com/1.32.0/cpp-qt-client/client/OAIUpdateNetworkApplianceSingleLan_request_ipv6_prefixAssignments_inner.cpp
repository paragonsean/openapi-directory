/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::~OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner() {}

void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::initializeModel() {

    m_autonomous_isSet = false;
    m_autonomous_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_static_appliance_ip6_isSet = false;
    m_static_appliance_ip6_isValid = false;

    m_static_prefix_isSet = false;
    m_static_prefix_isValid = false;
}

void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::fromJsonObject(QJsonObject json) {

    m_autonomous_isValid = ::OpenAPI::fromJsonValue(m_autonomous, json[QString("autonomous")]);
    m_autonomous_isSet = !json[QString("autonomous")].isNull() && m_autonomous_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_static_appliance_ip6_isValid = ::OpenAPI::fromJsonValue(m_static_appliance_ip6, json[QString("staticApplianceIp6")]);
    m_static_appliance_ip6_isSet = !json[QString("staticApplianceIp6")].isNull() && m_static_appliance_ip6_isValid;

    m_static_prefix_isValid = ::OpenAPI::fromJsonValue(m_static_prefix, json[QString("staticPrefix")]);
    m_static_prefix_isSet = !json[QString("staticPrefix")].isNull() && m_static_prefix_isValid;
}

QString OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_autonomous_isSet) {
        obj.insert(QString("autonomous"), ::OpenAPI::toJsonValue(m_autonomous));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_static_appliance_ip6_isSet) {
        obj.insert(QString("staticApplianceIp6"), ::OpenAPI::toJsonValue(m_static_appliance_ip6));
    }
    if (m_static_prefix_isSet) {
        obj.insert(QString("staticPrefix"), ::OpenAPI::toJsonValue(m_static_prefix));
    }
    return obj;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::isAutonomous() const {
    return m_autonomous;
}
void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::setAutonomous(const bool &autonomous) {
    m_autonomous = autonomous;
    m_autonomous_isSet = true;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_autonomous_Set() const{
    return m_autonomous_isSet;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_autonomous_Valid() const{
    return m_autonomous_isValid;
}

OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner_origin OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::getOrigin() const {
    return m_origin;
}
void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::setOrigin(const OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner_origin &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::getStaticApplianceIp6() const {
    return m_static_appliance_ip6;
}
void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::setStaticApplianceIp6(const QString &static_appliance_ip6) {
    m_static_appliance_ip6 = static_appliance_ip6;
    m_static_appliance_ip6_isSet = true;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_static_appliance_ip6_Set() const{
    return m_static_appliance_ip6_isSet;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_static_appliance_ip6_Valid() const{
    return m_static_appliance_ip6_isValid;
}

QString OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::getStaticPrefix() const {
    return m_static_prefix;
}
void OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::setStaticPrefix(const QString &static_prefix) {
    m_static_prefix = static_prefix;
    m_static_prefix_isSet = true;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_static_prefix_Set() const{
    return m_static_prefix_isSet;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::is_static_prefix_Valid() const{
    return m_static_prefix_isValid;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autonomous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_appliance_ip6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceSingleLan_request_ipv6_prefixAssignments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
