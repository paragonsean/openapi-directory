/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner() {
    this->initializeModel();
}

OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::~OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner() {}

void OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::initializeModel() {

    m_link_negotiation_isSet = false;
    m_link_negotiation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_poe_isSet = false;
    m_poe_isValid = false;
}

void OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::fromJsonObject(QJsonObject json) {

    m_link_negotiation_isValid = ::OpenAPI::fromJsonValue(m_link_negotiation, json[QString("linkNegotiation")]);
    m_link_negotiation_isSet = !json[QString("linkNegotiation")].isNull() && m_link_negotiation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_poe_isValid = ::OpenAPI::fromJsonValue(m_poe, json[QString("poe")]);
    m_poe_isSet = !json[QString("poe")].isNull() && m_poe_isValid;
}

QString OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_link_negotiation.isSet()) {
        obj.insert(QString("linkNegotiation"), ::OpenAPI::toJsonValue(m_link_negotiation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_poe.isSet()) {
        obj.insert(QString("poe"), ::OpenAPI::toJsonValue(m_poe));
    }
    return obj;
}

OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner_linkNegotiation OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::getLinkNegotiation() const {
    return m_link_negotiation;
}
void OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::setLinkNegotiation(const OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner_linkNegotiation &link_negotiation) {
    m_link_negotiation = link_negotiation;
    m_link_negotiation_isSet = true;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::is_link_negotiation_Set() const{
    return m_link_negotiation_isSet;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::is_link_negotiation_Valid() const{
    return m_link_negotiation_isValid;
}

QString OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::getName() const {
    return m_name;
}
void OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner_poe OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::getPoe() const {
    return m_poe;
}
void OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::setPoe(const OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner_poe &poe) {
    m_poe = poe;
    m_poe_isSet = true;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::is_poe_Set() const{
    return m_poe_isSet;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::is_poe_Valid() const{
    return m_poe_isValid;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_negotiation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poe.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner_ports_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
