/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner() {
    this->initializeModel();
}

OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::~OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner() {}

void OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::getHost() const {
    return m_host;
}
void OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::is_host_Set() const{
    return m_host_isSet;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::getPort() const {
    return m_port;
}
void OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::getSecret() const {
    return m_secret;
}
void OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && m_port_isValid && m_secret_isValid && true;
}

} // namespace OpenAPI
