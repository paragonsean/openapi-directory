/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStacksApi_H
#define OAI_OAIStacksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddNetworkSwitchStack_request.h"
#include "OAICreateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAICreateNetworkSwitchStackRoutingInterface_request.h"
#include "OAICreateNetworkSwitchStack_request.h"
#include "OAIGetNetworkSwitchStack_200_response.h"
#include "OAIObject.h"
#include "OAIRemoveNetworkSwitchStack_request.h"
#include "OAIUpdateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterface_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStacksApi : public QObject {
    Q_OBJECT

public:
    OAIStacksApi(const int timeOut = 0);
    ~OAIStacksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_add_network_switch_stack_request OAIAddNetworkSwitchStack_request [required]
    */
    virtual void addNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id, const OAIAddNetworkSwitchStack_request &oai_add_network_switch_stack_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_network_switch_stack_routing_interface_request OAICreateNetworkSwitchStackRoutingInterface_request [required]
    */
    virtual void createNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const OAICreateNetworkSwitchStackRoutingInterface_request &oai_create_network_switch_stack_routing_interface_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_stack_request OAICreateNetworkSwitchStack_request [required]
    */
    virtual void createNetworkSwitchStack(const QString &network_id, const OAICreateNetworkSwitchStack_request &oai_create_network_switch_stack_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void deleteNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaces(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoutes(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStacks(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_remove_network_switch_stack_request OAIRemoveNetworkSwitchStack_request [required]
    */
    virtual void removeNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id, const OAIRemoveNetworkSwitchStack_request &oai_remove_network_switch_stack_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_dhcp_request OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request> &oai_update_network_switch_stack_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_request OAIUpdateNetworkSwitchStackRoutingInterface_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request> &oai_update_network_switch_stack_routing_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStacksCallback(OAIHttpRequestWorker *worker);
    void removeNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addNetworkSwitchStackSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void createNetworkSwitchStackSignal(OAIObject summary);
    void deleteNetworkSwitchStackRoutingInterfaceSignal();
    void deleteNetworkSwitchStackRoutingStaticRouteSignal();
    void deleteNetworkSwitchStackSignal();
    void getNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackSignal(OAIGetNetworkSwitchStack_200_response summary);
    void getNetworkSwitchStacksSignal(QList<OAIObject> summary);
    void removeNetworkSwitchStackSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);


    void addNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchStack_200_response summary);
    void getNetworkSwitchStacksSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void removeNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use addNetworkSwitchStackSignalError() instead")
    void addNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackSignalError() instead")
    void createNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackSignalError() instead")
    void deleteNetworkSwitchStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalError() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackSignalError() instead")
    void getNetworkSwitchStackSignalE(OAIGetNetworkSwitchStack_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackSignalError(OAIGetNetworkSwitchStack_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStacksSignalError() instead")
    void getNetworkSwitchStacksSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStacksSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkSwitchStackSignalError() instead")
    void removeNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addNetworkSwitchStackSignalErrorFull() instead")
    void addNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackSignalErrorFull() instead")
    void createNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackSignalErrorFull() instead")
    void deleteNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackSignalErrorFull() instead")
    void getNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStacksSignalErrorFull() instead")
    void getNetworkSwitchStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkSwitchStackSignalErrorFull() instead")
    void removeNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
