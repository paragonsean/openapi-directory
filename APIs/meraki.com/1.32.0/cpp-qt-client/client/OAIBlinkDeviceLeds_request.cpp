/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlinkDeviceLeds_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlinkDeviceLeds_request::OAIBlinkDeviceLeds_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlinkDeviceLeds_request::OAIBlinkDeviceLeds_request() {
    this->initializeModel();
}

OAIBlinkDeviceLeds_request::~OAIBlinkDeviceLeds_request() {}

void OAIBlinkDeviceLeds_request::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duty_isSet = false;
    m_duty_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;
}

void OAIBlinkDeviceLeds_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlinkDeviceLeds_request::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_duty_isValid = ::OpenAPI::fromJsonValue(m_duty, json[QString("duty")]);
    m_duty_isSet = !json[QString("duty")].isNull() && m_duty_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;
}

QString OAIBlinkDeviceLeds_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlinkDeviceLeds_request::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duty_isSet) {
        obj.insert(QString("duty"), ::OpenAPI::toJsonValue(m_duty));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    return obj;
}

qint32 OAIBlinkDeviceLeds_request::getDuration() const {
    return m_duration;
}
void OAIBlinkDeviceLeds_request::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIBlinkDeviceLeds_request::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIBlinkDeviceLeds_request::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIBlinkDeviceLeds_request::getDuty() const {
    return m_duty;
}
void OAIBlinkDeviceLeds_request::setDuty(const qint32 &duty) {
    m_duty = duty;
    m_duty_isSet = true;
}

bool OAIBlinkDeviceLeds_request::is_duty_Set() const{
    return m_duty_isSet;
}

bool OAIBlinkDeviceLeds_request::is_duty_Valid() const{
    return m_duty_isValid;
}

qint32 OAIBlinkDeviceLeds_request::getPeriod() const {
    return m_period;
}
void OAIBlinkDeviceLeds_request::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIBlinkDeviceLeds_request::is_period_Set() const{
    return m_period_isSet;
}

bool OAIBlinkDeviceLeds_request::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIBlinkDeviceLeds_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlinkDeviceLeds_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
