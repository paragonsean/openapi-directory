/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade() {
    this->initializeModel();
}

OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::~OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade() {}

void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::initializeModel() {

    m_from_version_isSet = false;
    m_from_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_staged_isSet = false;
    m_staged_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_to_version_isSet = false;
    m_to_version_isValid = false;

    m_upgrade_batch_id_isSet = false;
    m_upgrade_batch_id_isValid = false;
}

void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::fromJsonObject(QJsonObject json) {

    m_from_version_isValid = ::OpenAPI::fromJsonValue(m_from_version, json[QString("fromVersion")]);
    m_from_version_isSet = !json[QString("fromVersion")].isNull() && m_from_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_staged_isValid = ::OpenAPI::fromJsonValue(m_staged, json[QString("staged")]);
    m_staged_isSet = !json[QString("staged")].isNull() && m_staged_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_to_version_isValid = ::OpenAPI::fromJsonValue(m_to_version, json[QString("toVersion")]);
    m_to_version_isSet = !json[QString("toVersion")].isNull() && m_to_version_isValid;

    m_upgrade_batch_id_isValid = ::OpenAPI::fromJsonValue(m_upgrade_batch_id, json[QString("upgradeBatchId")]);
    m_upgrade_batch_id_isSet = !json[QString("upgradeBatchId")].isNull() && m_upgrade_batch_id_isValid;
}

QString OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::asJsonObject() const {
    QJsonObject obj;
    if (m_from_version.isSet()) {
        obj.insert(QString("fromVersion"), ::OpenAPI::toJsonValue(m_from_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_staged.isSet()) {
        obj.insert(QString("staged"), ::OpenAPI::toJsonValue(m_staged));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_to_version.isSet()) {
        obj.insert(QString("toVersion"), ::OpenAPI::toJsonValue(m_to_version));
    }
    if (m_upgrade_batch_id_isSet) {
        obj.insert(QString("upgradeBatchId"), ::OpenAPI::toJsonValue(m_upgrade_batch_id));
    }
    return obj;
}

OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade_fromVersion OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getFromVersion() const {
    return m_from_version;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setFromVersion(const OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade_fromVersion &from_version) {
    m_from_version = from_version;
    m_from_version_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_from_version_Set() const{
    return m_from_version_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_from_version_Valid() const{
    return m_from_version_isValid;
}

QString OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getId() const {
    return m_id;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_id_Valid() const{
    return m_id_isValid;
}

OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade_staged OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getStaged() const {
    return m_staged;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setStaged(const OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade_staged &staged) {
    m_staged = staged;
    m_staged_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_staged_Set() const{
    return m_staged_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_staged_Valid() const{
    return m_staged_isValid;
}

QString OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getStatus() const {
    return m_status;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getTime() const {
    return m_time;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_time_Valid() const{
    return m_time_isValid;
}

OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade_toVersion OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getToVersion() const {
    return m_to_version;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setToVersion(const OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade_toVersion &to_version) {
    m_to_version = to_version;
    m_to_version_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_to_version_Set() const{
    return m_to_version_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_to_version_Valid() const{
    return m_to_version_isValid;
}

QString OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::getUpgradeBatchId() const {
    return m_upgrade_batch_id;
}
void OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::setUpgradeBatchId(const QString &upgrade_batch_id) {
    m_upgrade_batch_id = upgrade_batch_id;
    m_upgrade_batch_id_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_upgrade_batch_id_Set() const{
    return m_upgrade_batch_id_isSet;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::is_upgrade_batch_id_Valid() const{
    return m_upgrade_batch_id_isValid;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staged.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner_upgrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
