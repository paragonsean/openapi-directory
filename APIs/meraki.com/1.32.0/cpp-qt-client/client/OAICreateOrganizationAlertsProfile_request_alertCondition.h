/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateOrganizationAlertsProfile_request_alertCondition.h
 *
 * The conditions that determine if the alert triggers
 */

#ifndef OAICreateOrganizationAlertsProfile_request_alertCondition_H
#define OAICreateOrganizationAlertsProfile_request_alertCondition_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateOrganizationAlertsProfile_request_alertCondition : public OAIObject {
public:
    OAICreateOrganizationAlertsProfile_request_alertCondition();
    OAICreateOrganizationAlertsProfile_request_alertCondition(QString json);
    ~OAICreateOrganizationAlertsProfile_request_alertCondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBitRateBps() const;
    void setBitRateBps(const qint32 &bit_rate_bps);
    bool is_bit_rate_bps_Set() const;
    bool is_bit_rate_bps_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getInterface() const;
    void setInterface(const QString &interface);
    bool is_interface_Set() const;
    bool is_interface_Valid() const;

    qint32 getJitterMs() const;
    void setJitterMs(const qint32 &jitter_ms);
    bool is_jitter_ms_Set() const;
    bool is_jitter_ms_Valid() const;

    qint32 getLatencyMs() const;
    void setLatencyMs(const qint32 &latency_ms);
    bool is_latency_ms_Set() const;
    bool is_latency_ms_Valid() const;

    float getLossRatio() const;
    void setLossRatio(const float &loss_ratio);
    bool is_loss_ratio_Set() const;
    bool is_loss_ratio_Valid() const;

    float getMos() const;
    void setMos(const float &mos);
    bool is_mos_Set() const;
    bool is_mos_Valid() const;

    qint32 getWindow() const;
    void setWindow(const qint32 &window);
    bool is_window_Set() const;
    bool is_window_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bit_rate_bps;
    bool m_bit_rate_bps_isSet;
    bool m_bit_rate_bps_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_interface;
    bool m_interface_isSet;
    bool m_interface_isValid;

    qint32 m_jitter_ms;
    bool m_jitter_ms_isSet;
    bool m_jitter_ms_isValid;

    qint32 m_latency_ms;
    bool m_latency_ms_isSet;
    bool m_latency_ms_isValid;

    float m_loss_ratio;
    bool m_loss_ratio_isSet;
    bool m_loss_ratio_isValid;

    float m_mos;
    bool m_mos_isSet;
    bool m_mos_isValid;

    qint32 m_window;
    bool m_window_isSet;
    bool m_window_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateOrganizationAlertsProfile_request_alertCondition)

#endif // OAICreateOrganizationAlertsProfile_request_alertCondition_H
