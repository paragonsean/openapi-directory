/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkGroupPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkGroupPolicy_request::OAICreateNetworkGroupPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkGroupPolicy_request::OAICreateNetworkGroupPolicy_request() {
    this->initializeModel();
}

OAICreateNetworkGroupPolicy_request::~OAICreateNetworkGroupPolicy_request() {}

void OAICreateNetworkGroupPolicy_request::initializeModel() {

    m_bandwidth_isSet = false;
    m_bandwidth_isValid = false;

    m_bonjour_forwarding_isSet = false;
    m_bonjour_forwarding_isValid = false;

    m_content_filtering_isSet = false;
    m_content_filtering_isValid = false;

    m_firewall_and_traffic_shaping_isSet = false;
    m_firewall_and_traffic_shaping_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scheduling_isSet = false;
    m_scheduling_isValid = false;

    m_splash_auth_settings_isSet = false;
    m_splash_auth_settings_isValid = false;

    m_vlan_tagging_isSet = false;
    m_vlan_tagging_isValid = false;
}

void OAICreateNetworkGroupPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkGroupPolicy_request::fromJsonObject(QJsonObject json) {

    m_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_bandwidth, json[QString("bandwidth")]);
    m_bandwidth_isSet = !json[QString("bandwidth")].isNull() && m_bandwidth_isValid;

    m_bonjour_forwarding_isValid = ::OpenAPI::fromJsonValue(m_bonjour_forwarding, json[QString("bonjourForwarding")]);
    m_bonjour_forwarding_isSet = !json[QString("bonjourForwarding")].isNull() && m_bonjour_forwarding_isValid;

    m_content_filtering_isValid = ::OpenAPI::fromJsonValue(m_content_filtering, json[QString("contentFiltering")]);
    m_content_filtering_isSet = !json[QString("contentFiltering")].isNull() && m_content_filtering_isValid;

    m_firewall_and_traffic_shaping_isValid = ::OpenAPI::fromJsonValue(m_firewall_and_traffic_shaping, json[QString("firewallAndTrafficShaping")]);
    m_firewall_and_traffic_shaping_isSet = !json[QString("firewallAndTrafficShaping")].isNull() && m_firewall_and_traffic_shaping_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scheduling_isValid = ::OpenAPI::fromJsonValue(m_scheduling, json[QString("scheduling")]);
    m_scheduling_isSet = !json[QString("scheduling")].isNull() && m_scheduling_isValid;

    m_splash_auth_settings_isValid = ::OpenAPI::fromJsonValue(m_splash_auth_settings, json[QString("splashAuthSettings")]);
    m_splash_auth_settings_isSet = !json[QString("splashAuthSettings")].isNull() && m_splash_auth_settings_isValid;

    m_vlan_tagging_isValid = ::OpenAPI::fromJsonValue(m_vlan_tagging, json[QString("vlanTagging")]);
    m_vlan_tagging_isSet = !json[QString("vlanTagging")].isNull() && m_vlan_tagging_isValid;
}

QString OAICreateNetworkGroupPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkGroupPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth.isSet()) {
        obj.insert(QString("bandwidth"), ::OpenAPI::toJsonValue(m_bandwidth));
    }
    if (m_bonjour_forwarding.isSet()) {
        obj.insert(QString("bonjourForwarding"), ::OpenAPI::toJsonValue(m_bonjour_forwarding));
    }
    if (m_content_filtering.isSet()) {
        obj.insert(QString("contentFiltering"), ::OpenAPI::toJsonValue(m_content_filtering));
    }
    if (m_firewall_and_traffic_shaping.isSet()) {
        obj.insert(QString("firewallAndTrafficShaping"), ::OpenAPI::toJsonValue(m_firewall_and_traffic_shaping));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scheduling.isSet()) {
        obj.insert(QString("scheduling"), ::OpenAPI::toJsonValue(m_scheduling));
    }
    if (m_splash_auth_settings_isSet) {
        obj.insert(QString("splashAuthSettings"), ::OpenAPI::toJsonValue(m_splash_auth_settings));
    }
    if (m_vlan_tagging.isSet()) {
        obj.insert(QString("vlanTagging"), ::OpenAPI::toJsonValue(m_vlan_tagging));
    }
    return obj;
}

OAICreateNetworkGroupPolicy_request_bandwidth OAICreateNetworkGroupPolicy_request::getBandwidth() const {
    return m_bandwidth;
}
void OAICreateNetworkGroupPolicy_request::setBandwidth(const OAICreateNetworkGroupPolicy_request_bandwidth &bandwidth) {
    m_bandwidth = bandwidth;
    m_bandwidth_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_bandwidth_Set() const{
    return m_bandwidth_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_bandwidth_Valid() const{
    return m_bandwidth_isValid;
}

OAICreateNetworkGroupPolicy_request_bonjourForwarding OAICreateNetworkGroupPolicy_request::getBonjourForwarding() const {
    return m_bonjour_forwarding;
}
void OAICreateNetworkGroupPolicy_request::setBonjourForwarding(const OAICreateNetworkGroupPolicy_request_bonjourForwarding &bonjour_forwarding) {
    m_bonjour_forwarding = bonjour_forwarding;
    m_bonjour_forwarding_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_bonjour_forwarding_Set() const{
    return m_bonjour_forwarding_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_bonjour_forwarding_Valid() const{
    return m_bonjour_forwarding_isValid;
}

OAICreateNetworkGroupPolicy_request_contentFiltering OAICreateNetworkGroupPolicy_request::getContentFiltering() const {
    return m_content_filtering;
}
void OAICreateNetworkGroupPolicy_request::setContentFiltering(const OAICreateNetworkGroupPolicy_request_contentFiltering &content_filtering) {
    m_content_filtering = content_filtering;
    m_content_filtering_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_content_filtering_Set() const{
    return m_content_filtering_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_content_filtering_Valid() const{
    return m_content_filtering_isValid;
}

OAICreateNetworkGroupPolicy_request_firewallAndTrafficShaping OAICreateNetworkGroupPolicy_request::getFirewallAndTrafficShaping() const {
    return m_firewall_and_traffic_shaping;
}
void OAICreateNetworkGroupPolicy_request::setFirewallAndTrafficShaping(const OAICreateNetworkGroupPolicy_request_firewallAndTrafficShaping &firewall_and_traffic_shaping) {
    m_firewall_and_traffic_shaping = firewall_and_traffic_shaping;
    m_firewall_and_traffic_shaping_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_firewall_and_traffic_shaping_Set() const{
    return m_firewall_and_traffic_shaping_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_firewall_and_traffic_shaping_Valid() const{
    return m_firewall_and_traffic_shaping_isValid;
}

QString OAICreateNetworkGroupPolicy_request::getName() const {
    return m_name;
}
void OAICreateNetworkGroupPolicy_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateNetworkGroupPolicy_request_scheduling OAICreateNetworkGroupPolicy_request::getScheduling() const {
    return m_scheduling;
}
void OAICreateNetworkGroupPolicy_request::setScheduling(const OAICreateNetworkGroupPolicy_request_scheduling &scheduling) {
    m_scheduling = scheduling;
    m_scheduling_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_scheduling_Set() const{
    return m_scheduling_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_scheduling_Valid() const{
    return m_scheduling_isValid;
}

QString OAICreateNetworkGroupPolicy_request::getSplashAuthSettings() const {
    return m_splash_auth_settings;
}
void OAICreateNetworkGroupPolicy_request::setSplashAuthSettings(const QString &splash_auth_settings) {
    m_splash_auth_settings = splash_auth_settings;
    m_splash_auth_settings_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_splash_auth_settings_Set() const{
    return m_splash_auth_settings_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_splash_auth_settings_Valid() const{
    return m_splash_auth_settings_isValid;
}

OAICreateNetworkGroupPolicy_request_vlanTagging OAICreateNetworkGroupPolicy_request::getVlanTagging() const {
    return m_vlan_tagging;
}
void OAICreateNetworkGroupPolicy_request::setVlanTagging(const OAICreateNetworkGroupPolicy_request_vlanTagging &vlan_tagging) {
    m_vlan_tagging = vlan_tagging;
    m_vlan_tagging_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request::is_vlan_tagging_Set() const{
    return m_vlan_tagging_isSet;
}

bool OAICreateNetworkGroupPolicy_request::is_vlan_tagging_Valid() const{
    return m_vlan_tagging_isValid;
}

bool OAICreateNetworkGroupPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bonjour_forwarding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_filtering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_and_traffic_shaping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_auth_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkGroupPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
