/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDeviceCerts_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDeviceCerts_200_response_inner::OAIGetNetworkSmDeviceCerts_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDeviceCerts_200_response_inner::OAIGetNetworkSmDeviceCerts_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDeviceCerts_200_response_inner::~OAIGetNetworkSmDeviceCerts_200_response_inner() {}

void OAIGetNetworkSmDeviceCerts_200_response_inner::initializeModel() {

    m_cert_pem_isSet = false;
    m_cert_pem_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_not_valid_after_isSet = false;
    m_not_valid_after_isValid = false;

    m_not_valid_before_isSet = false;
    m_not_valid_before_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIGetNetworkSmDeviceCerts_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDeviceCerts_200_response_inner::fromJsonObject(QJsonObject json) {

    m_cert_pem_isValid = ::OpenAPI::fromJsonValue(m_cert_pem, json[QString("certPem")]);
    m_cert_pem_isSet = !json[QString("certPem")].isNull() && m_cert_pem_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_not_valid_after_isValid = ::OpenAPI::fromJsonValue(m_not_valid_after, json[QString("notValidAfter")]);
    m_not_valid_after_isSet = !json[QString("notValidAfter")].isNull() && m_not_valid_after_isValid;

    m_not_valid_before_isValid = ::OpenAPI::fromJsonValue(m_not_valid_before, json[QString("notValidBefore")]);
    m_not_valid_before_isSet = !json[QString("notValidBefore")].isNull() && m_not_valid_before_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDeviceCerts_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_pem_isSet) {
        obj.insert(QString("certPem"), ::OpenAPI::toJsonValue(m_cert_pem));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_not_valid_after_isSet) {
        obj.insert(QString("notValidAfter"), ::OpenAPI::toJsonValue(m_not_valid_after));
    }
    if (m_not_valid_before_isSet) {
        obj.insert(QString("notValidBefore"), ::OpenAPI::toJsonValue(m_not_valid_before));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getCertPem() const {
    return m_cert_pem;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setCertPem(const QString &cert_pem) {
    m_cert_pem = cert_pem;
    m_cert_pem_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_cert_pem_Set() const{
    return m_cert_pem_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_cert_pem_Valid() const{
    return m_cert_pem_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getDeviceId() const {
    return m_device_id;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getIssuer() const {
    return m_issuer;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getNotValidAfter() const {
    return m_not_valid_after;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setNotValidAfter(const QString &not_valid_after) {
    m_not_valid_after = not_valid_after;
    m_not_valid_after_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_not_valid_after_Set() const{
    return m_not_valid_after_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_not_valid_after_Valid() const{
    return m_not_valid_after_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getNotValidBefore() const {
    return m_not_valid_before;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setNotValidBefore(const QString &not_valid_before) {
    m_not_valid_before = not_valid_before;
    m_not_valid_before_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_not_valid_before_Set() const{
    return m_not_valid_before_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_not_valid_before_Valid() const{
    return m_not_valid_before_isValid;
}

QString OAIGetNetworkSmDeviceCerts_200_response_inner::getSubject() const {
    return m_subject;
}
void OAIGetNetworkSmDeviceCerts_200_response_inner::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_pem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_valid_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_valid_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDeviceCerts_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
