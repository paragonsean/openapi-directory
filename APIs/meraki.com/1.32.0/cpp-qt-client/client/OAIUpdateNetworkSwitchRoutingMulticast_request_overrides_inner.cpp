/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::~OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner() {}

void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::initializeModel() {

    m_flood_unknown_multicast_traffic_enabled_isSet = false;
    m_flood_unknown_multicast_traffic_enabled_isValid = false;

    m_igmp_snooping_enabled_isSet = false;
    m_igmp_snooping_enabled_isValid = false;

    m_stacks_isSet = false;
    m_stacks_isValid = false;

    m_switch_profiles_isSet = false;
    m_switch_profiles_isValid = false;

    m_switches_isSet = false;
    m_switches_isValid = false;
}

void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::fromJsonObject(QJsonObject json) {

    m_flood_unknown_multicast_traffic_enabled_isValid = ::OpenAPI::fromJsonValue(m_flood_unknown_multicast_traffic_enabled, json[QString("floodUnknownMulticastTrafficEnabled")]);
    m_flood_unknown_multicast_traffic_enabled_isSet = !json[QString("floodUnknownMulticastTrafficEnabled")].isNull() && m_flood_unknown_multicast_traffic_enabled_isValid;

    m_igmp_snooping_enabled_isValid = ::OpenAPI::fromJsonValue(m_igmp_snooping_enabled, json[QString("igmpSnoopingEnabled")]);
    m_igmp_snooping_enabled_isSet = !json[QString("igmpSnoopingEnabled")].isNull() && m_igmp_snooping_enabled_isValid;

    m_stacks_isValid = ::OpenAPI::fromJsonValue(m_stacks, json[QString("stacks")]);
    m_stacks_isSet = !json[QString("stacks")].isNull() && m_stacks_isValid;

    m_switch_profiles_isValid = ::OpenAPI::fromJsonValue(m_switch_profiles, json[QString("switchProfiles")]);
    m_switch_profiles_isSet = !json[QString("switchProfiles")].isNull() && m_switch_profiles_isValid;

    m_switches_isValid = ::OpenAPI::fromJsonValue(m_switches, json[QString("switches")]);
    m_switches_isSet = !json[QString("switches")].isNull() && m_switches_isValid;
}

QString OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_flood_unknown_multicast_traffic_enabled_isSet) {
        obj.insert(QString("floodUnknownMulticastTrafficEnabled"), ::OpenAPI::toJsonValue(m_flood_unknown_multicast_traffic_enabled));
    }
    if (m_igmp_snooping_enabled_isSet) {
        obj.insert(QString("igmpSnoopingEnabled"), ::OpenAPI::toJsonValue(m_igmp_snooping_enabled));
    }
    if (m_stacks.size() > 0) {
        obj.insert(QString("stacks"), ::OpenAPI::toJsonValue(m_stacks));
    }
    if (m_switch_profiles.size() > 0) {
        obj.insert(QString("switchProfiles"), ::OpenAPI::toJsonValue(m_switch_profiles));
    }
    if (m_switches.size() > 0) {
        obj.insert(QString("switches"), ::OpenAPI::toJsonValue(m_switches));
    }
    return obj;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::isFloodUnknownMulticastTrafficEnabled() const {
    return m_flood_unknown_multicast_traffic_enabled;
}
void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::setFloodUnknownMulticastTrafficEnabled(const bool &flood_unknown_multicast_traffic_enabled) {
    m_flood_unknown_multicast_traffic_enabled = flood_unknown_multicast_traffic_enabled;
    m_flood_unknown_multicast_traffic_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_flood_unknown_multicast_traffic_enabled_Set() const{
    return m_flood_unknown_multicast_traffic_enabled_isSet;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_flood_unknown_multicast_traffic_enabled_Valid() const{
    return m_flood_unknown_multicast_traffic_enabled_isValid;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::isIgmpSnoopingEnabled() const {
    return m_igmp_snooping_enabled;
}
void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::setIgmpSnoopingEnabled(const bool &igmp_snooping_enabled) {
    m_igmp_snooping_enabled = igmp_snooping_enabled;
    m_igmp_snooping_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_igmp_snooping_enabled_Set() const{
    return m_igmp_snooping_enabled_isSet;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_igmp_snooping_enabled_Valid() const{
    return m_igmp_snooping_enabled_isValid;
}

QList<QString> OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::getStacks() const {
    return m_stacks;
}
void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::setStacks(const QList<QString> &stacks) {
    m_stacks = stacks;
    m_stacks_isSet = true;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_stacks_Set() const{
    return m_stacks_isSet;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_stacks_Valid() const{
    return m_stacks_isValid;
}

QList<QString> OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::getSwitchProfiles() const {
    return m_switch_profiles;
}
void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::setSwitchProfiles(const QList<QString> &switch_profiles) {
    m_switch_profiles = switch_profiles;
    m_switch_profiles_isSet = true;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_switch_profiles_Set() const{
    return m_switch_profiles_isSet;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_switch_profiles_Valid() const{
    return m_switch_profiles_isValid;
}

QList<QString> OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::getSwitches() const {
    return m_switches;
}
void OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::setSwitches(const QList<QString> &switches) {
    m_switches = switches;
    m_switches_isSet = true;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_switches_Set() const{
    return m_switches_isSet;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::is_switches_Valid() const{
    return m_switches_isValid;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flood_unknown_multicast_traffic_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_igmp_snooping_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_switches.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchRoutingMulticast_request_overrides_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flood_unknown_multicast_traffic_enabled_isValid && m_igmp_snooping_enabled_isValid && true;
}

} // namespace OpenAPI
