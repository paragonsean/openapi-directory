/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHistoryApi_H
#define OAI_OAIHistoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetNetworkAlertsHistory_200_response_inner.h"
#include "OAIGetOrganizationSensorReadingsHistory_200_response_inner.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHistoryApi : public QObject {
    Q_OBJECT

public:
    OAIHistoryApi(const int timeOut = 0);
    ~OAIHistoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  zone_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsZoneHistory(const QString &serial, const QString &zone_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkAlertsHistory(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void getOrganizationSensorReadingsHistory(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceCameraAnalyticsZoneHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkAlertsHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSensorReadingsHistoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceCameraAnalyticsZoneHistorySignal(QList<OAIObject> summary);
    void getNetworkAlertsHistorySignal(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary);
    void getOrganizationSensorReadingsHistorySignal(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary);


    void getDeviceCameraAnalyticsZoneHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkAlertsHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAlertsHistory_200_response_inner> summary);
    void getOrganizationSensorReadingsHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZoneHistorySignalError() instead")
    void getDeviceCameraAnalyticsZoneHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZoneHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsHistorySignalError() instead")
    void getNetworkAlertsHistorySignalE(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsHistorySignalError(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsHistorySignalError() instead")
    void getOrganizationSensorReadingsHistorySignalE(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsHistorySignalError(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZoneHistorySignalErrorFull() instead")
    void getDeviceCameraAnalyticsZoneHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZoneHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsHistorySignalErrorFull() instead")
    void getNetworkAlertsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsHistorySignalErrorFull() instead")
    void getOrganizationSensorReadingsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
