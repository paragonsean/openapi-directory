/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkWirelessRfProfile_201_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkWirelessRfProfile_201_response::OAICreateNetworkWirelessRfProfile_201_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkWirelessRfProfile_201_response::OAICreateNetworkWirelessRfProfile_201_response() {
    this->initializeModel();
}

OAICreateNetworkWirelessRfProfile_201_response::~OAICreateNetworkWirelessRfProfile_201_response() {}

void OAICreateNetworkWirelessRfProfile_201_response::initializeModel() {

    m_ap_band_settings_isSet = false;
    m_ap_band_settings_isValid = false;

    m_band_selection_type_isSet = false;
    m_band_selection_type_isValid = false;

    m_client_balancing_enabled_isSet = false;
    m_client_balancing_enabled_isValid = false;

    m_five_ghz_settings_isSet = false;
    m_five_ghz_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_min_bitrate_type_isSet = false;
    m_min_bitrate_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_per_ssid_settings_isSet = false;
    m_per_ssid_settings_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_two_four_ghz_settings_isSet = false;
    m_two_four_ghz_settings_isValid = false;
}

void OAICreateNetworkWirelessRfProfile_201_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkWirelessRfProfile_201_response::fromJsonObject(QJsonObject json) {

    m_ap_band_settings_isValid = ::OpenAPI::fromJsonValue(m_ap_band_settings, json[QString("apBandSettings")]);
    m_ap_band_settings_isSet = !json[QString("apBandSettings")].isNull() && m_ap_band_settings_isValid;

    m_band_selection_type_isValid = ::OpenAPI::fromJsonValue(m_band_selection_type, json[QString("bandSelectionType")]);
    m_band_selection_type_isSet = !json[QString("bandSelectionType")].isNull() && m_band_selection_type_isValid;

    m_client_balancing_enabled_isValid = ::OpenAPI::fromJsonValue(m_client_balancing_enabled, json[QString("clientBalancingEnabled")]);
    m_client_balancing_enabled_isSet = !json[QString("clientBalancingEnabled")].isNull() && m_client_balancing_enabled_isValid;

    m_five_ghz_settings_isValid = ::OpenAPI::fromJsonValue(m_five_ghz_settings, json[QString("fiveGhzSettings")]);
    m_five_ghz_settings_isSet = !json[QString("fiveGhzSettings")].isNull() && m_five_ghz_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_min_bitrate_type_isValid = ::OpenAPI::fromJsonValue(m_min_bitrate_type, json[QString("minBitrateType")]);
    m_min_bitrate_type_isSet = !json[QString("minBitrateType")].isNull() && m_min_bitrate_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_per_ssid_settings_isValid = ::OpenAPI::fromJsonValue(m_per_ssid_settings, json[QString("perSsidSettings")]);
    m_per_ssid_settings_isSet = !json[QString("perSsidSettings")].isNull() && m_per_ssid_settings_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_two_four_ghz_settings_isValid = ::OpenAPI::fromJsonValue(m_two_four_ghz_settings, json[QString("twoFourGhzSettings")]);
    m_two_four_ghz_settings_isSet = !json[QString("twoFourGhzSettings")].isNull() && m_two_four_ghz_settings_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkWirelessRfProfile_201_response::asJsonObject() const {
    QJsonObject obj;
    if (m_ap_band_settings.isSet()) {
        obj.insert(QString("apBandSettings"), ::OpenAPI::toJsonValue(m_ap_band_settings));
    }
    if (m_band_selection_type_isSet) {
        obj.insert(QString("bandSelectionType"), ::OpenAPI::toJsonValue(m_band_selection_type));
    }
    if (m_client_balancing_enabled_isSet) {
        obj.insert(QString("clientBalancingEnabled"), ::OpenAPI::toJsonValue(m_client_balancing_enabled));
    }
    if (m_five_ghz_settings.isSet()) {
        obj.insert(QString("fiveGhzSettings"), ::OpenAPI::toJsonValue(m_five_ghz_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_min_bitrate_type_isSet) {
        obj.insert(QString("minBitrateType"), ::OpenAPI::toJsonValue(m_min_bitrate_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_per_ssid_settings.isSet()) {
        obj.insert(QString("perSsidSettings"), ::OpenAPI::toJsonValue(m_per_ssid_settings));
    }
    if (m_transmission.isSet()) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_two_four_ghz_settings.isSet()) {
        obj.insert(QString("twoFourGhzSettings"), ::OpenAPI::toJsonValue(m_two_four_ghz_settings));
    }
    return obj;
}

OAICreateNetworkWirelessRfProfile_201_response_apBandSettings OAICreateNetworkWirelessRfProfile_201_response::getApBandSettings() const {
    return m_ap_band_settings;
}
void OAICreateNetworkWirelessRfProfile_201_response::setApBandSettings(const OAICreateNetworkWirelessRfProfile_201_response_apBandSettings &ap_band_settings) {
    m_ap_band_settings = ap_band_settings;
    m_ap_band_settings_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_ap_band_settings_Set() const{
    return m_ap_band_settings_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_ap_band_settings_Valid() const{
    return m_ap_band_settings_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response::getBandSelectionType() const {
    return m_band_selection_type;
}
void OAICreateNetworkWirelessRfProfile_201_response::setBandSelectionType(const QString &band_selection_type) {
    m_band_selection_type = band_selection_type;
    m_band_selection_type_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_band_selection_type_Set() const{
    return m_band_selection_type_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_band_selection_type_Valid() const{
    return m_band_selection_type_isValid;
}

bool OAICreateNetworkWirelessRfProfile_201_response::isClientBalancingEnabled() const {
    return m_client_balancing_enabled;
}
void OAICreateNetworkWirelessRfProfile_201_response::setClientBalancingEnabled(const bool &client_balancing_enabled) {
    m_client_balancing_enabled = client_balancing_enabled;
    m_client_balancing_enabled_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_client_balancing_enabled_Set() const{
    return m_client_balancing_enabled_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_client_balancing_enabled_Valid() const{
    return m_client_balancing_enabled_isValid;
}

OAICreateNetworkWirelessRfProfile_request_fiveGhzSettings OAICreateNetworkWirelessRfProfile_201_response::getFiveGhzSettings() const {
    return m_five_ghz_settings;
}
void OAICreateNetworkWirelessRfProfile_201_response::setFiveGhzSettings(const OAICreateNetworkWirelessRfProfile_request_fiveGhzSettings &five_ghz_settings) {
    m_five_ghz_settings = five_ghz_settings;
    m_five_ghz_settings_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_five_ghz_settings_Set() const{
    return m_five_ghz_settings_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_five_ghz_settings_Valid() const{
    return m_five_ghz_settings_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response::getId() const {
    return m_id;
}
void OAICreateNetworkWirelessRfProfile_201_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response::getMinBitrateType() const {
    return m_min_bitrate_type;
}
void OAICreateNetworkWirelessRfProfile_201_response::setMinBitrateType(const QString &min_bitrate_type) {
    m_min_bitrate_type = min_bitrate_type;
    m_min_bitrate_type_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_min_bitrate_type_Set() const{
    return m_min_bitrate_type_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_min_bitrate_type_Valid() const{
    return m_min_bitrate_type_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response::getName() const {
    return m_name;
}
void OAICreateNetworkWirelessRfProfile_201_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response::getNetworkId() const {
    return m_network_id;
}
void OAICreateNetworkWirelessRfProfile_201_response::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_network_id_Valid() const{
    return m_network_id_isValid;
}

OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings OAICreateNetworkWirelessRfProfile_201_response::getPerSsidSettings() const {
    return m_per_ssid_settings;
}
void OAICreateNetworkWirelessRfProfile_201_response::setPerSsidSettings(const OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings &per_ssid_settings) {
    m_per_ssid_settings = per_ssid_settings;
    m_per_ssid_settings_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_per_ssid_settings_Set() const{
    return m_per_ssid_settings_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_per_ssid_settings_Valid() const{
    return m_per_ssid_settings_isValid;
}

OAICreateNetworkWirelessRfProfile_request_transmission OAICreateNetworkWirelessRfProfile_201_response::getTransmission() const {
    return m_transmission;
}
void OAICreateNetworkWirelessRfProfile_201_response::setTransmission(const OAICreateNetworkWirelessRfProfile_request_transmission &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_transmission_Valid() const{
    return m_transmission_isValid;
}

OAICreateNetworkWirelessRfProfile_request_twoFourGhzSettings OAICreateNetworkWirelessRfProfile_201_response::getTwoFourGhzSettings() const {
    return m_two_four_ghz_settings;
}
void OAICreateNetworkWirelessRfProfile_201_response::setTwoFourGhzSettings(const OAICreateNetworkWirelessRfProfile_request_twoFourGhzSettings &two_four_ghz_settings) {
    m_two_four_ghz_settings = two_four_ghz_settings;
    m_two_four_ghz_settings_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_two_four_ghz_settings_Set() const{
    return m_two_four_ghz_settings_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response::is_two_four_ghz_settings_Valid() const{
    return m_two_four_ghz_settings_isValid;
}

bool OAICreateNetworkWirelessRfProfile_201_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ap_band_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_band_selection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_balancing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_five_ghz_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_bitrate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_ssid_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_four_ghz_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkWirelessRfProfile_201_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
