/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::~OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner() {}

void OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

qint32 OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::getCount() const {
    return m_count;
}
void OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::getModel() const {
    return m_model;
}
void OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::is_model_Valid() const{
    return m_model_isValid;
}

OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner_usage OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::getUsage() const {
    return m_usage;
}
void OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::setUsage(const OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
