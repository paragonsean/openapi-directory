/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISsidsApi_H
#define OAI_OAISsidsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkWirelessSsidIdentityPsk_request.h"
#include "OAIGetNetworkApplianceSsids_200_response_inner.h"
#include "OAIGetNetworkWirelessSsidEapOverride_200_response.h"
#include "OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner.h"
#include "OAIGetNetworkWirelessSsidSplashSettings_200_response.h"
#include "OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkApplianceSsid_request.h"
#include "OAIUpdateNetworkWirelessSsidBonjourForwarding_request.h"
#include "OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request.h"
#include "OAIUpdateNetworkWirelessSsidEapOverride_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidHotspot20_request.h"
#include "OAIUpdateNetworkWirelessSsidIdentityPsk_request.h"
#include "OAIUpdateNetworkWirelessSsidSchedules_request.h"
#include "OAIUpdateNetworkWirelessSsidSplashSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidTrafficShapingRules_request.h"
#include "OAIUpdateNetworkWirelessSsidVpn_request.h"
#include "OAIUpdateNetworkWirelessSsid_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISsidsApi : public QObject {
    Q_OBJECT

public:
    OAISsidsApi(const int timeOut = 0);
    ~OAISsidsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_create_network_wireless_ssid_identity_psk_request OAICreateNetworkWirelessSsidIdentityPsk_request [required]
    */
    virtual void createNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const OAICreateNetworkWirelessSsidIdentityPsk_request &oai_create_network_wireless_ssid_identity_psk_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    */
    virtual void deleteNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkApplianceSsid(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSsids(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidBonjourForwarding(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidDeviceTypeGroupPolicies(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidEapOverride(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidHotspot20(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    */
    virtual void getNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidIdentityPsks(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSchedules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidTrafficShapingRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidVpn(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsid(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessSsids(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopSsidsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_appliance_ssid_request OAIUpdateNetworkApplianceSsid_request [optional]
    */
    virtual void updateNetworkApplianceSsid(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSsid_request> &oai_update_network_appliance_ssid_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSsid_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_bonjour_forwarding_request OAIUpdateNetworkWirelessSsidBonjourForwarding_request [optional]
    */
    virtual void updateNetworkWirelessSsidBonjourForwarding(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidBonjourForwarding_request> &oai_update_network_wireless_ssid_bonjour_forwarding_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidBonjourForwarding_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_device_type_group_policies_request OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request [optional]
    */
    virtual void updateNetworkWirelessSsidDeviceTypeGroupPolicies(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request> &oai_update_network_wireless_ssid_device_type_group_policies_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_eap_override_request OAIUpdateNetworkWirelessSsidEapOverride_request [optional]
    */
    virtual void updateNetworkWirelessSsidEapOverride(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidEapOverride_request> &oai_update_network_wireless_ssid_eap_override_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidEapOverride_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_hotspot20_request OAIUpdateNetworkWirelessSsidHotspot20_request [optional]
    */
    virtual void updateNetworkWirelessSsidHotspot20(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidHotspot20_request> &oai_update_network_wireless_ssid_hotspot20_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidHotspot20_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    * @param[in]  oai_update_network_wireless_ssid_identity_psk_request OAIUpdateNetworkWirelessSsidIdentityPsk_request [optional]
    */
    virtual void updateNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidIdentityPsk_request> &oai_update_network_wireless_ssid_identity_psk_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidIdentityPsk_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_schedules_request OAIUpdateNetworkWirelessSsidSchedules_request [optional]
    */
    virtual void updateNetworkWirelessSsidSchedules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSchedules_request> &oai_update_network_wireless_ssid_schedules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSchedules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_splash_settings_request OAIUpdateNetworkWirelessSsidSplashSettings_request [optional]
    */
    virtual void updateNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request> &oai_update_network_wireless_ssid_splash_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_traffic_shaping_rules_request OAIUpdateNetworkWirelessSsidTrafficShapingRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidTrafficShapingRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidTrafficShapingRules_request> &oai_update_network_wireless_ssid_traffic_shaping_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidTrafficShapingRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_vpn_request OAIUpdateNetworkWirelessSsidVpn_request [optional]
    */
    virtual void updateNetworkWirelessSsidVpn(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request> &oai_update_network_wireless_ssid_vpn_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_request OAIUpdateNetworkWirelessSsid_request [optional]
    */
    virtual void updateNetworkWirelessSsid(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsid_request> &oai_update_network_wireless_ssid_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsid_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidBonjourForwardingCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidEapOverrideCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidHotspot20Callback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidIdentityPsksCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopSsidsByUsageCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSsidCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidBonjourForwardingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidEapOverrideCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidHotspot20Callback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSchedulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkWirelessSsidIdentityPskSignal(OAIObject summary);
    void deleteNetworkWirelessSsidIdentityPskSignal();
    void getNetworkApplianceSsidSignal(OAIGetNetworkApplianceSsids_200_response_inner summary);
    void getNetworkApplianceSsidsSignal(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary);
    void getNetworkWirelessSsidBonjourForwardingSignal(OAIObject summary);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignal(OAIObject summary);
    void getNetworkWirelessSsidEapOverrideSignal(OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidHotspot20Signal(OAIObject summary);
    void getNetworkWirelessSsidIdentityPskSignal(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary);
    void getNetworkWirelessSsidIdentityPsksSignal(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary);
    void getNetworkWirelessSsidSchedulesSignal(OAIObject summary);
    void getNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getNetworkWirelessSsidTrafficShapingRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidVpnSignal(OAIObject summary);
    void getNetworkWirelessSsidSignal(OAIObject summary);
    void getNetworkWirelessSsidsSignal(QList<OAIObject> summary);
    void getOrganizationSummaryTopSsidsByUsageSignal(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary);
    void updateNetworkApplianceSsidSignal(OAIGetNetworkApplianceSsids_200_response_inner summary);
    void updateNetworkWirelessSsidBonjourForwardingSignal(OAIObject summary);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignal(OAIObject summary);
    void updateNetworkWirelessSsidEapOverrideSignal(OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidHotspot20Signal(OAIObject summary);
    void updateNetworkWirelessSsidIdentityPskSignal(OAIObject summary);
    void updateNetworkWirelessSsidSchedulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateNetworkWirelessSsidTrafficShapingRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidVpnSignal(OAIObject summary);
    void updateNetworkWirelessSsidSignal(OAIObject summary);


    void createNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSsids_200_response_inner summary);
    void getNetworkApplianceSsidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkApplianceSsids_200_response_inner> summary);
    void getNetworkWirelessSsidBonjourForwardingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidEapOverrideSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidHotspot20SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary);
    void getNetworkWirelessSsidIdentityPsksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary);
    void getNetworkWirelessSsidSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getNetworkWirelessSsidTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationSummaryTopSsidsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary);
    void updateNetworkApplianceSsidSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSsids_200_response_inner summary);
    void updateNetworkWirelessSsidBonjourForwardingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidEapOverrideSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidHotspot20SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkWirelessSsidIdentityPskSignalError() instead")
    void createNetworkWirelessSsidIdentityPskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessSsidIdentityPskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessSsidIdentityPskSignalError() instead")
    void deleteNetworkWirelessSsidIdentityPskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessSsidIdentityPskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidSignalError() instead")
    void getNetworkApplianceSsidSignalE(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidSignalError(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidsSignalError() instead")
    void getNetworkApplianceSsidsSignalE(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidsSignalError(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidBonjourForwardingSignalError() instead")
    void getNetworkWirelessSsidBonjourForwardingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidBonjourForwardingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError() instead")
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidEapOverrideSignalError() instead")
    void getNetworkWirelessSsidEapOverrideSignalE(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidEapOverrideSignalError(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidHotspot20SignalError() instead")
    void getNetworkWirelessSsidHotspot20SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidHotspot20SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPskSignalError() instead")
    void getNetworkWirelessSsidIdentityPskSignalE(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPskSignalError(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPsksSignalError() instead")
    void getNetworkWirelessSsidIdentityPsksSignalE(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPsksSignalError(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSchedulesSignalError() instead")
    void getNetworkWirelessSsidSchedulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSchedulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalError() instead")
    void getNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidTrafficShapingRulesSignalError() instead")
    void getNetworkWirelessSsidTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalError() instead")
    void getNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSignalError() instead")
    void getNetworkWirelessSsidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidsSignalError() instead")
    void getNetworkWirelessSsidsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSsidsByUsageSignalError() instead")
    void getOrganizationSummaryTopSsidsByUsageSignalE(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSsidsByUsageSignalError(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSsidSignalError() instead")
    void updateNetworkApplianceSsidSignalE(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSsidSignalError(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidBonjourForwardingSignalError() instead")
    void updateNetworkWirelessSsidBonjourForwardingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidBonjourForwardingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError() instead")
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidEapOverrideSignalError() instead")
    void updateNetworkWirelessSsidEapOverrideSignalE(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidEapOverrideSignalError(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidHotspot20SignalError() instead")
    void updateNetworkWirelessSsidHotspot20SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidHotspot20SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidIdentityPskSignalError() instead")
    void updateNetworkWirelessSsidIdentityPskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidIdentityPskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSchedulesSignalError() instead")
    void updateNetworkWirelessSsidSchedulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSchedulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalError() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidTrafficShapingRulesSignalError() instead")
    void updateNetworkWirelessSsidTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalError() instead")
    void updateNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSignalError() instead")
    void updateNetworkWirelessSsidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void createNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void deleteNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidSignalErrorFull() instead")
    void getNetworkApplianceSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidsSignalErrorFull() instead")
    void getNetworkApplianceSsidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidBonjourForwardingSignalErrorFull() instead")
    void getNetworkWirelessSsidBonjourForwardingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidBonjourForwardingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull() instead")
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidEapOverrideSignalErrorFull() instead")
    void getNetworkWirelessSsidEapOverrideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidEapOverrideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidHotspot20SignalErrorFull() instead")
    void getNetworkWirelessSsidHotspot20SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidHotspot20SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void getNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPsksSignalErrorFull() instead")
    void getNetworkWirelessSsidIdentityPsksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPsksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSchedulesSignalErrorFull() instead")
    void getNetworkWirelessSsidSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void getNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidTrafficShapingRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalErrorFull() instead")
    void getNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSignalErrorFull() instead")
    void getNetworkWirelessSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidsSignalErrorFull() instead")
    void getNetworkWirelessSsidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSsidsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopSsidsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSsidsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSsidSignalErrorFull() instead")
    void updateNetworkApplianceSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidBonjourForwardingSignalErrorFull() instead")
    void updateNetworkWirelessSsidBonjourForwardingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidBonjourForwardingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull() instead")
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidEapOverrideSignalErrorFull() instead")
    void updateNetworkWirelessSsidEapOverrideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidEapOverrideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidHotspot20SignalErrorFull() instead")
    void updateNetworkWirelessSsidHotspot20SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidHotspot20SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void updateNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSchedulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidTrafficShapingRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalErrorFull() instead")
    void updateNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSignalErrorFull() instead")
    void updateNetworkWirelessSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
