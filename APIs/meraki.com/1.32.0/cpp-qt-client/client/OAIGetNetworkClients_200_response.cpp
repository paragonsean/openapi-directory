/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkClients_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkClients_200_response::OAIGetNetworkClients_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkClients_200_response::OAIGetNetworkClients_200_response() {
    this->initializeModel();
}

OAIGetNetworkClients_200_response::~OAIGetNetworkClients_200_response() {}

void OAIGetNetworkClients_200_response::initializeModel() {

    m_adaptive_policy_group_isSet = false;
    m_adaptive_policy_group_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_type_prediction_isSet = false;
    m_device_type_prediction_isValid = false;

    m_first_seen_isSet = false;
    m_first_seen_isValid = false;

    m_group_policy8021x_isSet = false;
    m_group_policy8021x_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_ip6_isSet = false;
    m_ip6_isValid = false;

    m_ip6_local_isSet = false;
    m_ip6_local_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_named_vlan_isSet = false;
    m_named_vlan_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_recent_device_connection_isSet = false;
    m_recent_device_connection_isValid = false;

    m_recent_device_mac_isSet = false;
    m_recent_device_mac_isValid = false;

    m_recent_device_name_isSet = false;
    m_recent_device_name_isValid = false;

    m_recent_device_serial_isSet = false;
    m_recent_device_serial_isValid = false;

    m_sm_installed_isSet = false;
    m_sm_installed_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_switchport_isSet = false;
    m_switchport_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;

    m_wireless_capabilities_isSet = false;
    m_wireless_capabilities_isValid = false;
}

void OAIGetNetworkClients_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkClients_200_response::fromJsonObject(QJsonObject json) {

    m_adaptive_policy_group_isValid = ::OpenAPI::fromJsonValue(m_adaptive_policy_group, json[QString("adaptivePolicyGroup")]);
    m_adaptive_policy_group_isSet = !json[QString("adaptivePolicyGroup")].isNull() && m_adaptive_policy_group_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_type_prediction_isValid = ::OpenAPI::fromJsonValue(m_device_type_prediction, json[QString("deviceTypePrediction")]);
    m_device_type_prediction_isSet = !json[QString("deviceTypePrediction")].isNull() && m_device_type_prediction_isValid;

    m_first_seen_isValid = ::OpenAPI::fromJsonValue(m_first_seen, json[QString("firstSeen")]);
    m_first_seen_isSet = !json[QString("firstSeen")].isNull() && m_first_seen_isValid;

    m_group_policy8021x_isValid = ::OpenAPI::fromJsonValue(m_group_policy8021x, json[QString("groupPolicy8021x")]);
    m_group_policy8021x_isSet = !json[QString("groupPolicy8021x")].isNull() && m_group_policy8021x_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_ip6_isValid = ::OpenAPI::fromJsonValue(m_ip6, json[QString("ip6")]);
    m_ip6_isSet = !json[QString("ip6")].isNull() && m_ip6_isValid;

    m_ip6_local_isValid = ::OpenAPI::fromJsonValue(m_ip6_local, json[QString("ip6Local")]);
    m_ip6_local_isSet = !json[QString("ip6Local")].isNull() && m_ip6_local_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("lastSeen")]);
    m_last_seen_isSet = !json[QString("lastSeen")].isNull() && m_last_seen_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_named_vlan_isValid = ::OpenAPI::fromJsonValue(m_named_vlan, json[QString("namedVlan")]);
    m_named_vlan_isSet = !json[QString("namedVlan")].isNull() && m_named_vlan_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_recent_device_connection_isValid = ::OpenAPI::fromJsonValue(m_recent_device_connection, json[QString("recentDeviceConnection")]);
    m_recent_device_connection_isSet = !json[QString("recentDeviceConnection")].isNull() && m_recent_device_connection_isValid;

    m_recent_device_mac_isValid = ::OpenAPI::fromJsonValue(m_recent_device_mac, json[QString("recentDeviceMac")]);
    m_recent_device_mac_isSet = !json[QString("recentDeviceMac")].isNull() && m_recent_device_mac_isValid;

    m_recent_device_name_isValid = ::OpenAPI::fromJsonValue(m_recent_device_name, json[QString("recentDeviceName")]);
    m_recent_device_name_isSet = !json[QString("recentDeviceName")].isNull() && m_recent_device_name_isValid;

    m_recent_device_serial_isValid = ::OpenAPI::fromJsonValue(m_recent_device_serial, json[QString("recentDeviceSerial")]);
    m_recent_device_serial_isSet = !json[QString("recentDeviceSerial")].isNull() && m_recent_device_serial_isValid;

    m_sm_installed_isValid = ::OpenAPI::fromJsonValue(m_sm_installed, json[QString("smInstalled")]);
    m_sm_installed_isSet = !json[QString("smInstalled")].isNull() && m_sm_installed_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_switchport_isValid = ::OpenAPI::fromJsonValue(m_switchport, json[QString("switchport")]);
    m_switchport_isSet = !json[QString("switchport")].isNull() && m_switchport_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;

    m_wireless_capabilities_isValid = ::OpenAPI::fromJsonValue(m_wireless_capabilities, json[QString("wirelessCapabilities")]);
    m_wireless_capabilities_isSet = !json[QString("wirelessCapabilities")].isNull() && m_wireless_capabilities_isValid;
}

QString OAIGetNetworkClients_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkClients_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_adaptive_policy_group_isSet) {
        obj.insert(QString("adaptivePolicyGroup"), ::OpenAPI::toJsonValue(m_adaptive_policy_group));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_type_prediction_isSet) {
        obj.insert(QString("deviceTypePrediction"), ::OpenAPI::toJsonValue(m_device_type_prediction));
    }
    if (m_first_seen_isSet) {
        obj.insert(QString("firstSeen"), ::OpenAPI::toJsonValue(m_first_seen));
    }
    if (m_group_policy8021x_isSet) {
        obj.insert(QString("groupPolicy8021x"), ::OpenAPI::toJsonValue(m_group_policy8021x));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_ip6_isSet) {
        obj.insert(QString("ip6"), ::OpenAPI::toJsonValue(m_ip6));
    }
    if (m_ip6_local_isSet) {
        obj.insert(QString("ip6Local"), ::OpenAPI::toJsonValue(m_ip6_local));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("lastSeen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_named_vlan_isSet) {
        obj.insert(QString("namedVlan"), ::OpenAPI::toJsonValue(m_named_vlan));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_recent_device_connection_isSet) {
        obj.insert(QString("recentDeviceConnection"), ::OpenAPI::toJsonValue(m_recent_device_connection));
    }
    if (m_recent_device_mac_isSet) {
        obj.insert(QString("recentDeviceMac"), ::OpenAPI::toJsonValue(m_recent_device_mac));
    }
    if (m_recent_device_name_isSet) {
        obj.insert(QString("recentDeviceName"), ::OpenAPI::toJsonValue(m_recent_device_name));
    }
    if (m_recent_device_serial_isSet) {
        obj.insert(QString("recentDeviceSerial"), ::OpenAPI::toJsonValue(m_recent_device_serial));
    }
    if (m_sm_installed_isSet) {
        obj.insert(QString("smInstalled"), ::OpenAPI::toJsonValue(m_sm_installed));
    }
    if (m_ssid_isSet) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_switchport_isSet) {
        obj.insert(QString("switchport"), ::OpenAPI::toJsonValue(m_switchport));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    if (m_wireless_capabilities_isSet) {
        obj.insert(QString("wirelessCapabilities"), ::OpenAPI::toJsonValue(m_wireless_capabilities));
    }
    return obj;
}

QString OAIGetNetworkClients_200_response::getAdaptivePolicyGroup() const {
    return m_adaptive_policy_group;
}
void OAIGetNetworkClients_200_response::setAdaptivePolicyGroup(const QString &adaptive_policy_group) {
    m_adaptive_policy_group = adaptive_policy_group;
    m_adaptive_policy_group_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_adaptive_policy_group_Set() const{
    return m_adaptive_policy_group_isSet;
}

bool OAIGetNetworkClients_200_response::is_adaptive_policy_group_Valid() const{
    return m_adaptive_policy_group_isValid;
}

QString OAIGetNetworkClients_200_response::getDescription() const {
    return m_description;
}
void OAIGetNetworkClients_200_response::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetNetworkClients_200_response::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetNetworkClients_200_response::getDeviceTypePrediction() const {
    return m_device_type_prediction;
}
void OAIGetNetworkClients_200_response::setDeviceTypePrediction(const QString &device_type_prediction) {
    m_device_type_prediction = device_type_prediction;
    m_device_type_prediction_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_device_type_prediction_Set() const{
    return m_device_type_prediction_isSet;
}

bool OAIGetNetworkClients_200_response::is_device_type_prediction_Valid() const{
    return m_device_type_prediction_isValid;
}

qint32 OAIGetNetworkClients_200_response::getFirstSeen() const {
    return m_first_seen;
}
void OAIGetNetworkClients_200_response::setFirstSeen(const qint32 &first_seen) {
    m_first_seen = first_seen;
    m_first_seen_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_first_seen_Set() const{
    return m_first_seen_isSet;
}

bool OAIGetNetworkClients_200_response::is_first_seen_Valid() const{
    return m_first_seen_isValid;
}

QString OAIGetNetworkClients_200_response::getGroupPolicy8021x() const {
    return m_group_policy8021x;
}
void OAIGetNetworkClients_200_response::setGroupPolicy8021x(const QString &group_policy8021x) {
    m_group_policy8021x = group_policy8021x;
    m_group_policy8021x_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_group_policy8021x_Set() const{
    return m_group_policy8021x_isSet;
}

bool OAIGetNetworkClients_200_response::is_group_policy8021x_Valid() const{
    return m_group_policy8021x_isValid;
}

QString OAIGetNetworkClients_200_response::getId() const {
    return m_id;
}
void OAIGetNetworkClients_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkClients_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkClients_200_response::getIp() const {
    return m_ip;
}
void OAIGetNetworkClients_200_response::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetNetworkClients_200_response::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIGetNetworkClients_200_response::getIp6() const {
    return m_ip6;
}
void OAIGetNetworkClients_200_response::setIp6(const QString &ip6) {
    m_ip6 = ip6;
    m_ip6_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_ip6_Set() const{
    return m_ip6_isSet;
}

bool OAIGetNetworkClients_200_response::is_ip6_Valid() const{
    return m_ip6_isValid;
}

QString OAIGetNetworkClients_200_response::getIp6Local() const {
    return m_ip6_local;
}
void OAIGetNetworkClients_200_response::setIp6Local(const QString &ip6_local) {
    m_ip6_local = ip6_local;
    m_ip6_local_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_ip6_local_Set() const{
    return m_ip6_local_isSet;
}

bool OAIGetNetworkClients_200_response::is_ip6_local_Valid() const{
    return m_ip6_local_isValid;
}

qint32 OAIGetNetworkClients_200_response::getLastSeen() const {
    return m_last_seen;
}
void OAIGetNetworkClients_200_response::setLastSeen(const qint32 &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIGetNetworkClients_200_response::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

QString OAIGetNetworkClients_200_response::getMac() const {
    return m_mac;
}
void OAIGetNetworkClients_200_response::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIGetNetworkClients_200_response::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIGetNetworkClients_200_response::getManufacturer() const {
    return m_manufacturer;
}
void OAIGetNetworkClients_200_response::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIGetNetworkClients_200_response::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIGetNetworkClients_200_response::getNamedVlan() const {
    return m_named_vlan;
}
void OAIGetNetworkClients_200_response::setNamedVlan(const QString &named_vlan) {
    m_named_vlan = named_vlan;
    m_named_vlan_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_named_vlan_Set() const{
    return m_named_vlan_isSet;
}

bool OAIGetNetworkClients_200_response::is_named_vlan_Valid() const{
    return m_named_vlan_isValid;
}

QString OAIGetNetworkClients_200_response::getNotes() const {
    return m_notes;
}
void OAIGetNetworkClients_200_response::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGetNetworkClients_200_response::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIGetNetworkClients_200_response::getOs() const {
    return m_os;
}
void OAIGetNetworkClients_200_response::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_os_Set() const{
    return m_os_isSet;
}

bool OAIGetNetworkClients_200_response::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIGetNetworkClients_200_response::getRecentDeviceConnection() const {
    return m_recent_device_connection;
}
void OAIGetNetworkClients_200_response::setRecentDeviceConnection(const QString &recent_device_connection) {
    m_recent_device_connection = recent_device_connection;
    m_recent_device_connection_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_recent_device_connection_Set() const{
    return m_recent_device_connection_isSet;
}

bool OAIGetNetworkClients_200_response::is_recent_device_connection_Valid() const{
    return m_recent_device_connection_isValid;
}

QString OAIGetNetworkClients_200_response::getRecentDeviceMac() const {
    return m_recent_device_mac;
}
void OAIGetNetworkClients_200_response::setRecentDeviceMac(const QString &recent_device_mac) {
    m_recent_device_mac = recent_device_mac;
    m_recent_device_mac_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_recent_device_mac_Set() const{
    return m_recent_device_mac_isSet;
}

bool OAIGetNetworkClients_200_response::is_recent_device_mac_Valid() const{
    return m_recent_device_mac_isValid;
}

QString OAIGetNetworkClients_200_response::getRecentDeviceName() const {
    return m_recent_device_name;
}
void OAIGetNetworkClients_200_response::setRecentDeviceName(const QString &recent_device_name) {
    m_recent_device_name = recent_device_name;
    m_recent_device_name_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_recent_device_name_Set() const{
    return m_recent_device_name_isSet;
}

bool OAIGetNetworkClients_200_response::is_recent_device_name_Valid() const{
    return m_recent_device_name_isValid;
}

QString OAIGetNetworkClients_200_response::getRecentDeviceSerial() const {
    return m_recent_device_serial;
}
void OAIGetNetworkClients_200_response::setRecentDeviceSerial(const QString &recent_device_serial) {
    m_recent_device_serial = recent_device_serial;
    m_recent_device_serial_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_recent_device_serial_Set() const{
    return m_recent_device_serial_isSet;
}

bool OAIGetNetworkClients_200_response::is_recent_device_serial_Valid() const{
    return m_recent_device_serial_isValid;
}

bool OAIGetNetworkClients_200_response::isSmInstalled() const {
    return m_sm_installed;
}
void OAIGetNetworkClients_200_response::setSmInstalled(const bool &sm_installed) {
    m_sm_installed = sm_installed;
    m_sm_installed_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_sm_installed_Set() const{
    return m_sm_installed_isSet;
}

bool OAIGetNetworkClients_200_response::is_sm_installed_Valid() const{
    return m_sm_installed_isValid;
}

QString OAIGetNetworkClients_200_response::getSsid() const {
    return m_ssid;
}
void OAIGetNetworkClients_200_response::setSsid(const QString &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIGetNetworkClients_200_response::is_ssid_Valid() const{
    return m_ssid_isValid;
}

QString OAIGetNetworkClients_200_response::getStatus() const {
    return m_status;
}
void OAIGetNetworkClients_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetNetworkClients_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetNetworkClients_200_response::getSwitchport() const {
    return m_switchport;
}
void OAIGetNetworkClients_200_response::setSwitchport(const QString &switchport) {
    m_switchport = switchport;
    m_switchport_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_switchport_Set() const{
    return m_switchport_isSet;
}

bool OAIGetNetworkClients_200_response::is_switchport_Valid() const{
    return m_switchport_isValid;
}

OAIGetNetworkClients_200_response_usage OAIGetNetworkClients_200_response::getUsage() const {
    return m_usage;
}
void OAIGetNetworkClients_200_response::setUsage(const OAIGetNetworkClients_200_response_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIGetNetworkClients_200_response::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIGetNetworkClients_200_response::getUser() const {
    return m_user;
}
void OAIGetNetworkClients_200_response::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGetNetworkClients_200_response::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIGetNetworkClients_200_response::getVlan() const {
    return m_vlan;
}
void OAIGetNetworkClients_200_response::setVlan(const QString &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIGetNetworkClients_200_response::is_vlan_Valid() const{
    return m_vlan_isValid;
}

QString OAIGetNetworkClients_200_response::getWirelessCapabilities() const {
    return m_wireless_capabilities;
}
void OAIGetNetworkClients_200_response::setWirelessCapabilities(const QString &wireless_capabilities) {
    m_wireless_capabilities = wireless_capabilities;
    m_wireless_capabilities_isSet = true;
}

bool OAIGetNetworkClients_200_response::is_wireless_capabilities_Set() const{
    return m_wireless_capabilities_isSet;
}

bool OAIGetNetworkClients_200_response::is_wireless_capabilities_Valid() const{
    return m_wireless_capabilities_isValid;
}

bool OAIGetNetworkClients_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adaptive_policy_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_prediction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_policy8021x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip6_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_device_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_device_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_device_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sm_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switchport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_capabilities_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkClients_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
