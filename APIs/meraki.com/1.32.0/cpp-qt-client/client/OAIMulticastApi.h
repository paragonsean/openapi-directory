/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMulticastApi_H
#define OAI_OAIMulticastApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticast_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMulticastApi : public QObject {
    Q_OBJECT

public:
    OAIMulticastApi(const int timeOut = 0);
    ~OAIMulticastApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_routing_multicast_rendezvous_point_request OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void createNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_create_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void deleteNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoints(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticast(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_rendezvous_point_request OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void updateNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id, const OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_update_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_request OAIUpdateNetworkSwitchRoutingMulticast_request [optional]
    */
    virtual void updateNetworkSwitchRoutingMulticast(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request> &oai_update_network_switch_routing_multicast_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignal();
    void getNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignal(QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignal(OAIObject summary);


    void createNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalFull(OAIHttpRequestWorker *worker, QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalE(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalError(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalError() instead")
    void getNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalError() instead")
    void updateNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
