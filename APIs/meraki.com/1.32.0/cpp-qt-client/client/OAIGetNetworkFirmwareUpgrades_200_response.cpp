/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkFirmwareUpgrades_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkFirmwareUpgrades_200_response::OAIGetNetworkFirmwareUpgrades_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkFirmwareUpgrades_200_response::OAIGetNetworkFirmwareUpgrades_200_response() {
    this->initializeModel();
}

OAIGetNetworkFirmwareUpgrades_200_response::~OAIGetNetworkFirmwareUpgrades_200_response() {}

void OAIGetNetworkFirmwareUpgrades_200_response::initializeModel() {

    m_products_isSet = false;
    m_products_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_upgrade_window_isSet = false;
    m_upgrade_window_isValid = false;
}

void OAIGetNetworkFirmwareUpgrades_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkFirmwareUpgrades_200_response::fromJsonObject(QJsonObject json) {

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_upgrade_window_isValid = ::OpenAPI::fromJsonValue(m_upgrade_window, json[QString("upgradeWindow")]);
    m_upgrade_window_isSet = !json[QString("upgradeWindow")].isNull() && m_upgrade_window_isValid;
}

QString OAIGetNetworkFirmwareUpgrades_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkFirmwareUpgrades_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_products.isSet()) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_upgrade_window.isSet()) {
        obj.insert(QString("upgradeWindow"), ::OpenAPI::toJsonValue(m_upgrade_window));
    }
    return obj;
}

OAIGetNetworkFirmwareUpgrades_200_response_products OAIGetNetworkFirmwareUpgrades_200_response::getProducts() const {
    return m_products;
}
void OAIGetNetworkFirmwareUpgrades_200_response::setProducts(const OAIGetNetworkFirmwareUpgrades_200_response_products &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::is_products_Set() const{
    return m_products_isSet;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIGetNetworkFirmwareUpgrades_200_response::getTimezone() const {
    return m_timezone;
}
void OAIGetNetworkFirmwareUpgrades_200_response::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::is_timezone_Valid() const{
    return m_timezone_isValid;
}

OAIGetNetworkFirmwareUpgrades_200_response_upgradeWindow OAIGetNetworkFirmwareUpgrades_200_response::getUpgradeWindow() const {
    return m_upgrade_window;
}
void OAIGetNetworkFirmwareUpgrades_200_response::setUpgradeWindow(const OAIGetNetworkFirmwareUpgrades_200_response_upgradeWindow &upgrade_window) {
    m_upgrade_window = upgrade_window;
    m_upgrade_window_isSet = true;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::is_upgrade_window_Set() const{
    return m_upgrade_window_isSet;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::is_upgrade_window_Valid() const{
    return m_upgrade_window_isValid;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkFirmwareUpgrades_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
