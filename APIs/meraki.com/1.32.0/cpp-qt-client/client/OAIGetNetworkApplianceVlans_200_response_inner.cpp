/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkApplianceVlans_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkApplianceVlans_200_response_inner::OAIGetNetworkApplianceVlans_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkApplianceVlans_200_response_inner::OAIGetNetworkApplianceVlans_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkApplianceVlans_200_response_inner::~OAIGetNetworkApplianceVlans_200_response_inner() {}

void OAIGetNetworkApplianceVlans_200_response_inner::initializeModel() {

    m_appliance_ip_isSet = false;
    m_appliance_ip_isValid = false;

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_dhcp_boot_filename_isSet = false;
    m_dhcp_boot_filename_isValid = false;

    m_dhcp_boot_next_server_isSet = false;
    m_dhcp_boot_next_server_isValid = false;

    m_dhcp_boot_options_enabled_isSet = false;
    m_dhcp_boot_options_enabled_isValid = false;

    m_dhcp_handling_isSet = false;
    m_dhcp_handling_isValid = false;

    m_dhcp_lease_time_isSet = false;
    m_dhcp_lease_time_isValid = false;

    m_dhcp_options_isSet = false;
    m_dhcp_options_isValid = false;

    m_dhcp_relay_server_ips_isSet = false;
    m_dhcp_relay_server_ips_isValid = false;

    m_dns_nameservers_isSet = false;
    m_dns_nameservers_isValid = false;

    m_fixed_ip_assignments_isSet = false;
    m_fixed_ip_assignments_isValid = false;

    m_group_policy_id_isSet = false;
    m_group_policy_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_id_isSet = false;
    m_interface_id_isValid = false;

    m_ipv6_isSet = false;
    m_ipv6_isValid = false;

    m_mandatory_dhcp_isSet = false;
    m_mandatory_dhcp_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reserved_ip_ranges_isSet = false;
    m_reserved_ip_ranges_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_template_vlan_type_isSet = false;
    m_template_vlan_type_isValid = false;

    m_vpn_nat_subnet_isSet = false;
    m_vpn_nat_subnet_isValid = false;
}

void OAIGetNetworkApplianceVlans_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkApplianceVlans_200_response_inner::fromJsonObject(QJsonObject json) {

    m_appliance_ip_isValid = ::OpenAPI::fromJsonValue(m_appliance_ip, json[QString("applianceIp")]);
    m_appliance_ip_isSet = !json[QString("applianceIp")].isNull() && m_appliance_ip_isValid;

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_dhcp_boot_filename_isValid = ::OpenAPI::fromJsonValue(m_dhcp_boot_filename, json[QString("dhcpBootFilename")]);
    m_dhcp_boot_filename_isSet = !json[QString("dhcpBootFilename")].isNull() && m_dhcp_boot_filename_isValid;

    m_dhcp_boot_next_server_isValid = ::OpenAPI::fromJsonValue(m_dhcp_boot_next_server, json[QString("dhcpBootNextServer")]);
    m_dhcp_boot_next_server_isSet = !json[QString("dhcpBootNextServer")].isNull() && m_dhcp_boot_next_server_isValid;

    m_dhcp_boot_options_enabled_isValid = ::OpenAPI::fromJsonValue(m_dhcp_boot_options_enabled, json[QString("dhcpBootOptionsEnabled")]);
    m_dhcp_boot_options_enabled_isSet = !json[QString("dhcpBootOptionsEnabled")].isNull() && m_dhcp_boot_options_enabled_isValid;

    m_dhcp_handling_isValid = ::OpenAPI::fromJsonValue(m_dhcp_handling, json[QString("dhcpHandling")]);
    m_dhcp_handling_isSet = !json[QString("dhcpHandling")].isNull() && m_dhcp_handling_isValid;

    m_dhcp_lease_time_isValid = ::OpenAPI::fromJsonValue(m_dhcp_lease_time, json[QString("dhcpLeaseTime")]);
    m_dhcp_lease_time_isSet = !json[QString("dhcpLeaseTime")].isNull() && m_dhcp_lease_time_isValid;

    m_dhcp_options_isValid = ::OpenAPI::fromJsonValue(m_dhcp_options, json[QString("dhcpOptions")]);
    m_dhcp_options_isSet = !json[QString("dhcpOptions")].isNull() && m_dhcp_options_isValid;

    m_dhcp_relay_server_ips_isValid = ::OpenAPI::fromJsonValue(m_dhcp_relay_server_ips, json[QString("dhcpRelayServerIps")]);
    m_dhcp_relay_server_ips_isSet = !json[QString("dhcpRelayServerIps")].isNull() && m_dhcp_relay_server_ips_isValid;

    m_dns_nameservers_isValid = ::OpenAPI::fromJsonValue(m_dns_nameservers, json[QString("dnsNameservers")]);
    m_dns_nameservers_isSet = !json[QString("dnsNameservers")].isNull() && m_dns_nameservers_isValid;

    m_fixed_ip_assignments_isValid = ::OpenAPI::fromJsonValue(m_fixed_ip_assignments, json[QString("fixedIpAssignments")]);
    m_fixed_ip_assignments_isSet = !json[QString("fixedIpAssignments")].isNull() && m_fixed_ip_assignments_isValid;

    m_group_policy_id_isValid = ::OpenAPI::fromJsonValue(m_group_policy_id, json[QString("groupPolicyId")]);
    m_group_policy_id_isSet = !json[QString("groupPolicyId")].isNull() && m_group_policy_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_id_isValid = ::OpenAPI::fromJsonValue(m_interface_id, json[QString("interfaceId")]);
    m_interface_id_isSet = !json[QString("interfaceId")].isNull() && m_interface_id_isValid;

    m_ipv6_isValid = ::OpenAPI::fromJsonValue(m_ipv6, json[QString("ipv6")]);
    m_ipv6_isSet = !json[QString("ipv6")].isNull() && m_ipv6_isValid;

    m_mandatory_dhcp_isValid = ::OpenAPI::fromJsonValue(m_mandatory_dhcp, json[QString("mandatoryDhcp")]);
    m_mandatory_dhcp_isSet = !json[QString("mandatoryDhcp")].isNull() && m_mandatory_dhcp_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reserved_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_ip_ranges, json[QString("reservedIpRanges")]);
    m_reserved_ip_ranges_isSet = !json[QString("reservedIpRanges")].isNull() && m_reserved_ip_ranges_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_template_vlan_type_isValid = ::OpenAPI::fromJsonValue(m_template_vlan_type, json[QString("templateVlanType")]);
    m_template_vlan_type_isSet = !json[QString("templateVlanType")].isNull() && m_template_vlan_type_isValid;

    m_vpn_nat_subnet_isValid = ::OpenAPI::fromJsonValue(m_vpn_nat_subnet, json[QString("vpnNatSubnet")]);
    m_vpn_nat_subnet_isSet = !json[QString("vpnNatSubnet")].isNull() && m_vpn_nat_subnet_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkApplianceVlans_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_appliance_ip_isSet) {
        obj.insert(QString("applianceIp"), ::OpenAPI::toJsonValue(m_appliance_ip));
    }
    if (m_cidr_isSet) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_dhcp_boot_filename_isSet) {
        obj.insert(QString("dhcpBootFilename"), ::OpenAPI::toJsonValue(m_dhcp_boot_filename));
    }
    if (m_dhcp_boot_next_server_isSet) {
        obj.insert(QString("dhcpBootNextServer"), ::OpenAPI::toJsonValue(m_dhcp_boot_next_server));
    }
    if (m_dhcp_boot_options_enabled_isSet) {
        obj.insert(QString("dhcpBootOptionsEnabled"), ::OpenAPI::toJsonValue(m_dhcp_boot_options_enabled));
    }
    if (m_dhcp_handling_isSet) {
        obj.insert(QString("dhcpHandling"), ::OpenAPI::toJsonValue(m_dhcp_handling));
    }
    if (m_dhcp_lease_time_isSet) {
        obj.insert(QString("dhcpLeaseTime"), ::OpenAPI::toJsonValue(m_dhcp_lease_time));
    }
    if (m_dhcp_options.size() > 0) {
        obj.insert(QString("dhcpOptions"), ::OpenAPI::toJsonValue(m_dhcp_options));
    }
    if (m_dhcp_relay_server_ips.size() > 0) {
        obj.insert(QString("dhcpRelayServerIps"), ::OpenAPI::toJsonValue(m_dhcp_relay_server_ips));
    }
    if (m_dns_nameservers_isSet) {
        obj.insert(QString("dnsNameservers"), ::OpenAPI::toJsonValue(m_dns_nameservers));
    }
    if (m_fixed_ip_assignments_isSet) {
        obj.insert(QString("fixedIpAssignments"), ::OpenAPI::toJsonValue(m_fixed_ip_assignments));
    }
    if (m_group_policy_id_isSet) {
        obj.insert(QString("groupPolicyId"), ::OpenAPI::toJsonValue(m_group_policy_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_id_isSet) {
        obj.insert(QString("interfaceId"), ::OpenAPI::toJsonValue(m_interface_id));
    }
    if (m_ipv6.isSet()) {
        obj.insert(QString("ipv6"), ::OpenAPI::toJsonValue(m_ipv6));
    }
    if (m_mandatory_dhcp.isSet()) {
        obj.insert(QString("mandatoryDhcp"), ::OpenAPI::toJsonValue(m_mandatory_dhcp));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reserved_ip_ranges.size() > 0) {
        obj.insert(QString("reservedIpRanges"), ::OpenAPI::toJsonValue(m_reserved_ip_ranges));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_template_vlan_type_isSet) {
        obj.insert(QString("templateVlanType"), ::OpenAPI::toJsonValue(m_template_vlan_type));
    }
    if (m_vpn_nat_subnet_isSet) {
        obj.insert(QString("vpnNatSubnet"), ::OpenAPI::toJsonValue(m_vpn_nat_subnet));
    }
    return obj;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getApplianceIp() const {
    return m_appliance_ip;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setApplianceIp(const QString &appliance_ip) {
    m_appliance_ip = appliance_ip;
    m_appliance_ip_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_appliance_ip_Set() const{
    return m_appliance_ip_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_appliance_ip_Valid() const{
    return m_appliance_ip_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getCidr() const {
    return m_cidr;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getDhcpBootFilename() const {
    return m_dhcp_boot_filename;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpBootFilename(const QString &dhcp_boot_filename) {
    m_dhcp_boot_filename = dhcp_boot_filename;
    m_dhcp_boot_filename_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_boot_filename_Set() const{
    return m_dhcp_boot_filename_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_boot_filename_Valid() const{
    return m_dhcp_boot_filename_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getDhcpBootNextServer() const {
    return m_dhcp_boot_next_server;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpBootNextServer(const QString &dhcp_boot_next_server) {
    m_dhcp_boot_next_server = dhcp_boot_next_server;
    m_dhcp_boot_next_server_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_boot_next_server_Set() const{
    return m_dhcp_boot_next_server_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_boot_next_server_Valid() const{
    return m_dhcp_boot_next_server_isValid;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::isDhcpBootOptionsEnabled() const {
    return m_dhcp_boot_options_enabled;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpBootOptionsEnabled(const bool &dhcp_boot_options_enabled) {
    m_dhcp_boot_options_enabled = dhcp_boot_options_enabled;
    m_dhcp_boot_options_enabled_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_boot_options_enabled_Set() const{
    return m_dhcp_boot_options_enabled_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_boot_options_enabled_Valid() const{
    return m_dhcp_boot_options_enabled_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getDhcpHandling() const {
    return m_dhcp_handling;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpHandling(const QString &dhcp_handling) {
    m_dhcp_handling = dhcp_handling;
    m_dhcp_handling_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_handling_Set() const{
    return m_dhcp_handling_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_handling_Valid() const{
    return m_dhcp_handling_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getDhcpLeaseTime() const {
    return m_dhcp_lease_time;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpLeaseTime(const QString &dhcp_lease_time) {
    m_dhcp_lease_time = dhcp_lease_time;
    m_dhcp_lease_time_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_lease_time_Set() const{
    return m_dhcp_lease_time_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_lease_time_Valid() const{
    return m_dhcp_lease_time_isValid;
}

QList<OAIGetNetworkApplianceVlans_200_response_inner_dhcpOptions_inner> OAIGetNetworkApplianceVlans_200_response_inner::getDhcpOptions() const {
    return m_dhcp_options;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpOptions(const QList<OAIGetNetworkApplianceVlans_200_response_inner_dhcpOptions_inner> &dhcp_options) {
    m_dhcp_options = dhcp_options;
    m_dhcp_options_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_options_Set() const{
    return m_dhcp_options_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_options_Valid() const{
    return m_dhcp_options_isValid;
}

QList<QString> OAIGetNetworkApplianceVlans_200_response_inner::getDhcpRelayServerIps() const {
    return m_dhcp_relay_server_ips;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDhcpRelayServerIps(const QList<QString> &dhcp_relay_server_ips) {
    m_dhcp_relay_server_ips = dhcp_relay_server_ips;
    m_dhcp_relay_server_ips_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_relay_server_ips_Set() const{
    return m_dhcp_relay_server_ips_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dhcp_relay_server_ips_Valid() const{
    return m_dhcp_relay_server_ips_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getDnsNameservers() const {
    return m_dns_nameservers;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setDnsNameservers(const QString &dns_nameservers) {
    m_dns_nameservers = dns_nameservers;
    m_dns_nameservers_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dns_nameservers_Set() const{
    return m_dns_nameservers_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_dns_nameservers_Valid() const{
    return m_dns_nameservers_isValid;
}

OAIObject OAIGetNetworkApplianceVlans_200_response_inner::getFixedIpAssignments() const {
    return m_fixed_ip_assignments;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setFixedIpAssignments(const OAIObject &fixed_ip_assignments) {
    m_fixed_ip_assignments = fixed_ip_assignments;
    m_fixed_ip_assignments_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_fixed_ip_assignments_Set() const{
    return m_fixed_ip_assignments_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_fixed_ip_assignments_Valid() const{
    return m_fixed_ip_assignments_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getGroupPolicyId() const {
    return m_group_policy_id;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setGroupPolicyId(const QString &group_policy_id) {
    m_group_policy_id = group_policy_id;
    m_group_policy_id_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_group_policy_id_Set() const{
    return m_group_policy_id_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_group_policy_id_Valid() const{
    return m_group_policy_id_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getInterfaceId() const {
    return m_interface_id;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setInterfaceId(const QString &interface_id) {
    m_interface_id = interface_id;
    m_interface_id_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_interface_id_Set() const{
    return m_interface_id_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_interface_id_Valid() const{
    return m_interface_id_isValid;
}

OAIGetNetworkApplianceVlans_200_response_inner_ipv6 OAIGetNetworkApplianceVlans_200_response_inner::getIpv6() const {
    return m_ipv6;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setIpv6(const OAIGetNetworkApplianceVlans_200_response_inner_ipv6 &ipv6) {
    m_ipv6 = ipv6;
    m_ipv6_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_ipv6_Set() const{
    return m_ipv6_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_ipv6_Valid() const{
    return m_ipv6_isValid;
}

OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp OAIGetNetworkApplianceVlans_200_response_inner::getMandatoryDhcp() const {
    return m_mandatory_dhcp;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setMandatoryDhcp(const OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp &mandatory_dhcp) {
    m_mandatory_dhcp = mandatory_dhcp;
    m_mandatory_dhcp_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_mandatory_dhcp_Set() const{
    return m_mandatory_dhcp_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_mandatory_dhcp_Valid() const{
    return m_mandatory_dhcp_isValid;
}

qint32 OAIGetNetworkApplianceVlans_200_response_inner::getMask() const {
    return m_mask;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setMask(const qint32 &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGetNetworkApplianceVlans_200_response_inner_reservedIpRanges_inner> OAIGetNetworkApplianceVlans_200_response_inner::getReservedIpRanges() const {
    return m_reserved_ip_ranges;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setReservedIpRanges(const QList<OAIGetNetworkApplianceVlans_200_response_inner_reservedIpRanges_inner> &reserved_ip_ranges) {
    m_reserved_ip_ranges = reserved_ip_ranges;
    m_reserved_ip_ranges_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_reserved_ip_ranges_Set() const{
    return m_reserved_ip_ranges_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_reserved_ip_ranges_Valid() const{
    return m_reserved_ip_ranges_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getSubnet() const {
    return m_subnet;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_subnet_Valid() const{
    return m_subnet_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getTemplateVlanType() const {
    return m_template_vlan_type;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setTemplateVlanType(const QString &template_vlan_type) {
    m_template_vlan_type = template_vlan_type;
    m_template_vlan_type_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_template_vlan_type_Set() const{
    return m_template_vlan_type_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_template_vlan_type_Valid() const{
    return m_template_vlan_type_isValid;
}

QString OAIGetNetworkApplianceVlans_200_response_inner::getVpnNatSubnet() const {
    return m_vpn_nat_subnet;
}
void OAIGetNetworkApplianceVlans_200_response_inner::setVpnNatSubnet(const QString &vpn_nat_subnet) {
    m_vpn_nat_subnet = vpn_nat_subnet;
    m_vpn_nat_subnet_isSet = true;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_vpn_nat_subnet_Set() const{
    return m_vpn_nat_subnet_isSet;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::is_vpn_nat_subnet_Valid() const{
    return m_vpn_nat_subnet_isValid;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appliance_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_boot_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_boot_next_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_boot_options_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_handling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_lease_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_relay_server_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_nameservers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_ip_assignments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_dhcp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_vlan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_nat_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkApplianceVlans_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
