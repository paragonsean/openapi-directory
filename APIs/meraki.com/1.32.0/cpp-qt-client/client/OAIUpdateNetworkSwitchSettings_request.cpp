/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchSettings_request::OAIUpdateNetworkSwitchSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchSettings_request::OAIUpdateNetworkSwitchSettings_request() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchSettings_request::~OAIUpdateNetworkSwitchSettings_request() {}

void OAIUpdateNetworkSwitchSettings_request::initializeModel() {

    m_power_exceptions_isSet = false;
    m_power_exceptions_isValid = false;

    m_use_combined_power_isSet = false;
    m_use_combined_power_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;
}

void OAIUpdateNetworkSwitchSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchSettings_request::fromJsonObject(QJsonObject json) {

    m_power_exceptions_isValid = ::OpenAPI::fromJsonValue(m_power_exceptions, json[QString("powerExceptions")]);
    m_power_exceptions_isSet = !json[QString("powerExceptions")].isNull() && m_power_exceptions_isValid;

    m_use_combined_power_isValid = ::OpenAPI::fromJsonValue(m_use_combined_power, json[QString("useCombinedPower")]);
    m_use_combined_power_isSet = !json[QString("useCombinedPower")].isNull() && m_use_combined_power_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;
}

QString OAIUpdateNetworkSwitchSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_power_exceptions.size() > 0) {
        obj.insert(QString("powerExceptions"), ::OpenAPI::toJsonValue(m_power_exceptions));
    }
    if (m_use_combined_power_isSet) {
        obj.insert(QString("useCombinedPower"), ::OpenAPI::toJsonValue(m_use_combined_power));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    return obj;
}

QList<OAIUpdateNetworkSwitchSettings_request_powerExceptions_inner> OAIUpdateNetworkSwitchSettings_request::getPowerExceptions() const {
    return m_power_exceptions;
}
void OAIUpdateNetworkSwitchSettings_request::setPowerExceptions(const QList<OAIUpdateNetworkSwitchSettings_request_powerExceptions_inner> &power_exceptions) {
    m_power_exceptions = power_exceptions;
    m_power_exceptions_isSet = true;
}

bool OAIUpdateNetworkSwitchSettings_request::is_power_exceptions_Set() const{
    return m_power_exceptions_isSet;
}

bool OAIUpdateNetworkSwitchSettings_request::is_power_exceptions_Valid() const{
    return m_power_exceptions_isValid;
}

bool OAIUpdateNetworkSwitchSettings_request::isUseCombinedPower() const {
    return m_use_combined_power;
}
void OAIUpdateNetworkSwitchSettings_request::setUseCombinedPower(const bool &use_combined_power) {
    m_use_combined_power = use_combined_power;
    m_use_combined_power_isSet = true;
}

bool OAIUpdateNetworkSwitchSettings_request::is_use_combined_power_Set() const{
    return m_use_combined_power_isSet;
}

bool OAIUpdateNetworkSwitchSettings_request::is_use_combined_power_Valid() const{
    return m_use_combined_power_isValid;
}

qint32 OAIUpdateNetworkSwitchSettings_request::getVlan() const {
    return m_vlan;
}
void OAIUpdateNetworkSwitchSettings_request::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIUpdateNetworkSwitchSettings_request::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIUpdateNetworkSwitchSettings_request::is_vlan_Valid() const{
    return m_vlan_isValid;
}

bool OAIUpdateNetworkSwitchSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_power_exceptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_combined_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
