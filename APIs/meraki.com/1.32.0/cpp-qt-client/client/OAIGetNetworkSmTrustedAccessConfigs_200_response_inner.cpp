/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmTrustedAccessConfigs_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::OAIGetNetworkSmTrustedAccessConfigs_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::OAIGetNetworkSmTrustedAccessConfigs_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::~OAIGetNetworkSmTrustedAccessConfigs_200_response_inner() {}

void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::initializeModel() {

    m_access_end_at_isSet = false;
    m_access_end_at_isValid = false;

    m_access_start_at_isSet = false;
    m_access_start_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_ssid_name_isSet = false;
    m_ssid_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_timebound_type_isSet = false;
    m_timebound_type_isValid = false;
}

void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::fromJsonObject(QJsonObject json) {

    m_access_end_at_isValid = ::OpenAPI::fromJsonValue(m_access_end_at, json[QString("accessEndAt")]);
    m_access_end_at_isSet = !json[QString("accessEndAt")].isNull() && m_access_end_at_isValid;

    m_access_start_at_isValid = ::OpenAPI::fromJsonValue(m_access_start_at, json[QString("accessStartAt")]);
    m_access_start_at_isSet = !json[QString("accessStartAt")].isNull() && m_access_start_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_ssid_name_isValid = ::OpenAPI::fromJsonValue(m_ssid_name, json[QString("ssidName")]);
    m_ssid_name_isSet = !json[QString("ssidName")].isNull() && m_ssid_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_timebound_type_isValid = ::OpenAPI::fromJsonValue(m_timebound_type, json[QString("timeboundType")]);
    m_timebound_type_isSet = !json[QString("timeboundType")].isNull() && m_timebound_type_isValid;
}

QString OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_access_end_at_isSet) {
        obj.insert(QString("accessEndAt"), ::OpenAPI::toJsonValue(m_access_end_at));
    }
    if (m_access_start_at_isSet) {
        obj.insert(QString("accessStartAt"), ::OpenAPI::toJsonValue(m_access_start_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_ssid_name_isSet) {
        obj.insert(QString("ssidName"), ::OpenAPI::toJsonValue(m_ssid_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_timebound_type_isSet) {
        obj.insert(QString("timeboundType"), ::OpenAPI::toJsonValue(m_timebound_type));
    }
    return obj;
}

QDateTime OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getAccessEndAt() const {
    return m_access_end_at;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setAccessEndAt(const QDateTime &access_end_at) {
    m_access_end_at = access_end_at;
    m_access_end_at_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_access_end_at_Set() const{
    return m_access_end_at_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_access_end_at_Valid() const{
    return m_access_end_at_isValid;
}

QDateTime OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getAccessStartAt() const {
    return m_access_start_at;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setAccessStartAt(const QDateTime &access_start_at) {
    m_access_start_at = access_start_at;
    m_access_start_at_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_access_start_at_Set() const{
    return m_access_start_at_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_access_start_at_Valid() const{
    return m_access_start_at_isValid;
}

QString OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getScope() const {
    return m_scope;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getSsidName() const {
    return m_ssid_name;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setSsidName(const QString &ssid_name) {
    m_ssid_name = ssid_name;
    m_ssid_name_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_ssid_name_Set() const{
    return m_ssid_name_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_ssid_name_Valid() const{
    return m_ssid_name_isValid;
}

QList<QString> OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getTags() const {
    return m_tags;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::getTimeboundType() const {
    return m_timebound_type;
}
void OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::setTimeboundType(const QString &timebound_type) {
    m_timebound_type = timebound_type;
    m_timebound_type_isSet = true;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_timebound_type_Set() const{
    return m_timebound_type_isSet;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::is_timebound_type_Valid() const{
    return m_timebound_type_isValid;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timebound_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmTrustedAccessConfigs_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
