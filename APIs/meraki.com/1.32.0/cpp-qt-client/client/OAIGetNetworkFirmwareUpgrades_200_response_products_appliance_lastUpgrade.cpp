/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade() {
    this->initializeModel();
}

OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::~OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade() {}

void OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::initializeModel() {

    m_from_version_isSet = false;
    m_from_version_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_to_version_isSet = false;
    m_to_version_isValid = false;
}

void OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::fromJsonObject(QJsonObject json) {

    m_from_version_isValid = ::OpenAPI::fromJsonValue(m_from_version, json[QString("fromVersion")]);
    m_from_version_isSet = !json[QString("fromVersion")].isNull() && m_from_version_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_to_version_isValid = ::OpenAPI::fromJsonValue(m_to_version, json[QString("toVersion")]);
    m_to_version_isSet = !json[QString("toVersion")].isNull() && m_to_version_isValid;
}

QString OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::asJsonObject() const {
    QJsonObject obj;
    if (m_from_version.isSet()) {
        obj.insert(QString("fromVersion"), ::OpenAPI::toJsonValue(m_from_version));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_to_version.isSet()) {
        obj.insert(QString("toVersion"), ::OpenAPI::toJsonValue(m_to_version));
    }
    return obj;
}

OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade_fromVersion OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::getFromVersion() const {
    return m_from_version;
}
void OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::setFromVersion(const OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade_fromVersion &from_version) {
    m_from_version = from_version;
    m_from_version_isSet = true;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::is_from_version_Set() const{
    return m_from_version_isSet;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::is_from_version_Valid() const{
    return m_from_version_isValid;
}

QDateTime OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::getTime() const {
    return m_time;
}
void OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::is_time_Valid() const{
    return m_time_isValid;
}

OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade_toVersion OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::getToVersion() const {
    return m_to_version;
}
void OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::setToVersion(const OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade_toVersion &to_version) {
    m_to_version = to_version;
    m_to_version_isSet = true;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::is_to_version_Set() const{
    return m_to_version_isSet;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::is_to_version_Valid() const{
    return m_to_version_isValid;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkFirmwareUpgrades_200_response_products_appliance_lastUpgrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
