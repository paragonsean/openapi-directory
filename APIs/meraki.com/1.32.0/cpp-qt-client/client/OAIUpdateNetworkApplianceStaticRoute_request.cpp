/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceStaticRoute_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceStaticRoute_request::OAIUpdateNetworkApplianceStaticRoute_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceStaticRoute_request::OAIUpdateNetworkApplianceStaticRoute_request() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceStaticRoute_request::~OAIUpdateNetworkApplianceStaticRoute_request() {}

void OAIUpdateNetworkApplianceStaticRoute_request::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_fixed_ip_assignments_isSet = false;
    m_fixed_ip_assignments_isValid = false;

    m_gateway_ip_isSet = false;
    m_gateway_ip_isValid = false;

    m_gateway_vlan_id_isSet = false;
    m_gateway_vlan_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reserved_ip_ranges_isSet = false;
    m_reserved_ip_ranges_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIUpdateNetworkApplianceStaticRoute_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceStaticRoute_request::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_fixed_ip_assignments_isValid = ::OpenAPI::fromJsonValue(m_fixed_ip_assignments, json[QString("fixedIpAssignments")]);
    m_fixed_ip_assignments_isSet = !json[QString("fixedIpAssignments")].isNull() && m_fixed_ip_assignments_isValid;

    m_gateway_ip_isValid = ::OpenAPI::fromJsonValue(m_gateway_ip, json[QString("gatewayIp")]);
    m_gateway_ip_isSet = !json[QString("gatewayIp")].isNull() && m_gateway_ip_isValid;

    m_gateway_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_gateway_vlan_id, json[QString("gatewayVlanId")]);
    m_gateway_vlan_id_isSet = !json[QString("gatewayVlanId")].isNull() && m_gateway_vlan_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reserved_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_ip_ranges, json[QString("reservedIpRanges")]);
    m_reserved_ip_ranges_isSet = !json[QString("reservedIpRanges")].isNull() && m_reserved_ip_ranges_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIUpdateNetworkApplianceStaticRoute_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceStaticRoute_request::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_fixed_ip_assignments_isSet) {
        obj.insert(QString("fixedIpAssignments"), ::OpenAPI::toJsonValue(m_fixed_ip_assignments));
    }
    if (m_gateway_ip_isSet) {
        obj.insert(QString("gatewayIp"), ::OpenAPI::toJsonValue(m_gateway_ip));
    }
    if (m_gateway_vlan_id_isSet) {
        obj.insert(QString("gatewayVlanId"), ::OpenAPI::toJsonValue(m_gateway_vlan_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reserved_ip_ranges.size() > 0) {
        obj.insert(QString("reservedIpRanges"), ::OpenAPI::toJsonValue(m_reserved_ip_ranges));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIObject OAIUpdateNetworkApplianceStaticRoute_request::getFixedIpAssignments() const {
    return m_fixed_ip_assignments;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setFixedIpAssignments(const OAIObject &fixed_ip_assignments) {
    m_fixed_ip_assignments = fixed_ip_assignments;
    m_fixed_ip_assignments_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_fixed_ip_assignments_Set() const{
    return m_fixed_ip_assignments_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_fixed_ip_assignments_Valid() const{
    return m_fixed_ip_assignments_isValid;
}

QString OAIUpdateNetworkApplianceStaticRoute_request::getGatewayIp() const {
    return m_gateway_ip;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setGatewayIp(const QString &gateway_ip) {
    m_gateway_ip = gateway_ip;
    m_gateway_ip_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_gateway_ip_Set() const{
    return m_gateway_ip_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_gateway_ip_Valid() const{
    return m_gateway_ip_isValid;
}

QString OAIUpdateNetworkApplianceStaticRoute_request::getGatewayVlanId() const {
    return m_gateway_vlan_id;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setGatewayVlanId(const QString &gateway_vlan_id) {
    m_gateway_vlan_id = gateway_vlan_id;
    m_gateway_vlan_id_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_gateway_vlan_id_Set() const{
    return m_gateway_vlan_id_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_gateway_vlan_id_Valid() const{
    return m_gateway_vlan_id_isValid;
}

QString OAIUpdateNetworkApplianceStaticRoute_request::getName() const {
    return m_name;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIUpdateNetworkApplianceStaticRoute_request_reservedIpRanges_inner> OAIUpdateNetworkApplianceStaticRoute_request::getReservedIpRanges() const {
    return m_reserved_ip_ranges;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setReservedIpRanges(const QList<OAIUpdateNetworkApplianceStaticRoute_request_reservedIpRanges_inner> &reserved_ip_ranges) {
    m_reserved_ip_ranges = reserved_ip_ranges;
    m_reserved_ip_ranges_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_reserved_ip_ranges_Set() const{
    return m_reserved_ip_ranges_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_reserved_ip_ranges_Valid() const{
    return m_reserved_ip_ranges_isValid;
}

QString OAIUpdateNetworkApplianceStaticRoute_request::getSubnet() const {
    return m_subnet;
}
void OAIUpdateNetworkApplianceStaticRoute_request::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_ip_assignments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceStaticRoute_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
