/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature() {
    this->initializeModel();
}

OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::~OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature() {}

void OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::initializeModel() {

    m_celsius_isSet = false;
    m_celsius_isValid = false;

    m_fahrenheit_isSet = false;
    m_fahrenheit_isValid = false;
}

void OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::fromJsonObject(QJsonObject json) {

    m_celsius_isValid = ::OpenAPI::fromJsonValue(m_celsius, json[QString("celsius")]);
    m_celsius_isSet = !json[QString("celsius")].isNull() && m_celsius_isValid;

    m_fahrenheit_isValid = ::OpenAPI::fromJsonValue(m_fahrenheit, json[QString("fahrenheit")]);
    m_fahrenheit_isSet = !json[QString("fahrenheit")].isNull() && m_fahrenheit_isValid;
}

QString OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::asJsonObject() const {
    QJsonObject obj;
    if (m_celsius_isSet) {
        obj.insert(QString("celsius"), ::OpenAPI::toJsonValue(m_celsius));
    }
    if (m_fahrenheit_isSet) {
        obj.insert(QString("fahrenheit"), ::OpenAPI::toJsonValue(m_fahrenheit));
    }
    return obj;
}

float OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::getCelsius() const {
    return m_celsius;
}
void OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::setCelsius(const float &celsius) {
    m_celsius = celsius;
    m_celsius_isSet = true;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::is_celsius_Set() const{
    return m_celsius_isSet;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::is_celsius_Valid() const{
    return m_celsius_isValid;
}

float OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::getFahrenheit() const {
    return m_fahrenheit;
}
void OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::setFahrenheit(const float &fahrenheit) {
    m_fahrenheit = fahrenheit;
    m_fahrenheit_isSet = true;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::is_fahrenheit_Set() const{
    return m_fahrenheit_isSet;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::is_fahrenheit_Valid() const{
    return m_fahrenheit_isValid;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_celsius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fahrenheit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_temperature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
