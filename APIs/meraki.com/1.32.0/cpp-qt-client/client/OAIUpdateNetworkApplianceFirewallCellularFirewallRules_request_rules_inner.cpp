/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::~OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner() {}

void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_dest_cidr_isSet = false;
    m_dest_cidr_isValid = false;

    m_dest_port_isSet = false;
    m_dest_port_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_src_cidr_isSet = false;
    m_src_cidr_isValid = false;

    m_src_port_isSet = false;
    m_src_port_isValid = false;

    m_syslog_enabled_isSet = false;
    m_syslog_enabled_isValid = false;
}

void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_dest_cidr_isValid = ::OpenAPI::fromJsonValue(m_dest_cidr, json[QString("destCidr")]);
    m_dest_cidr_isSet = !json[QString("destCidr")].isNull() && m_dest_cidr_isValid;

    m_dest_port_isValid = ::OpenAPI::fromJsonValue(m_dest_port, json[QString("destPort")]);
    m_dest_port_isSet = !json[QString("destPort")].isNull() && m_dest_port_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_src_cidr_isValid = ::OpenAPI::fromJsonValue(m_src_cidr, json[QString("srcCidr")]);
    m_src_cidr_isSet = !json[QString("srcCidr")].isNull() && m_src_cidr_isValid;

    m_src_port_isValid = ::OpenAPI::fromJsonValue(m_src_port, json[QString("srcPort")]);
    m_src_port_isSet = !json[QString("srcPort")].isNull() && m_src_port_isValid;

    m_syslog_enabled_isValid = ::OpenAPI::fromJsonValue(m_syslog_enabled, json[QString("syslogEnabled")]);
    m_syslog_enabled_isSet = !json[QString("syslogEnabled")].isNull() && m_syslog_enabled_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_dest_cidr_isSet) {
        obj.insert(QString("destCidr"), ::OpenAPI::toJsonValue(m_dest_cidr));
    }
    if (m_dest_port_isSet) {
        obj.insert(QString("destPort"), ::OpenAPI::toJsonValue(m_dest_port));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_src_cidr_isSet) {
        obj.insert(QString("srcCidr"), ::OpenAPI::toJsonValue(m_src_cidr));
    }
    if (m_src_port_isSet) {
        obj.insert(QString("srcPort"), ::OpenAPI::toJsonValue(m_src_port));
    }
    if (m_syslog_enabled_isSet) {
        obj.insert(QString("syslogEnabled"), ::OpenAPI::toJsonValue(m_syslog_enabled));
    }
    return obj;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getComment() const {
    return m_comment;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getDestCidr() const {
    return m_dest_cidr;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setDestCidr(const QString &dest_cidr) {
    m_dest_cidr = dest_cidr;
    m_dest_cidr_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_dest_cidr_Set() const{
    return m_dest_cidr_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_dest_cidr_Valid() const{
    return m_dest_cidr_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getDestPort() const {
    return m_dest_port;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setDestPort(const QString &dest_port) {
    m_dest_port = dest_port;
    m_dest_port_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_dest_port_Set() const{
    return m_dest_port_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_dest_port_Valid() const{
    return m_dest_port_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getPolicy() const {
    return m_policy;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getProtocol() const {
    return m_protocol;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getSrcCidr() const {
    return m_src_cidr;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setSrcCidr(const QString &src_cidr) {
    m_src_cidr = src_cidr;
    m_src_cidr_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_src_cidr_Set() const{
    return m_src_cidr_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_src_cidr_Valid() const{
    return m_src_cidr_isValid;
}

QString OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::getSrcPort() const {
    return m_src_port;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setSrcPort(const QString &src_port) {
    m_src_port = src_port;
    m_src_port_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_src_port_Set() const{
    return m_src_port_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_src_port_Valid() const{
    return m_src_port_isValid;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::isSyslogEnabled() const {
    return m_syslog_enabled;
}
void OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::setSyslogEnabled(const bool &syslog_enabled) {
    m_syslog_enabled = syslog_enabled;
    m_syslog_enabled_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_syslog_enabled_Set() const{
    return m_syslog_enabled_isSet;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::is_syslog_enabled_Valid() const{
    return m_syslog_enabled_isValid;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dest_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dest_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syslog_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request_rules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dest_cidr_isValid && m_policy_isValid && m_protocol_isValid && m_src_cidr_isValid && true;
}

} // namespace OpenAPI
