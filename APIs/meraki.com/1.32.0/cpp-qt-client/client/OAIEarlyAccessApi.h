/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEarlyAccessApi_H
#define OAI_OAIEarlyAccessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationEarlyAccessFeaturesOptIn_request.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEarlyAccessApi : public QObject {
    Q_OBJECT

public:
    OAIEarlyAccessApi(const int timeOut = 0);
    ~OAIEarlyAccessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_early_access_features_opt_in_request OAICreateOrganizationEarlyAccessFeaturesOptIn_request [required]
    */
    virtual void createOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const OAICreateOrganizationEarlyAccessFeaturesOptIn_request &oai_create_organization_early_access_features_opt_in_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    */
    virtual void deleteOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeaturesOptIns(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeatures(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    * @param[in]  oai_update_organization_early_access_features_opt_in_request OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request [optional]
    */
    virtual void updateOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request> &oai_update_organization_early_access_features_opt_in_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void deleteOrganizationEarlyAccessFeaturesOptInSignal();
    void getOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void getOrganizationEarlyAccessFeaturesOptInsSignal(QList<OAIObject> summary);
    void getOrganizationEarlyAccessFeaturesSignal(QList<OAIObject> summary);
    void updateOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);


    void createOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationEarlyAccessFeaturesOptInsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationEarlyAccessFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void createOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void deleteOrganizationEarlyAccessFeaturesOptInSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void getOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInsSignalError() instead")
    void getOrganizationEarlyAccessFeaturesOptInsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesSignalError() instead")
    void getOrganizationEarlyAccessFeaturesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void updateOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void createOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void deleteOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInsSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesOptInsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void updateOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
