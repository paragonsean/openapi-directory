/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWirelessApi_H
#define OAI_OAIWirelessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkWirelessRfProfile_201_response.h"
#include "OAICreateNetworkWirelessRfProfile_request.h"
#include "OAICreateNetworkWirelessSsidIdentityPsk_request.h"
#include "OAIGetDeviceWirelessBluetoothSettings_200_response.h"
#include "OAIGetDeviceWirelessConnectionStats_200_response.h"
#include "OAIGetNetworkWirelessBluetoothSettings_200_response.h"
#include "OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessClientCountHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessConnectionStats_200_response.h"
#include "OAIGetNetworkWirelessDataRateHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessFailedConnections_200_response_inner.h"
#include "OAIGetNetworkWirelessLatencyHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessSettings_200_response.h"
#include "OAIGetNetworkWirelessSignalQualityHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessSsidEapOverride_200_response.h"
#include "OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner.h"
#include "OAIGetNetworkWirelessSsidSplashSettings_200_response.h"
#include "OAIGetNetworkWirelessUsageHistory_200_response_inner.h"
#include "OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceWirelessBluetoothSettings_request.h"
#include "OAIUpdateDeviceWirelessRadioSettings_request.h"
#include "OAIUpdateNetworkWirelessAlternateManagementInterface_request.h"
#include "OAIUpdateNetworkWirelessBilling_request.h"
#include "OAIUpdateNetworkWirelessBluetoothSettings_request.h"
#include "OAIUpdateNetworkWirelessRfProfile_request.h"
#include "OAIUpdateNetworkWirelessSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidBonjourForwarding_request.h"
#include "OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request.h"
#include "OAIUpdateNetworkWirelessSsidEapOverride_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidHotspot20_request.h"
#include "OAIUpdateNetworkWirelessSsidIdentityPsk_request.h"
#include "OAIUpdateNetworkWirelessSsidSchedules_request.h"
#include "OAIUpdateNetworkWirelessSsidSplashSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidTrafficShapingRules_request.h"
#include "OAIUpdateNetworkWirelessSsidVpn_request.h"
#include "OAIUpdateNetworkWirelessSsid_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWirelessApi : public QObject {
    Q_OBJECT

public:
    OAIWirelessApi(const int timeOut = 0);
    ~OAIWirelessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_wireless_rf_profile_request OAICreateNetworkWirelessRfProfile_request [required]
    */
    virtual void createNetworkWirelessRfProfile(const QString &network_id, const OAICreateNetworkWirelessRfProfile_request &oai_create_network_wireless_rf_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_create_network_wireless_ssid_identity_psk_request OAICreateNetworkWirelessSsidIdentityPsk_request [required]
    */
    virtual void createNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const OAICreateNetworkWirelessSsidIdentityPsk_request &oai_create_network_wireless_ssid_identity_psk_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    */
    virtual void deleteNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    */
    virtual void deleteNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessBluetoothSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getDeviceWirelessConnectionStats(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getDeviceWirelessLatencyStats(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessRadioSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessStatus(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkWirelessAirMarshal(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessAlternateManagementInterface(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessBilling(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessBluetoothSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    */
    virtual void getNetworkWirelessChannelUtilizationHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessClientConnectionStats(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  types QList<QString> [optional]
    * @param[in]  included_severities QList<QString> [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  device_serial QString [optional]
    */
    virtual void getNetworkWirelessClientConnectivityEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_severities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessClientCountHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkWirelessClientLatencyHistory(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessClientLatencyStats(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessClientsConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessClientsLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessDataRateHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessDevicesConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessDevicesLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  client_id QString [optional]
    */
    virtual void getNetworkWirelessFailedConnections(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  access_category QString [optional]
    */
    virtual void getNetworkWirelessLatencyHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &access_category = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkWirelessMeshStatuses(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    */
    virtual void getNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  include_template_profiles bool [optional]
    */
    virtual void getNetworkWirelessRfProfiles(const QString &network_id, const ::OpenAPI::OptionalParam<bool> &include_template_profiles = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessSignalQualityHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsid(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidBonjourForwarding(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidDeviceTypeGroupPolicies(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidEapOverride(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidHotspot20(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    */
    virtual void getNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidIdentityPsks(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSchedules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidTrafficShapingRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidVpn(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessSsids(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessUsageHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationWirelessDevicesEthernetStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_wireless_bluetooth_settings_request OAIUpdateDeviceWirelessBluetoothSettings_request [optional]
    */
    virtual void updateDeviceWirelessBluetoothSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessBluetoothSettings_request> &oai_update_device_wireless_bluetooth_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessBluetoothSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_wireless_radio_settings_request OAIUpdateDeviceWirelessRadioSettings_request [optional]
    */
    virtual void updateDeviceWirelessRadioSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessRadioSettings_request> &oai_update_device_wireless_radio_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessRadioSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_alternate_management_interface_request OAIUpdateNetworkWirelessAlternateManagementInterface_request [optional]
    */
    virtual void updateNetworkWirelessAlternateManagementInterface(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessAlternateManagementInterface_request> &oai_update_network_wireless_alternate_management_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessAlternateManagementInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_billing_request OAIUpdateNetworkWirelessBilling_request [optional]
    */
    virtual void updateNetworkWirelessBilling(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBilling_request> &oai_update_network_wireless_billing_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBilling_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_bluetooth_settings_request OAIUpdateNetworkWirelessBluetoothSettings_request [optional]
    */
    virtual void updateNetworkWirelessBluetoothSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBluetoothSettings_request> &oai_update_network_wireless_bluetooth_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBluetoothSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    * @param[in]  oai_update_network_wireless_rf_profile_request OAIUpdateNetworkWirelessRfProfile_request [optional]
    */
    virtual void updateNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessRfProfile_request> &oai_update_network_wireless_rf_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessRfProfile_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_settings_request OAIUpdateNetworkWirelessSettings_request [optional]
    */
    virtual void updateNetworkWirelessSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSettings_request> &oai_update_network_wireless_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_request OAIUpdateNetworkWirelessSsid_request [optional]
    */
    virtual void updateNetworkWirelessSsid(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsid_request> &oai_update_network_wireless_ssid_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsid_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_bonjour_forwarding_request OAIUpdateNetworkWirelessSsidBonjourForwarding_request [optional]
    */
    virtual void updateNetworkWirelessSsidBonjourForwarding(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidBonjourForwarding_request> &oai_update_network_wireless_ssid_bonjour_forwarding_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidBonjourForwarding_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_device_type_group_policies_request OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request [optional]
    */
    virtual void updateNetworkWirelessSsidDeviceTypeGroupPolicies(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request> &oai_update_network_wireless_ssid_device_type_group_policies_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_eap_override_request OAIUpdateNetworkWirelessSsidEapOverride_request [optional]
    */
    virtual void updateNetworkWirelessSsidEapOverride(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidEapOverride_request> &oai_update_network_wireless_ssid_eap_override_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidEapOverride_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_hotspot20_request OAIUpdateNetworkWirelessSsidHotspot20_request [optional]
    */
    virtual void updateNetworkWirelessSsidHotspot20(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidHotspot20_request> &oai_update_network_wireless_ssid_hotspot20_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidHotspot20_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    * @param[in]  oai_update_network_wireless_ssid_identity_psk_request OAIUpdateNetworkWirelessSsidIdentityPsk_request [optional]
    */
    virtual void updateNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidIdentityPsk_request> &oai_update_network_wireless_ssid_identity_psk_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidIdentityPsk_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_schedules_request OAIUpdateNetworkWirelessSsidSchedules_request [optional]
    */
    virtual void updateNetworkWirelessSsidSchedules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSchedules_request> &oai_update_network_wireless_ssid_schedules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSchedules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_splash_settings_request OAIUpdateNetworkWirelessSsidSplashSettings_request [optional]
    */
    virtual void updateNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request> &oai_update_network_wireless_ssid_splash_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_traffic_shaping_rules_request OAIUpdateNetworkWirelessSsidTrafficShapingRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidTrafficShapingRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidTrafficShapingRules_request> &oai_update_network_wireless_ssid_traffic_shaping_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidTrafficShapingRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_vpn_request OAIUpdateNetworkWirelessSsidVpn_request [optional]
    */
    virtual void updateNetworkWirelessSsidVpn(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request> &oai_update_network_wireless_ssid_vpn_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void createNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessRadioSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessStatusCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessAirMarshalCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessBillingCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessChannelUtilizationHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientConnectivityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientCountHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientsConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientsLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDataRateHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDevicesConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDevicesLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessFailedConnectionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessMeshStatusesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSignalQualityHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidBonjourForwardingCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidEapOverrideCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidHotspot20Callback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidIdentityPsksCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWirelessDevicesEthernetStatusesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceWirelessRadioSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessBillingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidBonjourForwardingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidEapOverrideCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidHotspot20Callback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSchedulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkWirelessRfProfileSignal(OAICreateNetworkWirelessRfProfile_201_response summary);
    void createNetworkWirelessSsidIdentityPskSignal(OAIObject summary);
    void deleteNetworkWirelessRfProfileSignal();
    void deleteNetworkWirelessSsidIdentityPskSignal();
    void getDeviceWirelessBluetoothSettingsSignal(OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void getDeviceWirelessConnectionStatsSignal(OAIGetDeviceWirelessConnectionStats_200_response summary);
    void getDeviceWirelessLatencyStatsSignal(OAIObject summary);
    void getDeviceWirelessRadioSettingsSignal(OAIObject summary);
    void getDeviceWirelessStatusSignal(OAIObject summary);
    void getNetworkWirelessAirMarshalSignal(QList<OAIObject> summary);
    void getNetworkWirelessAlternateManagementInterfaceSignal(OAIObject summary);
    void getNetworkWirelessBillingSignal(OAIObject summary);
    void getNetworkWirelessBluetoothSettingsSignal(OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void getNetworkWirelessChannelUtilizationHistorySignal(QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary);
    void getNetworkWirelessClientConnectionStatsSignal(OAIObject summary);
    void getNetworkWirelessClientConnectivityEventsSignal(QList<OAIObject> summary);
    void getNetworkWirelessClientCountHistorySignal(QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary);
    void getNetworkWirelessClientLatencyHistorySignal(QList<OAIObject> summary);
    void getNetworkWirelessClientLatencyStatsSignal(OAIObject summary);
    void getNetworkWirelessClientsConnectionStatsSignal(QList<OAIObject> summary);
    void getNetworkWirelessClientsLatencyStatsSignal(QList<OAIObject> summary);
    void getNetworkWirelessConnectionStatsSignal(OAIGetNetworkWirelessConnectionStats_200_response summary);
    void getNetworkWirelessDataRateHistorySignal(QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary);
    void getNetworkWirelessDevicesConnectionStatsSignal(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary);
    void getNetworkWirelessDevicesLatencyStatsSignal(QList<OAIObject> summary);
    void getNetworkWirelessFailedConnectionsSignal(QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary);
    void getNetworkWirelessLatencyHistorySignal(QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary);
    void getNetworkWirelessLatencyStatsSignal(OAIObject summary);
    void getNetworkWirelessMeshStatusesSignal(OAIObject summary);
    void getNetworkWirelessRfProfileSignal(OAIObject summary);
    void getNetworkWirelessRfProfilesSignal(QList<OAIObject> summary);
    void getNetworkWirelessSettingsSignal(OAIGetNetworkWirelessSettings_200_response summary);
    void getNetworkWirelessSignalQualityHistorySignal(QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary);
    void getNetworkWirelessSsidSignal(OAIObject summary);
    void getNetworkWirelessSsidBonjourForwardingSignal(OAIObject summary);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignal(OAIObject summary);
    void getNetworkWirelessSsidEapOverrideSignal(OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidHotspot20Signal(OAIObject summary);
    void getNetworkWirelessSsidIdentityPskSignal(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary);
    void getNetworkWirelessSsidIdentityPsksSignal(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary);
    void getNetworkWirelessSsidSchedulesSignal(OAIObject summary);
    void getNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getNetworkWirelessSsidTrafficShapingRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidVpnSignal(OAIObject summary);
    void getNetworkWirelessSsidsSignal(QList<OAIObject> summary);
    void getNetworkWirelessUsageHistorySignal(QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignal(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void updateDeviceWirelessBluetoothSettingsSignal(OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void updateDeviceWirelessRadioSettingsSignal(OAIObject summary);
    void updateNetworkWirelessAlternateManagementInterfaceSignal(OAIObject summary);
    void updateNetworkWirelessBillingSignal(OAIObject summary);
    void updateNetworkWirelessBluetoothSettingsSignal(OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void updateNetworkWirelessRfProfileSignal(OAICreateNetworkWirelessRfProfile_201_response summary);
    void updateNetworkWirelessSettingsSignal(OAIGetNetworkWirelessSettings_200_response summary);
    void updateNetworkWirelessSsidSignal(OAIObject summary);
    void updateNetworkWirelessSsidBonjourForwardingSignal(OAIObject summary);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignal(OAIObject summary);
    void updateNetworkWirelessSsidEapOverrideSignal(OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidHotspot20Signal(OAIObject summary);
    void updateNetworkWirelessSsidIdentityPskSignal(OAIObject summary);
    void updateNetworkWirelessSsidSchedulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateNetworkWirelessSsidTrafficShapingRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidVpnSignal(OAIObject summary);


    void createNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWirelessRfProfile_201_response summary);
    void createNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void getDeviceWirelessConnectionStatsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessConnectionStats_200_response summary);
    void getDeviceWirelessLatencyStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceWirelessRadioSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceWirelessStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessAirMarshalSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessBillingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void getNetworkWirelessChannelUtilizationHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary);
    void getNetworkWirelessClientConnectionStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessClientConnectivityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessClientCountHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary);
    void getNetworkWirelessClientLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessClientLatencyStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessClientsConnectionStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessClientsLatencyStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessConnectionStatsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessConnectionStats_200_response summary);
    void getNetworkWirelessDataRateHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary);
    void getNetworkWirelessDevicesConnectionStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceWirelessConnectionStats_200_response> summary);
    void getNetworkWirelessDevicesLatencyStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessFailedConnectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary);
    void getNetworkWirelessLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary);
    void getNetworkWirelessLatencyStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessMeshStatusesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessRfProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSettings_200_response summary);
    void getNetworkWirelessSignalQualityHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary);
    void getNetworkWirelessSsidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidBonjourForwardingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidEapOverrideSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidHotspot20SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary);
    void getNetworkWirelessSsidIdentityPsksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary);
    void getNetworkWirelessSsidSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getNetworkWirelessSsidTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void updateDeviceWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void updateDeviceWirelessRadioSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessBillingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void updateNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWirelessRfProfile_201_response summary);
    void updateNetworkWirelessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSettings_200_response summary);
    void updateNetworkWirelessSsidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidBonjourForwardingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidEapOverrideSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidHotspot20SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkWirelessRfProfileSignalError() instead")
    void createNetworkWirelessRfProfileSignalE(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessRfProfileSignalError(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWirelessSsidIdentityPskSignalError() instead")
    void createNetworkWirelessSsidIdentityPskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessSsidIdentityPskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessRfProfileSignalError() instead")
    void deleteNetworkWirelessRfProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessRfProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessSsidIdentityPskSignalError() instead")
    void deleteNetworkWirelessSsidIdentityPskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessSsidIdentityPskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessBluetoothSettingsSignalError() instead")
    void getDeviceWirelessBluetoothSettingsSignalE(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessBluetoothSettingsSignalError(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessConnectionStatsSignalError() instead")
    void getDeviceWirelessConnectionStatsSignalE(OAIGetDeviceWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessConnectionStatsSignalError(OAIGetDeviceWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessLatencyStatsSignalError() instead")
    void getDeviceWirelessLatencyStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessLatencyStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessRadioSettingsSignalError() instead")
    void getDeviceWirelessRadioSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessRadioSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessStatusSignalError() instead")
    void getDeviceWirelessStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAirMarshalSignalError() instead")
    void getNetworkWirelessAirMarshalSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAirMarshalSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAlternateManagementInterfaceSignalError() instead")
    void getNetworkWirelessAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBillingSignalError() instead")
    void getNetworkWirelessBillingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBillingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBluetoothSettingsSignalError() instead")
    void getNetworkWirelessBluetoothSettingsSignalE(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBluetoothSettingsSignalError(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessChannelUtilizationHistorySignalError() instead")
    void getNetworkWirelessChannelUtilizationHistorySignalE(QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessChannelUtilizationHistorySignalError(QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectionStatsSignalError() instead")
    void getNetworkWirelessClientConnectionStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectionStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectivityEventsSignalError() instead")
    void getNetworkWirelessClientConnectivityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectivityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientCountHistorySignalError() instead")
    void getNetworkWirelessClientCountHistorySignalE(QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientCountHistorySignalError(QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyHistorySignalError() instead")
    void getNetworkWirelessClientLatencyHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyStatsSignalError() instead")
    void getNetworkWirelessClientLatencyStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsConnectionStatsSignalError() instead")
    void getNetworkWirelessClientsConnectionStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsConnectionStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsLatencyStatsSignalError() instead")
    void getNetworkWirelessClientsLatencyStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsLatencyStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessConnectionStatsSignalError() instead")
    void getNetworkWirelessConnectionStatsSignalE(OAIGetNetworkWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessConnectionStatsSignalError(OAIGetNetworkWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDataRateHistorySignalError() instead")
    void getNetworkWirelessDataRateHistorySignalE(QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDataRateHistorySignalError(QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesConnectionStatsSignalError() instead")
    void getNetworkWirelessDevicesConnectionStatsSignalE(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesConnectionStatsSignalError(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesLatencyStatsSignalError() instead")
    void getNetworkWirelessDevicesLatencyStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesLatencyStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessFailedConnectionsSignalError() instead")
    void getNetworkWirelessFailedConnectionsSignalE(QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessFailedConnectionsSignalError(QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyHistorySignalError() instead")
    void getNetworkWirelessLatencyHistorySignalE(QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyHistorySignalError(QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyStatsSignalError() instead")
    void getNetworkWirelessLatencyStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessMeshStatusesSignalError() instead")
    void getNetworkWirelessMeshStatusesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessMeshStatusesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfileSignalError() instead")
    void getNetworkWirelessRfProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfilesSignalError() instead")
    void getNetworkWirelessRfProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSettingsSignalError() instead")
    void getNetworkWirelessSettingsSignalE(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSettingsSignalError(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSignalQualityHistorySignalError() instead")
    void getNetworkWirelessSignalQualityHistorySignalE(QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSignalQualityHistorySignalError(QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSignalError() instead")
    void getNetworkWirelessSsidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidBonjourForwardingSignalError() instead")
    void getNetworkWirelessSsidBonjourForwardingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidBonjourForwardingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError() instead")
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidEapOverrideSignalError() instead")
    void getNetworkWirelessSsidEapOverrideSignalE(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidEapOverrideSignalError(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidHotspot20SignalError() instead")
    void getNetworkWirelessSsidHotspot20SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidHotspot20SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPskSignalError() instead")
    void getNetworkWirelessSsidIdentityPskSignalE(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPskSignalError(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPsksSignalError() instead")
    void getNetworkWirelessSsidIdentityPsksSignalE(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPsksSignalError(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSchedulesSignalError() instead")
    void getNetworkWirelessSsidSchedulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSchedulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalError() instead")
    void getNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidTrafficShapingRulesSignalError() instead")
    void getNetworkWirelessSsidTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalError() instead")
    void getNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidsSignalError() instead")
    void getNetworkWirelessSsidsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessUsageHistorySignalError() instead")
    void getNetworkWirelessUsageHistorySignalE(QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessUsageHistorySignalError(QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalError() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalE(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalError(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessBluetoothSettingsSignalError() instead")
    void updateDeviceWirelessBluetoothSettingsSignalE(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessBluetoothSettingsSignalError(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessRadioSettingsSignalError() instead")
    void updateDeviceWirelessRadioSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessRadioSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessAlternateManagementInterfaceSignalError() instead")
    void updateNetworkWirelessAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBillingSignalError() instead")
    void updateNetworkWirelessBillingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBillingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBluetoothSettingsSignalError() instead")
    void updateNetworkWirelessBluetoothSettingsSignalE(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBluetoothSettingsSignalError(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessRfProfileSignalError() instead")
    void updateNetworkWirelessRfProfileSignalE(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessRfProfileSignalError(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSettingsSignalError() instead")
    void updateNetworkWirelessSettingsSignalE(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSettingsSignalError(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSignalError() instead")
    void updateNetworkWirelessSsidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidBonjourForwardingSignalError() instead")
    void updateNetworkWirelessSsidBonjourForwardingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidBonjourForwardingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError() instead")
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidEapOverrideSignalError() instead")
    void updateNetworkWirelessSsidEapOverrideSignalE(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidEapOverrideSignalError(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidHotspot20SignalError() instead")
    void updateNetworkWirelessSsidHotspot20SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidHotspot20SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidIdentityPskSignalError() instead")
    void updateNetworkWirelessSsidIdentityPskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidIdentityPskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSchedulesSignalError() instead")
    void updateNetworkWirelessSsidSchedulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSchedulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalError() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidTrafficShapingRulesSignalError() instead")
    void updateNetworkWirelessSsidTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalError() instead")
    void updateNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkWirelessRfProfileSignalErrorFull() instead")
    void createNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void createNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessRfProfileSignalErrorFull() instead")
    void deleteNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void deleteNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessBluetoothSettingsSignalErrorFull() instead")
    void getDeviceWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessConnectionStatsSignalErrorFull() instead")
    void getDeviceWirelessConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessLatencyStatsSignalErrorFull() instead")
    void getDeviceWirelessLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessRadioSettingsSignalErrorFull() instead")
    void getDeviceWirelessRadioSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessRadioSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessStatusSignalErrorFull() instead")
    void getDeviceWirelessStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAirMarshalSignalErrorFull() instead")
    void getNetworkWirelessAirMarshalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAirMarshalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAlternateManagementInterfaceSignalErrorFull() instead")
    void getNetworkWirelessAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBillingSignalErrorFull() instead")
    void getNetworkWirelessBillingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBillingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBluetoothSettingsSignalErrorFull() instead")
    void getNetworkWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessChannelUtilizationHistorySignalErrorFull() instead")
    void getNetworkWirelessChannelUtilizationHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessChannelUtilizationHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessClientConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectivityEventsSignalErrorFull() instead")
    void getNetworkWirelessClientConnectivityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectivityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientCountHistorySignalErrorFull() instead")
    void getNetworkWirelessClientCountHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientCountHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyHistorySignalErrorFull() instead")
    void getNetworkWirelessClientLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessClientLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessClientsConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessClientsLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDataRateHistorySignalErrorFull() instead")
    void getNetworkWirelessDataRateHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDataRateHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessDevicesConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessDevicesLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessFailedConnectionsSignalErrorFull() instead")
    void getNetworkWirelessFailedConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessFailedConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyHistorySignalErrorFull() instead")
    void getNetworkWirelessLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessMeshStatusesSignalErrorFull() instead")
    void getNetworkWirelessMeshStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessMeshStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfileSignalErrorFull() instead")
    void getNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfilesSignalErrorFull() instead")
    void getNetworkWirelessRfProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSettingsSignalErrorFull() instead")
    void getNetworkWirelessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSignalQualityHistorySignalErrorFull() instead")
    void getNetworkWirelessSignalQualityHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSignalQualityHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSignalErrorFull() instead")
    void getNetworkWirelessSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidBonjourForwardingSignalErrorFull() instead")
    void getNetworkWirelessSsidBonjourForwardingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidBonjourForwardingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull() instead")
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidEapOverrideSignalErrorFull() instead")
    void getNetworkWirelessSsidEapOverrideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidEapOverrideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidHotspot20SignalErrorFull() instead")
    void getNetworkWirelessSsidHotspot20SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidHotspot20SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void getNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPsksSignalErrorFull() instead")
    void getNetworkWirelessSsidIdentityPsksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPsksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSchedulesSignalErrorFull() instead")
    void getNetworkWirelessSsidSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void getNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidTrafficShapingRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalErrorFull() instead")
    void getNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidsSignalErrorFull() instead")
    void getNetworkWirelessSsidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessUsageHistorySignalErrorFull() instead")
    void getNetworkWirelessUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessBluetoothSettingsSignalErrorFull() instead")
    void updateDeviceWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessRadioSettingsSignalErrorFull() instead")
    void updateDeviceWirelessRadioSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessRadioSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessAlternateManagementInterfaceSignalErrorFull() instead")
    void updateNetworkWirelessAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBillingSignalErrorFull() instead")
    void updateNetworkWirelessBillingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBillingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBluetoothSettingsSignalErrorFull() instead")
    void updateNetworkWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessRfProfileSignalErrorFull() instead")
    void updateNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSignalErrorFull() instead")
    void updateNetworkWirelessSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidBonjourForwardingSignalErrorFull() instead")
    void updateNetworkWirelessSsidBonjourForwardingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidBonjourForwardingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull() instead")
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidEapOverrideSignalErrorFull() instead")
    void updateNetworkWirelessSsidEapOverrideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidEapOverrideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidHotspot20SignalErrorFull() instead")
    void updateNetworkWirelessSsidHotspot20SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidHotspot20SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void updateNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSchedulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidTrafficShapingRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalErrorFull() instead")
    void updateNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
