/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response() {
    this->initializeModel();
}

OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::~OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response() {}

void OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_supported_metrics_isSet = false;
    m_supported_metrics_isValid = false;
}

void OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_supported_metrics_isValid = ::OpenAPI::fromJsonValue(m_supported_metrics, json[QString("supportedMetrics")]);
    m_supported_metrics_isSet = !json[QString("supportedMetrics")].isNull() && m_supported_metrics_isValid;
}

QString OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_supported_metrics.size() > 0) {
        obj.insert(QString("supportedMetrics"), ::OpenAPI::toJsonValue(m_supported_metrics));
    }
    return obj;
}

OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::getCounts() const {
    return m_counts;
}
void OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::setCounts(const OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::is_counts_Valid() const{
    return m_counts_isValid;
}

QList<QString> OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::getSupportedMetrics() const {
    return m_supported_metrics;
}
void OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::setSupportedMetrics(const QList<QString> &supported_metrics) {
    m_supported_metrics = supported_metrics;
    m_supported_metrics_isSet = true;
}

bool OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::is_supported_metrics_Set() const{
    return m_supported_metrics_isSet;
}

bool OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::is_supported_metrics_Valid() const{
    return m_supported_metrics_isValid;
}

bool OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
