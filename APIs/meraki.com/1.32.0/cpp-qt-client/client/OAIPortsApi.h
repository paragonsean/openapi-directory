/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPortsApi_H
#define OAI_OAIPortsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICycleDeviceSwitchPorts_request.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner.h"
#include "OAIGetDeviceSwitchPorts_200_response_inner.h"
#include "OAIGetNetworkAppliancePorts_200_response_inner.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner.h"
#include "OAIGetOrganizationSwitchPortsBySwitch_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceSwitchPort_request.h"
#include "OAIUpdateNetworkAppliancePort_request.h"
#include "OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPortsApi : public QObject {
    Q_OBJECT

public:
    OAIPortsApi(const int timeOut = 0);
    ~OAIPortsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_cycle_device_switch_ports_request OAICycleDeviceSwitchPorts_request [required]
    */
    virtual void cycleDeviceSwitchPorts(const QString &serial, const OAICycleDeviceSwitchPorts_request &oai_cycle_device_switch_ports_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getDeviceSwitchPort(const QString &serial, const QString &port_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatusesPackets(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatuses(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchPorts(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getNetworkAppliancePort(const QString &network_id, const QString &port_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAppliancePorts(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePorts(const QString &organization_id, const QString &config_template_id, const QString &profile_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  port_profile_ids QList<QString> [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  configuration_updated_after QString [optional]
    */
    virtual void getOrganizationSwitchPortsBySwitch(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &port_profile_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_device_switch_port_request OAIUpdateDeviceSwitchPort_request [optional]
    */
    virtual void updateDeviceSwitchPort(const QString &serial, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchPort_request> &oai_update_device_switch_port_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchPort_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_network_appliance_port_request OAIUpdateNetworkAppliancePort_request [optional]
    */
    virtual void updateNetworkAppliancePort(const QString &network_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePort_request> &oai_update_network_appliance_port_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePort_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_organization_config_template_switch_profile_port_request OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request [optional]
    */
    virtual void updateOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request> &oai_update_organization_config_template_switch_profile_port_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cycleDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesPacketsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePortCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePortsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSwitchPortsBySwitchCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchPortCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAppliancePortCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cycleDeviceSwitchPortsSignal(OAIObject summary);
    void getDeviceSwitchPortSignal(OAIGetDeviceSwitchPorts_200_response_inner summary);
    void getDeviceSwitchPortsStatusesPacketsSignal(QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesSignal(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getDeviceSwitchPortsSignal(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary);
    void getNetworkAppliancePortSignal(OAIGetNetworkAppliancePorts_200_response_inner summary);
    void getNetworkAppliancePortsSignal(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignal(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationSwitchPortsBySwitchSignal(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary);
    void updateDeviceSwitchPortSignal(OAIGetDeviceSwitchPorts_200_response_inner summary);
    void updateNetworkAppliancePortSignal(OAIGetNetworkAppliancePorts_200_response_inner summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);


    void cycleDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceSwitchPortSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchPorts_200_response_inner summary);
    void getDeviceSwitchPortsStatusesPacketsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPorts_200_response_inner> summary);
    void getNetworkAppliancePortSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePorts_200_response_inner summary);
    void getNetworkAppliancePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAppliancePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationSwitchPortsBySwitchSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary);
    void updateDeviceSwitchPortSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchPorts_200_response_inner summary);
    void updateNetworkAppliancePortSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePorts_200_response_inner summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalError() instead")
    void cycleDeviceSwitchPortsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortSignalError() instead")
    void getDeviceSwitchPortSignalE(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortSignalError(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalError() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalError() instead")
    void getDeviceSwitchPortsStatusesSignalE(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalError(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsSignalError() instead")
    void getDeviceSwitchPortsSignalE(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsSignalError(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortSignalError() instead")
    void getNetworkAppliancePortSignalE(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortSignalError(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortsSignalError() instead")
    void getNetworkAppliancePortsSignalE(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortsSignalError(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalE(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalError(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSwitchPortsBySwitchSignalError() instead")
    void getOrganizationSwitchPortsBySwitchSignalE(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSwitchPortsBySwitchSignalError(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchPortSignalError() instead")
    void updateDeviceSwitchPortSignalE(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchPortSignalError(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePortSignalError() instead")
    void updateNetworkAppliancePortSignalE(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePortSignalError(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalErrorFull() instead")
    void cycleDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortSignalErrorFull() instead")
    void getDeviceSwitchPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsSignalErrorFull() instead")
    void getDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortSignalErrorFull() instead")
    void getNetworkAppliancePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortsSignalErrorFull() instead")
    void getNetworkAppliancePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSwitchPortsBySwitchSignalErrorFull() instead")
    void getOrganizationSwitchPortsBySwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSwitchPortsBySwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchPortSignalErrorFull() instead")
    void updateDeviceSwitchPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePortSignalErrorFull() instead")
    void updateNetworkAppliancePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
