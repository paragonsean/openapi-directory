/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationConfigTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationConfigTemplate_request::OAICreateOrganizationConfigTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationConfigTemplate_request::OAICreateOrganizationConfigTemplate_request() {
    this->initializeModel();
}

OAICreateOrganizationConfigTemplate_request::~OAICreateOrganizationConfigTemplate_request() {}

void OAICreateOrganizationConfigTemplate_request::initializeModel() {

    m_copy_from_network_id_isSet = false;
    m_copy_from_network_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAICreateOrganizationConfigTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationConfigTemplate_request::fromJsonObject(QJsonObject json) {

    m_copy_from_network_id_isValid = ::OpenAPI::fromJsonValue(m_copy_from_network_id, json[QString("copyFromNetworkId")]);
    m_copy_from_network_id_isSet = !json[QString("copyFromNetworkId")].isNull() && m_copy_from_network_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAICreateOrganizationConfigTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationConfigTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_copy_from_network_id_isSet) {
        obj.insert(QString("copyFromNetworkId"), ::OpenAPI::toJsonValue(m_copy_from_network_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAICreateOrganizationConfigTemplate_request::getCopyFromNetworkId() const {
    return m_copy_from_network_id;
}
void OAICreateOrganizationConfigTemplate_request::setCopyFromNetworkId(const QString &copy_from_network_id) {
    m_copy_from_network_id = copy_from_network_id;
    m_copy_from_network_id_isSet = true;
}

bool OAICreateOrganizationConfigTemplate_request::is_copy_from_network_id_Set() const{
    return m_copy_from_network_id_isSet;
}

bool OAICreateOrganizationConfigTemplate_request::is_copy_from_network_id_Valid() const{
    return m_copy_from_network_id_isValid;
}

QString OAICreateOrganizationConfigTemplate_request::getName() const {
    return m_name;
}
void OAICreateOrganizationConfigTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateOrganizationConfigTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateOrganizationConfigTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateOrganizationConfigTemplate_request::getTimeZone() const {
    return m_time_zone;
}
void OAICreateOrganizationConfigTemplate_request::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAICreateOrganizationConfigTemplate_request::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAICreateOrganizationConfigTemplate_request::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAICreateOrganizationConfigTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy_from_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationConfigTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
