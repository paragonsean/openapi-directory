/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessAlternateManagementInterface_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessAlternateManagementInterface_request::OAIUpdateNetworkWirelessAlternateManagementInterface_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessAlternateManagementInterface_request::OAIUpdateNetworkWirelessAlternateManagementInterface_request() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessAlternateManagementInterface_request::~OAIUpdateNetworkWirelessAlternateManagementInterface_request() {}

void OAIUpdateNetworkWirelessAlternateManagementInterface_request::initializeModel() {

    m_access_points_isSet = false;
    m_access_points_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;
}

void OAIUpdateNetworkWirelessAlternateManagementInterface_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessAlternateManagementInterface_request::fromJsonObject(QJsonObject json) {

    m_access_points_isValid = ::OpenAPI::fromJsonValue(m_access_points, json[QString("accessPoints")]);
    m_access_points_isSet = !json[QString("accessPoints")].isNull() && m_access_points_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessAlternateManagementInterface_request::asJsonObject() const {
    QJsonObject obj;
    if (m_access_points.size() > 0) {
        obj.insert(QString("accessPoints"), ::OpenAPI::toJsonValue(m_access_points));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    return obj;
}

QList<OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner> OAIUpdateNetworkWirelessAlternateManagementInterface_request::getAccessPoints() const {
    return m_access_points;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request::setAccessPoints(const QList<OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner> &access_points) {
    m_access_points = access_points;
    m_access_points_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_access_points_Set() const{
    return m_access_points_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_access_points_Valid() const{
    return m_access_points_isValid;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIUpdateNetworkWirelessAlternateManagementInterface_request::getProtocols() const {
    return m_protocols;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request::setProtocols(const QList<QString> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_protocols_Valid() const{
    return m_protocols_isValid;
}

qint32 OAIUpdateNetworkWirelessAlternateManagementInterface_request::getVlanId() const {
    return m_vlan_id;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request::setVlanId(const qint32 &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
