/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields.h
 *
 * DHCP-specific fields of the packet.
 */

#ifndef OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_H
#define OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_H

#include <QJsonObject>

#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner;

class OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields : public OAIObject {
public:
    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields();
    OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields(QString json);
    ~OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChaddr() const;
    void setChaddr(const QString &chaddr);
    bool is_chaddr_Set() const;
    bool is_chaddr_Valid() const;

    QString getCiaddr() const;
    void setCiaddr(const QString &ciaddr);
    bool is_ciaddr_Set() const;
    bool is_ciaddr_Valid() const;

    QString getFlags() const;
    void setFlags(const QString &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getGiaddr() const;
    void setGiaddr(const QString &giaddr);
    bool is_giaddr_Set() const;
    bool is_giaddr_Valid() const;

    qint32 getHlen() const;
    void setHlen(const qint32 &hlen);
    bool is_hlen_Set() const;
    bool is_hlen_Valid() const;

    qint32 getHops() const;
    void setHops(const qint32 &hops);
    bool is_hops_Set() const;
    bool is_hops_Valid() const;

    qint32 getHtype() const;
    void setHtype(const qint32 &htype);
    bool is_htype_Set() const;
    bool is_htype_Valid() const;

    QString getMagicCookie() const;
    void setMagicCookie(const QString &magic_cookie);
    bool is_magic_cookie_Set() const;
    bool is_magic_cookie_Valid() const;

    qint32 getOp() const;
    void setOp(const qint32 &op);
    bool is_op_Set() const;
    bool is_op_Valid() const;

    QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner> getOptions() const;
    void setOptions(const QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    qint32 getSecs() const;
    void setSecs(const qint32 &secs);
    bool is_secs_Set() const;
    bool is_secs_Valid() const;

    QString getSiaddr() const;
    void setSiaddr(const QString &siaddr);
    bool is_siaddr_Set() const;
    bool is_siaddr_Valid() const;

    QString getSname() const;
    void setSname(const QString &sname);
    bool is_sname_Set() const;
    bool is_sname_Valid() const;

    QString getXid() const;
    void setXid(const QString &xid);
    bool is_xid_Set() const;
    bool is_xid_Valid() const;

    QString getYiaddr() const;
    void setYiaddr(const QString &yiaddr);
    bool is_yiaddr_Set() const;
    bool is_yiaddr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chaddr;
    bool m_chaddr_isSet;
    bool m_chaddr_isValid;

    QString m_ciaddr;
    bool m_ciaddr_isSet;
    bool m_ciaddr_isValid;

    QString m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_giaddr;
    bool m_giaddr_isSet;
    bool m_giaddr_isValid;

    qint32 m_hlen;
    bool m_hlen_isSet;
    bool m_hlen_isValid;

    qint32 m_hops;
    bool m_hops_isSet;
    bool m_hops_isValid;

    qint32 m_htype;
    bool m_htype_isSet;
    bool m_htype_isValid;

    QString m_magic_cookie;
    bool m_magic_cookie_isSet;
    bool m_magic_cookie_isValid;

    qint32 m_op;
    bool m_op_isSet;
    bool m_op_isValid;

    QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_options_inner> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    qint32 m_secs;
    bool m_secs_isSet;
    bool m_secs_isValid;

    QString m_siaddr;
    bool m_siaddr_isSet;
    bool m_siaddr_isValid;

    QString m_sname;
    bool m_sname_isSet;
    bool m_sname_isValid;

    QString m_xid;
    bool m_xid_isSet;
    bool m_xid_isValid;

    QString m_yiaddr;
    bool m_yiaddr_isSet;
    bool m_yiaddr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields)

#endif // OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields_H
