/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::~OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request() {}

void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::initializeModel() {

    m_active_active_auto_vpn_enabled_isSet = false;
    m_active_active_auto_vpn_enabled_isValid = false;

    m_default_uplink_isSet = false;
    m_default_uplink_isValid = false;

    m_failover_and_failback_isSet = false;
    m_failover_and_failback_isValid = false;

    m_load_balancing_enabled_isSet = false;
    m_load_balancing_enabled_isValid = false;

    m_vpn_traffic_uplink_preferences_isSet = false;
    m_vpn_traffic_uplink_preferences_isValid = false;

    m_wan_traffic_uplink_preferences_isSet = false;
    m_wan_traffic_uplink_preferences_isValid = false;
}

void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::fromJsonObject(QJsonObject json) {

    m_active_active_auto_vpn_enabled_isValid = ::OpenAPI::fromJsonValue(m_active_active_auto_vpn_enabled, json[QString("activeActiveAutoVpnEnabled")]);
    m_active_active_auto_vpn_enabled_isSet = !json[QString("activeActiveAutoVpnEnabled")].isNull() && m_active_active_auto_vpn_enabled_isValid;

    m_default_uplink_isValid = ::OpenAPI::fromJsonValue(m_default_uplink, json[QString("defaultUplink")]);
    m_default_uplink_isSet = !json[QString("defaultUplink")].isNull() && m_default_uplink_isValid;

    m_failover_and_failback_isValid = ::OpenAPI::fromJsonValue(m_failover_and_failback, json[QString("failoverAndFailback")]);
    m_failover_and_failback_isSet = !json[QString("failoverAndFailback")].isNull() && m_failover_and_failback_isValid;

    m_load_balancing_enabled_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_enabled, json[QString("loadBalancingEnabled")]);
    m_load_balancing_enabled_isSet = !json[QString("loadBalancingEnabled")].isNull() && m_load_balancing_enabled_isValid;

    m_vpn_traffic_uplink_preferences_isValid = ::OpenAPI::fromJsonValue(m_vpn_traffic_uplink_preferences, json[QString("vpnTrafficUplinkPreferences")]);
    m_vpn_traffic_uplink_preferences_isSet = !json[QString("vpnTrafficUplinkPreferences")].isNull() && m_vpn_traffic_uplink_preferences_isValid;

    m_wan_traffic_uplink_preferences_isValid = ::OpenAPI::fromJsonValue(m_wan_traffic_uplink_preferences, json[QString("wanTrafficUplinkPreferences")]);
    m_wan_traffic_uplink_preferences_isSet = !json[QString("wanTrafficUplinkPreferences")].isNull() && m_wan_traffic_uplink_preferences_isValid;
}

QString OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_active_auto_vpn_enabled_isSet) {
        obj.insert(QString("activeActiveAutoVpnEnabled"), ::OpenAPI::toJsonValue(m_active_active_auto_vpn_enabled));
    }
    if (m_default_uplink_isSet) {
        obj.insert(QString("defaultUplink"), ::OpenAPI::toJsonValue(m_default_uplink));
    }
    if (m_failover_and_failback.isSet()) {
        obj.insert(QString("failoverAndFailback"), ::OpenAPI::toJsonValue(m_failover_and_failback));
    }
    if (m_load_balancing_enabled_isSet) {
        obj.insert(QString("loadBalancingEnabled"), ::OpenAPI::toJsonValue(m_load_balancing_enabled));
    }
    if (m_vpn_traffic_uplink_preferences.size() > 0) {
        obj.insert(QString("vpnTrafficUplinkPreferences"), ::OpenAPI::toJsonValue(m_vpn_traffic_uplink_preferences));
    }
    if (m_wan_traffic_uplink_preferences.size() > 0) {
        obj.insert(QString("wanTrafficUplinkPreferences"), ::OpenAPI::toJsonValue(m_wan_traffic_uplink_preferences));
    }
    return obj;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::isActiveActiveAutoVpnEnabled() const {
    return m_active_active_auto_vpn_enabled;
}
void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::setActiveActiveAutoVpnEnabled(const bool &active_active_auto_vpn_enabled) {
    m_active_active_auto_vpn_enabled = active_active_auto_vpn_enabled;
    m_active_active_auto_vpn_enabled_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_active_active_auto_vpn_enabled_Set() const{
    return m_active_active_auto_vpn_enabled_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_active_active_auto_vpn_enabled_Valid() const{
    return m_active_active_auto_vpn_enabled_isValid;
}

QString OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::getDefaultUplink() const {
    return m_default_uplink;
}
void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::setDefaultUplink(const QString &default_uplink) {
    m_default_uplink = default_uplink;
    m_default_uplink_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_default_uplink_Set() const{
    return m_default_uplink_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_default_uplink_Valid() const{
    return m_default_uplink_isValid;
}

OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::getFailoverAndFailback() const {
    return m_failover_and_failback;
}
void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::setFailoverAndFailback(const OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback &failover_and_failback) {
    m_failover_and_failback = failover_and_failback;
    m_failover_and_failback_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_failover_and_failback_Set() const{
    return m_failover_and_failback_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_failover_and_failback_Valid() const{
    return m_failover_and_failback_isValid;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::isLoadBalancingEnabled() const {
    return m_load_balancing_enabled;
}
void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::setLoadBalancingEnabled(const bool &load_balancing_enabled) {
    m_load_balancing_enabled = load_balancing_enabled;
    m_load_balancing_enabled_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_load_balancing_enabled_Set() const{
    return m_load_balancing_enabled_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_load_balancing_enabled_Valid() const{
    return m_load_balancing_enabled_isValid;
}

QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner> OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::getVpnTrafficUplinkPreferences() const {
    return m_vpn_traffic_uplink_preferences;
}
void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::setVpnTrafficUplinkPreferences(const QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner> &vpn_traffic_uplink_preferences) {
    m_vpn_traffic_uplink_preferences = vpn_traffic_uplink_preferences;
    m_vpn_traffic_uplink_preferences_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_vpn_traffic_uplink_preferences_Set() const{
    return m_vpn_traffic_uplink_preferences_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_vpn_traffic_uplink_preferences_Valid() const{
    return m_vpn_traffic_uplink_preferences_isValid;
}

QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner> OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::getWanTrafficUplinkPreferences() const {
    return m_wan_traffic_uplink_preferences;
}
void OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::setWanTrafficUplinkPreferences(const QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner> &wan_traffic_uplink_preferences) {
    m_wan_traffic_uplink_preferences = wan_traffic_uplink_preferences;
    m_wan_traffic_uplink_preferences_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_wan_traffic_uplink_preferences_Set() const{
    return m_wan_traffic_uplink_preferences_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::is_wan_traffic_uplink_preferences_Valid() const{
    return m_wan_traffic_uplink_preferences_isValid;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_active_auto_vpn_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_uplink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_and_failback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_traffic_uplink_preferences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wan_traffic_uplink_preferences.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
