/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeviceSwitchRoutingInterfaces_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_H
#define OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_H

#include <QJsonObject>

#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6.h"
#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings.h"
#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6;
class OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings;
class OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3;

class OAIGetDeviceSwitchRoutingInterfaces_200_response_inner : public OAIObject {
public:
    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner();
    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner(QString json);
    ~OAIGetDeviceSwitchRoutingInterfaces_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDefaultGateway() const;
    void setDefaultGateway(const QString &default_gateway);
    bool is_default_gateway_Set() const;
    bool is_default_gateway_Valid() const;

    QString getInterfaceId() const;
    void setInterfaceId(const QString &interface_id);
    bool is_interface_id_Set() const;
    bool is_interface_id_Valid() const;

    QString getInterfaceIp() const;
    void setInterfaceIp(const QString &interface_ip);
    bool is_interface_ip_Set() const;
    bool is_interface_ip_Valid() const;

    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6 getIpv6() const;
    void setIpv6(const OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6 &ipv6);
    bool is_ipv6_Set() const;
    bool is_ipv6_Valid() const;

    QString getMulticastRouting() const;
    void setMulticastRouting(const QString &multicast_routing);
    bool is_multicast_routing_Set() const;
    bool is_multicast_routing_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings getOspfSettings() const;
    void setOspfSettings(const OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings &ospf_settings);
    bool is_ospf_settings_Set() const;
    bool is_ospf_settings_Valid() const;

    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3 getOspfV3() const;
    void setOspfV3(const OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3 &ospf_v3);
    bool is_ospf_v3_Set() const;
    bool is_ospf_v3_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    qint32 getVlanId() const;
    void setVlanId(const qint32 &vlan_id);
    bool is_vlan_id_Set() const;
    bool is_vlan_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_default_gateway;
    bool m_default_gateway_isSet;
    bool m_default_gateway_isValid;

    QString m_interface_id;
    bool m_interface_id_isSet;
    bool m_interface_id_isValid;

    QString m_interface_ip;
    bool m_interface_ip_isSet;
    bool m_interface_ip_isValid;

    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ipv6 m_ipv6;
    bool m_ipv6_isSet;
    bool m_ipv6_isValid;

    QString m_multicast_routing;
    bool m_multicast_routing_isSet;
    bool m_multicast_routing_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfSettings m_ospf_settings;
    bool m_ospf_settings_isSet;
    bool m_ospf_settings_isValid;

    OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_ospfV3 m_ospf_v3;
    bool m_ospf_v3_isSet;
    bool m_ospf_v3_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    qint32 m_vlan_id;
    bool m_vlan_id_isSet;
    bool m_vlan_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeviceSwitchRoutingInterfaces_200_response_inner)

#endif // OAIGetDeviceSwitchRoutingInterfaces_200_response_inner_H
