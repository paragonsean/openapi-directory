/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel() {
    this->initializeModel();
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::~OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel() {}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::initializeModel() {

    m_certificate_name_isSet = false;
    m_certificate_name_isValid = false;

    m_local_interface_isSet = false;
    m_local_interface_isValid = false;

    m_loopback_number_isSet = false;
    m_loopback_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::fromJsonObject(QJsonObject json) {

    m_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_certificate_name, json[QString("certificateName")]);
    m_certificate_name_isSet = !json[QString("certificateName")].isNull() && m_certificate_name_isValid;

    m_local_interface_isValid = ::OpenAPI::fromJsonValue(m_local_interface, json[QString("localInterface")]);
    m_local_interface_isSet = !json[QString("localInterface")].isNull() && m_local_interface_isValid;

    m_loopback_number_isValid = ::OpenAPI::fromJsonValue(m_loopback_number, json[QString("loopbackNumber")]);
    m_loopback_number_isSet = !json[QString("loopbackNumber")].isNull() && m_loopback_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_name_isSet) {
        obj.insert(QString("certificateName"), ::OpenAPI::toJsonValue(m_certificate_name));
    }
    if (m_local_interface_isSet) {
        obj.insert(QString("localInterface"), ::OpenAPI::toJsonValue(m_local_interface));
    }
    if (m_loopback_number_isSet) {
        obj.insert(QString("loopbackNumber"), ::OpenAPI::toJsonValue(m_loopback_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::getCertificateName() const {
    return m_certificate_name;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::setCertificateName(const QString &certificate_name) {
    m_certificate_name = certificate_name;
    m_certificate_name_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_certificate_name_Set() const{
    return m_certificate_name_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_certificate_name_Valid() const{
    return m_certificate_name_isValid;
}

qint32 OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::getLocalInterface() const {
    return m_local_interface;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::setLocalInterface(const qint32 &local_interface) {
    m_local_interface = local_interface;
    m_local_interface_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_local_interface_Set() const{
    return m_local_interface_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_local_interface_Valid() const{
    return m_local_interface_isValid;
}

qint32 OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::getLoopbackNumber() const {
    return m_loopback_number;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::setLoopbackNumber(const qint32 &loopback_number) {
    m_loopback_number = loopback_number;
    m_loopback_number_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_loopback_number_Set() const{
    return m_loopback_number_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_loopback_number_Valid() const{
    return m_loopback_number_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::getName() const {
    return m_name;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loopback_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
