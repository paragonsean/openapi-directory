/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade() {
    this->initializeModel();
}

OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::~OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade() {}

void OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::initializeModel() {

    m_to_version_isSet = false;
    m_to_version_isValid = false;
}

void OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::fromJsonObject(QJsonObject json) {

    m_to_version_isValid = ::OpenAPI::fromJsonValue(m_to_version, json[QString("toVersion")]);
    m_to_version_isSet = !json[QString("toVersion")].isNull() && m_to_version_isValid;
}

QString OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::asJsonObject() const {
    QJsonObject obj;
    if (m_to_version.isSet()) {
        obj.insert(QString("toVersion"), ::OpenAPI::toJsonValue(m_to_version));
    }
    return obj;
}

OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade_toVersion OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::getToVersion() const {
    return m_to_version;
}
void OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::setToVersion(const OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade_toVersion &to_version) {
    m_to_version = to_version;
    m_to_version_isSet = true;
}

bool OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::is_to_version_Set() const{
    return m_to_version_isSet;
}

bool OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::is_to_version_Valid() const{
    return m_to_version_isValid;
}

bool OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_to_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkFirmwareUpgradesStagedEvents_200_response_products_switch_nextUpgrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
