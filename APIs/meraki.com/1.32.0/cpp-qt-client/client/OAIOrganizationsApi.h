/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignOrganizationLicensesSeats_200_response.h"
#include "OAIAssignOrganizationLicensesSeats_request.h"
#include "OAIClaimIntoOrganizationInventory_request.h"
#include "OAIClaimIntoOrganization_request.h"
#include "OAICloneOrganization_request.h"
#include "OAICombineOrganizationNetworks_200_response.h"
#include "OAICombineOrganizationNetworks_request.h"
#include "OAICreateOrganizationActionBatch_201_response.h"
#include "OAICreateOrganizationActionBatch_request.h"
#include "OAICreateOrganizationAdaptivePolicyAcl_request.h"
#include "OAICreateOrganizationAdaptivePolicyGroup_request.h"
#include "OAICreateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAICreateOrganizationAdmin_request.h"
#include "OAICreateOrganizationAlertsProfile_request.h"
#include "OAICreateOrganizationBrandingPolicy_201_response.h"
#include "OAICreateOrganizationBrandingPolicy_request.h"
#include "OAICreateOrganizationConfigTemplate_request.h"
#include "OAICreateOrganizationEarlyAccessFeaturesOptIn_request.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_request.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request.h"
#include "OAICreateOrganizationNetwork_request.h"
#include "OAICreateOrganizationPolicyObject_request.h"
#include "OAICreateOrganizationPolicyObjectsGroup_request.h"
#include "OAICreateOrganizationSamlIdp_request.h"
#include "OAICreateOrganizationSamlRole_request.h"
#include "OAICreateOrganization_request.h"
#include "OAIGetNetwork_200_response.h"
#include "OAIGetOrganizationAdaptivePolicyOverview_200_response.h"
#include "OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner.h"
#include "OAIGetOrganizationApiRequests_200_response_inner.h"
#include "OAIGetOrganizationBrandingPoliciesPriorities_200_response.h"
#include "OAIGetOrganizationBrandingPolicies_200_response_inner.h"
#include "OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner.h"
#include "OAIGetOrganizationClientsOverview_200_response.h"
#include "OAIGetOrganizationDevicesAvailabilities_200_response_inner.h"
#include "OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesStatusesOverview_200_response.h"
#include "OAIGetOrganizationDevicesStatuses_200_response.h"
#include "OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner.h"
#include "OAIGetOrganizationDevices_200_response_inner.h"
#include "OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner.h"
#include "OAIGetOrganizationFirmwareUpgrades_200_response_inner.h"
#include "OAIGetOrganizationInventoryDevices_200_response_inner.h"
#include "OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner.h"
#include "OAIGetOrganizationLicenses_200_response_inner.h"
#include "OAIGetOrganizationLoginSecurity_200_response.h"
#include "OAIGetOrganizationSamlIdps_200_response_inner.h"
#include "OAIGetOrganizationSaml_200_response.h"
#include "OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner.h"
#include "OAIGetOrganizationUplinksStatuses_200_response_inner.h"
#include "OAIGetOrganizationWebhooksLogs_200_response_inner.h"
#include "OAIGetOrganizations_200_response_inner.h"
#include "OAIMoveOrganizationLicensesSeats_200_response.h"
#include "OAIMoveOrganizationLicensesSeats_request.h"
#include "OAIMoveOrganizationLicenses_200_response.h"
#include "OAIMoveOrganizationLicenses_request.h"
#include "OAIObject.h"
#include "OAIReleaseFromOrganizationInventory_request.h"
#include "OAIRenewOrganizationLicensesSeats_request.h"
#include "OAIUpdateOrganizationActionBatch_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyAcl_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyGroup_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAIUpdateOrganizationAdaptivePolicySettings_request.h"
#include "OAIUpdateOrganizationAdmin_request.h"
#include "OAIUpdateOrganizationAlertsProfile_request.h"
#include "OAIUpdateOrganizationBrandingPoliciesPriorities_request.h"
#include "OAIUpdateOrganizationBrandingPolicy_request.h"
#include "OAIUpdateOrganizationConfigTemplate_request.h"
#include "OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request.h"
#include "OAIUpdateOrganizationLicense_request.h"
#include "OAIUpdateOrganizationLoginSecurity_request.h"
#include "OAIUpdateOrganizationPolicyObject_request.h"
#include "OAIUpdateOrganizationPolicyObjectsGroup_request.h"
#include "OAIUpdateOrganizationSamlIdp_request.h"
#include "OAIUpdateOrganizationSamlRole_200_response.h"
#include "OAIUpdateOrganizationSamlRole_request.h"
#include "OAIUpdateOrganizationSaml_request.h"
#include "OAIUpdateOrganizationSnmp_request.h"
#include "OAIUpdateOrganization_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_assign_organization_licenses_seats_request OAIAssignOrganizationLicensesSeats_request [required]
    */
    virtual void assignOrganizationLicensesSeats(const QString &organization_id, const OAIAssignOrganizationLicensesSeats_request &oai_assign_organization_licenses_seats_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_claim_into_organization_request OAIClaimIntoOrganization_request [optional]
    */
    virtual void claimIntoOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIClaimIntoOrganization_request> &oai_claim_into_organization_request = ::OpenAPI::OptionalParam<OAIClaimIntoOrganization_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_claim_into_organization_inventory_request OAIClaimIntoOrganizationInventory_request [optional]
    */
    virtual void claimIntoOrganizationInventory(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIClaimIntoOrganizationInventory_request> &oai_claim_into_organization_inventory_request = ::OpenAPI::OptionalParam<OAIClaimIntoOrganizationInventory_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_clone_organization_request OAICloneOrganization_request [required]
    */
    virtual void cloneOrganization(const QString &organization_id, const OAICloneOrganization_request &oai_clone_organization_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_combine_organization_networks_request OAICombineOrganizationNetworks_request [required]
    */
    virtual void combineOrganizationNetworks(const QString &organization_id, const OAICombineOrganizationNetworks_request &oai_combine_organization_networks_request);

    /**
    * @param[in]  oai_create_organization_request OAICreateOrganization_request [required]
    */
    virtual void createOrganization(const OAICreateOrganization_request &oai_create_organization_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_action_batch_request OAICreateOrganizationActionBatch_request [required]
    */
    virtual void createOrganizationActionBatch(const QString &organization_id, const OAICreateOrganizationActionBatch_request &oai_create_organization_action_batch_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_acl_request OAICreateOrganizationAdaptivePolicyAcl_request [required]
    */
    virtual void createOrganizationAdaptivePolicyAcl(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyAcl_request &oai_create_organization_adaptive_policy_acl_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_group_request OAICreateOrganizationAdaptivePolicyGroup_request [required]
    */
    virtual void createOrganizationAdaptivePolicyGroup(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyGroup_request &oai_create_organization_adaptive_policy_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_policy_request OAICreateOrganizationAdaptivePolicyPolicy_request [required]
    */
    virtual void createOrganizationAdaptivePolicyPolicy(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyPolicy_request &oai_create_organization_adaptive_policy_policy_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_admin_request OAICreateOrganizationAdmin_request [required]
    */
    virtual void createOrganizationAdmin(const QString &organization_id, const OAICreateOrganizationAdmin_request &oai_create_organization_admin_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_alerts_profile_request OAICreateOrganizationAlertsProfile_request [required]
    */
    virtual void createOrganizationAlertsProfile(const QString &organization_id, const OAICreateOrganizationAlertsProfile_request &oai_create_organization_alerts_profile_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_branding_policy_request OAICreateOrganizationBrandingPolicy_request [optional]
    */
    virtual void createOrganizationBrandingPolicy(const QString &organization_id, const ::OpenAPI::OptionalParam<OAICreateOrganizationBrandingPolicy_request> &oai_create_organization_branding_policy_request = ::OpenAPI::OptionalParam<OAICreateOrganizationBrandingPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_config_template_request OAICreateOrganizationConfigTemplate_request [required]
    */
    virtual void createOrganizationConfigTemplate(const QString &organization_id, const OAICreateOrganizationConfigTemplate_request &oai_create_organization_config_template_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_early_access_features_opt_in_request OAICreateOrganizationEarlyAccessFeaturesOptIn_request [required]
    */
    virtual void createOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const OAICreateOrganizationEarlyAccessFeaturesOptIn_request &oai_create_organization_early_access_features_opt_in_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_inventory_onboarding_cloud_monitoring_export_event_request OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request [required]
    */
    virtual void createOrganizationInventoryOnboardingCloudMonitoringExportEvent(const QString &organization_id, const OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request &oai_create_organization_inventory_onboarding_cloud_monitoring_export_event_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_inventory_onboarding_cloud_monitoring_import_request OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_request [required]
    */
    virtual void createOrganizationInventoryOnboardingCloudMonitoringImport(const QString &organization_id, const OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_request &oai_create_organization_inventory_onboarding_cloud_monitoring_import_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_inventory_onboarding_cloud_monitoring_prepare_request OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request [required]
    */
    virtual void createOrganizationInventoryOnboardingCloudMonitoringPrepare(const QString &organization_id, const OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request &oai_create_organization_inventory_onboarding_cloud_monitoring_prepare_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_network_request OAICreateOrganizationNetwork_request [required]
    */
    virtual void createOrganizationNetwork(const QString &organization_id, const OAICreateOrganizationNetwork_request &oai_create_organization_network_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_object_request OAICreateOrganizationPolicyObject_request [required]
    */
    virtual void createOrganizationPolicyObject(const QString &organization_id, const OAICreateOrganizationPolicyObject_request &oai_create_organization_policy_object_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_objects_group_request OAICreateOrganizationPolicyObjectsGroup_request [required]
    */
    virtual void createOrganizationPolicyObjectsGroup(const QString &organization_id, const OAICreateOrganizationPolicyObjectsGroup_request &oai_create_organization_policy_objects_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_saml_idp_request OAICreateOrganizationSamlIdp_request [required]
    */
    virtual void createOrganizationSamlIdp(const QString &organization_id, const OAICreateOrganizationSamlIdp_request &oai_create_organization_saml_idp_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_saml_role_request OAICreateOrganizationSamlRole_request [required]
    */
    virtual void createOrganizationSamlRole(const QString &organization_id, const OAICreateOrganizationSamlRole_request &oai_create_organization_saml_role_request);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void deleteOrganization(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  action_batch_id QString [required]
    */
    virtual void deleteOrganizationActionBatch(const QString &organization_id, const QString &action_batch_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  admin_id QString [required]
    */
    virtual void deleteOrganizationAdmin(const QString &organization_id, const QString &admin_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  alert_config_id QString [required]
    */
    virtual void deleteOrganizationAlertsProfile(const QString &organization_id, const QString &alert_config_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  branding_policy_id QString [required]
    */
    virtual void deleteOrganizationBrandingPolicy(const QString &organization_id, const QString &branding_policy_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void deleteOrganizationConfigTemplate(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    */
    virtual void deleteOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    */
    virtual void deleteOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void deleteOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    */
    virtual void deleteOrganizationSamlIdp(const QString &organization_id, const QString &idp_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  saml_role_id QString [required]
    */
    virtual void deleteOrganizationSamlRole(const QString &organization_id, const QString &saml_role_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void deleteOrganizationUser(const QString &organization_id, const QString &user_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganization(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  action_batch_id QString [required]
    */
    virtual void getOrganizationActionBatch(const QString &organization_id, const QString &action_batch_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  status QString [optional]
    */
    virtual void getOrganizationActionBatches(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyAcls(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroups(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyOverview(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicies(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicySettings(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdmins(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAlertsProfiles(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  admin_id QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  method QString [optional]
    * @param[in]  response_code qint32 [optional]
    * @param[in]  source_ip QString [optional]
    * @param[in]  user_agent QString [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  operation_ids QList<QString> [optional]
    */
    virtual void getOrganizationApiRequests(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &response_code = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &source_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &operation_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationApiRequestsOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  interval qint32 [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  operation_ids QList<QString> [optional]
    * @param[in]  source_ips QList<QString> [optional]
    * @param[in]  admin_ids QList<QString> [optional]
    * @param[in]  user_agent QString [optional]
    */
    virtual void getOrganizationApiRequestsOverviewResponseCodesByInterval(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &operation_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_ips = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &admin_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationBrandingPolicies(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationBrandingPoliciesPriorities(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  branding_policy_id QString [required]
    */
    virtual void getOrganizationBrandingPolicy(const QString &organization_id, const QString &branding_policy_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationClientsBandwidthUsageHistory(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationClientsOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  mac QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationClientsSearch(const QString &organization_id, const QString &mac, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void getOrganizationConfigTemplate(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationConfigTemplates(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_id QString [optional]
    * @param[in]  admin_id QString [optional]
    */
    virtual void getOrganizationConfigurationChanges(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  configuration_updated_after QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  sensor_metrics QList<QString> [optional]
    * @param[in]  sensor_alert_profile_ids QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    */
    virtual void getOrganizationDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sensor_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sensor_alert_profile_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesAvailabilities(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesPowerModulesStatusesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationDevicesStatusesOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesUplinksAddressesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  uplink QString [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void getOrganizationDevicesUplinksLossAndLatency(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeatures(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeaturesOptIns(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  status QList<QString> [optional]
    * @param[in]  product_type QList<QString> [optional]
    */
    virtual void getOrganizationFirmwareUpgrades(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_type = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  firmware_upgrade_ids QList<QString> [optional]
    * @param[in]  firmware_upgrade_batch_ids QList<QString> [optional]
    */
    virtual void getOrganizationFirmwareUpgradesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &firmware_upgrade_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &firmware_upgrade_batch_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void getOrganizationInventoryDevice(const QString &organization_id, const QString &serial);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  used_state QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  order_numbers QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  product_types QList<QString> [optional]
    */
    virtual void getOrganizationInventoryDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &used_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_numbers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  import_ids QList<QString> [required]
    */
    virtual void getOrganizationInventoryOnboardingCloudMonitoringImports(const QString &organization_id, const QList<QString> &import_ids);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  device_type QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationInventoryOnboardingCloudMonitoringNetworks(const QString &organization_id, const QString &device_type, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  license_id QString [required]
    */
    virtual void getOrganizationLicense(const QString &organization_id, const QString &license_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  network_id QString [optional]
    * @param[in]  state QString [optional]
    */
    virtual void getOrganizationLicenses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationLicensesOverview(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationLoginSecurity(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [optional]
    * @param[in]  is_bound_to_config_template bool [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationNetworks(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &config_template_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_bound_to_config_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationOpenapiSpec(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    */
    virtual void getOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjects(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void getOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjectsGroups(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSaml(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    */
    virtual void getOrganizationSamlIdp(const QString &organization_id, const QString &idp_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSamlIdps(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  saml_role_id QString [required]
    */
    virtual void getOrganizationSamlRole(const QString &organization_id, const QString &saml_role_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSamlRoles(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSnmp(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopAppliancesByUtilization(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopClientsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopClientsManufacturersByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopDevicesByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopDevicesModelsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopSsidsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopSwitchesByEnergyUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationUplinksStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_type QString [optional]
    */
    virtual void getOrganizationWebhooksAlertTypes(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  url QString [optional]
    */
    virtual void getOrganizationWebhooksLogs(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());


    virtual void getOrganizations();

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_move_organization_licenses_request OAIMoveOrganizationLicenses_request [required]
    */
    virtual void moveOrganizationLicenses(const QString &organization_id, const OAIMoveOrganizationLicenses_request &oai_move_organization_licenses_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_move_organization_licenses_seats_request OAIMoveOrganizationLicensesSeats_request [required]
    */
    virtual void moveOrganizationLicensesSeats(const QString &organization_id, const OAIMoveOrganizationLicensesSeats_request &oai_move_organization_licenses_seats_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_release_from_organization_inventory_request OAIReleaseFromOrganizationInventory_request [optional]
    */
    virtual void releaseFromOrganizationInventory(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIReleaseFromOrganizationInventory_request> &oai_release_from_organization_inventory_request = ::OpenAPI::OptionalParam<OAIReleaseFromOrganizationInventory_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_renew_organization_licenses_seats_request OAIRenewOrganizationLicensesSeats_request [required]
    */
    virtual void renewOrganizationLicensesSeats(const QString &organization_id, const OAIRenewOrganizationLicensesSeats_request &oai_renew_organization_licenses_seats_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_request OAIUpdateOrganization_request [optional]
    */
    virtual void updateOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganization_request> &oai_update_organization_request = ::OpenAPI::OptionalParam<OAIUpdateOrganization_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  action_batch_id QString [required]
    * @param[in]  oai_update_organization_action_batch_request OAIUpdateOrganizationActionBatch_request [optional]
    */
    virtual void updateOrganizationActionBatch(const QString &organization_id, const QString &action_batch_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationActionBatch_request> &oai_update_organization_action_batch_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationActionBatch_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_acl_request OAIUpdateOrganizationAdaptivePolicyAcl_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyAcl_request> &oai_update_organization_adaptive_policy_acl_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyAcl_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_group_request OAIUpdateOrganizationAdaptivePolicyGroup_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request> &oai_update_organization_adaptive_policy_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_policy_request OAIUpdateOrganizationAdaptivePolicyPolicy_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request> &oai_update_organization_adaptive_policy_policy_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_settings_request OAIUpdateOrganizationAdaptivePolicySettings_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicySettings(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request> &oai_update_organization_adaptive_policy_settings_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  admin_id QString [required]
    * @param[in]  oai_update_organization_admin_request OAIUpdateOrganizationAdmin_request [optional]
    */
    virtual void updateOrganizationAdmin(const QString &organization_id, const QString &admin_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdmin_request> &oai_update_organization_admin_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdmin_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  alert_config_id QString [required]
    * @param[in]  oai_update_organization_alerts_profile_request OAIUpdateOrganizationAlertsProfile_request [optional]
    */
    virtual void updateOrganizationAlertsProfile(const QString &organization_id, const QString &alert_config_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAlertsProfile_request> &oai_update_organization_alerts_profile_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAlertsProfile_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_branding_policies_priorities_request OAIUpdateOrganizationBrandingPoliciesPriorities_request [optional]
    */
    virtual void updateOrganizationBrandingPoliciesPriorities(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPoliciesPriorities_request> &oai_update_organization_branding_policies_priorities_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPoliciesPriorities_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  branding_policy_id QString [required]
    * @param[in]  oai_update_organization_branding_policy_request OAIUpdateOrganizationBrandingPolicy_request [optional]
    */
    virtual void updateOrganizationBrandingPolicy(const QString &organization_id, const QString &branding_policy_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPolicy_request> &oai_update_organization_branding_policy_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  oai_update_organization_config_template_request OAIUpdateOrganizationConfigTemplate_request [optional]
    */
    virtual void updateOrganizationConfigTemplate(const QString &organization_id, const QString &config_template_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplate_request> &oai_update_organization_config_template_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplate_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    * @param[in]  oai_update_organization_early_access_features_opt_in_request OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request [optional]
    */
    virtual void updateOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request> &oai_update_organization_early_access_features_opt_in_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  license_id QString [required]
    * @param[in]  oai_update_organization_license_request OAIUpdateOrganizationLicense_request [optional]
    */
    virtual void updateOrganizationLicense(const QString &organization_id, const QString &license_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationLicense_request> &oai_update_organization_license_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationLicense_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_login_security_request OAIUpdateOrganizationLoginSecurity_request [optional]
    */
    virtual void updateOrganizationLoginSecurity(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationLoginSecurity_request> &oai_update_organization_login_security_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationLoginSecurity_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    * @param[in]  oai_update_organization_policy_object_request OAIUpdateOrganizationPolicyObject_request [optional]
    */
    virtual void updateOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObject_request> &oai_update_organization_policy_object_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObject_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    * @param[in]  oai_update_organization_policy_objects_group_request OAIUpdateOrganizationPolicyObjectsGroup_request [optional]
    */
    virtual void updateOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request> &oai_update_organization_policy_objects_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_saml_request OAIUpdateOrganizationSaml_request [optional]
    */
    virtual void updateOrganizationSaml(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSaml_request> &oai_update_organization_saml_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSaml_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    * @param[in]  oai_update_organization_saml_idp_request OAIUpdateOrganizationSamlIdp_request [optional]
    */
    virtual void updateOrganizationSamlIdp(const QString &organization_id, const QString &idp_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlIdp_request> &oai_update_organization_saml_idp_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlIdp_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  saml_role_id QString [required]
    * @param[in]  oai_update_organization_saml_role_request OAIUpdateOrganizationSamlRole_request [optional]
    */
    virtual void updateOrganizationSamlRole(const QString &organization_id, const QString &saml_role_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlRole_request> &oai_update_organization_saml_role_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlRole_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_snmp_request OAIUpdateOrganizationSnmp_request [optional]
    */
    virtual void updateOrganizationSnmp(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSnmp_request> &oai_update_organization_snmp_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSnmp_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignOrganizationLicensesSeatsCallback(OAIHttpRequestWorker *worker);
    void claimIntoOrganizationCallback(OAIHttpRequestWorker *worker);
    void claimIntoOrganizationInventoryCallback(OAIHttpRequestWorker *worker);
    void cloneOrganizationCallback(OAIHttpRequestWorker *worker);
    void combineOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void createOrganizationCallback(OAIHttpRequestWorker *worker);
    void createOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdminCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void createOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void createOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void createOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInventoryOnboardingCloudMonitoringImportCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareCallback(OAIHttpRequestWorker *worker);
    void createOrganizationNetworkCallback(OAIHttpRequestWorker *worker);
    void createOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void createOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void createOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdminCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationUserCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void getOrganizationActionBatchesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPoliciesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdminsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAlertsProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalCallback(OAIHttpRequestWorker *worker);
    void getOrganizationBrandingPoliciesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationBrandingPoliciesPrioritiesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsBandwidthUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsSearchCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplatesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigurationChangesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesAvailabilitiesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesPowerModulesStatusesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesUplinksAddressesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesUplinksLossAndLatencyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationFirmwareUpgradesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationFirmwareUpgradesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicenseCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicensesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicensesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLoginSecurityCallback(OAIHttpRequestWorker *worker);
    void getOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void getOrganizationOpenapiSpecCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlRolesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSnmpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopAppliancesByUtilizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopClientsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopClientsManufacturersByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopDevicesByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopDevicesModelsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopSsidsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopSwitchesByEnergyUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationUplinksStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWebhooksAlertTypesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWebhooksLogsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationsCallback(OAIHttpRequestWorker *worker);
    void moveOrganizationLicensesCallback(OAIHttpRequestWorker *worker);
    void moveOrganizationLicensesSeatsCallback(OAIHttpRequestWorker *worker);
    void releaseFromOrganizationInventoryCallback(OAIHttpRequestWorker *worker);
    void renewOrganizationLicensesSeatsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdminCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationBrandingPoliciesPrioritiesCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationLicenseCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationLoginSecurityCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSnmpCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignOrganizationLicensesSeatsSignal(OAIAssignOrganizationLicensesSeats_200_response summary);
    void claimIntoOrganizationSignal(OAIObject summary);
    void claimIntoOrganizationInventorySignal(OAIObject summary);
    void cloneOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void combineOrganizationNetworksSignal(OAICombineOrganizationNetworks_200_response summary);
    void createOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void createOrganizationActionBatchSignal(OAICreateOrganizationActionBatch_201_response summary);
    void createOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void createOrganizationAdminSignal(OAIObject summary);
    void createOrganizationAlertsProfileSignal(OAIObject summary);
    void createOrganizationBrandingPolicySignal(OAICreateOrganizationBrandingPolicy_201_response summary);
    void createOrganizationConfigTemplateSignal(OAIObject summary);
    void createOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignal(OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignal(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignal(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary);
    void createOrganizationNetworkSignal(OAIGetNetwork_200_response summary);
    void createOrganizationPolicyObjectSignal(OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void createOrganizationSamlIdpSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void createOrganizationSamlRoleSignal(OAIObject summary);
    void deleteOrganizationSignal();
    void deleteOrganizationActionBatchSignal();
    void deleteOrganizationAdaptivePolicyAclSignal();
    void deleteOrganizationAdaptivePolicyGroupSignal();
    void deleteOrganizationAdaptivePolicyPolicySignal();
    void deleteOrganizationAdminSignal();
    void deleteOrganizationAlertsProfileSignal();
    void deleteOrganizationBrandingPolicySignal();
    void deleteOrganizationConfigTemplateSignal();
    void deleteOrganizationEarlyAccessFeaturesOptInSignal();
    void deleteOrganizationPolicyObjectSignal();
    void deleteOrganizationPolicyObjectsGroupSignal();
    void deleteOrganizationSamlIdpSignal();
    void deleteOrganizationSamlRoleSignal();
    void deleteOrganizationUserSignal();
    void getOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void getOrganizationActionBatchSignal(OAICreateOrganizationActionBatch_201_response summary);
    void getOrganizationActionBatchesSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyAclsSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyOverviewSignal(OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationAdaptivePolicyPoliciesSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void getOrganizationAdaptivePolicySettingsSignal(OAIObject summary);
    void getOrganizationAdminsSignal(QList<OAIObject> summary);
    void getOrganizationAlertsProfilesSignal(QList<OAIObject> summary);
    void getOrganizationApiRequestsSignal(QList<OAIGetOrganizationApiRequests_200_response_inner> summary);
    void getOrganizationApiRequestsOverviewSignal(OAIObject summary);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignal(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary);
    void getOrganizationBrandingPoliciesSignal(QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary);
    void getOrganizationBrandingPoliciesPrioritiesSignal(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void getOrganizationBrandingPolicySignal(OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void getOrganizationClientsBandwidthUsageHistorySignal(QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary);
    void getOrganizationClientsOverviewSignal(OAIGetOrganizationClientsOverview_200_response summary);
    void getOrganizationClientsSearchSignal(OAIObject summary);
    void getOrganizationConfigTemplateSignal(OAIObject summary);
    void getOrganizationConfigTemplatesSignal(QList<OAIObject> summary);
    void getOrganizationConfigurationChangesSignal(QList<OAIObject> summary);
    void getOrganizationDevicesSignal(QList<OAIGetOrganizationDevices_200_response_inner> summary);
    void getOrganizationDevicesAvailabilitiesSignal(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignal(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesSignal(OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationDevicesStatusesOverviewSignal(OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesUplinksAddressesByDeviceSignal(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary);
    void getOrganizationDevicesUplinksLossAndLatencySignal(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary);
    void getOrganizationEarlyAccessFeaturesSignal(QList<OAIObject> summary);
    void getOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void getOrganizationEarlyAccessFeaturesOptInsSignal(QList<OAIObject> summary);
    void getOrganizationFirmwareUpgradesSignal(QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary);
    void getOrganizationFirmwareUpgradesByDeviceSignal(QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary);
    void getOrganizationInventoryDeviceSignal(OAIGetOrganizationInventoryDevices_200_response_inner summary);
    void getOrganizationInventoryDevicesSignal(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignal(QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignal(QList<OAIGetNetwork_200_response> summary);
    void getOrganizationLicenseSignal(OAIGetOrganizationLicenses_200_response_inner summary);
    void getOrganizationLicensesSignal(QList<OAIGetOrganizationLicenses_200_response_inner> summary);
    void getOrganizationLicensesOverviewSignal(OAIObject summary);
    void getOrganizationLoginSecuritySignal(OAIGetOrganizationLoginSecurity_200_response summary);
    void getOrganizationNetworksSignal(QList<OAIGetNetwork_200_response> summary);
    void getOrganizationOpenapiSpecSignal(OAIObject summary);
    void getOrganizationPolicyObjectSignal(OAIObject summary);
    void getOrganizationPolicyObjectsSignal(QList<OAIObject> summary);
    void getOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignal(QList<OAIObject> summary);
    void getOrganizationSamlSignal(OAIGetOrganizationSaml_200_response summary);
    void getOrganizationSamlIdpSignal(OAIGetOrganizationSamlIdps_200_response_inner summary);
    void getOrganizationSamlIdpsSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void getOrganizationSamlRoleSignal(OAIObject summary);
    void getOrganizationSamlRolesSignal(QList<OAIObject> summary);
    void getOrganizationSnmpSignal(OAIObject summary);
    void getOrganizationSummaryTopAppliancesByUtilizationSignal(QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary);
    void getOrganizationSummaryTopClientsByUsageSignal(QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignal(QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesByUsageSignal(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesModelsByUsageSignal(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSsidsByUsageSignal(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignal(QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary);
    void getOrganizationUplinksStatusesSignal(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary);
    void getOrganizationWebhooksAlertTypesSignal(QList<OAIObject> summary);
    void getOrganizationWebhooksLogsSignal(QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary);
    void getOrganizationsSignal(QList<OAIGetOrganizations_200_response_inner> summary);
    void moveOrganizationLicensesSignal(OAIMoveOrganizationLicenses_200_response summary);
    void moveOrganizationLicensesSeatsSignal(OAIMoveOrganizationLicensesSeats_200_response summary);
    void releaseFromOrganizationInventorySignal(OAIObject summary);
    void renewOrganizationLicensesSeatsSignal(OAIAssignOrganizationLicensesSeats_200_response summary);
    void updateOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void updateOrganizationActionBatchSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void updateOrganizationAdaptivePolicySettingsSignal(OAIObject summary);
    void updateOrganizationAdminSignal(OAIObject summary);
    void updateOrganizationAlertsProfileSignal(OAIObject summary);
    void updateOrganizationBrandingPoliciesPrioritiesSignal(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void updateOrganizationBrandingPolicySignal(OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void updateOrganizationConfigTemplateSignal(OAIObject summary);
    void updateOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void updateOrganizationLicenseSignal(OAIGetOrganizationLicenses_200_response_inner summary);
    void updateOrganizationLoginSecuritySignal(OAIGetOrganizationLoginSecurity_200_response summary);
    void updateOrganizationPolicyObjectSignal(OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void updateOrganizationSamlSignal(OAIGetOrganizationSaml_200_response summary);
    void updateOrganizationSamlIdpSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void updateOrganizationSamlRoleSignal(OAIUpdateOrganizationSamlRole_200_response summary);
    void updateOrganizationSnmpSignal(OAIObject summary);


    void assignOrganizationLicensesSeatsSignalFull(OAIHttpRequestWorker *worker, OAIAssignOrganizationLicensesSeats_200_response summary);
    void claimIntoOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void claimIntoOrganizationInventorySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloneOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void combineOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, OAICombineOrganizationNetworks_200_response summary);
    void createOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void createOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker, OAICreateOrganizationActionBatch_201_response summary);
    void createOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdminSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker, OAICreateOrganizationBrandingPolicy_201_response summary);
    void createOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary);
    void createOrganizationNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void createOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void createOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdminSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationUserSignalFull(OAIHttpRequestWorker *worker);
    void getOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void getOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker, OAICreateOrganizationActionBatch_201_response summary);
    void getOrganizationActionBatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyAclsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationAdaptivePolicyPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdminsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAlertsProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApiRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationApiRequests_200_response_inner> summary);
    void getOrganizationApiRequestsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary);
    void getOrganizationBrandingPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary);
    void getOrganizationBrandingPoliciesPrioritiesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void getOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void getOrganizationClientsBandwidthUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary);
    void getOrganizationClientsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationClientsOverview_200_response summary);
    void getOrganizationClientsSearchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationConfigTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationConfigurationChangesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevices_200_response_inner> summary);
    void getOrganizationDevicesAvailabilitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationDevicesStatusesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary);
    void getOrganizationDevicesUplinksLossAndLatencySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary);
    void getOrganizationEarlyAccessFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationEarlyAccessFeaturesOptInsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationFirmwareUpgradesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary);
    void getOrganizationFirmwareUpgradesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary);
    void getOrganizationInventoryDeviceSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationInventoryDevices_200_response_inner summary);
    void getOrganizationInventoryDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetwork_200_response> summary);
    void getOrganizationLicenseSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLicenses_200_response_inner summary);
    void getOrganizationLicensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationLicenses_200_response_inner> summary);
    void getOrganizationLicensesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationLoginSecuritySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLoginSecurity_200_response summary);
    void getOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetwork_200_response> summary);
    void getOrganizationOpenapiSpecSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationSamlSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSaml_200_response summary);
    void getOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSamlIdps_200_response_inner summary);
    void getOrganizationSamlIdpsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void getOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSamlRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSummaryTopAppliancesByUtilizationSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary);
    void getOrganizationSummaryTopClientsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSsidsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary);
    void getOrganizationUplinksStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary);
    void getOrganizationWebhooksAlertTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationWebhooksLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary);
    void getOrganizationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizations_200_response_inner> summary);
    void moveOrganizationLicensesSignalFull(OAIHttpRequestWorker *worker, OAIMoveOrganizationLicenses_200_response summary);
    void moveOrganizationLicensesSeatsSignalFull(OAIHttpRequestWorker *worker, OAIMoveOrganizationLicensesSeats_200_response summary);
    void releaseFromOrganizationInventorySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void renewOrganizationLicensesSeatsSignalFull(OAIHttpRequestWorker *worker, OAIAssignOrganizationLicensesSeats_200_response summary);
    void updateOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void updateOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdminSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationBrandingPoliciesPrioritiesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void updateOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void updateOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationLicenseSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLicenses_200_response_inner summary);
    void updateOrganizationLoginSecuritySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLoginSecurity_200_response summary);
    void updateOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationSamlSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSaml_200_response summary);
    void updateOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void updateOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrganizationSamlRole_200_response summary);
    void updateOrganizationSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use assignOrganizationLicensesSeatsSignalError() instead")
    void assignOrganizationLicensesSeatsSignalE(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignOrganizationLicensesSeatsSignalError(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationSignalError() instead")
    void claimIntoOrganizationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationInventorySignalError() instead")
    void claimIntoOrganizationInventorySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationInventorySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSignalError() instead")
    void cloneOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalError() instead")
    void combineOrganizationNetworksSignalE(OAICombineOrganizationNetworks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalError(OAICombineOrganizationNetworks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSignalError() instead")
    void createOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationActionBatchSignalError() instead")
    void createOrganizationActionBatchSignalE(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationActionBatchSignalError(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyAclSignalError() instead")
    void createOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalError() instead")
    void createOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalError() instead")
    void createOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdminSignalError() instead")
    void createOrganizationAdminSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdminSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAlertsProfileSignalError() instead")
    void createOrganizationAlertsProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAlertsProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationBrandingPolicySignalError() instead")
    void createOrganizationBrandingPolicySignalE(OAICreateOrganizationBrandingPolicy_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationBrandingPolicySignalError(OAICreateOrganizationBrandingPolicy_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationConfigTemplateSignalError() instead")
    void createOrganizationConfigTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationConfigTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void createOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalError() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringImportSignalError() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalE(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalError(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalError() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalE(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalError(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalError() instead")
    void createOrganizationNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectSignalError() instead")
    void createOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalError() instead")
    void createOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlIdpSignalError() instead")
    void createOrganizationSamlIdpSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlIdpSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlRoleSignalError() instead")
    void createOrganizationSamlRoleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlRoleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSignalError() instead")
    void deleteOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationActionBatchSignalError() instead")
    void deleteOrganizationActionBatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationActionBatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyAclSignalError() instead")
    void deleteOrganizationAdaptivePolicyAclSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyAclSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalError() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalError() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdminSignalError() instead")
    void deleteOrganizationAdminSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdminSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAlertsProfileSignalError() instead")
    void deleteOrganizationAlertsProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAlertsProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationBrandingPolicySignalError() instead")
    void deleteOrganizationBrandingPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationBrandingPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationConfigTemplateSignalError() instead")
    void deleteOrganizationConfigTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationConfigTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void deleteOrganizationEarlyAccessFeaturesOptInSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectSignalError() instead")
    void deleteOrganizationPolicyObjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalError() instead")
    void deleteOrganizationPolicyObjectsGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlIdpSignalError() instead")
    void deleteOrganizationSamlIdpSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlIdpSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlRoleSignalError() instead")
    void deleteOrganizationSamlRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationUserSignalError() instead")
    void deleteOrganizationUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSignalError() instead")
    void getOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchSignalError() instead")
    void getOrganizationActionBatchSignalE(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchSignalError(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchesSignalError() instead")
    void getOrganizationActionBatchesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclSignalError() instead")
    void getOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclsSignalError() instead")
    void getOrganizationAdaptivePolicyAclsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalError() instead")
    void getOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalError() instead")
    void getOrganizationAdaptivePolicyGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalError() instead")
    void getOrganizationAdaptivePolicyOverviewSignalE(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalError(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalError() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalError() instead")
    void getOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalError() instead")
    void getOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdminsSignalError() instead")
    void getOrganizationAdminsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdminsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAlertsProfilesSignalError() instead")
    void getOrganizationAlertsProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAlertsProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsSignalError() instead")
    void getOrganizationApiRequestsSignalE(QList<OAIGetOrganizationApiRequests_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsSignalError(QList<OAIGetOrganizationApiRequests_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewSignalError() instead")
    void getOrganizationApiRequestsOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalError() instead")
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalE(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalError(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesSignalError() instead")
    void getOrganizationBrandingPoliciesSignalE(QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesSignalError(QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesPrioritiesSignalError() instead")
    void getOrganizationBrandingPoliciesPrioritiesSignalE(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesPrioritiesSignalError(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPolicySignalError() instead")
    void getOrganizationBrandingPolicySignalE(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPolicySignalError(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsBandwidthUsageHistorySignalError() instead")
    void getOrganizationClientsBandwidthUsageHistorySignalE(QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsBandwidthUsageHistorySignalError(QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsOverviewSignalError() instead")
    void getOrganizationClientsOverviewSignalE(OAIGetOrganizationClientsOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsOverviewSignalError(OAIGetOrganizationClientsOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsSearchSignalError() instead")
    void getOrganizationClientsSearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsSearchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSignalError() instead")
    void getOrganizationConfigTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplatesSignalError() instead")
    void getOrganizationConfigTemplatesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplatesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigurationChangesSignalError() instead")
    void getOrganizationConfigurationChangesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigurationChangesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalError() instead")
    void getOrganizationDevicesSignalE(QList<OAIGetOrganizationDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalError(QList<OAIGetOrganizationDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesAvailabilitiesSignalError() instead")
    void getOrganizationDevicesAvailabilitiesSignalE(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesAvailabilitiesSignalError(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalError() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalE(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalError(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalError() instead")
    void getOrganizationDevicesStatusesSignalE(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalError(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalError() instead")
    void getOrganizationDevicesStatusesOverviewSignalE(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalError(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksAddressesByDeviceSignalError() instead")
    void getOrganizationDevicesUplinksAddressesByDeviceSignalE(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalError(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksLossAndLatencySignalError() instead")
    void getOrganizationDevicesUplinksLossAndLatencySignalE(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksLossAndLatencySignalError(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesSignalError() instead")
    void getOrganizationEarlyAccessFeaturesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void getOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInsSignalError() instead")
    void getOrganizationEarlyAccessFeaturesOptInsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesSignalError() instead")
    void getOrganizationFirmwareUpgradesSignalE(QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesSignalError(QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesByDeviceSignalError() instead")
    void getOrganizationFirmwareUpgradesByDeviceSignalE(QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesByDeviceSignalError(QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDeviceSignalError() instead")
    void getOrganizationInventoryDeviceSignalE(OAIGetOrganizationInventoryDevices_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDeviceSignalError(OAIGetOrganizationInventoryDevices_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDevicesSignalError() instead")
    void getOrganizationInventoryDevicesSignalE(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDevicesSignalError(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringImportsSignalError() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalE(QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalError(QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalError() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalE(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalError(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicenseSignalError() instead")
    void getOrganizationLicenseSignalE(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicenseSignalError(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesSignalError() instead")
    void getOrganizationLicensesSignalE(QList<OAIGetOrganizationLicenses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesSignalError(QList<OAIGetOrganizationLicenses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesOverviewSignalError() instead")
    void getOrganizationLicensesOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLoginSecuritySignalError() instead")
    void getOrganizationLoginSecuritySignalE(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLoginSecuritySignalError(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalError() instead")
    void getOrganizationNetworksSignalE(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalError(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationOpenapiSpecSignalError() instead")
    void getOrganizationOpenapiSpecSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationOpenapiSpecSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectSignalError() instead")
    void getOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsSignalError() instead")
    void getOrganizationPolicyObjectsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalError() instead")
    void getOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalError() instead")
    void getOrganizationPolicyObjectsGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlSignalError() instead")
    void getOrganizationSamlSignalE(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlSignalError(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpSignalError() instead")
    void getOrganizationSamlIdpSignalE(OAIGetOrganizationSamlIdps_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpSignalError(OAIGetOrganizationSamlIdps_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpsSignalError() instead")
    void getOrganizationSamlIdpsSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpsSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRoleSignalError() instead")
    void getOrganizationSamlRoleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRoleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRolesSignalError() instead")
    void getOrganizationSamlRolesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRolesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSnmpSignalError() instead")
    void getOrganizationSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopAppliancesByUtilizationSignalError() instead")
    void getOrganizationSummaryTopAppliancesByUtilizationSignalE(QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopAppliancesByUtilizationSignalError(QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsByUsageSignalError() instead")
    void getOrganizationSummaryTopClientsByUsageSignalE(QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsByUsageSignalError(QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsManufacturersByUsageSignalError() instead")
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalE(QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalError(QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesByUsageSignalError() instead")
    void getOrganizationSummaryTopDevicesByUsageSignalE(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesByUsageSignalError(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesModelsByUsageSignalError() instead")
    void getOrganizationSummaryTopDevicesModelsByUsageSignalE(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalError(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSsidsByUsageSignalError() instead")
    void getOrganizationSummaryTopSsidsByUsageSignalE(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSsidsByUsageSignalError(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSwitchesByEnergyUsageSignalError() instead")
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalE(QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalError(QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksStatusesSignalError() instead")
    void getOrganizationUplinksStatusesSignalE(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksStatusesSignalError(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksAlertTypesSignalError() instead")
    void getOrganizationWebhooksAlertTypesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksAlertTypesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksLogsSignalError() instead")
    void getOrganizationWebhooksLogsSignalE(QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksLogsSignalError(QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsSignalError() instead")
    void getOrganizationsSignalE(QList<OAIGetOrganizations_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsSignalError(QList<OAIGetOrganizations_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSignalError() instead")
    void moveOrganizationLicensesSignalE(OAIMoveOrganizationLicenses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSignalError(OAIMoveOrganizationLicenses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSeatsSignalError() instead")
    void moveOrganizationLicensesSeatsSignalE(OAIMoveOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSeatsSignalError(OAIMoveOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseFromOrganizationInventorySignalError() instead")
    void releaseFromOrganizationInventorySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseFromOrganizationInventorySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewOrganizationLicensesSeatsSignalError() instead")
    void renewOrganizationLicensesSeatsSignalE(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renewOrganizationLicensesSeatsSignalError(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSignalError() instead")
    void updateOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationActionBatchSignalError() instead")
    void updateOrganizationActionBatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationActionBatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyAclSignalError() instead")
    void updateOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalError() instead")
    void updateOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalError() instead")
    void updateOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalError() instead")
    void updateOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdminSignalError() instead")
    void updateOrganizationAdminSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdminSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAlertsProfileSignalError() instead")
    void updateOrganizationAlertsProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAlertsProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPoliciesPrioritiesSignalError() instead")
    void updateOrganizationBrandingPoliciesPrioritiesSignalE(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPoliciesPrioritiesSignalError(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPolicySignalError() instead")
    void updateOrganizationBrandingPolicySignalE(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPolicySignalError(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSignalError() instead")
    void updateOrganizationConfigTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void updateOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLicenseSignalError() instead")
    void updateOrganizationLicenseSignalE(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLicenseSignalError(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLoginSecuritySignalError() instead")
    void updateOrganizationLoginSecuritySignalE(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLoginSecuritySignalError(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectSignalError() instead")
    void updateOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalError() instead")
    void updateOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlSignalError() instead")
    void updateOrganizationSamlSignalE(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlSignalError(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlIdpSignalError() instead")
    void updateOrganizationSamlIdpSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlIdpSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlRoleSignalError() instead")
    void updateOrganizationSamlRoleSignalE(OAIUpdateOrganizationSamlRole_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlRoleSignalError(OAIUpdateOrganizationSamlRole_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSnmpSignalError() instead")
    void updateOrganizationSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignOrganizationLicensesSeatsSignalErrorFull() instead")
    void assignOrganizationLicensesSeatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignOrganizationLicensesSeatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationSignalErrorFull() instead")
    void claimIntoOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationInventorySignalErrorFull() instead")
    void claimIntoOrganizationInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSignalErrorFull() instead")
    void cloneOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalErrorFull() instead")
    void combineOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSignalErrorFull() instead")
    void createOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationActionBatchSignalErrorFull() instead")
    void createOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void createOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdminSignalErrorFull() instead")
    void createOrganizationAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAlertsProfileSignalErrorFull() instead")
    void createOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationBrandingPolicySignalErrorFull() instead")
    void createOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationConfigTemplateSignalErrorFull() instead")
    void createOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void createOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalErrorFull() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringImportSignalErrorFull() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalErrorFull() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalErrorFull() instead")
    void createOrganizationNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectSignalErrorFull() instead")
    void createOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void createOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlIdpSignalErrorFull() instead")
    void createOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlRoleSignalErrorFull() instead")
    void createOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSignalErrorFull() instead")
    void deleteOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationActionBatchSignalErrorFull() instead")
    void deleteOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdminSignalErrorFull() instead")
    void deleteOrganizationAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAlertsProfileSignalErrorFull() instead")
    void deleteOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationBrandingPolicySignalErrorFull() instead")
    void deleteOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationConfigTemplateSignalErrorFull() instead")
    void deleteOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void deleteOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlIdpSignalErrorFull() instead")
    void deleteOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlRoleSignalErrorFull() instead")
    void deleteOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationUserSignalErrorFull() instead")
    void deleteOrganizationUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSignalErrorFull() instead")
    void getOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchSignalErrorFull() instead")
    void getOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchesSignalErrorFull() instead")
    void getOrganizationActionBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyAclsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdminsSignalErrorFull() instead")
    void getOrganizationAdminsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdminsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAlertsProfilesSignalErrorFull() instead")
    void getOrganizationAlertsProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAlertsProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsSignalErrorFull() instead")
    void getOrganizationApiRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewSignalErrorFull() instead")
    void getOrganizationApiRequestsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalErrorFull() instead")
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesSignalErrorFull() instead")
    void getOrganizationBrandingPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesPrioritiesSignalErrorFull() instead")
    void getOrganizationBrandingPoliciesPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPolicySignalErrorFull() instead")
    void getOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsBandwidthUsageHistorySignalErrorFull() instead")
    void getOrganizationClientsBandwidthUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsBandwidthUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsOverviewSignalErrorFull() instead")
    void getOrganizationClientsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsSearchSignalErrorFull() instead")
    void getOrganizationClientsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSignalErrorFull() instead")
    void getOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplatesSignalErrorFull() instead")
    void getOrganizationConfigTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigurationChangesSignalErrorFull() instead")
    void getOrganizationConfigurationChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigurationChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalErrorFull() instead")
    void getOrganizationDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesAvailabilitiesSignalErrorFull() instead")
    void getOrganizationDevicesAvailabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesAvailabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalErrorFull() instead")
    void getOrganizationDevicesStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalErrorFull() instead")
    void getOrganizationDevicesStatusesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksAddressesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesUplinksAddressesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksLossAndLatencySignalErrorFull() instead")
    void getOrganizationDevicesUplinksLossAndLatencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksLossAndLatencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInsSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesOptInsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesSignalErrorFull() instead")
    void getOrganizationFirmwareUpgradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesByDeviceSignalErrorFull() instead")
    void getOrganizationFirmwareUpgradesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDeviceSignalErrorFull() instead")
    void getOrganizationInventoryDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDevicesSignalErrorFull() instead")
    void getOrganizationInventoryDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringImportsSignalErrorFull() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalErrorFull() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicenseSignalErrorFull() instead")
    void getOrganizationLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesSignalErrorFull() instead")
    void getOrganizationLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesOverviewSignalErrorFull() instead")
    void getOrganizationLicensesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLoginSecuritySignalErrorFull() instead")
    void getOrganizationLoginSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLoginSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalErrorFull() instead")
    void getOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationOpenapiSpecSignalErrorFull() instead")
    void getOrganizationOpenapiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationOpenapiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectSignalErrorFull() instead")
    void getOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlSignalErrorFull() instead")
    void getOrganizationSamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpSignalErrorFull() instead")
    void getOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpsSignalErrorFull() instead")
    void getOrganizationSamlIdpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRoleSignalErrorFull() instead")
    void getOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRolesSignalErrorFull() instead")
    void getOrganizationSamlRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSnmpSignalErrorFull() instead")
    void getOrganizationSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopAppliancesByUtilizationSignalErrorFull() instead")
    void getOrganizationSummaryTopAppliancesByUtilizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopAppliancesByUtilizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopClientsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsManufacturersByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopDevicesByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesModelsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopDevicesModelsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSsidsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopSsidsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSsidsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSwitchesByEnergyUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksStatusesSignalErrorFull() instead")
    void getOrganizationUplinksStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksAlertTypesSignalErrorFull() instead")
    void getOrganizationWebhooksAlertTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksAlertTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksLogsSignalErrorFull() instead")
    void getOrganizationWebhooksLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsSignalErrorFull() instead")
    void getOrganizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSignalErrorFull() instead")
    void moveOrganizationLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSeatsSignalErrorFull() instead")
    void moveOrganizationLicensesSeatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSeatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseFromOrganizationInventorySignalErrorFull() instead")
    void releaseFromOrganizationInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseFromOrganizationInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewOrganizationLicensesSeatsSignalErrorFull() instead")
    void renewOrganizationLicensesSeatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renewOrganizationLicensesSeatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSignalErrorFull() instead")
    void updateOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationActionBatchSignalErrorFull() instead")
    void updateOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdminSignalErrorFull() instead")
    void updateOrganizationAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAlertsProfileSignalErrorFull() instead")
    void updateOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPoliciesPrioritiesSignalErrorFull() instead")
    void updateOrganizationBrandingPoliciesPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPoliciesPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPolicySignalErrorFull() instead")
    void updateOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSignalErrorFull() instead")
    void updateOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void updateOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLicenseSignalErrorFull() instead")
    void updateOrganizationLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLoginSecuritySignalErrorFull() instead")
    void updateOrganizationLoginSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLoginSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectSignalErrorFull() instead")
    void updateOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void updateOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlSignalErrorFull() instead")
    void updateOrganizationSamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlIdpSignalErrorFull() instead")
    void updateOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlRoleSignalErrorFull() instead")
    void updateOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSnmpSignalErrorFull() instead")
    void updateOrganizationSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
