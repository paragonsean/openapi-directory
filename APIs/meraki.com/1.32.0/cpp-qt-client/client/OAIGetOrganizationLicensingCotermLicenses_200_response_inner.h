/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOrganizationLicensingCotermLicenses_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetOrganizationLicensingCotermLicenses_200_response_inner_H
#define OAIGetOrganizationLicensingCotermLicenses_200_response_inner_H

#include <QJsonObject>

#include "OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner.h"
#include "OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner;
class OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner;

class OAIGetOrganizationLicensingCotermLicenses_200_response_inner : public OAIObject {
public:
    OAIGetOrganizationLicensingCotermLicenses_200_response_inner();
    OAIGetOrganizationLicensingCotermLicenses_200_response_inner(QString json);
    ~OAIGetOrganizationLicensingCotermLicenses_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getClaimedAt() const;
    void setClaimedAt(const QDateTime &claimed_at);
    bool is_claimed_at_Set() const;
    bool is_claimed_at_Valid() const;

    QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner> getCounts() const;
    void setCounts(const QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner> &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner> getEditions() const;
    void setEditions(const QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner> &editions);
    bool is_editions_Set() const;
    bool is_editions_Valid() const;

    bool isExpired() const;
    void setExpired(const bool &expired);
    bool is_expired_Set() const;
    bool is_expired_Valid() const;

    bool isInvalidated() const;
    void setInvalidated(const bool &invalidated);
    bool is_invalidated_Set() const;
    bool is_invalidated_Valid() const;

    QDateTime getInvalidatedAt() const;
    void setInvalidatedAt(const QDateTime &invalidated_at);
    bool is_invalidated_at_Set() const;
    bool is_invalidated_at_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getOrganizationId() const;
    void setOrganizationId(const QString &organization_id);
    bool is_organization_id_Set() const;
    bool is_organization_id_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_claimed_at;
    bool m_claimed_at_isSet;
    bool m_claimed_at_isValid;

    QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner> m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner> m_editions;
    bool m_editions_isSet;
    bool m_editions_isValid;

    bool m_expired;
    bool m_expired_isSet;
    bool m_expired_isValid;

    bool m_invalidated;
    bool m_invalidated_isSet;
    bool m_invalidated_isValid;

    QDateTime m_invalidated_at;
    bool m_invalidated_at_isSet;
    bool m_invalidated_at_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_organization_id;
    bool m_organization_id_isSet;
    bool m_organization_id_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOrganizationLicensingCotermLicenses_200_response_inner)

#endif // OAIGetOrganizationLicensingCotermLicenses_200_response_inner_H
