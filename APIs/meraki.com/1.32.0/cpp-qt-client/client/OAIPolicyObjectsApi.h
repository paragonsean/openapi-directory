/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyObjectsApi_H
#define OAI_OAIPolicyObjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationPolicyObject_request.h"
#include "OAICreateOrganizationPolicyObjectsGroup_request.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationPolicyObject_request.h"
#include "OAIUpdateOrganizationPolicyObjectsGroup_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyObjectsApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyObjectsApi(const int timeOut = 0);
    ~OAIPolicyObjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_object_request OAICreateOrganizationPolicyObject_request [required]
    */
    virtual void createOrganizationPolicyObject(const QString &organization_id, const OAICreateOrganizationPolicyObject_request &oai_create_organization_policy_object_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_objects_group_request OAICreateOrganizationPolicyObjectsGroup_request [required]
    */
    virtual void createOrganizationPolicyObjectsGroup(const QString &organization_id, const OAICreateOrganizationPolicyObjectsGroup_request &oai_create_organization_policy_objects_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    */
    virtual void deleteOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void deleteOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    */
    virtual void getOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void getOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjectsGroups(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjects(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    * @param[in]  oai_update_organization_policy_object_request OAIUpdateOrganizationPolicyObject_request [optional]
    */
    virtual void updateOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObject_request> &oai_update_organization_policy_object_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObject_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    * @param[in]  oai_update_organization_policy_objects_group_request OAIUpdateOrganizationPolicyObjectsGroup_request [optional]
    */
    virtual void updateOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request> &oai_update_organization_policy_objects_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void createOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationPolicyObjectSignal(OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void deleteOrganizationPolicyObjectSignal();
    void deleteOrganizationPolicyObjectsGroupSignal();
    void getOrganizationPolicyObjectSignal(OAIObject summary);
    void getOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignal(QList<OAIObject> summary);
    void getOrganizationPolicyObjectsSignal(QList<OAIObject> summary);
    void updateOrganizationPolicyObjectSignal(OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignal(OAIObject summary);


    void createOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationPolicyObjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectSignalError() instead")
    void createOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalError() instead")
    void createOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectSignalError() instead")
    void deleteOrganizationPolicyObjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalError() instead")
    void deleteOrganizationPolicyObjectsGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectSignalError() instead")
    void getOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalError() instead")
    void getOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalError() instead")
    void getOrganizationPolicyObjectsGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsSignalError() instead")
    void getOrganizationPolicyObjectsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectSignalError() instead")
    void updateOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalError() instead")
    void updateOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectSignalErrorFull() instead")
    void createOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void createOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectSignalErrorFull() instead")
    void getOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectSignalErrorFull() instead")
    void updateOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void updateOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
