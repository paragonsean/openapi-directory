/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner() {
    this->initializeModel();
}

OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::~OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner() {}

void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_threshold.isSet()) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

QString OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::getDirection() const {
    return m_direction;
}
void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_direction_Valid() const{
    return m_direction_isValid;
}

qint32 OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::getDuration() const {
    return m_duration;
}
void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::getMetric() const {
    return m_metric;
}
void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_metric_Valid() const{
    return m_metric_isValid;
}

OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::getThreshold() const {
    return m_threshold;
}
void OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::setThreshold(const OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSensorAlertsProfiles_200_response_inner_conditions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_isValid && m_threshold_isValid && true;
}

} // namespace OpenAPI
