/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoutingApi_H
#define OAI_OAIRoutingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateDeviceSwitchRoutingInterface_request.h"
#include "OAICreateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAICreateNetworkSwitchStackRoutingInterface_request.h"
#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner.h"
#include "OAIGetDeviceSwitchRoutingStaticRoute_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request.h"
#include "OAIUpdateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticast_request.h"
#include "OAIUpdateNetworkSwitchRoutingOspf_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterface_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoutingApi : public QObject {
    Q_OBJECT

public:
    OAIRoutingApi(const int timeOut = 0);
    ~OAIRoutingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_interface_request OAICreateDeviceSwitchRoutingInterface_request [optional]
    */
    virtual void createDeviceSwitchRoutingInterface(const QString &serial, const ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request> &oai_create_device_switch_routing_interface_request = ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createDeviceSwitchRoutingStaticRoute(const QString &serial, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_routing_multicast_rendezvous_point_request OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void createNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_create_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_network_switch_stack_routing_interface_request OAICreateNetworkSwitchStackRoutingInterface_request [required]
    */
    virtual void createNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const OAICreateNetworkSwitchStackRoutingInterface_request &oai_create_network_switch_stack_routing_interface_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void deleteNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaces(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoutes(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoints(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticast(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingOspf(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaces(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoutes(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_device_switch_routing_interface_dhcp_request OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request> &oai_update_device_switch_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_create_device_switch_routing_interface_request OAICreateDeviceSwitchRoutingInterface_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request> &oai_create_device_switch_routing_interface_request = ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_rendezvous_point_request OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void updateNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id, const OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_update_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_request OAIUpdateNetworkSwitchRoutingMulticast_request [optional]
    */
    virtual void updateNetworkSwitchRoutingMulticast(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request> &oai_update_network_switch_routing_multicast_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_ospf_request OAIUpdateNetworkSwitchRoutingOspf_request [optional]
    */
    virtual void updateNetworkSwitchRoutingOspf(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingOspf_request> &oai_update_network_switch_routing_ospf_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingOspf_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_dhcp_request OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request> &oai_update_network_switch_stack_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_request OAIUpdateNetworkSwitchStackRoutingInterface_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request> &oai_update_network_switch_stack_routing_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingOspfCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingOspfCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void createDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void deleteDeviceSwitchRoutingInterfaceSignal();
    void deleteDeviceSwitchRoutingStaticRouteSignal();
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignal();
    void deleteNetworkSwitchStackRoutingInterfaceSignal();
    void deleteNetworkSwitchStackRoutingStaticRouteSignal();
    void getDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void getDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void getDeviceSwitchRoutingInterfacesSignal(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary);
    void getDeviceSwitchRoutingStaticRouteSignal(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignal(QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void getNetworkSwitchRoutingOspfSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void updateDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void updateNetworkSwitchRoutingOspfSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);


    void createDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void createDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void getDeviceSwitchRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary);
    void getDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalFull(OAIHttpRequestWorker *worker, QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingOspfSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void updateDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingOspfSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingInterfaceSignalError() instead")
    void createDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalError() instead")
    void createDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingInterfaceSignalError() instead")
    void deleteDeviceSwitchRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalError() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceSignalError() instead")
    void getDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfacesSignalError() instead")
    void getDeviceSwitchRoutingInterfacesSignalE(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfacesSignalError(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalError() instead")
    void getDeviceSwitchRoutingStaticRouteSignalE(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalError(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalError() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalE(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalError(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalError() instead")
    void getNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingOspfSignalError() instead")
    void getNetworkSwitchRoutingOspfSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingOspfSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalError() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalError() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalError() instead")
    void updateNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingOspfSignalError() instead")
    void updateNetworkSwitchRoutingOspfSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingOspfSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void createDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void createDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfacesSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingOspfSignalErrorFull() instead")
    void getNetworkSwitchRoutingOspfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingOspfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingOspfSignalErrorFull() instead")
    void updateNetworkSwitchRoutingOspfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingOspfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
