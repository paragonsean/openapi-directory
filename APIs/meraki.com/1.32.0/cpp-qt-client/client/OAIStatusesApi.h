/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatusesApi_H
#define OAI_OAIStatusesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner.h"
#include "OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner.h"
#include "OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesStatusesOverview_200_response.h"
#include "OAIGetOrganizationDevicesStatuses_200_response.h"
#include "OAIGetOrganizationUplinksStatuses_200_response_inner.h"
#include "OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationCameraOnboardingStatuses_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatusesApi : public QObject {
    Q_OBJECT

public:
    OAIStatusesApi(const int timeOut = 0);
    ~OAIStatusesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatusesPackets(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatuses(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceUplinkStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceVpnStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationCameraOnboardingStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationCellularGatewayUplinkStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesPowerModulesStatusesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationDevicesStatusesOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationUplinksStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationWirelessDevicesEthernetStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_camera_onboarding_statuses_request OAIUpdateOrganizationCameraOnboardingStatuses_request [optional]
    */
    virtual void updateOrganizationCameraOnboardingStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationCameraOnboardingStatuses_request> &oai_update_organization_camera_onboarding_statuses_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationCameraOnboardingStatuses_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceSwitchPortsStatusesPacketsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceUplinkStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraOnboardingStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCellularGatewayUplinkStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesPowerModulesStatusesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationUplinksStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWirelessDevicesEthernetStatusesCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCameraOnboardingStatusesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceSwitchPortsStatusesPacketsSignal(QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesSignal(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getOrganizationApplianceUplinkStatusesSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignal(QList<OAIObject> summary);
    void getOrganizationCameraOnboardingStatusesSignal(QList<OAIObject> summary);
    void getOrganizationCellularGatewayUplinkStatusesSignal(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignal(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesOverviewSignal(OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesStatusesSignal(OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationUplinksStatusesSignal(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignal(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void updateOrganizationCameraOnboardingStatusesSignal(OAIObject summary);


    void getDeviceSwitchPortsStatusesPacketsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getOrganizationApplianceUplinkStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationCameraOnboardingStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationCellularGatewayUplinkStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesStatusesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationUplinksStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void updateOrganizationCameraOnboardingStatusesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalError() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalError() instead")
    void getDeviceSwitchPortsStatusesSignalE(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalError(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceUplinkStatusesSignalError() instead")
    void getOrganizationApplianceUplinkStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceUplinkStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalError() instead")
    void getOrganizationApplianceVpnStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraOnboardingStatusesSignalError() instead")
    void getOrganizationCameraOnboardingStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraOnboardingStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCellularGatewayUplinkStatusesSignalError() instead")
    void getOrganizationCellularGatewayUplinkStatusesSignalE(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCellularGatewayUplinkStatusesSignalError(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalError() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalE(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalError(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalError() instead")
    void getOrganizationDevicesStatusesOverviewSignalE(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalError(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalError() instead")
    void getOrganizationDevicesStatusesSignalE(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalError(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksStatusesSignalError() instead")
    void getOrganizationUplinksStatusesSignalE(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksStatusesSignalError(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalError() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalE(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalError(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationCameraOnboardingStatusesSignalError() instead")
    void updateOrganizationCameraOnboardingStatusesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationCameraOnboardingStatusesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceUplinkStatusesSignalErrorFull() instead")
    void getOrganizationApplianceUplinkStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceUplinkStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraOnboardingStatusesSignalErrorFull() instead")
    void getOrganizationCameraOnboardingStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraOnboardingStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCellularGatewayUplinkStatusesSignalErrorFull() instead")
    void getOrganizationCellularGatewayUplinkStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCellularGatewayUplinkStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalErrorFull() instead")
    void getOrganizationDevicesStatusesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalErrorFull() instead")
    void getOrganizationDevicesStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksStatusesSignalErrorFull() instead")
    void getOrganizationUplinksStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationCameraOnboardingStatusesSignalErrorFull() instead")
    void updateOrganizationCameraOnboardingStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationCameraOnboardingStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
