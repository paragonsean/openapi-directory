/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::~OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request() {}

void OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::initializeModel() {

    m_ipv4_isSet = false;
    m_ipv4_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;
}

void OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::fromJsonObject(QJsonObject json) {

    m_ipv4_isValid = ::OpenAPI::fromJsonValue(m_ipv4, json[QString("ipv4")]);
    m_ipv4_isSet = !json[QString("ipv4")].isNull() && m_ipv4_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;
}

QString OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ipv4.isSet()) {
        obj.insert(QString("ipv4"), ::OpenAPI::toJsonValue(m_ipv4));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    return obj;
}

OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request_ipv4 OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::getIpv4() const {
    return m_ipv4;
}
void OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::setIpv4(const OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request_ipv4 &ipv4) {
    m_ipv4 = ipv4;
    m_ipv4_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::is_ipv4_Set() const{
    return m_ipv4_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::is_ipv4_Valid() const{
    return m_ipv4_isValid;
}

QString OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::getMac() const {
    return m_mac;
}
void OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::is_mac_Valid() const{
    return m_mac_isValid;
}

qint32 OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::getVlan() const {
    return m_vlan;
}
void OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::is_vlan_Valid() const{
    return m_vlan_isValid;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ipv4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
