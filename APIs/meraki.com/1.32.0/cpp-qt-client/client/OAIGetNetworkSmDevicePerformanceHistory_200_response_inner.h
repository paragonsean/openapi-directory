/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSmDevicePerformanceHistory_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_H
#define OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_H

#include <QJsonObject>

#include "OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage;

class OAIGetNetworkSmDevicePerformanceHistory_200_response_inner : public OAIObject {
public:
    OAIGetNetworkSmDevicePerformanceHistory_200_response_inner();
    OAIGetNetworkSmDevicePerformanceHistory_200_response_inner(QString json);
    ~OAIGetNetworkSmDevicePerformanceHistory_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getCpuPercentUsed() const;
    void setCpuPercentUsed(const float &cpu_percent_used);
    bool is_cpu_percent_used_Set() const;
    bool is_cpu_percent_used_Valid() const;

    OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage getDiskUsage() const;
    void setDiskUsage(const OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage &disk_usage);
    bool is_disk_usage_Set() const;
    bool is_disk_usage_Valid() const;

    qint32 getMemActive() const;
    void setMemActive(const qint32 &mem_active);
    bool is_mem_active_Set() const;
    bool is_mem_active_Valid() const;

    qint32 getMemFree() const;
    void setMemFree(const qint32 &mem_free);
    bool is_mem_free_Set() const;
    bool is_mem_free_Valid() const;

    qint32 getMemInactive() const;
    void setMemInactive(const qint32 &mem_inactive);
    bool is_mem_inactive_Set() const;
    bool is_mem_inactive_Valid() const;

    qint32 getMemWired() const;
    void setMemWired(const qint32 &mem_wired);
    bool is_mem_wired_Set() const;
    bool is_mem_wired_Valid() const;

    qint32 getNetworkReceived() const;
    void setNetworkReceived(const qint32 &network_received);
    bool is_network_received_Set() const;
    bool is_network_received_Valid() const;

    qint32 getNetworkSent() const;
    void setNetworkSent(const qint32 &network_sent);
    bool is_network_sent_Set() const;
    bool is_network_sent_Valid() const;

    qint32 getSwapUsed() const;
    void setSwapUsed(const qint32 &swap_used);
    bool is_swap_used_Set() const;
    bool is_swap_used_Valid() const;

    QString getTs() const;
    void setTs(const QString &ts);
    bool is_ts_Set() const;
    bool is_ts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_cpu_percent_used;
    bool m_cpu_percent_used_isSet;
    bool m_cpu_percent_used_isValid;

    OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage m_disk_usage;
    bool m_disk_usage_isSet;
    bool m_disk_usage_isValid;

    qint32 m_mem_active;
    bool m_mem_active_isSet;
    bool m_mem_active_isValid;

    qint32 m_mem_free;
    bool m_mem_free_isSet;
    bool m_mem_free_isValid;

    qint32 m_mem_inactive;
    bool m_mem_inactive_isSet;
    bool m_mem_inactive_isValid;

    qint32 m_mem_wired;
    bool m_mem_wired_isSet;
    bool m_mem_wired_isValid;

    qint32 m_network_received;
    bool m_network_received_isSet;
    bool m_network_received_isValid;

    qint32 m_network_sent;
    bool m_network_sent_isSet;
    bool m_network_sent_isValid;

    qint32 m_swap_used;
    bool m_swap_used_isSet;
    bool m_swap_used_isValid;

    QString m_ts;
    bool m_ts_isSet;
    bool m_ts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSmDevicePerformanceHistory_200_response_inner)

#endif // OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_H
