/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDeviceCameraQualityAndRetention_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDeviceCameraQualityAndRetention_request::OAIUpdateDeviceCameraQualityAndRetention_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDeviceCameraQualityAndRetention_request::OAIUpdateDeviceCameraQualityAndRetention_request() {
    this->initializeModel();
}

OAIUpdateDeviceCameraQualityAndRetention_request::~OAIUpdateDeviceCameraQualityAndRetention_request() {}

void OAIUpdateDeviceCameraQualityAndRetention_request::initializeModel() {

    m_audio_recording_enabled_isSet = false;
    m_audio_recording_enabled_isValid = false;

    m_motion_based_retention_enabled_isSet = false;
    m_motion_based_retention_enabled_isValid = false;

    m_motion_detector_version_isSet = false;
    m_motion_detector_version_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_restricted_bandwidth_mode_enabled_isSet = false;
    m_restricted_bandwidth_mode_enabled_isValid = false;
}

void OAIUpdateDeviceCameraQualityAndRetention_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDeviceCameraQualityAndRetention_request::fromJsonObject(QJsonObject json) {

    m_audio_recording_enabled_isValid = ::OpenAPI::fromJsonValue(m_audio_recording_enabled, json[QString("audioRecordingEnabled")]);
    m_audio_recording_enabled_isSet = !json[QString("audioRecordingEnabled")].isNull() && m_audio_recording_enabled_isValid;

    m_motion_based_retention_enabled_isValid = ::OpenAPI::fromJsonValue(m_motion_based_retention_enabled, json[QString("motionBasedRetentionEnabled")]);
    m_motion_based_retention_enabled_isSet = !json[QString("motionBasedRetentionEnabled")].isNull() && m_motion_based_retention_enabled_isValid;

    m_motion_detector_version_isValid = ::OpenAPI::fromJsonValue(m_motion_detector_version, json[QString("motionDetectorVersion")]);
    m_motion_detector_version_isSet = !json[QString("motionDetectorVersion")].isNull() && m_motion_detector_version_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_restricted_bandwidth_mode_enabled_isValid = ::OpenAPI::fromJsonValue(m_restricted_bandwidth_mode_enabled, json[QString("restrictedBandwidthModeEnabled")]);
    m_restricted_bandwidth_mode_enabled_isSet = !json[QString("restrictedBandwidthModeEnabled")].isNull() && m_restricted_bandwidth_mode_enabled_isValid;
}

QString OAIUpdateDeviceCameraQualityAndRetention_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDeviceCameraQualityAndRetention_request::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_recording_enabled_isSet) {
        obj.insert(QString("audioRecordingEnabled"), ::OpenAPI::toJsonValue(m_audio_recording_enabled));
    }
    if (m_motion_based_retention_enabled_isSet) {
        obj.insert(QString("motionBasedRetentionEnabled"), ::OpenAPI::toJsonValue(m_motion_based_retention_enabled));
    }
    if (m_motion_detector_version_isSet) {
        obj.insert(QString("motionDetectorVersion"), ::OpenAPI::toJsonValue(m_motion_detector_version));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_restricted_bandwidth_mode_enabled_isSet) {
        obj.insert(QString("restrictedBandwidthModeEnabled"), ::OpenAPI::toJsonValue(m_restricted_bandwidth_mode_enabled));
    }
    return obj;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::isAudioRecordingEnabled() const {
    return m_audio_recording_enabled;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setAudioRecordingEnabled(const bool &audio_recording_enabled) {
    m_audio_recording_enabled = audio_recording_enabled;
    m_audio_recording_enabled_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_audio_recording_enabled_Set() const{
    return m_audio_recording_enabled_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_audio_recording_enabled_Valid() const{
    return m_audio_recording_enabled_isValid;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::isMotionBasedRetentionEnabled() const {
    return m_motion_based_retention_enabled;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setMotionBasedRetentionEnabled(const bool &motion_based_retention_enabled) {
    m_motion_based_retention_enabled = motion_based_retention_enabled;
    m_motion_based_retention_enabled_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_motion_based_retention_enabled_Set() const{
    return m_motion_based_retention_enabled_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_motion_based_retention_enabled_Valid() const{
    return m_motion_based_retention_enabled_isValid;
}

qint32 OAIUpdateDeviceCameraQualityAndRetention_request::getMotionDetectorVersion() const {
    return m_motion_detector_version;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setMotionDetectorVersion(const qint32 &motion_detector_version) {
    m_motion_detector_version = motion_detector_version;
    m_motion_detector_version_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_motion_detector_version_Set() const{
    return m_motion_detector_version_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_motion_detector_version_Valid() const{
    return m_motion_detector_version_isValid;
}

QString OAIUpdateDeviceCameraQualityAndRetention_request::getProfileId() const {
    return m_profile_id;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAIUpdateDeviceCameraQualityAndRetention_request::getQuality() const {
    return m_quality;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setQuality(const QString &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_quality_Valid() const{
    return m_quality_isValid;
}

QString OAIUpdateDeviceCameraQualityAndRetention_request::getResolution() const {
    return m_resolution;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_resolution_Valid() const{
    return m_resolution_isValid;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::isRestrictedBandwidthModeEnabled() const {
    return m_restricted_bandwidth_mode_enabled;
}
void OAIUpdateDeviceCameraQualityAndRetention_request::setRestrictedBandwidthModeEnabled(const bool &restricted_bandwidth_mode_enabled) {
    m_restricted_bandwidth_mode_enabled = restricted_bandwidth_mode_enabled;
    m_restricted_bandwidth_mode_enabled_isSet = true;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_restricted_bandwidth_mode_enabled_Set() const{
    return m_restricted_bandwidth_mode_enabled_isSet;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::is_restricted_bandwidth_mode_enabled_Valid() const{
    return m_restricted_bandwidth_mode_enabled_isValid;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_recording_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_based_retention_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_detector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_bandwidth_mode_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDeviceCameraQualityAndRetention_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
