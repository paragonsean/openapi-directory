/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsid_request_radiusServers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::OAIUpdateNetworkWirelessSsid_request_radiusServers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::OAIUpdateNetworkWirelessSsid_request_radiusServers_inner() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::~OAIUpdateNetworkWirelessSsid_request_radiusServers_inner() {}

void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::initializeModel() {

    m_ca_certificate_isSet = false;
    m_ca_certificate_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_open_roaming_certificate_id_isSet = false;
    m_open_roaming_certificate_id_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_radsec_enabled_isSet = false;
    m_radsec_enabled_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::fromJsonObject(QJsonObject json) {

    m_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate, json[QString("caCertificate")]);
    m_ca_certificate_isSet = !json[QString("caCertificate")].isNull() && m_ca_certificate_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_open_roaming_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_open_roaming_certificate_id, json[QString("openRoamingCertificateId")]);
    m_open_roaming_certificate_id_isSet = !json[QString("openRoamingCertificateId")].isNull() && m_open_roaming_certificate_id_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_radsec_enabled_isValid = ::OpenAPI::fromJsonValue(m_radsec_enabled, json[QString("radsecEnabled")]);
    m_radsec_enabled_isSet = !json[QString("radsecEnabled")].isNull() && m_radsec_enabled_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_isSet) {
        obj.insert(QString("caCertificate"), ::OpenAPI::toJsonValue(m_ca_certificate));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_open_roaming_certificate_id_isSet) {
        obj.insert(QString("openRoamingCertificateId"), ::OpenAPI::toJsonValue(m_open_roaming_certificate_id));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_radsec_enabled_isSet) {
        obj.insert(QString("radsecEnabled"), ::OpenAPI::toJsonValue(m_radsec_enabled));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::getCaCertificate() const {
    return m_ca_certificate;
}
void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::setCaCertificate(const QString &ca_certificate) {
    m_ca_certificate = ca_certificate;
    m_ca_certificate_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_ca_certificate_Set() const{
    return m_ca_certificate_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_ca_certificate_Valid() const{
    return m_ca_certificate_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::getHost() const {
    return m_host;
}
void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_host_Set() const{
    return m_host_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::getOpenRoamingCertificateId() const {
    return m_open_roaming_certificate_id;
}
void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::setOpenRoamingCertificateId(const qint32 &open_roaming_certificate_id) {
    m_open_roaming_certificate_id = open_roaming_certificate_id;
    m_open_roaming_certificate_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_open_roaming_certificate_id_Set() const{
    return m_open_roaming_certificate_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_open_roaming_certificate_id_Valid() const{
    return m_open_roaming_certificate_id_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::getPort() const {
    return m_port;
}
void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_port_Set() const{
    return m_port_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::isRadsecEnabled() const {
    return m_radsec_enabled;
}
void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::setRadsecEnabled(const bool &radsec_enabled) {
    m_radsec_enabled = radsec_enabled;
    m_radsec_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_radsec_enabled_Set() const{
    return m_radsec_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_radsec_enabled_Valid() const{
    return m_radsec_enabled_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::getSecret() const {
    return m_secret;
}
void OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_roaming_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radsec_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsid_request_radiusServers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && true;
}

} // namespace OpenAPI
