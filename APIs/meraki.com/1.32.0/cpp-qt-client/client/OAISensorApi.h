/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISensorApi_H
#define OAI_OAISensorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkSensorAlertsProfile_request.h"
#include "OAIGetDeviceSensorRelationships_200_response_inner.h"
#include "OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response.h"
#include "OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner.h"
#include "OAIGetNetworkSensorAlertsProfiles_200_response_inner.h"
#include "OAIGetNetworkSensorRelationships_200_response_inner.h"
#include "OAIGetOrganizationSensorReadingsHistory_200_response_inner.h"
#include "OAIGetOrganizationSensorReadingsLatest_200_response_inner.h"
#include "OAIUpdateDeviceSensorRelationships_request.h"
#include "OAIUpdateNetworkSensorAlertsProfile_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISensorApi : public QObject {
    Q_OBJECT

public:
    OAISensorApi(const int timeOut = 0);
    ~OAISensorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sensor_alerts_profile_request OAICreateNetworkSensorAlertsProfile_request [required]
    */
    virtual void createNetworkSensorAlertsProfile(const QString &network_id, const OAICreateNetworkSensorAlertsProfile_request &oai_create_network_sensor_alerts_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteNetworkSensorAlertsProfile(const QString &network_id, const QString &id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSensorRelationships(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorAlertsCurrentOverviewByMetric(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  interval qint32 [optional]
    */
    virtual void getNetworkSensorAlertsOverviewByMetric(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getNetworkSensorAlertsProfile(const QString &network_id, const QString &id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorAlertsProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorRelationships(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void getOrganizationSensorReadingsHistory(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void getOrganizationSensorReadingsLatest(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_sensor_relationships_request OAIUpdateDeviceSensorRelationships_request [optional]
    */
    virtual void updateDeviceSensorRelationships(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSensorRelationships_request> &oai_update_device_sensor_relationships_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSensorRelationships_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_network_sensor_alerts_profile_request OAIUpdateNetworkSensorAlertsProfile_request [optional]
    */
    virtual void updateNetworkSensorAlertsProfile(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSensorAlertsProfile_request> &oai_update_network_sensor_alerts_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSensorAlertsProfile_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void getDeviceSensorRelationshipsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsCurrentOverviewByMetricCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsOverviewByMetricCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorRelationshipsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSensorReadingsHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSensorReadingsLatestCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSensorRelationshipsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void deleteNetworkSensorAlertsProfileSignal();
    void getDeviceSensorRelationshipsSignal(QList<OAIGetDeviceSensorRelationships_200_response_inner> summary);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignal(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary);
    void getNetworkSensorAlertsOverviewByMetricSignal(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary);
    void getNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void getNetworkSensorAlertsProfilesSignal(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary);
    void getNetworkSensorRelationshipsSignal(QList<OAIGetNetworkSensorRelationships_200_response_inner> summary);
    void getOrganizationSensorReadingsHistorySignal(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary);
    void getOrganizationSensorReadingsLatestSignal(QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary);
    void updateDeviceSensorRelationshipsSignal(OAIGetDeviceSensorRelationships_200_response_inner summary);
    void updateNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);


    void createNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void deleteNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceSensorRelationshipsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSensorRelationships_200_response_inner> summary);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary);
    void getNetworkSensorAlertsOverviewByMetricSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary);
    void getNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void getNetworkSensorAlertsProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary);
    void getNetworkSensorRelationshipsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorRelationships_200_response_inner> summary);
    void getOrganizationSensorReadingsHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary);
    void getOrganizationSensorReadingsLatestSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary);
    void updateDeviceSensorRelationshipsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSensorRelationships_200_response_inner summary);
    void updateNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use createNetworkSensorAlertsProfileSignalError() instead")
    void createNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSensorAlertsProfileSignalError() instead")
    void deleteNetworkSensorAlertsProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSensorAlertsProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSensorRelationshipsSignalError() instead")
    void getDeviceSensorRelationshipsSignalE(QList<OAIGetDeviceSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSensorRelationshipsSignalError(QList<OAIGetDeviceSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsCurrentOverviewByMetricSignalError() instead")
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalE(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalError(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsOverviewByMetricSignalError() instead")
    void getNetworkSensorAlertsOverviewByMetricSignalE(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsOverviewByMetricSignalError(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfileSignalError() instead")
    void getNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfilesSignalError() instead")
    void getNetworkSensorAlertsProfilesSignalE(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfilesSignalError(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorRelationshipsSignalError() instead")
    void getNetworkSensorRelationshipsSignalE(QList<OAIGetNetworkSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorRelationshipsSignalError(QList<OAIGetNetworkSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsHistorySignalError() instead")
    void getOrganizationSensorReadingsHistorySignalE(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsHistorySignalError(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsLatestSignalError() instead")
    void getOrganizationSensorReadingsLatestSignalE(QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsLatestSignalError(QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSensorRelationshipsSignalError() instead")
    void updateDeviceSensorRelationshipsSignalE(OAIGetDeviceSensorRelationships_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSensorRelationshipsSignalError(OAIGetDeviceSensorRelationships_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSensorAlertsProfileSignalError() instead")
    void updateNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkSensorAlertsProfileSignalErrorFull() instead")
    void createNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSensorAlertsProfileSignalErrorFull() instead")
    void deleteNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSensorRelationshipsSignalErrorFull() instead")
    void getDeviceSensorRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSensorRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsCurrentOverviewByMetricSignalErrorFull() instead")
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsOverviewByMetricSignalErrorFull() instead")
    void getNetworkSensorAlertsOverviewByMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsOverviewByMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfileSignalErrorFull() instead")
    void getNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfilesSignalErrorFull() instead")
    void getNetworkSensorAlertsProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorRelationshipsSignalErrorFull() instead")
    void getNetworkSensorRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsHistorySignalErrorFull() instead")
    void getOrganizationSensorReadingsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsLatestSignalErrorFull() instead")
    void getOrganizationSensorReadingsLatestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsLatestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSensorRelationshipsSignalErrorFull() instead")
    void updateDeviceSensorRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSensorRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSensorAlertsProfileSignalErrorFull() instead")
    void updateNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
