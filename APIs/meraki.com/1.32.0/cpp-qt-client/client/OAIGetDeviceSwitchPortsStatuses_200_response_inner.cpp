/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceSwitchPortsStatuses_200_response_inner::OAIGetDeviceSwitchPortsStatuses_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner::OAIGetDeviceSwitchPortsStatuses_200_response_inner() {
    this->initializeModel();
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner::~OAIGetDeviceSwitchPortsStatuses_200_response_inner() {}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner::initializeModel() {

    m_cdp_isSet = false;
    m_cdp_isValid = false;

    m_client_count_isSet = false;
    m_client_count_isValid = false;

    m_duplex_isSet = false;
    m_duplex_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_is_uplink_isSet = false;
    m_is_uplink_isValid = false;

    m_lldp_isSet = false;
    m_lldp_isValid = false;

    m_port_id_isSet = false;
    m_port_id_isValid = false;

    m_power_usage_in_wh_isSet = false;
    m_power_usage_in_wh_isValid = false;

    m_secure_port_isSet = false;
    m_secure_port_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_traffic_in_kbps_isSet = false;
    m_traffic_in_kbps_isValid = false;

    m_usage_in_kb_isSet = false;
    m_usage_in_kb_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner::fromJsonObject(QJsonObject json) {

    m_cdp_isValid = ::OpenAPI::fromJsonValue(m_cdp, json[QString("cdp")]);
    m_cdp_isSet = !json[QString("cdp")].isNull() && m_cdp_isValid;

    m_client_count_isValid = ::OpenAPI::fromJsonValue(m_client_count, json[QString("clientCount")]);
    m_client_count_isSet = !json[QString("clientCount")].isNull() && m_client_count_isValid;

    m_duplex_isValid = ::OpenAPI::fromJsonValue(m_duplex, json[QString("duplex")]);
    m_duplex_isSet = !json[QString("duplex")].isNull() && m_duplex_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_is_uplink_isValid = ::OpenAPI::fromJsonValue(m_is_uplink, json[QString("isUplink")]);
    m_is_uplink_isSet = !json[QString("isUplink")].isNull() && m_is_uplink_isValid;

    m_lldp_isValid = ::OpenAPI::fromJsonValue(m_lldp, json[QString("lldp")]);
    m_lldp_isSet = !json[QString("lldp")].isNull() && m_lldp_isValid;

    m_port_id_isValid = ::OpenAPI::fromJsonValue(m_port_id, json[QString("portId")]);
    m_port_id_isSet = !json[QString("portId")].isNull() && m_port_id_isValid;

    m_power_usage_in_wh_isValid = ::OpenAPI::fromJsonValue(m_power_usage_in_wh, json[QString("powerUsageInWh")]);
    m_power_usage_in_wh_isSet = !json[QString("powerUsageInWh")].isNull() && m_power_usage_in_wh_isValid;

    m_secure_port_isValid = ::OpenAPI::fromJsonValue(m_secure_port, json[QString("securePort")]);
    m_secure_port_isSet = !json[QString("securePort")].isNull() && m_secure_port_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_traffic_in_kbps_isValid = ::OpenAPI::fromJsonValue(m_traffic_in_kbps, json[QString("trafficInKbps")]);
    m_traffic_in_kbps_isSet = !json[QString("trafficInKbps")].isNull() && m_traffic_in_kbps_isValid;

    m_usage_in_kb_isValid = ::OpenAPI::fromJsonValue(m_usage_in_kb, json[QString("usageInKb")]);
    m_usage_in_kb_isSet = !json[QString("usageInKb")].isNull() && m_usage_in_kb_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceSwitchPortsStatuses_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cdp.isSet()) {
        obj.insert(QString("cdp"), ::OpenAPI::toJsonValue(m_cdp));
    }
    if (m_client_count_isSet) {
        obj.insert(QString("clientCount"), ::OpenAPI::toJsonValue(m_client_count));
    }
    if (m_duplex_isSet) {
        obj.insert(QString("duplex"), ::OpenAPI::toJsonValue(m_duplex));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_is_uplink_isSet) {
        obj.insert(QString("isUplink"), ::OpenAPI::toJsonValue(m_is_uplink));
    }
    if (m_lldp.isSet()) {
        obj.insert(QString("lldp"), ::OpenAPI::toJsonValue(m_lldp));
    }
    if (m_port_id_isSet) {
        obj.insert(QString("portId"), ::OpenAPI::toJsonValue(m_port_id));
    }
    if (m_power_usage_in_wh_isSet) {
        obj.insert(QString("powerUsageInWh"), ::OpenAPI::toJsonValue(m_power_usage_in_wh));
    }
    if (m_secure_port.isSet()) {
        obj.insert(QString("securePort"), ::OpenAPI::toJsonValue(m_secure_port));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_traffic_in_kbps.isSet()) {
        obj.insert(QString("trafficInKbps"), ::OpenAPI::toJsonValue(m_traffic_in_kbps));
    }
    if (m_usage_in_kb.isSet()) {
        obj.insert(QString("usageInKb"), ::OpenAPI::toJsonValue(m_usage_in_kb));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp OAIGetDeviceSwitchPortsStatuses_200_response_inner::getCdp() const {
    return m_cdp;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setCdp(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp &cdp) {
    m_cdp = cdp;
    m_cdp_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_cdp_Set() const{
    return m_cdp_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_cdp_Valid() const{
    return m_cdp_isValid;
}

qint32 OAIGetDeviceSwitchPortsStatuses_200_response_inner::getClientCount() const {
    return m_client_count;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setClientCount(const qint32 &client_count) {
    m_client_count = client_count;
    m_client_count_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_client_count_Set() const{
    return m_client_count_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_client_count_Valid() const{
    return m_client_count_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner::getDuplex() const {
    return m_duplex;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setDuplex(const QString &duplex) {
    m_duplex = duplex;
    m_duplex_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_duplex_Set() const{
    return m_duplex_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_duplex_Valid() const{
    return m_duplex_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::isEnabled() const {
    return m_enabled;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIGetDeviceSwitchPortsStatuses_200_response_inner::getErrors() const {
    return m_errors;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::isIsUplink() const {
    return m_is_uplink;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setIsUplink(const bool &is_uplink) {
    m_is_uplink = is_uplink;
    m_is_uplink_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_is_uplink_Set() const{
    return m_is_uplink_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_is_uplink_Valid() const{
    return m_is_uplink_isValid;
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp OAIGetDeviceSwitchPortsStatuses_200_response_inner::getLldp() const {
    return m_lldp;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setLldp(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp &lldp) {
    m_lldp = lldp;
    m_lldp_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_lldp_Set() const{
    return m_lldp_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_lldp_Valid() const{
    return m_lldp_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner::getPortId() const {
    return m_port_id;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setPortId(const QString &port_id) {
    m_port_id = port_id;
    m_port_id_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_port_id_Set() const{
    return m_port_id_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_port_id_Valid() const{
    return m_port_id_isValid;
}

float OAIGetDeviceSwitchPortsStatuses_200_response_inner::getPowerUsageInWh() const {
    return m_power_usage_in_wh;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setPowerUsageInWh(const float &power_usage_in_wh) {
    m_power_usage_in_wh = power_usage_in_wh;
    m_power_usage_in_wh_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_power_usage_in_wh_Set() const{
    return m_power_usage_in_wh_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_power_usage_in_wh_Valid() const{
    return m_power_usage_in_wh_isValid;
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort OAIGetDeviceSwitchPortsStatuses_200_response_inner::getSecurePort() const {
    return m_secure_port;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setSecurePort(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort &secure_port) {
    m_secure_port = secure_port;
    m_secure_port_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_secure_port_Set() const{
    return m_secure_port_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_secure_port_Valid() const{
    return m_secure_port_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner::getSpeed() const {
    return m_speed;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setSpeed(const QString &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_speed_Valid() const{
    return m_speed_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner::getStatus() const {
    return m_status;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps OAIGetDeviceSwitchPortsStatuses_200_response_inner::getTrafficInKbps() const {
    return m_traffic_in_kbps;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setTrafficInKbps(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_trafficInKbps &traffic_in_kbps) {
    m_traffic_in_kbps = traffic_in_kbps;
    m_traffic_in_kbps_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_traffic_in_kbps_Set() const{
    return m_traffic_in_kbps_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_traffic_in_kbps_Valid() const{
    return m_traffic_in_kbps_isValid;
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb OAIGetDeviceSwitchPortsStatuses_200_response_inner::getUsageInKb() const {
    return m_usage_in_kb;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setUsageInKb(const OAIGetDeviceSwitchPortsStatuses_200_response_inner_usageInKb &usage_in_kb) {
    m_usage_in_kb = usage_in_kb;
    m_usage_in_kb_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_usage_in_kb_Set() const{
    return m_usage_in_kb_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_usage_in_kb_Valid() const{
    return m_usage_in_kb_isValid;
}

QList<QString> OAIGetDeviceSwitchPortsStatuses_200_response_inner::getWarnings() const {
    return m_warnings;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cdp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_uplink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lldp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_usage_in_wh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_port.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_in_kbps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_in_kb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
