/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOrganizationSnmp_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOrganizationSnmp_request::OAIUpdateOrganizationSnmp_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOrganizationSnmp_request::OAIUpdateOrganizationSnmp_request() {
    this->initializeModel();
}

OAIUpdateOrganizationSnmp_request::~OAIUpdateOrganizationSnmp_request() {}

void OAIUpdateOrganizationSnmp_request::initializeModel() {

    m_peer_ips_isSet = false;
    m_peer_ips_isValid = false;

    m_v2c_enabled_isSet = false;
    m_v2c_enabled_isValid = false;

    m_v3_auth_mode_isSet = false;
    m_v3_auth_mode_isValid = false;

    m_v3_auth_pass_isSet = false;
    m_v3_auth_pass_isValid = false;

    m_v3_enabled_isSet = false;
    m_v3_enabled_isValid = false;

    m_v3_priv_mode_isSet = false;
    m_v3_priv_mode_isValid = false;

    m_v3_priv_pass_isSet = false;
    m_v3_priv_pass_isValid = false;
}

void OAIUpdateOrganizationSnmp_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOrganizationSnmp_request::fromJsonObject(QJsonObject json) {

    m_peer_ips_isValid = ::OpenAPI::fromJsonValue(m_peer_ips, json[QString("peerIps")]);
    m_peer_ips_isSet = !json[QString("peerIps")].isNull() && m_peer_ips_isValid;

    m_v2c_enabled_isValid = ::OpenAPI::fromJsonValue(m_v2c_enabled, json[QString("v2cEnabled")]);
    m_v2c_enabled_isSet = !json[QString("v2cEnabled")].isNull() && m_v2c_enabled_isValid;

    m_v3_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_v3_auth_mode, json[QString("v3AuthMode")]);
    m_v3_auth_mode_isSet = !json[QString("v3AuthMode")].isNull() && m_v3_auth_mode_isValid;

    m_v3_auth_pass_isValid = ::OpenAPI::fromJsonValue(m_v3_auth_pass, json[QString("v3AuthPass")]);
    m_v3_auth_pass_isSet = !json[QString("v3AuthPass")].isNull() && m_v3_auth_pass_isValid;

    m_v3_enabled_isValid = ::OpenAPI::fromJsonValue(m_v3_enabled, json[QString("v3Enabled")]);
    m_v3_enabled_isSet = !json[QString("v3Enabled")].isNull() && m_v3_enabled_isValid;

    m_v3_priv_mode_isValid = ::OpenAPI::fromJsonValue(m_v3_priv_mode, json[QString("v3PrivMode")]);
    m_v3_priv_mode_isSet = !json[QString("v3PrivMode")].isNull() && m_v3_priv_mode_isValid;

    m_v3_priv_pass_isValid = ::OpenAPI::fromJsonValue(m_v3_priv_pass, json[QString("v3PrivPass")]);
    m_v3_priv_pass_isSet = !json[QString("v3PrivPass")].isNull() && m_v3_priv_pass_isValid;
}

QString OAIUpdateOrganizationSnmp_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOrganizationSnmp_request::asJsonObject() const {
    QJsonObject obj;
    if (m_peer_ips.size() > 0) {
        obj.insert(QString("peerIps"), ::OpenAPI::toJsonValue(m_peer_ips));
    }
    if (m_v2c_enabled_isSet) {
        obj.insert(QString("v2cEnabled"), ::OpenAPI::toJsonValue(m_v2c_enabled));
    }
    if (m_v3_auth_mode_isSet) {
        obj.insert(QString("v3AuthMode"), ::OpenAPI::toJsonValue(m_v3_auth_mode));
    }
    if (m_v3_auth_pass_isSet) {
        obj.insert(QString("v3AuthPass"), ::OpenAPI::toJsonValue(m_v3_auth_pass));
    }
    if (m_v3_enabled_isSet) {
        obj.insert(QString("v3Enabled"), ::OpenAPI::toJsonValue(m_v3_enabled));
    }
    if (m_v3_priv_mode_isSet) {
        obj.insert(QString("v3PrivMode"), ::OpenAPI::toJsonValue(m_v3_priv_mode));
    }
    if (m_v3_priv_pass_isSet) {
        obj.insert(QString("v3PrivPass"), ::OpenAPI::toJsonValue(m_v3_priv_pass));
    }
    return obj;
}

QList<QString> OAIUpdateOrganizationSnmp_request::getPeerIps() const {
    return m_peer_ips;
}
void OAIUpdateOrganizationSnmp_request::setPeerIps(const QList<QString> &peer_ips) {
    m_peer_ips = peer_ips;
    m_peer_ips_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_peer_ips_Set() const{
    return m_peer_ips_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_peer_ips_Valid() const{
    return m_peer_ips_isValid;
}

bool OAIUpdateOrganizationSnmp_request::isV2cEnabled() const {
    return m_v2c_enabled;
}
void OAIUpdateOrganizationSnmp_request::setV2cEnabled(const bool &v2c_enabled) {
    m_v2c_enabled = v2c_enabled;
    m_v2c_enabled_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_v2c_enabled_Set() const{
    return m_v2c_enabled_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_v2c_enabled_Valid() const{
    return m_v2c_enabled_isValid;
}

QString OAIUpdateOrganizationSnmp_request::getV3AuthMode() const {
    return m_v3_auth_mode;
}
void OAIUpdateOrganizationSnmp_request::setV3AuthMode(const QString &v3_auth_mode) {
    m_v3_auth_mode = v3_auth_mode;
    m_v3_auth_mode_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_auth_mode_Set() const{
    return m_v3_auth_mode_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_auth_mode_Valid() const{
    return m_v3_auth_mode_isValid;
}

QString OAIUpdateOrganizationSnmp_request::getV3AuthPass() const {
    return m_v3_auth_pass;
}
void OAIUpdateOrganizationSnmp_request::setV3AuthPass(const QString &v3_auth_pass) {
    m_v3_auth_pass = v3_auth_pass;
    m_v3_auth_pass_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_auth_pass_Set() const{
    return m_v3_auth_pass_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_auth_pass_Valid() const{
    return m_v3_auth_pass_isValid;
}

bool OAIUpdateOrganizationSnmp_request::isV3Enabled() const {
    return m_v3_enabled;
}
void OAIUpdateOrganizationSnmp_request::setV3Enabled(const bool &v3_enabled) {
    m_v3_enabled = v3_enabled;
    m_v3_enabled_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_enabled_Set() const{
    return m_v3_enabled_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_enabled_Valid() const{
    return m_v3_enabled_isValid;
}

QString OAIUpdateOrganizationSnmp_request::getV3PrivMode() const {
    return m_v3_priv_mode;
}
void OAIUpdateOrganizationSnmp_request::setV3PrivMode(const QString &v3_priv_mode) {
    m_v3_priv_mode = v3_priv_mode;
    m_v3_priv_mode_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_priv_mode_Set() const{
    return m_v3_priv_mode_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_priv_mode_Valid() const{
    return m_v3_priv_mode_isValid;
}

QString OAIUpdateOrganizationSnmp_request::getV3PrivPass() const {
    return m_v3_priv_pass;
}
void OAIUpdateOrganizationSnmp_request::setV3PrivPass(const QString &v3_priv_pass) {
    m_v3_priv_pass = v3_priv_pass;
    m_v3_priv_pass_isSet = true;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_priv_pass_Set() const{
    return m_v3_priv_pass_isSet;
}

bool OAIUpdateOrganizationSnmp_request::is_v3_priv_pass_Valid() const{
    return m_v3_priv_pass_isValid;
}

bool OAIUpdateOrganizationSnmp_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peer_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2c_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_auth_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_auth_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_priv_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_priv_pass_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOrganizationSnmp_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
