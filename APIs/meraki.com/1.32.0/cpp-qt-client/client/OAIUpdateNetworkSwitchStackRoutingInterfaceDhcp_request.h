/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request_H
#define OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request_H

#include <QJsonObject>

#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner.h"
#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner.h"
#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner;
class OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner;
class OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner;

class OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request : public OAIObject {
public:
    OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request();
    OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request(QString json);
    ~OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBootFileName() const;
    void setBootFileName(const QString &boot_file_name);
    bool is_boot_file_name_Set() const;
    bool is_boot_file_name_Valid() const;

    QString getBootNextServer() const;
    void setBootNextServer(const QString &boot_next_server);
    bool is_boot_next_server_Set() const;
    bool is_boot_next_server_Valid() const;

    bool isBootOptionsEnabled() const;
    void setBootOptionsEnabled(const bool &boot_options_enabled);
    bool is_boot_options_enabled_Set() const;
    bool is_boot_options_enabled_Valid() const;

    QString getDhcpLeaseTime() const;
    void setDhcpLeaseTime(const QString &dhcp_lease_time);
    bool is_dhcp_lease_time_Set() const;
    bool is_dhcp_lease_time_Valid() const;

    QString getDhcpMode() const;
    void setDhcpMode(const QString &dhcp_mode);
    bool is_dhcp_mode_Set() const;
    bool is_dhcp_mode_Valid() const;

    QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner> getDhcpOptions() const;
    void setDhcpOptions(const QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner> &dhcp_options);
    bool is_dhcp_options_Set() const;
    bool is_dhcp_options_Valid() const;

    QList<QString> getDhcpRelayServerIps() const;
    void setDhcpRelayServerIps(const QList<QString> &dhcp_relay_server_ips);
    bool is_dhcp_relay_server_ips_Set() const;
    bool is_dhcp_relay_server_ips_Valid() const;

    QList<QString> getDnsCustomNameservers() const;
    void setDnsCustomNameservers(const QList<QString> &dns_custom_nameservers);
    bool is_dns_custom_nameservers_Set() const;
    bool is_dns_custom_nameservers_Valid() const;

    QString getDnsNameserversOption() const;
    void setDnsNameserversOption(const QString &dns_nameservers_option);
    bool is_dns_nameservers_option_Set() const;
    bool is_dns_nameservers_option_Valid() const;

    QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner> getFixedIpAssignments() const;
    void setFixedIpAssignments(const QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner> &fixed_ip_assignments);
    bool is_fixed_ip_assignments_Set() const;
    bool is_fixed_ip_assignments_Valid() const;

    QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner> getReservedIpRanges() const;
    void setReservedIpRanges(const QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner> &reserved_ip_ranges);
    bool is_reserved_ip_ranges_Set() const;
    bool is_reserved_ip_ranges_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_boot_file_name;
    bool m_boot_file_name_isSet;
    bool m_boot_file_name_isValid;

    QString m_boot_next_server;
    bool m_boot_next_server_isSet;
    bool m_boot_next_server_isValid;

    bool m_boot_options_enabled;
    bool m_boot_options_enabled_isSet;
    bool m_boot_options_enabled_isValid;

    QString m_dhcp_lease_time;
    bool m_dhcp_lease_time_isSet;
    bool m_dhcp_lease_time_isValid;

    QString m_dhcp_mode;
    bool m_dhcp_mode_isSet;
    bool m_dhcp_mode_isValid;

    QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner> m_dhcp_options;
    bool m_dhcp_options_isSet;
    bool m_dhcp_options_isValid;

    QList<QString> m_dhcp_relay_server_ips;
    bool m_dhcp_relay_server_ips_isSet;
    bool m_dhcp_relay_server_ips_isValid;

    QList<QString> m_dns_custom_nameservers;
    bool m_dns_custom_nameservers_isSet;
    bool m_dns_custom_nameservers_isValid;

    QString m_dns_nameservers_option;
    bool m_dns_nameservers_option_isSet;
    bool m_dns_nameservers_option_isValid;

    QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner> m_fixed_ip_assignments;
    bool m_fixed_ip_assignments_isSet;
    bool m_fixed_ip_assignments_isValid;

    QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner> m_reserved_ip_ranges;
    bool m_reserved_ip_ranges_isSet;
    bool m_reserved_ip_ranges_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request)

#endif // OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request_H
