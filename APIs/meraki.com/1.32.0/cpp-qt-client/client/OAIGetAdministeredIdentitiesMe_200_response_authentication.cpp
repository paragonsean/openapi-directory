/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAdministeredIdentitiesMe_200_response_authentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAdministeredIdentitiesMe_200_response_authentication::OAIGetAdministeredIdentitiesMe_200_response_authentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAdministeredIdentitiesMe_200_response_authentication::OAIGetAdministeredIdentitiesMe_200_response_authentication() {
    this->initializeModel();
}

OAIGetAdministeredIdentitiesMe_200_response_authentication::~OAIGetAdministeredIdentitiesMe_200_response_authentication() {}

void OAIGetAdministeredIdentitiesMe_200_response_authentication::initializeModel() {

    m_api_isSet = false;
    m_api_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_saml_isSet = false;
    m_saml_isValid = false;

    m_two_factor_isSet = false;
    m_two_factor_isValid = false;
}

void OAIGetAdministeredIdentitiesMe_200_response_authentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAdministeredIdentitiesMe_200_response_authentication::fromJsonObject(QJsonObject json) {

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_saml_isValid = ::OpenAPI::fromJsonValue(m_saml, json[QString("saml")]);
    m_saml_isSet = !json[QString("saml")].isNull() && m_saml_isValid;

    m_two_factor_isValid = ::OpenAPI::fromJsonValue(m_two_factor, json[QString("twoFactor")]);
    m_two_factor_isSet = !json[QString("twoFactor")].isNull() && m_two_factor_isValid;
}

QString OAIGetAdministeredIdentitiesMe_200_response_authentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAdministeredIdentitiesMe_200_response_authentication::asJsonObject() const {
    QJsonObject obj;
    if (m_api.isSet()) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_saml.isSet()) {
        obj.insert(QString("saml"), ::OpenAPI::toJsonValue(m_saml));
    }
    if (m_two_factor.isSet()) {
        obj.insert(QString("twoFactor"), ::OpenAPI::toJsonValue(m_two_factor));
    }
    return obj;
}

OAIGetAdministeredIdentitiesMe_200_response_authentication_api OAIGetAdministeredIdentitiesMe_200_response_authentication::getApi() const {
    return m_api;
}
void OAIGetAdministeredIdentitiesMe_200_response_authentication::setApi(const OAIGetAdministeredIdentitiesMe_200_response_authentication_api &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_api_Set() const{
    return m_api_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_api_Valid() const{
    return m_api_isValid;
}

QString OAIGetAdministeredIdentitiesMe_200_response_authentication::getMode() const {
    return m_mode;
}
void OAIGetAdministeredIdentitiesMe_200_response_authentication::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIGetAdministeredIdentitiesMe_200_response_authentication_saml OAIGetAdministeredIdentitiesMe_200_response_authentication::getSaml() const {
    return m_saml;
}
void OAIGetAdministeredIdentitiesMe_200_response_authentication::setSaml(const OAIGetAdministeredIdentitiesMe_200_response_authentication_saml &saml) {
    m_saml = saml;
    m_saml_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_saml_Set() const{
    return m_saml_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_saml_Valid() const{
    return m_saml_isValid;
}

OAIGetAdministeredIdentitiesMe_200_response_authentication_twoFactor OAIGetAdministeredIdentitiesMe_200_response_authentication::getTwoFactor() const {
    return m_two_factor;
}
void OAIGetAdministeredIdentitiesMe_200_response_authentication::setTwoFactor(const OAIGetAdministeredIdentitiesMe_200_response_authentication_twoFactor &two_factor) {
    m_two_factor = two_factor;
    m_two_factor_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_two_factor_Set() const{
    return m_two_factor_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::is_two_factor_Valid() const{
    return m_two_factor_isValid;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAdministeredIdentitiesMe_200_response_authentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
