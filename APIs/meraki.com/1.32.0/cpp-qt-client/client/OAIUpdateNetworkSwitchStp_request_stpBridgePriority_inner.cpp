/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::~OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner() {}

void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::initializeModel() {

    m_stacks_isSet = false;
    m_stacks_isValid = false;

    m_stp_priority_isSet = false;
    m_stp_priority_isValid = false;

    m_switch_profiles_isSet = false;
    m_switch_profiles_isValid = false;

    m_switches_isSet = false;
    m_switches_isValid = false;
}

void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::fromJsonObject(QJsonObject json) {

    m_stacks_isValid = ::OpenAPI::fromJsonValue(m_stacks, json[QString("stacks")]);
    m_stacks_isSet = !json[QString("stacks")].isNull() && m_stacks_isValid;

    m_stp_priority_isValid = ::OpenAPI::fromJsonValue(m_stp_priority, json[QString("stpPriority")]);
    m_stp_priority_isSet = !json[QString("stpPriority")].isNull() && m_stp_priority_isValid;

    m_switch_profiles_isValid = ::OpenAPI::fromJsonValue(m_switch_profiles, json[QString("switchProfiles")]);
    m_switch_profiles_isSet = !json[QString("switchProfiles")].isNull() && m_switch_profiles_isValid;

    m_switches_isValid = ::OpenAPI::fromJsonValue(m_switches, json[QString("switches")]);
    m_switches_isSet = !json[QString("switches")].isNull() && m_switches_isValid;
}

QString OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_stacks.size() > 0) {
        obj.insert(QString("stacks"), ::OpenAPI::toJsonValue(m_stacks));
    }
    if (m_stp_priority_isSet) {
        obj.insert(QString("stpPriority"), ::OpenAPI::toJsonValue(m_stp_priority));
    }
    if (m_switch_profiles.size() > 0) {
        obj.insert(QString("switchProfiles"), ::OpenAPI::toJsonValue(m_switch_profiles));
    }
    if (m_switches.size() > 0) {
        obj.insert(QString("switches"), ::OpenAPI::toJsonValue(m_switches));
    }
    return obj;
}

QList<QString> OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::getStacks() const {
    return m_stacks;
}
void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::setStacks(const QList<QString> &stacks) {
    m_stacks = stacks;
    m_stacks_isSet = true;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_stacks_Set() const{
    return m_stacks_isSet;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_stacks_Valid() const{
    return m_stacks_isValid;
}

qint32 OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::getStpPriority() const {
    return m_stp_priority;
}
void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::setStpPriority(const qint32 &stp_priority) {
    m_stp_priority = stp_priority;
    m_stp_priority_isSet = true;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_stp_priority_Set() const{
    return m_stp_priority_isSet;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_stp_priority_Valid() const{
    return m_stp_priority_isValid;
}

QList<QString> OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::getSwitchProfiles() const {
    return m_switch_profiles;
}
void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::setSwitchProfiles(const QList<QString> &switch_profiles) {
    m_switch_profiles = switch_profiles;
    m_switch_profiles_isSet = true;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_switch_profiles_Set() const{
    return m_switch_profiles_isSet;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_switch_profiles_Valid() const{
    return m_switch_profiles_isValid;
}

QList<QString> OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::getSwitches() const {
    return m_switches;
}
void OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::setSwitches(const QList<QString> &switches) {
    m_switches = switches;
    m_switches_isSet = true;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_switches_Set() const{
    return m_switches_isSet;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::is_switches_Valid() const{
    return m_switches_isValid;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stacks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stp_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_switches.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchStp_request_stpBridgePriority_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stp_priority_isValid && true;
}

} // namespace OpenAPI
