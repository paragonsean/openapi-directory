/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOrganizationLoginSecurity_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOrganizationLoginSecurity_request::OAIUpdateOrganizationLoginSecurity_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOrganizationLoginSecurity_request::OAIUpdateOrganizationLoginSecurity_request() {
    this->initializeModel();
}

OAIUpdateOrganizationLoginSecurity_request::~OAIUpdateOrganizationLoginSecurity_request() {}

void OAIUpdateOrganizationLoginSecurity_request::initializeModel() {

    m_account_lockout_attempts_isSet = false;
    m_account_lockout_attempts_isValid = false;

    m_api_authentication_isSet = false;
    m_api_authentication_isValid = false;

    m_enforce_account_lockout_isSet = false;
    m_enforce_account_lockout_isValid = false;

    m_enforce_different_passwords_isSet = false;
    m_enforce_different_passwords_isValid = false;

    m_enforce_idle_timeout_isSet = false;
    m_enforce_idle_timeout_isValid = false;

    m_enforce_login_ip_ranges_isSet = false;
    m_enforce_login_ip_ranges_isValid = false;

    m_enforce_password_expiration_isSet = false;
    m_enforce_password_expiration_isValid = false;

    m_enforce_strong_passwords_isSet = false;
    m_enforce_strong_passwords_isValid = false;

    m_enforce_two_factor_auth_isSet = false;
    m_enforce_two_factor_auth_isValid = false;

    m_idle_timeout_minutes_isSet = false;
    m_idle_timeout_minutes_isValid = false;

    m_login_ip_ranges_isSet = false;
    m_login_ip_ranges_isValid = false;

    m_num_different_passwords_isSet = false;
    m_num_different_passwords_isValid = false;

    m_password_expiration_days_isSet = false;
    m_password_expiration_days_isValid = false;
}

void OAIUpdateOrganizationLoginSecurity_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOrganizationLoginSecurity_request::fromJsonObject(QJsonObject json) {

    m_account_lockout_attempts_isValid = ::OpenAPI::fromJsonValue(m_account_lockout_attempts, json[QString("accountLockoutAttempts")]);
    m_account_lockout_attempts_isSet = !json[QString("accountLockoutAttempts")].isNull() && m_account_lockout_attempts_isValid;

    m_api_authentication_isValid = ::OpenAPI::fromJsonValue(m_api_authentication, json[QString("apiAuthentication")]);
    m_api_authentication_isSet = !json[QString("apiAuthentication")].isNull() && m_api_authentication_isValid;

    m_enforce_account_lockout_isValid = ::OpenAPI::fromJsonValue(m_enforce_account_lockout, json[QString("enforceAccountLockout")]);
    m_enforce_account_lockout_isSet = !json[QString("enforceAccountLockout")].isNull() && m_enforce_account_lockout_isValid;

    m_enforce_different_passwords_isValid = ::OpenAPI::fromJsonValue(m_enforce_different_passwords, json[QString("enforceDifferentPasswords")]);
    m_enforce_different_passwords_isSet = !json[QString("enforceDifferentPasswords")].isNull() && m_enforce_different_passwords_isValid;

    m_enforce_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_enforce_idle_timeout, json[QString("enforceIdleTimeout")]);
    m_enforce_idle_timeout_isSet = !json[QString("enforceIdleTimeout")].isNull() && m_enforce_idle_timeout_isValid;

    m_enforce_login_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_enforce_login_ip_ranges, json[QString("enforceLoginIpRanges")]);
    m_enforce_login_ip_ranges_isSet = !json[QString("enforceLoginIpRanges")].isNull() && m_enforce_login_ip_ranges_isValid;

    m_enforce_password_expiration_isValid = ::OpenAPI::fromJsonValue(m_enforce_password_expiration, json[QString("enforcePasswordExpiration")]);
    m_enforce_password_expiration_isSet = !json[QString("enforcePasswordExpiration")].isNull() && m_enforce_password_expiration_isValid;

    m_enforce_strong_passwords_isValid = ::OpenAPI::fromJsonValue(m_enforce_strong_passwords, json[QString("enforceStrongPasswords")]);
    m_enforce_strong_passwords_isSet = !json[QString("enforceStrongPasswords")].isNull() && m_enforce_strong_passwords_isValid;

    m_enforce_two_factor_auth_isValid = ::OpenAPI::fromJsonValue(m_enforce_two_factor_auth, json[QString("enforceTwoFactorAuth")]);
    m_enforce_two_factor_auth_isSet = !json[QString("enforceTwoFactorAuth")].isNull() && m_enforce_two_factor_auth_isValid;

    m_idle_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout_minutes, json[QString("idleTimeoutMinutes")]);
    m_idle_timeout_minutes_isSet = !json[QString("idleTimeoutMinutes")].isNull() && m_idle_timeout_minutes_isValid;

    m_login_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_login_ip_ranges, json[QString("loginIpRanges")]);
    m_login_ip_ranges_isSet = !json[QString("loginIpRanges")].isNull() && m_login_ip_ranges_isValid;

    m_num_different_passwords_isValid = ::OpenAPI::fromJsonValue(m_num_different_passwords, json[QString("numDifferentPasswords")]);
    m_num_different_passwords_isSet = !json[QString("numDifferentPasswords")].isNull() && m_num_different_passwords_isValid;

    m_password_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_password_expiration_days, json[QString("passwordExpirationDays")]);
    m_password_expiration_days_isSet = !json[QString("passwordExpirationDays")].isNull() && m_password_expiration_days_isValid;
}

QString OAIUpdateOrganizationLoginSecurity_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOrganizationLoginSecurity_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_lockout_attempts_isSet) {
        obj.insert(QString("accountLockoutAttempts"), ::OpenAPI::toJsonValue(m_account_lockout_attempts));
    }
    if (m_api_authentication.isSet()) {
        obj.insert(QString("apiAuthentication"), ::OpenAPI::toJsonValue(m_api_authentication));
    }
    if (m_enforce_account_lockout_isSet) {
        obj.insert(QString("enforceAccountLockout"), ::OpenAPI::toJsonValue(m_enforce_account_lockout));
    }
    if (m_enforce_different_passwords_isSet) {
        obj.insert(QString("enforceDifferentPasswords"), ::OpenAPI::toJsonValue(m_enforce_different_passwords));
    }
    if (m_enforce_idle_timeout_isSet) {
        obj.insert(QString("enforceIdleTimeout"), ::OpenAPI::toJsonValue(m_enforce_idle_timeout));
    }
    if (m_enforce_login_ip_ranges_isSet) {
        obj.insert(QString("enforceLoginIpRanges"), ::OpenAPI::toJsonValue(m_enforce_login_ip_ranges));
    }
    if (m_enforce_password_expiration_isSet) {
        obj.insert(QString("enforcePasswordExpiration"), ::OpenAPI::toJsonValue(m_enforce_password_expiration));
    }
    if (m_enforce_strong_passwords_isSet) {
        obj.insert(QString("enforceStrongPasswords"), ::OpenAPI::toJsonValue(m_enforce_strong_passwords));
    }
    if (m_enforce_two_factor_auth_isSet) {
        obj.insert(QString("enforceTwoFactorAuth"), ::OpenAPI::toJsonValue(m_enforce_two_factor_auth));
    }
    if (m_idle_timeout_minutes_isSet) {
        obj.insert(QString("idleTimeoutMinutes"), ::OpenAPI::toJsonValue(m_idle_timeout_minutes));
    }
    if (m_login_ip_ranges.size() > 0) {
        obj.insert(QString("loginIpRanges"), ::OpenAPI::toJsonValue(m_login_ip_ranges));
    }
    if (m_num_different_passwords_isSet) {
        obj.insert(QString("numDifferentPasswords"), ::OpenAPI::toJsonValue(m_num_different_passwords));
    }
    if (m_password_expiration_days_isSet) {
        obj.insert(QString("passwordExpirationDays"), ::OpenAPI::toJsonValue(m_password_expiration_days));
    }
    return obj;
}

qint32 OAIUpdateOrganizationLoginSecurity_request::getAccountLockoutAttempts() const {
    return m_account_lockout_attempts;
}
void OAIUpdateOrganizationLoginSecurity_request::setAccountLockoutAttempts(const qint32 &account_lockout_attempts) {
    m_account_lockout_attempts = account_lockout_attempts;
    m_account_lockout_attempts_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_account_lockout_attempts_Set() const{
    return m_account_lockout_attempts_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_account_lockout_attempts_Valid() const{
    return m_account_lockout_attempts_isValid;
}

OAIGetOrganizationLoginSecurity_200_response_apiAuthentication OAIUpdateOrganizationLoginSecurity_request::getApiAuthentication() const {
    return m_api_authentication;
}
void OAIUpdateOrganizationLoginSecurity_request::setApiAuthentication(const OAIGetOrganizationLoginSecurity_200_response_apiAuthentication &api_authentication) {
    m_api_authentication = api_authentication;
    m_api_authentication_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_api_authentication_Set() const{
    return m_api_authentication_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_api_authentication_Valid() const{
    return m_api_authentication_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforceAccountLockout() const {
    return m_enforce_account_lockout;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforceAccountLockout(const bool &enforce_account_lockout) {
    m_enforce_account_lockout = enforce_account_lockout;
    m_enforce_account_lockout_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_account_lockout_Set() const{
    return m_enforce_account_lockout_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_account_lockout_Valid() const{
    return m_enforce_account_lockout_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforceDifferentPasswords() const {
    return m_enforce_different_passwords;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforceDifferentPasswords(const bool &enforce_different_passwords) {
    m_enforce_different_passwords = enforce_different_passwords;
    m_enforce_different_passwords_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_different_passwords_Set() const{
    return m_enforce_different_passwords_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_different_passwords_Valid() const{
    return m_enforce_different_passwords_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforceIdleTimeout() const {
    return m_enforce_idle_timeout;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforceIdleTimeout(const bool &enforce_idle_timeout) {
    m_enforce_idle_timeout = enforce_idle_timeout;
    m_enforce_idle_timeout_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_idle_timeout_Set() const{
    return m_enforce_idle_timeout_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_idle_timeout_Valid() const{
    return m_enforce_idle_timeout_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforceLoginIpRanges() const {
    return m_enforce_login_ip_ranges;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforceLoginIpRanges(const bool &enforce_login_ip_ranges) {
    m_enforce_login_ip_ranges = enforce_login_ip_ranges;
    m_enforce_login_ip_ranges_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_login_ip_ranges_Set() const{
    return m_enforce_login_ip_ranges_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_login_ip_ranges_Valid() const{
    return m_enforce_login_ip_ranges_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforcePasswordExpiration() const {
    return m_enforce_password_expiration;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforcePasswordExpiration(const bool &enforce_password_expiration) {
    m_enforce_password_expiration = enforce_password_expiration;
    m_enforce_password_expiration_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_password_expiration_Set() const{
    return m_enforce_password_expiration_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_password_expiration_Valid() const{
    return m_enforce_password_expiration_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforceStrongPasswords() const {
    return m_enforce_strong_passwords;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforceStrongPasswords(const bool &enforce_strong_passwords) {
    m_enforce_strong_passwords = enforce_strong_passwords;
    m_enforce_strong_passwords_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_strong_passwords_Set() const{
    return m_enforce_strong_passwords_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_strong_passwords_Valid() const{
    return m_enforce_strong_passwords_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isEnforceTwoFactorAuth() const {
    return m_enforce_two_factor_auth;
}
void OAIUpdateOrganizationLoginSecurity_request::setEnforceTwoFactorAuth(const bool &enforce_two_factor_auth) {
    m_enforce_two_factor_auth = enforce_two_factor_auth;
    m_enforce_two_factor_auth_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_two_factor_auth_Set() const{
    return m_enforce_two_factor_auth_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_enforce_two_factor_auth_Valid() const{
    return m_enforce_two_factor_auth_isValid;
}

qint32 OAIUpdateOrganizationLoginSecurity_request::getIdleTimeoutMinutes() const {
    return m_idle_timeout_minutes;
}
void OAIUpdateOrganizationLoginSecurity_request::setIdleTimeoutMinutes(const qint32 &idle_timeout_minutes) {
    m_idle_timeout_minutes = idle_timeout_minutes;
    m_idle_timeout_minutes_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_idle_timeout_minutes_Set() const{
    return m_idle_timeout_minutes_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_idle_timeout_minutes_Valid() const{
    return m_idle_timeout_minutes_isValid;
}

QList<QString> OAIUpdateOrganizationLoginSecurity_request::getLoginIpRanges() const {
    return m_login_ip_ranges;
}
void OAIUpdateOrganizationLoginSecurity_request::setLoginIpRanges(const QList<QString> &login_ip_ranges) {
    m_login_ip_ranges = login_ip_ranges;
    m_login_ip_ranges_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_login_ip_ranges_Set() const{
    return m_login_ip_ranges_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_login_ip_ranges_Valid() const{
    return m_login_ip_ranges_isValid;
}

qint32 OAIUpdateOrganizationLoginSecurity_request::getNumDifferentPasswords() const {
    return m_num_different_passwords;
}
void OAIUpdateOrganizationLoginSecurity_request::setNumDifferentPasswords(const qint32 &num_different_passwords) {
    m_num_different_passwords = num_different_passwords;
    m_num_different_passwords_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_num_different_passwords_Set() const{
    return m_num_different_passwords_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_num_different_passwords_Valid() const{
    return m_num_different_passwords_isValid;
}

qint32 OAIUpdateOrganizationLoginSecurity_request::getPasswordExpirationDays() const {
    return m_password_expiration_days;
}
void OAIUpdateOrganizationLoginSecurity_request::setPasswordExpirationDays(const qint32 &password_expiration_days) {
    m_password_expiration_days = password_expiration_days;
    m_password_expiration_days_isSet = true;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_password_expiration_days_Set() const{
    return m_password_expiration_days_isSet;
}

bool OAIUpdateOrganizationLoginSecurity_request::is_password_expiration_days_Valid() const{
    return m_password_expiration_days_isValid;
}

bool OAIUpdateOrganizationLoginSecurity_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_lockout_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_account_lockout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_different_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_login_ip_ranges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_password_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_strong_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_two_factor_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_different_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOrganizationLoginSecurity_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
