/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSyslogServers_200_response_servers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSyslogServers_200_response_servers_inner::OAIGetNetworkSyslogServers_200_response_servers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSyslogServers_200_response_servers_inner::OAIGetNetworkSyslogServers_200_response_servers_inner() {
    this->initializeModel();
}

OAIGetNetworkSyslogServers_200_response_servers_inner::~OAIGetNetworkSyslogServers_200_response_servers_inner() {}

void OAIGetNetworkSyslogServers_200_response_servers_inner::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAIGetNetworkSyslogServers_200_response_servers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSyslogServers_200_response_servers_inner::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAIGetNetworkSyslogServers_200_response_servers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSyslogServers_200_response_servers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAIGetNetworkSyslogServers_200_response_servers_inner::getHost() const {
    return m_host;
}
void OAIGetNetworkSyslogServers_200_response_servers_inner::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::is_host_Set() const{
    return m_host_isSet;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIGetNetworkSyslogServers_200_response_servers_inner::getPort() const {
    return m_port;
}
void OAIGetNetworkSyslogServers_200_response_servers_inner::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::is_port_Valid() const{
    return m_port_isValid;
}

QList<QString> OAIGetNetworkSyslogServers_200_response_servers_inner::getRoles() const {
    return m_roles;
}
void OAIGetNetworkSyslogServers_200_response_servers_inner::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSyslogServers_200_response_servers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
