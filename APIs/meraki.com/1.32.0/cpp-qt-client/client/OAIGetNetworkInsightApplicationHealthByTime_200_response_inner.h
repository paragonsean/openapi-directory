/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkInsightApplicationHealthByTime_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkInsightApplicationHealthByTime_200_response_inner_H
#define OAIGetNetworkInsightApplicationHealthByTime_200_response_inner_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetNetworkInsightApplicationHealthByTime_200_response_inner : public OAIObject {
public:
    OAIGetNetworkInsightApplicationHealthByTime_200_response_inner();
    OAIGetNetworkInsightApplicationHealthByTime_200_response_inner(QString json);
    ~OAIGetNetworkInsightApplicationHealthByTime_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndTs() const;
    void setEndTs(const QDateTime &end_ts);
    bool is_end_ts_Set() const;
    bool is_end_ts_Valid() const;

    qint32 getLanGoodput() const;
    void setLanGoodput(const qint32 &lan_goodput);
    bool is_lan_goodput_Set() const;
    bool is_lan_goodput_Valid() const;

    float getLanLatencyMs() const;
    void setLanLatencyMs(const float &lan_latency_ms);
    bool is_lan_latency_ms_Set() const;
    bool is_lan_latency_ms_Valid() const;

    float getLanLossPercent() const;
    void setLanLossPercent(const float &lan_loss_percent);
    bool is_lan_loss_percent_Set() const;
    bool is_lan_loss_percent_Valid() const;

    qint32 getNumClients() const;
    void setNumClients(const qint32 &num_clients);
    bool is_num_clients_Set() const;
    bool is_num_clients_Valid() const;

    qint32 getRecv() const;
    void setRecv(const qint32 &recv);
    bool is_recv_Set() const;
    bool is_recv_Valid() const;

    qint32 getResponseDuration() const;
    void setResponseDuration(const qint32 &response_duration);
    bool is_response_duration_Set() const;
    bool is_response_duration_Valid() const;

    qint32 getSent() const;
    void setSent(const qint32 &sent);
    bool is_sent_Set() const;
    bool is_sent_Valid() const;

    QDateTime getStartTs() const;
    void setStartTs(const QDateTime &start_ts);
    bool is_start_ts_Set() const;
    bool is_start_ts_Valid() const;

    qint32 getWanGoodput() const;
    void setWanGoodput(const qint32 &wan_goodput);
    bool is_wan_goodput_Set() const;
    bool is_wan_goodput_Valid() const;

    float getWanLatencyMs() const;
    void setWanLatencyMs(const float &wan_latency_ms);
    bool is_wan_latency_ms_Set() const;
    bool is_wan_latency_ms_Valid() const;

    float getWanLossPercent() const;
    void setWanLossPercent(const float &wan_loss_percent);
    bool is_wan_loss_percent_Set() const;
    bool is_wan_loss_percent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_ts;
    bool m_end_ts_isSet;
    bool m_end_ts_isValid;

    qint32 m_lan_goodput;
    bool m_lan_goodput_isSet;
    bool m_lan_goodput_isValid;

    float m_lan_latency_ms;
    bool m_lan_latency_ms_isSet;
    bool m_lan_latency_ms_isValid;

    float m_lan_loss_percent;
    bool m_lan_loss_percent_isSet;
    bool m_lan_loss_percent_isValid;

    qint32 m_num_clients;
    bool m_num_clients_isSet;
    bool m_num_clients_isValid;

    qint32 m_recv;
    bool m_recv_isSet;
    bool m_recv_isValid;

    qint32 m_response_duration;
    bool m_response_duration_isSet;
    bool m_response_duration_isValid;

    qint32 m_sent;
    bool m_sent_isSet;
    bool m_sent_isValid;

    QDateTime m_start_ts;
    bool m_start_ts_isSet;
    bool m_start_ts_isValid;

    qint32 m_wan_goodput;
    bool m_wan_goodput_isSet;
    bool m_wan_goodput_isValid;

    float m_wan_latency_ms;
    bool m_wan_latency_ms_isSet;
    bool m_wan_latency_ms_isValid;

    float m_wan_loss_percent;
    bool m_wan_loss_percent_isSet;
    bool m_wan_loss_percent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkInsightApplicationHealthByTime_200_response_inner)

#endif // OAIGetNetworkInsightApplicationHealthByTime_200_response_inner_H
