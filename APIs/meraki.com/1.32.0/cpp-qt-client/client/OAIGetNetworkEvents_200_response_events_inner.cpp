/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkEvents_200_response_events_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkEvents_200_response_events_inner::OAIGetNetworkEvents_200_response_events_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkEvents_200_response_events_inner::OAIGetNetworkEvents_200_response_events_inner() {
    this->initializeModel();
}

OAIGetNetworkEvents_200_response_events_inner::~OAIGetNetworkEvents_200_response_events_inner() {}

void OAIGetNetworkEvents_200_response_events_inner::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_client_description_isSet = false;
    m_client_description_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_mac_isSet = false;
    m_client_mac_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_serial_isSet = false;
    m_device_serial_isValid = false;

    m_event_data_isSet = false;
    m_event_data_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_ssid_number_isSet = false;
    m_ssid_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetNetworkEvents_200_response_events_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkEvents_200_response_events_inner::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_client_description_isValid = ::OpenAPI::fromJsonValue(m_client_description, json[QString("clientDescription")]);
    m_client_description_isSet = !json[QString("clientDescription")].isNull() && m_client_description_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_mac_isValid = ::OpenAPI::fromJsonValue(m_client_mac, json[QString("clientMac")]);
    m_client_mac_isSet = !json[QString("clientMac")].isNull() && m_client_mac_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_device_serial_isValid = ::OpenAPI::fromJsonValue(m_device_serial, json[QString("deviceSerial")]);
    m_device_serial_isSet = !json[QString("deviceSerial")].isNull() && m_device_serial_isValid;

    m_event_data_isValid = ::OpenAPI::fromJsonValue(m_event_data, json[QString("eventData")]);
    m_event_data_isSet = !json[QString("eventData")].isNull() && m_event_data_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurredAt")]);
    m_occurred_at_isSet = !json[QString("occurredAt")].isNull() && m_occurred_at_isValid;

    m_ssid_number_isValid = ::OpenAPI::fromJsonValue(m_ssid_number, json[QString("ssidNumber")]);
    m_ssid_number_isSet = !json[QString("ssidNumber")].isNull() && m_ssid_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkEvents_200_response_events_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_client_description_isSet) {
        obj.insert(QString("clientDescription"), ::OpenAPI::toJsonValue(m_client_description));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_mac_isSet) {
        obj.insert(QString("clientMac"), ::OpenAPI::toJsonValue(m_client_mac));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_serial_isSet) {
        obj.insert(QString("deviceSerial"), ::OpenAPI::toJsonValue(m_device_serial));
    }
    if (m_event_data.isSet()) {
        obj.insert(QString("eventData"), ::OpenAPI::toJsonValue(m_event_data));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurredAt"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_ssid_number_isSet) {
        obj.insert(QString("ssidNumber"), ::OpenAPI::toJsonValue(m_ssid_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGetNetworkEvents_200_response_events_inner::getCategory() const {
    return m_category;
}
void OAIGetNetworkEvents_200_response_events_inner::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_category_Set() const{
    return m_category_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getClientDescription() const {
    return m_client_description;
}
void OAIGetNetworkEvents_200_response_events_inner::setClientDescription(const QString &client_description) {
    m_client_description = client_description;
    m_client_description_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_client_description_Set() const{
    return m_client_description_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_client_description_Valid() const{
    return m_client_description_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getClientId() const {
    return m_client_id;
}
void OAIGetNetworkEvents_200_response_events_inner::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getClientMac() const {
    return m_client_mac;
}
void OAIGetNetworkEvents_200_response_events_inner::setClientMac(const QString &client_mac) {
    m_client_mac = client_mac;
    m_client_mac_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_client_mac_Set() const{
    return m_client_mac_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_client_mac_Valid() const{
    return m_client_mac_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getDescription() const {
    return m_description;
}
void OAIGetNetworkEvents_200_response_events_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getDeviceName() const {
    return m_device_name;
}
void OAIGetNetworkEvents_200_response_events_inner::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getDeviceSerial() const {
    return m_device_serial;
}
void OAIGetNetworkEvents_200_response_events_inner::setDeviceSerial(const QString &device_serial) {
    m_device_serial = device_serial;
    m_device_serial_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_device_serial_Set() const{
    return m_device_serial_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_device_serial_Valid() const{
    return m_device_serial_isValid;
}

OAIGetNetworkEvents_200_response_events_inner_eventData OAIGetNetworkEvents_200_response_events_inner::getEventData() const {
    return m_event_data;
}
void OAIGetNetworkEvents_200_response_events_inner::setEventData(const OAIGetNetworkEvents_200_response_events_inner_eventData &event_data) {
    m_event_data = event_data;
    m_event_data_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_event_data_Set() const{
    return m_event_data_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_event_data_Valid() const{
    return m_event_data_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getNetworkId() const {
    return m_network_id;
}
void OAIGetNetworkEvents_200_response_events_inner::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getOccurredAt() const {
    return m_occurred_at;
}
void OAIGetNetworkEvents_200_response_events_inner::setOccurredAt(const QString &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

qint32 OAIGetNetworkEvents_200_response_events_inner::getSsidNumber() const {
    return m_ssid_number;
}
void OAIGetNetworkEvents_200_response_events_inner::setSsidNumber(const qint32 &ssid_number) {
    m_ssid_number = ssid_number;
    m_ssid_number_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_ssid_number_Set() const{
    return m_ssid_number_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_ssid_number_Valid() const{
    return m_ssid_number_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner::getType() const {
    return m_type;
}
void OAIGetNetworkEvents_200_response_events_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetNetworkEvents_200_response_events_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkEvents_200_response_events_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
