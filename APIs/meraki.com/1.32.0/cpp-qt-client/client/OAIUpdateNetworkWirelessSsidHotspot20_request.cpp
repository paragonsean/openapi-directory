/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsidHotspot20_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsidHotspot20_request::OAIUpdateNetworkWirelessSsidHotspot20_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsidHotspot20_request::OAIUpdateNetworkWirelessSsidHotspot20_request() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsidHotspot20_request::~OAIUpdateNetworkWirelessSsidHotspot20_request() {}

void OAIUpdateNetworkWirelessSsidHotspot20_request::initializeModel() {

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_mcc_mncs_isSet = false;
    m_mcc_mncs_isValid = false;

    m_nai_realms_isSet = false;
    m_nai_realms_isValid = false;

    m_network_access_type_isSet = false;
    m_network_access_type_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_roam_consort_ois_isSet = false;
    m_roam_consort_ois_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;
}

void OAIUpdateNetworkWirelessSsidHotspot20_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsidHotspot20_request::fromJsonObject(QJsonObject json) {

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_mcc_mncs_isValid = ::OpenAPI::fromJsonValue(m_mcc_mncs, json[QString("mccMncs")]);
    m_mcc_mncs_isSet = !json[QString("mccMncs")].isNull() && m_mcc_mncs_isValid;

    m_nai_realms_isValid = ::OpenAPI::fromJsonValue(m_nai_realms, json[QString("naiRealms")]);
    m_nai_realms_isSet = !json[QString("naiRealms")].isNull() && m_nai_realms_isValid;

    m_network_access_type_isValid = ::OpenAPI::fromJsonValue(m_network_access_type, json[QString("networkAccessType")]);
    m_network_access_type_isSet = !json[QString("networkAccessType")].isNull() && m_network_access_type_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_roam_consort_ois_isValid = ::OpenAPI::fromJsonValue(m_roam_consort_ois, json[QString("roamConsortOis")]);
    m_roam_consort_ois_isSet = !json[QString("roamConsortOis")].isNull() && m_roam_consort_ois_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;
}

QString OAIUpdateNetworkWirelessSsidHotspot20_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsidHotspot20_request::asJsonObject() const {
    QJsonObject obj;
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_mcc_mncs.size() > 0) {
        obj.insert(QString("mccMncs"), ::OpenAPI::toJsonValue(m_mcc_mncs));
    }
    if (m_nai_realms.size() > 0) {
        obj.insert(QString("naiRealms"), ::OpenAPI::toJsonValue(m_nai_realms));
    }
    if (m_network_access_type_isSet) {
        obj.insert(QString("networkAccessType"), ::OpenAPI::toJsonValue(m_network_access_type));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_roam_consort_ois.size() > 0) {
        obj.insert(QString("roamConsortOis"), ::OpenAPI::toJsonValue(m_roam_consort_ois));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    return obj;
}

QList<QString> OAIUpdateNetworkWirelessSsidHotspot20_request::getDomains() const {
    return m_domains;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_domains_Valid() const{
    return m_domains_isValid;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIUpdateNetworkWirelessSsidHotspot20_request_mccMncs_inner> OAIUpdateNetworkWirelessSsidHotspot20_request::getMccMncs() const {
    return m_mcc_mncs;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setMccMncs(const QList<OAIUpdateNetworkWirelessSsidHotspot20_request_mccMncs_inner> &mcc_mncs) {
    m_mcc_mncs = mcc_mncs;
    m_mcc_mncs_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_mcc_mncs_Set() const{
    return m_mcc_mncs_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_mcc_mncs_Valid() const{
    return m_mcc_mncs_isValid;
}

QList<OAIUpdateNetworkWirelessSsidHotspot20_request_naiRealms_inner> OAIUpdateNetworkWirelessSsidHotspot20_request::getNaiRealms() const {
    return m_nai_realms;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setNaiRealms(const QList<OAIUpdateNetworkWirelessSsidHotspot20_request_naiRealms_inner> &nai_realms) {
    m_nai_realms = nai_realms;
    m_nai_realms_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_nai_realms_Set() const{
    return m_nai_realms_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_nai_realms_Valid() const{
    return m_nai_realms_isValid;
}

QString OAIUpdateNetworkWirelessSsidHotspot20_request::getNetworkAccessType() const {
    return m_network_access_type;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setNetworkAccessType(const QString &network_access_type) {
    m_network_access_type = network_access_type;
    m_network_access_type_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_network_access_type_Set() const{
    return m_network_access_type_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_network_access_type_Valid() const{
    return m_network_access_type_isValid;
}

OAIUpdateNetworkWirelessSsidHotspot20_request_operator OAIUpdateNetworkWirelessSsidHotspot20_request::getROperator() const {
    return m_r_operator;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setROperator(const OAIUpdateNetworkWirelessSsidHotspot20_request_operator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QList<QString> OAIUpdateNetworkWirelessSsidHotspot20_request::getRoamConsortOis() const {
    return m_roam_consort_ois;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setRoamConsortOis(const QList<QString> &roam_consort_ois) {
    m_roam_consort_ois = roam_consort_ois;
    m_roam_consort_ois_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_roam_consort_ois_Set() const{
    return m_roam_consort_ois_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_roam_consort_ois_Valid() const{
    return m_roam_consort_ois_isValid;
}

OAIUpdateNetworkWirelessSsidHotspot20_request_venue OAIUpdateNetworkWirelessSsidHotspot20_request::getVenue() const {
    return m_venue;
}
void OAIUpdateNetworkWirelessSsidHotspot20_request::setVenue(const OAIUpdateNetworkWirelessSsidHotspot20_request_venue &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::is_venue_Valid() const{
    return m_venue_isValid;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_mncs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nai_realms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roam_consort_ois.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsidHotspot20_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
