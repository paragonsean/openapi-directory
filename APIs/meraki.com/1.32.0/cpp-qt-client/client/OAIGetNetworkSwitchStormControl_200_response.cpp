/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSwitchStormControl_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSwitchStormControl_200_response::OAIGetNetworkSwitchStormControl_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSwitchStormControl_200_response::OAIGetNetworkSwitchStormControl_200_response() {
    this->initializeModel();
}

OAIGetNetworkSwitchStormControl_200_response::~OAIGetNetworkSwitchStormControl_200_response() {}

void OAIGetNetworkSwitchStormControl_200_response::initializeModel() {

    m_broadcast_threshold_isSet = false;
    m_broadcast_threshold_isValid = false;

    m_multicast_threshold_isSet = false;
    m_multicast_threshold_isValid = false;

    m_unknown_unicast_threshold_isSet = false;
    m_unknown_unicast_threshold_isValid = false;
}

void OAIGetNetworkSwitchStormControl_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSwitchStormControl_200_response::fromJsonObject(QJsonObject json) {

    m_broadcast_threshold_isValid = ::OpenAPI::fromJsonValue(m_broadcast_threshold, json[QString("broadcastThreshold")]);
    m_broadcast_threshold_isSet = !json[QString("broadcastThreshold")].isNull() && m_broadcast_threshold_isValid;

    m_multicast_threshold_isValid = ::OpenAPI::fromJsonValue(m_multicast_threshold, json[QString("multicastThreshold")]);
    m_multicast_threshold_isSet = !json[QString("multicastThreshold")].isNull() && m_multicast_threshold_isValid;

    m_unknown_unicast_threshold_isValid = ::OpenAPI::fromJsonValue(m_unknown_unicast_threshold, json[QString("unknownUnicastThreshold")]);
    m_unknown_unicast_threshold_isSet = !json[QString("unknownUnicastThreshold")].isNull() && m_unknown_unicast_threshold_isValid;
}

QString OAIGetNetworkSwitchStormControl_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSwitchStormControl_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_broadcast_threshold_isSet) {
        obj.insert(QString("broadcastThreshold"), ::OpenAPI::toJsonValue(m_broadcast_threshold));
    }
    if (m_multicast_threshold_isSet) {
        obj.insert(QString("multicastThreshold"), ::OpenAPI::toJsonValue(m_multicast_threshold));
    }
    if (m_unknown_unicast_threshold_isSet) {
        obj.insert(QString("unknownUnicastThreshold"), ::OpenAPI::toJsonValue(m_unknown_unicast_threshold));
    }
    return obj;
}

qint32 OAIGetNetworkSwitchStormControl_200_response::getBroadcastThreshold() const {
    return m_broadcast_threshold;
}
void OAIGetNetworkSwitchStormControl_200_response::setBroadcastThreshold(const qint32 &broadcast_threshold) {
    m_broadcast_threshold = broadcast_threshold;
    m_broadcast_threshold_isSet = true;
}

bool OAIGetNetworkSwitchStormControl_200_response::is_broadcast_threshold_Set() const{
    return m_broadcast_threshold_isSet;
}

bool OAIGetNetworkSwitchStormControl_200_response::is_broadcast_threshold_Valid() const{
    return m_broadcast_threshold_isValid;
}

qint32 OAIGetNetworkSwitchStormControl_200_response::getMulticastThreshold() const {
    return m_multicast_threshold;
}
void OAIGetNetworkSwitchStormControl_200_response::setMulticastThreshold(const qint32 &multicast_threshold) {
    m_multicast_threshold = multicast_threshold;
    m_multicast_threshold_isSet = true;
}

bool OAIGetNetworkSwitchStormControl_200_response::is_multicast_threshold_Set() const{
    return m_multicast_threshold_isSet;
}

bool OAIGetNetworkSwitchStormControl_200_response::is_multicast_threshold_Valid() const{
    return m_multicast_threshold_isValid;
}

qint32 OAIGetNetworkSwitchStormControl_200_response::getUnknownUnicastThreshold() const {
    return m_unknown_unicast_threshold;
}
void OAIGetNetworkSwitchStormControl_200_response::setUnknownUnicastThreshold(const qint32 &unknown_unicast_threshold) {
    m_unknown_unicast_threshold = unknown_unicast_threshold;
    m_unknown_unicast_threshold_isSet = true;
}

bool OAIGetNetworkSwitchStormControl_200_response::is_unknown_unicast_threshold_Set() const{
    return m_unknown_unicast_threshold_isSet;
}

bool OAIGetNetworkSwitchStormControl_200_response::is_unknown_unicast_threshold_Valid() const{
    return m_unknown_unicast_threshold_isValid;
}

bool OAIGetNetworkSwitchStormControl_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broadcast_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_unicast_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSwitchStormControl_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
