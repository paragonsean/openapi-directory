/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkApplianceVlan_201_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkApplianceVlan_201_response::OAICreateNetworkApplianceVlan_201_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkApplianceVlan_201_response::OAICreateNetworkApplianceVlan_201_response() {
    this->initializeModel();
}

OAICreateNetworkApplianceVlan_201_response::~OAICreateNetworkApplianceVlan_201_response() {}

void OAICreateNetworkApplianceVlan_201_response::initializeModel() {

    m_appliance_ip_isSet = false;
    m_appliance_ip_isValid = false;

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_group_policy_id_isSet = false;
    m_group_policy_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_id_isSet = false;
    m_interface_id_isValid = false;

    m_ipv6_isSet = false;
    m_ipv6_isValid = false;

    m_mandatory_dhcp_isSet = false;
    m_mandatory_dhcp_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_template_vlan_type_isSet = false;
    m_template_vlan_type_isValid = false;
}

void OAICreateNetworkApplianceVlan_201_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkApplianceVlan_201_response::fromJsonObject(QJsonObject json) {

    m_appliance_ip_isValid = ::OpenAPI::fromJsonValue(m_appliance_ip, json[QString("applianceIp")]);
    m_appliance_ip_isSet = !json[QString("applianceIp")].isNull() && m_appliance_ip_isValid;

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_group_policy_id_isValid = ::OpenAPI::fromJsonValue(m_group_policy_id, json[QString("groupPolicyId")]);
    m_group_policy_id_isSet = !json[QString("groupPolicyId")].isNull() && m_group_policy_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_id_isValid = ::OpenAPI::fromJsonValue(m_interface_id, json[QString("interfaceId")]);
    m_interface_id_isSet = !json[QString("interfaceId")].isNull() && m_interface_id_isValid;

    m_ipv6_isValid = ::OpenAPI::fromJsonValue(m_ipv6, json[QString("ipv6")]);
    m_ipv6_isSet = !json[QString("ipv6")].isNull() && m_ipv6_isValid;

    m_mandatory_dhcp_isValid = ::OpenAPI::fromJsonValue(m_mandatory_dhcp, json[QString("mandatoryDhcp")]);
    m_mandatory_dhcp_isSet = !json[QString("mandatoryDhcp")].isNull() && m_mandatory_dhcp_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_template_vlan_type_isValid = ::OpenAPI::fromJsonValue(m_template_vlan_type, json[QString("templateVlanType")]);
    m_template_vlan_type_isSet = !json[QString("templateVlanType")].isNull() && m_template_vlan_type_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkApplianceVlan_201_response::asJsonObject() const {
    QJsonObject obj;
    if (m_appliance_ip_isSet) {
        obj.insert(QString("applianceIp"), ::OpenAPI::toJsonValue(m_appliance_ip));
    }
    if (m_cidr_isSet) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_group_policy_id_isSet) {
        obj.insert(QString("groupPolicyId"), ::OpenAPI::toJsonValue(m_group_policy_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_id_isSet) {
        obj.insert(QString("interfaceId"), ::OpenAPI::toJsonValue(m_interface_id));
    }
    if (m_ipv6.isSet()) {
        obj.insert(QString("ipv6"), ::OpenAPI::toJsonValue(m_ipv6));
    }
    if (m_mandatory_dhcp.isSet()) {
        obj.insert(QString("mandatoryDhcp"), ::OpenAPI::toJsonValue(m_mandatory_dhcp));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_template_vlan_type_isSet) {
        obj.insert(QString("templateVlanType"), ::OpenAPI::toJsonValue(m_template_vlan_type));
    }
    return obj;
}

QString OAICreateNetworkApplianceVlan_201_response::getApplianceIp() const {
    return m_appliance_ip;
}
void OAICreateNetworkApplianceVlan_201_response::setApplianceIp(const QString &appliance_ip) {
    m_appliance_ip = appliance_ip;
    m_appliance_ip_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_appliance_ip_Set() const{
    return m_appliance_ip_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_appliance_ip_Valid() const{
    return m_appliance_ip_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getCidr() const {
    return m_cidr;
}
void OAICreateNetworkApplianceVlan_201_response::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getGroupPolicyId() const {
    return m_group_policy_id;
}
void OAICreateNetworkApplianceVlan_201_response::setGroupPolicyId(const QString &group_policy_id) {
    m_group_policy_id = group_policy_id;
    m_group_policy_id_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_group_policy_id_Set() const{
    return m_group_policy_id_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_group_policy_id_Valid() const{
    return m_group_policy_id_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getId() const {
    return m_id;
}
void OAICreateNetworkApplianceVlan_201_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getInterfaceId() const {
    return m_interface_id;
}
void OAICreateNetworkApplianceVlan_201_response::setInterfaceId(const QString &interface_id) {
    m_interface_id = interface_id;
    m_interface_id_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_interface_id_Set() const{
    return m_interface_id_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_interface_id_Valid() const{
    return m_interface_id_isValid;
}

OAIGetNetworkApplianceVlans_200_response_inner_ipv6 OAICreateNetworkApplianceVlan_201_response::getIpv6() const {
    return m_ipv6;
}
void OAICreateNetworkApplianceVlan_201_response::setIpv6(const OAIGetNetworkApplianceVlans_200_response_inner_ipv6 &ipv6) {
    m_ipv6 = ipv6;
    m_ipv6_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_ipv6_Set() const{
    return m_ipv6_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_ipv6_Valid() const{
    return m_ipv6_isValid;
}

OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp OAICreateNetworkApplianceVlan_201_response::getMandatoryDhcp() const {
    return m_mandatory_dhcp;
}
void OAICreateNetworkApplianceVlan_201_response::setMandatoryDhcp(const OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp &mandatory_dhcp) {
    m_mandatory_dhcp = mandatory_dhcp;
    m_mandatory_dhcp_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_mandatory_dhcp_Set() const{
    return m_mandatory_dhcp_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_mandatory_dhcp_Valid() const{
    return m_mandatory_dhcp_isValid;
}

qint32 OAICreateNetworkApplianceVlan_201_response::getMask() const {
    return m_mask;
}
void OAICreateNetworkApplianceVlan_201_response::setMask(const qint32 &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getName() const {
    return m_name;
}
void OAICreateNetworkApplianceVlan_201_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getSubnet() const {
    return m_subnet;
}
void OAICreateNetworkApplianceVlan_201_response::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_subnet_Valid() const{
    return m_subnet_isValid;
}

QString OAICreateNetworkApplianceVlan_201_response::getTemplateVlanType() const {
    return m_template_vlan_type;
}
void OAICreateNetworkApplianceVlan_201_response::setTemplateVlanType(const QString &template_vlan_type) {
    m_template_vlan_type = template_vlan_type;
    m_template_vlan_type_isSet = true;
}

bool OAICreateNetworkApplianceVlan_201_response::is_template_vlan_type_Set() const{
    return m_template_vlan_type_isSet;
}

bool OAICreateNetworkApplianceVlan_201_response::is_template_vlan_type_Valid() const{
    return m_template_vlan_type_isValid;
}

bool OAICreateNetworkApplianceVlan_201_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appliance_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_dhcp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_vlan_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkApplianceVlan_201_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
