/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius() {
    this->initializeModel();
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::~OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius() {}

void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::initializeModel() {

    m_critical_auth_isSet = false;
    m_critical_auth_isValid = false;

    m_failed_auth_vlan_id_isSet = false;
    m_failed_auth_vlan_id_isValid = false;

    m_re_authentication_interval_isSet = false;
    m_re_authentication_interval_isValid = false;
}

void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::fromJsonObject(QJsonObject json) {

    m_critical_auth_isValid = ::OpenAPI::fromJsonValue(m_critical_auth, json[QString("criticalAuth")]);
    m_critical_auth_isSet = !json[QString("criticalAuth")].isNull() && m_critical_auth_isValid;

    m_failed_auth_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_failed_auth_vlan_id, json[QString("failedAuthVlanId")]);
    m_failed_auth_vlan_id_isSet = !json[QString("failedAuthVlanId")].isNull() && m_failed_auth_vlan_id_isValid;

    m_re_authentication_interval_isValid = ::OpenAPI::fromJsonValue(m_re_authentication_interval, json[QString("reAuthenticationInterval")]);
    m_re_authentication_interval_isSet = !json[QString("reAuthenticationInterval")].isNull() && m_re_authentication_interval_isValid;
}

QString OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::asJsonObject() const {
    QJsonObject obj;
    if (m_critical_auth.isSet()) {
        obj.insert(QString("criticalAuth"), ::OpenAPI::toJsonValue(m_critical_auth));
    }
    if (m_failed_auth_vlan_id_isSet) {
        obj.insert(QString("failedAuthVlanId"), ::OpenAPI::toJsonValue(m_failed_auth_vlan_id));
    }
    if (m_re_authentication_interval_isSet) {
        obj.insert(QString("reAuthenticationInterval"), ::OpenAPI::toJsonValue(m_re_authentication_interval));
    }
    return obj;
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::getCriticalAuth() const {
    return m_critical_auth;
}
void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::setCriticalAuth(const OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth &critical_auth) {
    m_critical_auth = critical_auth;
    m_critical_auth_isSet = true;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::is_critical_auth_Set() const{
    return m_critical_auth_isSet;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::is_critical_auth_Valid() const{
    return m_critical_auth_isValid;
}

qint32 OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::getFailedAuthVlanId() const {
    return m_failed_auth_vlan_id;
}
void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::setFailedAuthVlanId(const qint32 &failed_auth_vlan_id) {
    m_failed_auth_vlan_id = failed_auth_vlan_id;
    m_failed_auth_vlan_id_isSet = true;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::is_failed_auth_vlan_id_Set() const{
    return m_failed_auth_vlan_id_isSet;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::is_failed_auth_vlan_id_Valid() const{
    return m_failed_auth_vlan_id_isValid;
}

qint32 OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::getReAuthenticationInterval() const {
    return m_re_authentication_interval;
}
void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::setReAuthenticationInterval(const qint32 &re_authentication_interval) {
    m_re_authentication_interval = re_authentication_interval;
    m_re_authentication_interval_isSet = true;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::is_re_authentication_interval_Set() const{
    return m_re_authentication_interval_isSet;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::is_re_authentication_interval_Valid() const{
    return m_re_authentication_interval_isValid;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_critical_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_auth_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_re_authentication_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
