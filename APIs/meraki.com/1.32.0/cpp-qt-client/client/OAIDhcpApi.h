/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDhcpApi_H
#define OAI_OAIDhcpApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetNetworkCellularGatewayDhcp_200_response.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request.h"
#include "OAIUpdateNetworkCellularGatewayDhcp_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDhcpApi : public QObject {
    Q_OBJECT

public:
    OAIDhcpApi(const int timeOut = 0);
    ~OAIDhcpApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceApplianceDhcpSubnets(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewayDhcp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpV4ServersSeen(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_device_switch_routing_interface_dhcp_request OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request> &oai_update_device_switch_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_dhcp_request OAIUpdateNetworkCellularGatewayDhcp_request [optional]
    */
    virtual void updateNetworkCellularGatewayDhcp(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayDhcp_request> &oai_update_network_cellular_gateway_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_dhcp_request OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request> &oai_update_network_switch_stack_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceApplianceDhcpSubnetsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkCellularGatewayDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpV4ServersSeenCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewayDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceApplianceDhcpSubnetsSignal(QList<OAIObject> summary);
    void getDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void getNetworkCellularGatewayDhcpSignal(OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void getNetworkSwitchDhcpV4ServersSeenSignal(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateNetworkCellularGatewayDhcpSignal(OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);


    void getDeviceApplianceDhcpSubnetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCellularGatewayDhcpSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void getNetworkSwitchDhcpV4ServersSeenSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCellularGatewayDhcpSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getDeviceApplianceDhcpSubnetsSignalError() instead")
    void getDeviceApplianceDhcpSubnetsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceDhcpSubnetsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayDhcpSignalError() instead")
    void getNetworkCellularGatewayDhcpSignalE(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayDhcpSignalError(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpV4ServersSeenSignalError() instead")
    void getNetworkSwitchDhcpV4ServersSeenSignalE(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpV4ServersSeenSignalError(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayDhcpSignalError() instead")
    void updateNetworkCellularGatewayDhcpSignalE(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayDhcpSignalError(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceApplianceDhcpSubnetsSignalErrorFull() instead")
    void getDeviceApplianceDhcpSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceDhcpSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayDhcpSignalErrorFull() instead")
    void getNetworkCellularGatewayDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpV4ServersSeenSignalErrorFull() instead")
    void getNetworkSwitchDhcpV4ServersSeenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpV4ServersSeenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayDhcpSignalErrorFull() instead")
    void updateNetworkCellularGatewayDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
