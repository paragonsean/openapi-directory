/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::~OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings() {}

void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::initializeModel() {

    m_ax_enabled_isSet = false;
    m_ax_enabled_isValid = false;

    m_max_power_isSet = false;
    m_max_power_isValid = false;

    m_min_bitrate_isSet = false;
    m_min_bitrate_isValid = false;

    m_min_power_isSet = false;
    m_min_power_isValid = false;

    m_rxsop_isSet = false;
    m_rxsop_isValid = false;

    m_valid_auto_channels_isSet = false;
    m_valid_auto_channels_isValid = false;
}

void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::fromJsonObject(QJsonObject json) {

    m_ax_enabled_isValid = ::OpenAPI::fromJsonValue(m_ax_enabled, json[QString("axEnabled")]);
    m_ax_enabled_isSet = !json[QString("axEnabled")].isNull() && m_ax_enabled_isValid;

    m_max_power_isValid = ::OpenAPI::fromJsonValue(m_max_power, json[QString("maxPower")]);
    m_max_power_isSet = !json[QString("maxPower")].isNull() && m_max_power_isValid;

    m_min_bitrate_isValid = ::OpenAPI::fromJsonValue(m_min_bitrate, json[QString("minBitrate")]);
    m_min_bitrate_isSet = !json[QString("minBitrate")].isNull() && m_min_bitrate_isValid;

    m_min_power_isValid = ::OpenAPI::fromJsonValue(m_min_power, json[QString("minPower")]);
    m_min_power_isSet = !json[QString("minPower")].isNull() && m_min_power_isValid;

    m_rxsop_isValid = ::OpenAPI::fromJsonValue(m_rxsop, json[QString("rxsop")]);
    m_rxsop_isSet = !json[QString("rxsop")].isNull() && m_rxsop_isValid;

    m_valid_auto_channels_isValid = ::OpenAPI::fromJsonValue(m_valid_auto_channels, json[QString("validAutoChannels")]);
    m_valid_auto_channels_isSet = !json[QString("validAutoChannels")].isNull() && m_valid_auto_channels_isValid;
}

QString OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ax_enabled_isSet) {
        obj.insert(QString("axEnabled"), ::OpenAPI::toJsonValue(m_ax_enabled));
    }
    if (m_max_power_isSet) {
        obj.insert(QString("maxPower"), ::OpenAPI::toJsonValue(m_max_power));
    }
    if (m_min_bitrate_isSet) {
        obj.insert(QString("minBitrate"), ::OpenAPI::toJsonValue(m_min_bitrate));
    }
    if (m_min_power_isSet) {
        obj.insert(QString("minPower"), ::OpenAPI::toJsonValue(m_min_power));
    }
    if (m_rxsop_isSet) {
        obj.insert(QString("rxsop"), ::OpenAPI::toJsonValue(m_rxsop));
    }
    if (m_valid_auto_channels.size() > 0) {
        obj.insert(QString("validAutoChannels"), ::OpenAPI::toJsonValue(m_valid_auto_channels));
    }
    return obj;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::isAxEnabled() const {
    return m_ax_enabled;
}
void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::setAxEnabled(const bool &ax_enabled) {
    m_ax_enabled = ax_enabled;
    m_ax_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_ax_enabled_Set() const{
    return m_ax_enabled_isSet;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_ax_enabled_Valid() const{
    return m_ax_enabled_isValid;
}

qint32 OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::getMaxPower() const {
    return m_max_power;
}
void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::setMaxPower(const qint32 &max_power) {
    m_max_power = max_power;
    m_max_power_isSet = true;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_max_power_Set() const{
    return m_max_power_isSet;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_max_power_Valid() const{
    return m_max_power_isValid;
}

float OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::getMinBitrate() const {
    return m_min_bitrate;
}
void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::setMinBitrate(const float &min_bitrate) {
    m_min_bitrate = min_bitrate;
    m_min_bitrate_isSet = true;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_min_bitrate_Set() const{
    return m_min_bitrate_isSet;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_min_bitrate_Valid() const{
    return m_min_bitrate_isValid;
}

qint32 OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::getMinPower() const {
    return m_min_power;
}
void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::setMinPower(const qint32 &min_power) {
    m_min_power = min_power;
    m_min_power_isSet = true;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_min_power_Set() const{
    return m_min_power_isSet;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_min_power_Valid() const{
    return m_min_power_isValid;
}

qint32 OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::getRxsop() const {
    return m_rxsop;
}
void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::setRxsop(const qint32 &rxsop) {
    m_rxsop = rxsop;
    m_rxsop_isSet = true;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_rxsop_Set() const{
    return m_rxsop_isSet;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_rxsop_Valid() const{
    return m_rxsop_isValid;
}

QList<qint32> OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::getValidAutoChannels() const {
    return m_valid_auto_channels;
}
void OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::setValidAutoChannels(const QList<qint32> &valid_auto_channels) {
    m_valid_auto_channels = valid_auto_channels;
    m_valid_auto_channels_isSet = true;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_valid_auto_channels_Set() const{
    return m_valid_auto_channels_isSet;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::is_valid_auto_channels_Valid() const{
    return m_valid_auto_channels_isValid;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ax_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rxsop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_auto_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessRfProfile_request_twoFourGhzSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
