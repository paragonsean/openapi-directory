/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQosRulesApi_H
#define OAI_OAIQosRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkSwitchQosRule_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSwitchQosRule_request.h"
#include "OAIUpdateNetworkSwitchQosRulesOrder_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQosRulesApi : public QObject {
    Q_OBJECT

public:
    OAIQosRulesApi(const int timeOut = 0);
    ~OAIQosRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_qos_rule_request OAICreateNetworkSwitchQosRule_request [required]
    */
    virtual void createNetworkSwitchQosRule(const QString &network_id, const OAICreateNetworkSwitchQosRule_request &oai_create_network_switch_qos_rule_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void deleteNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void getNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchQosRulesOrder(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchQosRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    * @param[in]  oai_update_network_switch_qos_rule_request OAIUpdateNetworkSwitchQosRule_request [optional]
    */
    virtual void updateNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchQosRule_request> &oai_update_network_switch_qos_rule_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchQosRule_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_qos_rules_order_request OAIUpdateNetworkSwitchQosRulesOrder_request [required]
    */
    virtual void updateNetworkSwitchQosRulesOrder(const QString &network_id, const OAIUpdateNetworkSwitchQosRulesOrder_request &oai_update_network_switch_qos_rules_order_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchQosRulesOrderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkSwitchQosRuleSignal(OAIObject summary);
    void deleteNetworkSwitchQosRuleSignal();
    void getNetworkSwitchQosRuleSignal(OAIObject summary);
    void getNetworkSwitchQosRulesOrderSignal(OAIObject summary);
    void getNetworkSwitchQosRulesSignal(QList<OAIObject> summary);
    void updateNetworkSwitchQosRuleSignal(OAIObject summary);
    void updateNetworkSwitchQosRulesOrderSignal(OAIObject summary);


    void createNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchQosRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkSwitchQosRuleSignalError() instead")
    void createNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchQosRuleSignalError() instead")
    void deleteNetworkSwitchQosRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchQosRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRuleSignalError() instead")
    void getNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesOrderSignalError() instead")
    void getNetworkSwitchQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesSignalError() instead")
    void getNetworkSwitchQosRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRuleSignalError() instead")
    void updateNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRulesOrderSignalError() instead")
    void updateNetworkSwitchQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkSwitchQosRuleSignalErrorFull() instead")
    void createNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchQosRuleSignalErrorFull() instead")
    void deleteNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRuleSignalErrorFull() instead")
    void getNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesOrderSignalErrorFull() instead")
    void getNetworkSwitchQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesSignalErrorFull() instead")
    void getNetworkSwitchQosRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRuleSignalErrorFull() instead")
    void updateNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRulesOrderSignalErrorFull() instead")
    void updateNetworkSwitchQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
