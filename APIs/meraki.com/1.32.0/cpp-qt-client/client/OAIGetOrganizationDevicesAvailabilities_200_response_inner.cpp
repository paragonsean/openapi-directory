/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationDevicesAvailabilities_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationDevicesAvailabilities_200_response_inner::OAIGetOrganizationDevicesAvailabilities_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationDevicesAvailabilities_200_response_inner::OAIGetOrganizationDevicesAvailabilities_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationDevicesAvailabilities_200_response_inner::~OAIGetOrganizationDevicesAvailabilities_200_response_inner() {}

void OAIGetOrganizationDevicesAvailabilities_200_response_inner::initializeModel() {

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetOrganizationDevicesAvailabilities_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationDevicesAvailabilities_200_response_inner::fromJsonObject(QJsonObject json) {

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetOrganizationDevicesAvailabilities_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationDevicesAvailabilities_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetOrganizationDevicesAvailabilities_200_response_inner::getMac() const {
    return m_mac;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIGetOrganizationDevicesAvailabilities_200_response_inner::getName() const {
    return m_name;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetOrganizationDevicesAvailabilities_200_response_inner_network OAIGetOrganizationDevicesAvailabilities_200_response_inner::getNetwork() const {
    return m_network;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setNetwork(const OAIGetOrganizationDevicesAvailabilities_200_response_inner_network &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGetOrganizationDevicesAvailabilities_200_response_inner::getProductType() const {
    return m_product_type;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIGetOrganizationDevicesAvailabilities_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIGetOrganizationDevicesAvailabilities_200_response_inner::getStatus() const {
    return m_status;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIGetOrganizationDevicesAvailabilities_200_response_inner::getTags() const {
    return m_tags;
}
void OAIGetOrganizationDevicesAvailabilities_200_response_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationDevicesAvailabilities_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
