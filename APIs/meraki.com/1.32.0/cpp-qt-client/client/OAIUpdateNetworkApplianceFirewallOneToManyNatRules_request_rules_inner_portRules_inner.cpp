/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::~OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner() {}

void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::initializeModel() {

    m_allowed_ips_isSet = false;
    m_allowed_ips_isValid = false;

    m_local_ip_isSet = false;
    m_local_ip_isValid = false;

    m_local_port_isSet = false;
    m_local_port_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_public_port_isSet = false;
    m_public_port_isValid = false;
}

void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::fromJsonObject(QJsonObject json) {

    m_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_allowed_ips, json[QString("allowedIps")]);
    m_allowed_ips_isSet = !json[QString("allowedIps")].isNull() && m_allowed_ips_isValid;

    m_local_ip_isValid = ::OpenAPI::fromJsonValue(m_local_ip, json[QString("localIp")]);
    m_local_ip_isSet = !json[QString("localIp")].isNull() && m_local_ip_isValid;

    m_local_port_isValid = ::OpenAPI::fromJsonValue(m_local_port, json[QString("localPort")]);
    m_local_port_isSet = !json[QString("localPort")].isNull() && m_local_port_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_public_port_isValid = ::OpenAPI::fromJsonValue(m_public_port, json[QString("publicPort")]);
    m_public_port_isSet = !json[QString("publicPort")].isNull() && m_public_port_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_ips.size() > 0) {
        obj.insert(QString("allowedIps"), ::OpenAPI::toJsonValue(m_allowed_ips));
    }
    if (m_local_ip_isSet) {
        obj.insert(QString("localIp"), ::OpenAPI::toJsonValue(m_local_ip));
    }
    if (m_local_port_isSet) {
        obj.insert(QString("localPort"), ::OpenAPI::toJsonValue(m_local_port));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_public_port_isSet) {
        obj.insert(QString("publicPort"), ::OpenAPI::toJsonValue(m_public_port));
    }
    return obj;
}

QList<QString> OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::getAllowedIps() const {
    return m_allowed_ips;
}
void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::setAllowedIps(const QList<QString> &allowed_ips) {
    m_allowed_ips = allowed_ips;
    m_allowed_ips_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_allowed_ips_Set() const{
    return m_allowed_ips_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_allowed_ips_Valid() const{
    return m_allowed_ips_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::getLocalIp() const {
    return m_local_ip;
}
void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::setLocalIp(const QString &local_ip) {
    m_local_ip = local_ip;
    m_local_ip_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_local_ip_Set() const{
    return m_local_ip_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_local_ip_Valid() const{
    return m_local_ip_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::getLocalPort() const {
    return m_local_port;
}
void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::setLocalPort(const QString &local_port) {
    m_local_port = local_port;
    m_local_port_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_local_port_Set() const{
    return m_local_port_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_local_port_Valid() const{
    return m_local_port_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::getName() const {
    return m_name;
}
void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::getProtocol() const {
    return m_protocol;
}
void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::getPublicPort() const {
    return m_public_port;
}
void OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::setPublicPort(const QString &public_port) {
    m_public_port = public_port;
    m_public_port_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_public_port_Set() const{
    return m_public_port_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::is_public_port_Valid() const{
    return m_public_port_isValid;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner_portRules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
