/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRfProfilesApi_H
#define OAI_OAIRfProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkWirelessRfProfile_201_response.h"
#include "OAICreateNetworkWirelessRfProfile_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkWirelessRfProfile_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRfProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIRfProfilesApi(const int timeOut = 0);
    ~OAIRfProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_wireless_rf_profile_request OAICreateNetworkWirelessRfProfile_request [required]
    */
    virtual void createNetworkWirelessRfProfile(const QString &network_id, const OAICreateNetworkWirelessRfProfile_request &oai_create_network_wireless_rf_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    */
    virtual void deleteNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    */
    virtual void getNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  include_template_profiles bool [optional]
    */
    virtual void getNetworkWirelessRfProfiles(const QString &network_id, const ::OpenAPI::OptionalParam<bool> &include_template_profiles = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    * @param[in]  oai_update_network_wireless_rf_profile_request OAIUpdateNetworkWirelessRfProfile_request [optional]
    */
    virtual void updateNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessRfProfile_request> &oai_update_network_wireless_rf_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessRfProfile_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfilesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkWirelessRfProfileSignal(OAICreateNetworkWirelessRfProfile_201_response summary);
    void deleteNetworkWirelessRfProfileSignal();
    void getNetworkWirelessRfProfileSignal(OAIObject summary);
    void getNetworkWirelessRfProfilesSignal(QList<OAIObject> summary);
    void updateNetworkWirelessRfProfileSignal(OAICreateNetworkWirelessRfProfile_201_response summary);


    void createNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWirelessRfProfile_201_response summary);
    void deleteNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessRfProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWirelessRfProfile_201_response summary);

    Q_DECL_DEPRECATED_X("Use createNetworkWirelessRfProfileSignalError() instead")
    void createNetworkWirelessRfProfileSignalE(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessRfProfileSignalError(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessRfProfileSignalError() instead")
    void deleteNetworkWirelessRfProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessRfProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfileSignalError() instead")
    void getNetworkWirelessRfProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfilesSignalError() instead")
    void getNetworkWirelessRfProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessRfProfileSignalError() instead")
    void updateNetworkWirelessRfProfileSignalE(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessRfProfileSignalError(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkWirelessRfProfileSignalErrorFull() instead")
    void createNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessRfProfileSignalErrorFull() instead")
    void deleteNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfileSignalErrorFull() instead")
    void getNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfilesSignalErrorFull() instead")
    void getNetworkWirelessRfProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessRfProfileSignalErrorFull() instead")
    void updateNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
