/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkGroupPolicy_request_contentFiltering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkGroupPolicy_request_contentFiltering::OAICreateNetworkGroupPolicy_request_contentFiltering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkGroupPolicy_request_contentFiltering::OAICreateNetworkGroupPolicy_request_contentFiltering() {
    this->initializeModel();
}

OAICreateNetworkGroupPolicy_request_contentFiltering::~OAICreateNetworkGroupPolicy_request_contentFiltering() {}

void OAICreateNetworkGroupPolicy_request_contentFiltering::initializeModel() {

    m_allowed_url_patterns_isSet = false;
    m_allowed_url_patterns_isValid = false;

    m_blocked_url_categories_isSet = false;
    m_blocked_url_categories_isValid = false;

    m_blocked_url_patterns_isSet = false;
    m_blocked_url_patterns_isValid = false;
}

void OAICreateNetworkGroupPolicy_request_contentFiltering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkGroupPolicy_request_contentFiltering::fromJsonObject(QJsonObject json) {

    m_allowed_url_patterns_isValid = ::OpenAPI::fromJsonValue(m_allowed_url_patterns, json[QString("allowedUrlPatterns")]);
    m_allowed_url_patterns_isSet = !json[QString("allowedUrlPatterns")].isNull() && m_allowed_url_patterns_isValid;

    m_blocked_url_categories_isValid = ::OpenAPI::fromJsonValue(m_blocked_url_categories, json[QString("blockedUrlCategories")]);
    m_blocked_url_categories_isSet = !json[QString("blockedUrlCategories")].isNull() && m_blocked_url_categories_isValid;

    m_blocked_url_patterns_isValid = ::OpenAPI::fromJsonValue(m_blocked_url_patterns, json[QString("blockedUrlPatterns")]);
    m_blocked_url_patterns_isSet = !json[QString("blockedUrlPatterns")].isNull() && m_blocked_url_patterns_isValid;
}

QString OAICreateNetworkGroupPolicy_request_contentFiltering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkGroupPolicy_request_contentFiltering::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_url_patterns.isSet()) {
        obj.insert(QString("allowedUrlPatterns"), ::OpenAPI::toJsonValue(m_allowed_url_patterns));
    }
    if (m_blocked_url_categories.isSet()) {
        obj.insert(QString("blockedUrlCategories"), ::OpenAPI::toJsonValue(m_blocked_url_categories));
    }
    if (m_blocked_url_patterns.isSet()) {
        obj.insert(QString("blockedUrlPatterns"), ::OpenAPI::toJsonValue(m_blocked_url_patterns));
    }
    return obj;
}

OAICreateNetworkGroupPolicy_request_contentFiltering_allowedUrlPatterns OAICreateNetworkGroupPolicy_request_contentFiltering::getAllowedUrlPatterns() const {
    return m_allowed_url_patterns;
}
void OAICreateNetworkGroupPolicy_request_contentFiltering::setAllowedUrlPatterns(const OAICreateNetworkGroupPolicy_request_contentFiltering_allowedUrlPatterns &allowed_url_patterns) {
    m_allowed_url_patterns = allowed_url_patterns;
    m_allowed_url_patterns_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::is_allowed_url_patterns_Set() const{
    return m_allowed_url_patterns_isSet;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::is_allowed_url_patterns_Valid() const{
    return m_allowed_url_patterns_isValid;
}

OAICreateNetworkGroupPolicy_request_contentFiltering_blockedUrlCategories OAICreateNetworkGroupPolicy_request_contentFiltering::getBlockedUrlCategories() const {
    return m_blocked_url_categories;
}
void OAICreateNetworkGroupPolicy_request_contentFiltering::setBlockedUrlCategories(const OAICreateNetworkGroupPolicy_request_contentFiltering_blockedUrlCategories &blocked_url_categories) {
    m_blocked_url_categories = blocked_url_categories;
    m_blocked_url_categories_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::is_blocked_url_categories_Set() const{
    return m_blocked_url_categories_isSet;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::is_blocked_url_categories_Valid() const{
    return m_blocked_url_categories_isValid;
}

OAICreateNetworkGroupPolicy_request_contentFiltering_blockedUrlPatterns OAICreateNetworkGroupPolicy_request_contentFiltering::getBlockedUrlPatterns() const {
    return m_blocked_url_patterns;
}
void OAICreateNetworkGroupPolicy_request_contentFiltering::setBlockedUrlPatterns(const OAICreateNetworkGroupPolicy_request_contentFiltering_blockedUrlPatterns &blocked_url_patterns) {
    m_blocked_url_patterns = blocked_url_patterns;
    m_blocked_url_patterns_isSet = true;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::is_blocked_url_patterns_Set() const{
    return m_blocked_url_patterns_isSet;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::is_blocked_url_patterns_Valid() const{
    return m_blocked_url_patterns_isValid;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_url_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_url_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_url_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkGroupPolicy_request_contentFiltering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
