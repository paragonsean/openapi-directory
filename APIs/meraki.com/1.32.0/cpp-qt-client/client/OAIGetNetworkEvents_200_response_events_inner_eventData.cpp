/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkEvents_200_response_events_inner_eventData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkEvents_200_response_events_inner_eventData::OAIGetNetworkEvents_200_response_events_inner_eventData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkEvents_200_response_events_inner_eventData::OAIGetNetworkEvents_200_response_events_inner_eventData() {
    this->initializeModel();
}

OAIGetNetworkEvents_200_response_events_inner_eventData::~OAIGetNetworkEvents_200_response_events_inner_eventData() {}

void OAIGetNetworkEvents_200_response_events_inner_eventData::initializeModel() {

    m_aid_isSet = false;
    m_aid_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;

    m_client_mac_isSet = false;
    m_client_mac_isValid = false;

    m_radio_isSet = false;
    m_radio_isValid = false;

    m_rssi_isSet = false;
    m_rssi_isValid = false;

    m_vap_isSet = false;
    m_vap_isValid = false;
}

void OAIGetNetworkEvents_200_response_events_inner_eventData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkEvents_200_response_events_inner_eventData::fromJsonObject(QJsonObject json) {

    m_aid_isValid = ::OpenAPI::fromJsonValue(m_aid, json[QString("aid")]);
    m_aid_isSet = !json[QString("aid")].isNull() && m_aid_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("client_ip")]);
    m_client_ip_isSet = !json[QString("client_ip")].isNull() && m_client_ip_isValid;

    m_client_mac_isValid = ::OpenAPI::fromJsonValue(m_client_mac, json[QString("client_mac")]);
    m_client_mac_isSet = !json[QString("client_mac")].isNull() && m_client_mac_isValid;

    m_radio_isValid = ::OpenAPI::fromJsonValue(m_radio, json[QString("radio")]);
    m_radio_isSet = !json[QString("radio")].isNull() && m_radio_isValid;

    m_rssi_isValid = ::OpenAPI::fromJsonValue(m_rssi, json[QString("rssi")]);
    m_rssi_isSet = !json[QString("rssi")].isNull() && m_rssi_isValid;

    m_vap_isValid = ::OpenAPI::fromJsonValue(m_vap, json[QString("vap")]);
    m_vap_isSet = !json[QString("vap")].isNull() && m_vap_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkEvents_200_response_events_inner_eventData::asJsonObject() const {
    QJsonObject obj;
    if (m_aid_isSet) {
        obj.insert(QString("aid"), ::OpenAPI::toJsonValue(m_aid));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_client_ip_isSet) {
        obj.insert(QString("client_ip"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    if (m_client_mac_isSet) {
        obj.insert(QString("client_mac"), ::OpenAPI::toJsonValue(m_client_mac));
    }
    if (m_radio_isSet) {
        obj.insert(QString("radio"), ::OpenAPI::toJsonValue(m_radio));
    }
    if (m_rssi_isSet) {
        obj.insert(QString("rssi"), ::OpenAPI::toJsonValue(m_rssi));
    }
    if (m_vap_isSet) {
        obj.insert(QString("vap"), ::OpenAPI::toJsonValue(m_vap));
    }
    return obj;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getAid() const {
    return m_aid;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setAid(const QString &aid) {
    m_aid = aid;
    m_aid_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_aid_Set() const{
    return m_aid_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_aid_Valid() const{
    return m_aid_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getChannel() const {
    return m_channel;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getClientIp() const {
    return m_client_ip;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getClientMac() const {
    return m_client_mac;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setClientMac(const QString &client_mac) {
    m_client_mac = client_mac;
    m_client_mac_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_client_mac_Set() const{
    return m_client_mac_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_client_mac_Valid() const{
    return m_client_mac_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getRadio() const {
    return m_radio;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setRadio(const QString &radio) {
    m_radio = radio;
    m_radio_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_radio_Set() const{
    return m_radio_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_radio_Valid() const{
    return m_radio_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getRssi() const {
    return m_rssi;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setRssi(const QString &rssi) {
    m_rssi = rssi;
    m_rssi_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_rssi_Set() const{
    return m_rssi_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_rssi_Valid() const{
    return m_rssi_isValid;
}

QString OAIGetNetworkEvents_200_response_events_inner_eventData::getVap() const {
    return m_vap;
}
void OAIGetNetworkEvents_200_response_events_inner_eventData::setVap(const QString &vap) {
    m_vap = vap;
    m_vap_isSet = true;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_vap_Set() const{
    return m_vap_isSet;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::is_vap_Valid() const{
    return m_vap_isValid;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rssi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vap_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkEvents_200_response_events_inner_eventData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
