/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner_H
#define OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner : public OAIObject {
public:
    OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner();
    OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner(QString json);
    ~OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isHasTrustedPort() const;
    void setHasTrustedPort(const bool &has_trusted_port);
    bool is_has_trusted_port_Set() const;
    bool is_has_trusted_port_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSerial() const;
    void setSerial(const QString &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    bool isSupportsInspection() const;
    void setSupportsInspection(const bool &supports_inspection);
    bool is_supports_inspection_Set() const;
    bool is_supports_inspection_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_has_trusted_port;
    bool m_has_trusted_port_isSet;
    bool m_has_trusted_port_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;

    bool m_supports_inspection;
    bool m_supports_inspection_isSet;
    bool m_supports_inspection_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner)

#endif // OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner_H
