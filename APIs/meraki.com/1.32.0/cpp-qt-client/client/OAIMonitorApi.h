/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMonitorApi_H
#define OAI_OAIMonitorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGenerateDeviceCameraSnapshot_request.h"
#include "OAIGetAdministeredIdentitiesMe_200_response.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner.h"
#include "OAIGetDeviceWirelessConnectionStats_200_response.h"
#include "OAIGetNetworkAlertsHistory_200_response_inner.h"
#include "OAIGetNetworkClient_200_response.h"
#include "OAIGetNetworkClients_200_response.h"
#include "OAIGetNetworkEventsEventTypes_200_response_inner.h"
#include "OAIGetNetworkEvents_200_response.h"
#include "OAIGetNetworkInsightApplicationHealthByTime_200_response_inner.h"
#include "OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response.h"
#include "OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner.h"
#include "OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner.h"
#include "OAIGetNetworkSmDeviceConnectivity_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDesktopLogs_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner.h"
#include "OAIGetNetworkSmDevicePerformanceHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessClientCountHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessConnectionStats_200_response.h"
#include "OAIGetNetworkWirelessDataRateHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessFailedConnections_200_response_inner.h"
#include "OAIGetNetworkWirelessLatencyHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessSignalQualityHistory_200_response_inner.h"
#include "OAIGetNetworkWirelessUsageHistory_200_response_inner.h"
#include "OAIGetOrganizationAdaptivePolicyOverview_200_response.h"
#include "OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner.h"
#include "OAIGetOrganizationApiRequests_200_response_inner.h"
#include "OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner.h"
#include "OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner.h"
#include "OAIGetOrganizationClientsOverview_200_response.h"
#include "OAIGetOrganizationDevicesAvailabilities_200_response_inner.h"
#include "OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesStatusesOverview_200_response.h"
#include "OAIGetOrganizationDevicesStatuses_200_response.h"
#include "OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner.h"
#include "OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner.h"
#include "OAIGetOrganizationSensorReadingsHistory_200_response_inner.h"
#include "OAIGetOrganizationSensorReadingsLatest_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner.h"
#include "OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner.h"
#include "OAIGetOrganizationUplinksStatuses_200_response_inner.h"
#include "OAIGetOrganizationWebhooksLogs_200_response_inner.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMonitorApi : public QObject {
    Q_OBJECT

public:
    OAIMonitorApi(const int timeOut = 0);
    ~OAIMonitorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_generate_device_camera_snapshot_request OAIGenerateDeviceCameraSnapshot_request [optional]
    */
    virtual void generateDeviceCameraSnapshot(const QString &serial, const ::OpenAPI::OptionalParam<OAIGenerateDeviceCameraSnapshot_request> &oai_generate_device_camera_snapshot_request = ::OpenAPI::OptionalParam<OAIGenerateDeviceCameraSnapshot_request>());


    virtual void getAdministeredIdentitiesMe();

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceApplianceDhcpSubnets(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceAppliancePerformance(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceAppliancePrefixesDelegatedVlanAssignments(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceAppliancePrefixesDelegated(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraAnalyticsLive(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsOverview(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsRecent(const QString &serial, const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  zone_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsZoneHistory(const QString &serial, const QString &zone_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraAnalyticsZones(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceClients(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceLldpCdp(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  ip QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  uplink QString [optional]
    */
    virtual void getDeviceLossAndLatencyHistory(const QString &serial, const QString &ip, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatusesPackets(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatuses(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getDeviceWirelessConnectionStats(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getDeviceWirelessLatencyStats(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessStatus(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkAlertsHistory(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getNetworkApplianceClientSecurityEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getNetworkApplianceSecurityEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkApplianceUplinksUsageHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  bluetooth_client_id QString [required]
    * @param[in]  include_connectivity_history bool [optional]
    * @param[in]  connectivity_history_timespan qint32 [optional]
    */
    virtual void getNetworkBluetoothClient(const QString &network_id, const QString &bluetooth_client_id, const ::OpenAPI::OptionalParam<bool> &include_connectivity_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &connectivity_history_timespan = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  include_connectivity_history bool [optional]
    */
    virtual void getNetworkBluetoothClients(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_connectivity_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkClientTrafficHistory(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientUsageHistory(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClient(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  clients QString [required]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkClientsApplicationUsage(const QString &network_id, const QString &clients, const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkClientsBandwidthUsageHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkClientsOverview(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  clients QString [required]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkClientsUsageHistories(const QString &network_id, const QString &clients, const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  ip QString [optional]
    * @param[in]  ip6 QString [optional]
    * @param[in]  ip6_local QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  os QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  vlan QString [optional]
    * @param[in]  recent_device_connections QList<QString> [optional]
    */
    virtual void getNetworkClients(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip6 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip6_local = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recent_device_connections = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkEventsEventTypes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  product_type QString [optional]
    * @param[in]  included_event_types QList<QString> [optional]
    * @param[in]  excluded_event_types QList<QString> [optional]
    * @param[in]  device_mac QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  device_name QString [optional]
    * @param[in]  client_ip QString [optional]
    * @param[in]  client_mac QString [optional]
    * @param[in]  client_name QString [optional]
    * @param[in]  sm_device_mac QString [optional]
    * @param[in]  sm_device_name QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &excluded_event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &device_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sm_device_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sm_device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkInsightApplicationHealthByTime(const QString &network_id, const QString &application_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkNetworkHealthChannelUtilization(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorAlertsCurrentOverviewByMetric(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  interval qint32 [optional]
    */
    virtual void getNetworkSensorAlertsOverviewByMetric(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceCellularUsageHistory(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceConnectivity(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceDesktopLogs(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceDeviceCommandLogs(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDevicePerformanceHistory(const QString &network_id, const QString &device_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  login_identifier QString [optional]
    * @param[in]  timespan qint32 [optional]
    */
    virtual void getNetworkSplashLoginAttempts(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &login_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timespan = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTopologyLinkLayer(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  device_type QString [optional]
    */
    virtual void getNetworkTraffic(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &device_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkWirelessAirMarshal(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    */
    virtual void getNetworkWirelessChannelUtilizationHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessClientConnectionStats(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  types QList<QString> [optional]
    * @param[in]  included_severities QList<QString> [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  device_serial QString [optional]
    */
    virtual void getNetworkWirelessClientConnectivityEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_severities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessClientCountHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkWirelessClientLatencyHistory(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessClientLatencyStats(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessClientsConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessClientsLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessDataRateHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    */
    virtual void getNetworkWirelessDevicesConnectionStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessDevicesLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  client_id QString [optional]
    */
    virtual void getNetworkWirelessFailedConnections(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  access_category QString [optional]
    */
    virtual void getNetworkWirelessLatencyHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &access_category = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    * @param[in]  vlan qint32 [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getNetworkWirelessLatencyStats(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkWirelessMeshStatuses(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessSignalQualityHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  auto_resolution bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  ap_tag QString [optional]
    * @param[in]  band QString [optional]
    * @param[in]  ssid qint32 [optional]
    */
    virtual void getNetworkWirelessUsageHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ap_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ssid = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyOverview(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  interval qint32 [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  operation_ids QList<QString> [optional]
    * @param[in]  source_ips QList<QString> [optional]
    * @param[in]  admin_ids QList<QString> [optional]
    * @param[in]  user_agent QString [optional]
    */
    virtual void getOrganizationApiRequestsOverviewResponseCodesByInterval(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &operation_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_ips = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &admin_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationApiRequestsOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  admin_id QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  method QString [optional]
    * @param[in]  response_code qint32 [optional]
    * @param[in]  source_ip QString [optional]
    * @param[in]  user_agent QString [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  operation_ids QList<QString> [optional]
    */
    virtual void getOrganizationApiRequests(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &response_code = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &source_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &operation_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getOrganizationApplianceSecurityEvents(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceUplinkStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationApplianceVpnStats(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceVpnStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationCellularGatewayUplinkStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationClientsBandwidthUsageHistory(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationClientsOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_id QString [optional]
    * @param[in]  admin_id QString [optional]
    */
    virtual void getOrganizationConfigurationChanges(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesAvailabilities(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesPowerModulesStatusesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationDevicesStatusesOverview(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    */
    virtual void getOrganizationDevicesUplinksAddressesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  uplink QString [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void getOrganizationDevicesUplinksLossAndLatency(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationLicensesOverview(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationOpenapiSpec(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void getOrganizationSensorReadingsHistory(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void getOrganizationSensorReadingsLatest(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopAppliancesByUtilization(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopClientsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopClientsManufacturersByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopDevicesByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopDevicesModelsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopSsidsByUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationSummaryTopSwitchesByEnergyUsage(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationUplinksStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  product_type QString [optional]
    */
    virtual void getOrganizationWebhooksAlertTypes(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  url QString [optional]
    */
    virtual void getOrganizationWebhooksLogs(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateDeviceCameraSnapshotCallback(OAIHttpRequestWorker *worker);
    void getAdministeredIdentitiesMeCallback(OAIHttpRequestWorker *worker);
    void getDeviceApplianceDhcpSubnetsCallback(OAIHttpRequestWorker *worker);
    void getDeviceAppliancePerformanceCallback(OAIHttpRequestWorker *worker);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsCallback(OAIHttpRequestWorker *worker);
    void getDeviceAppliancePrefixesDelegatedCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsLiveCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsOverviewCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsRecentCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsZoneHistoryCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsZonesCallback(OAIHttpRequestWorker *worker);
    void getDeviceClientsCallback(OAIHttpRequestWorker *worker);
    void getDeviceLldpCdpCallback(OAIHttpRequestWorker *worker);
    void getDeviceLossAndLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesPacketsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessStatusCallback(OAIHttpRequestWorker *worker);
    void getNetworkAlertsHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceClientSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceUplinksUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkBluetoothClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkBluetoothClientsCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientTrafficHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsApplicationUsageCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsBandwidthUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsOverviewCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsUsageHistoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsCallback(OAIHttpRequestWorker *worker);
    void getNetworkEventsEventTypesCallback(OAIHttpRequestWorker *worker);
    void getNetworkEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkInsightApplicationHealthByTimeCallback(OAIHttpRequestWorker *worker);
    void getNetworkNetworkHealthChannelUtilizationCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsCurrentOverviewByMetricCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsOverviewByMetricCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCellularUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceConnectivityCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDesktopLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDeviceCommandLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicePerformanceHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSplashLoginAttemptsCallback(OAIHttpRequestWorker *worker);
    void getNetworkTopologyLinkLayerCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessAirMarshalCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessChannelUtilizationHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientConnectivityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientCountHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientsConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessClientsLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDataRateHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDevicesConnectionStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessDevicesLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessFailedConnectionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessLatencyStatsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessMeshStatusesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSignalQualityHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApiRequestsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceUplinkStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCellularGatewayUplinkStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsBandwidthUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigurationChangesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesAvailabilitiesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesPowerModulesStatusesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesUplinksAddressesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesUplinksLossAndLatencyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicensesOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationOpenapiSpecCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSensorReadingsHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSensorReadingsLatestCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopAppliancesByUtilizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopClientsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopClientsManufacturersByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopDevicesByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopDevicesModelsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopSsidsByUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSummaryTopSwitchesByEnergyUsageCallback(OAIHttpRequestWorker *worker);
    void getOrganizationUplinksStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWebhooksAlertTypesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWebhooksLogsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateDeviceCameraSnapshotSignal(OAIObject summary);
    void getAdministeredIdentitiesMeSignal(OAIGetAdministeredIdentitiesMe_200_response summary);
    void getDeviceApplianceDhcpSubnetsSignal(QList<OAIObject> summary);
    void getDeviceAppliancePerformanceSignal(OAIObject summary);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignal(QList<OAIObject> summary);
    void getDeviceAppliancePrefixesDelegatedSignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsLiveSignal(OAIObject summary);
    void getDeviceCameraAnalyticsOverviewSignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsRecentSignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZoneHistorySignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZonesSignal(QList<OAIObject> summary);
    void getDeviceClientsSignal(QList<OAIObject> summary);
    void getDeviceLldpCdpSignal(OAIObject summary);
    void getDeviceLossAndLatencyHistorySignal(QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesPacketsSignal(QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesSignal(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getDeviceWirelessConnectionStatsSignal(OAIGetDeviceWirelessConnectionStats_200_response summary);
    void getDeviceWirelessLatencyStatsSignal(OAIObject summary);
    void getDeviceWirelessStatusSignal(OAIObject summary);
    void getNetworkAlertsHistorySignal(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary);
    void getNetworkApplianceClientSecurityEventsSignal(QList<OAIObject> summary);
    void getNetworkApplianceSecurityEventsSignal(QList<OAIObject> summary);
    void getNetworkApplianceUplinksUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkBluetoothClientSignal(OAIObject summary);
    void getNetworkBluetoothClientsSignal(QList<OAIObject> summary);
    void getNetworkClientTrafficHistorySignal(QList<OAIObject> summary);
    void getNetworkClientUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkClientSignal(OAIGetNetworkClient_200_response summary);
    void getNetworkClientsApplicationUsageSignal(QList<OAIObject> summary);
    void getNetworkClientsBandwidthUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkClientsOverviewSignal(OAIObject summary);
    void getNetworkClientsUsageHistoriesSignal(QList<OAIObject> summary);
    void getNetworkClientsSignal(OAIGetNetworkClients_200_response summary);
    void getNetworkEventsEventTypesSignal(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary);
    void getNetworkEventsSignal(OAIGetNetworkEvents_200_response summary);
    void getNetworkInsightApplicationHealthByTimeSignal(QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary);
    void getNetworkNetworkHealthChannelUtilizationSignal(QList<OAIObject> summary);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignal(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary);
    void getNetworkSensorAlertsOverviewByMetricSignal(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary);
    void getNetworkSmDeviceCellularUsageHistorySignal(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary);
    void getNetworkSmDeviceConnectivitySignal(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary);
    void getNetworkSmDeviceDesktopLogsSignal(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceCommandLogsSignal(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary);
    void getNetworkSmDevicePerformanceHistorySignal(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary);
    void getNetworkSplashLoginAttemptsSignal(QList<OAIObject> summary);
    void getNetworkTopologyLinkLayerSignal(OAIObject summary);
    void getNetworkTrafficSignal(QList<OAIObject> summary);
    void getNetworkWirelessAirMarshalSignal(QList<OAIObject> summary);
    void getNetworkWirelessChannelUtilizationHistorySignal(QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary);
    void getNetworkWirelessClientConnectionStatsSignal(OAIObject summary);
    void getNetworkWirelessClientConnectivityEventsSignal(QList<OAIObject> summary);
    void getNetworkWirelessClientCountHistorySignal(QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary);
    void getNetworkWirelessClientLatencyHistorySignal(QList<OAIObject> summary);
    void getNetworkWirelessClientLatencyStatsSignal(OAIObject summary);
    void getNetworkWirelessClientsConnectionStatsSignal(QList<OAIObject> summary);
    void getNetworkWirelessClientsLatencyStatsSignal(QList<OAIObject> summary);
    void getNetworkWirelessConnectionStatsSignal(OAIGetNetworkWirelessConnectionStats_200_response summary);
    void getNetworkWirelessDataRateHistorySignal(QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary);
    void getNetworkWirelessDevicesConnectionStatsSignal(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary);
    void getNetworkWirelessDevicesLatencyStatsSignal(QList<OAIObject> summary);
    void getNetworkWirelessFailedConnectionsSignal(QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary);
    void getNetworkWirelessLatencyHistorySignal(QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary);
    void getNetworkWirelessLatencyStatsSignal(OAIObject summary);
    void getNetworkWirelessMeshStatusesSignal(OAIObject summary);
    void getNetworkWirelessSignalQualityHistorySignal(QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary);
    void getNetworkWirelessUsageHistorySignal(QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary);
    void getOrganizationAdaptivePolicyOverviewSignal(OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignal(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary);
    void getOrganizationApiRequestsOverviewSignal(OAIObject summary);
    void getOrganizationApiRequestsSignal(QList<OAIGetOrganizationApiRequests_200_response_inner> summary);
    void getOrganizationApplianceSecurityEventsSignal(QList<OAIObject> summary);
    void getOrganizationApplianceUplinkStatusesSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatsSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignal(QList<OAIObject> summary);
    void getOrganizationCellularGatewayUplinkStatusesSignal(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary);
    void getOrganizationClientsBandwidthUsageHistorySignal(QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary);
    void getOrganizationClientsOverviewSignal(OAIGetOrganizationClientsOverview_200_response summary);
    void getOrganizationConfigurationChangesSignal(QList<OAIObject> summary);
    void getOrganizationDevicesAvailabilitiesSignal(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignal(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesOverviewSignal(OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesStatusesSignal(OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationDevicesUplinksAddressesByDeviceSignal(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary);
    void getOrganizationDevicesUplinksLossAndLatencySignal(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary);
    void getOrganizationLicensesOverviewSignal(OAIObject summary);
    void getOrganizationOpenapiSpecSignal(OAIObject summary);
    void getOrganizationSensorReadingsHistorySignal(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary);
    void getOrganizationSensorReadingsLatestSignal(QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary);
    void getOrganizationSummaryTopAppliancesByUtilizationSignal(QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary);
    void getOrganizationSummaryTopClientsByUsageSignal(QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignal(QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesByUsageSignal(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesModelsByUsageSignal(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSsidsByUsageSignal(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignal(QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary);
    void getOrganizationUplinksStatusesSignal(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary);
    void getOrganizationWebhooksAlertTypesSignal(QList<OAIObject> summary);
    void getOrganizationWebhooksLogsSignal(QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary);


    void generateDeviceCameraSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAdministeredIdentitiesMeSignalFull(OAIHttpRequestWorker *worker, OAIGetAdministeredIdentitiesMe_200_response summary);
    void getDeviceApplianceDhcpSubnetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceAppliancePerformanceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceAppliancePrefixesDelegatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsLiveSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraAnalyticsOverviewSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsRecentSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZoneHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZonesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceClientsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceLldpCdpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceLossAndLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesPacketsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchPortsStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getDeviceWirelessConnectionStatsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessConnectionStats_200_response summary);
    void getDeviceWirelessLatencyStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceWirelessStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkAlertsHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAlertsHistory_200_response_inner> summary);
    void getNetworkApplianceClientSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceUplinksUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkBluetoothClientSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkBluetoothClientsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientTrafficHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkClient_200_response summary);
    void getNetworkClientsApplicationUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsBandwidthUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientsUsageHistoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkClients_200_response summary);
    void getNetworkEventsEventTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary);
    void getNetworkEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkEvents_200_response summary);
    void getNetworkInsightApplicationHealthByTimeSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary);
    void getNetworkNetworkHealthChannelUtilizationSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary);
    void getNetworkSensorAlertsOverviewByMetricSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary);
    void getNetworkSmDeviceCellularUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary);
    void getNetworkSmDeviceConnectivitySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary);
    void getNetworkSmDeviceDesktopLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary);
    void getNetworkSmDeviceDeviceCommandLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary);
    void getNetworkSmDevicePerformanceHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary);
    void getNetworkSplashLoginAttemptsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkTopologyLinkLayerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessAirMarshalSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessChannelUtilizationHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary);
    void getNetworkWirelessClientConnectionStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessClientConnectivityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessClientCountHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary);
    void getNetworkWirelessClientLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessClientLatencyStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessClientsConnectionStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessClientsLatencyStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessConnectionStatsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessConnectionStats_200_response summary);
    void getNetworkWirelessDataRateHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary);
    void getNetworkWirelessDevicesConnectionStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceWirelessConnectionStats_200_response> summary);
    void getNetworkWirelessDevicesLatencyStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessFailedConnectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary);
    void getNetworkWirelessLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary);
    void getNetworkWirelessLatencyStatsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessMeshStatusesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSignalQualityHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary);
    void getNetworkWirelessUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary);
    void getOrganizationAdaptivePolicyOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary);
    void getOrganizationApiRequestsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationApiRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationApiRequests_200_response_inner> summary);
    void getOrganizationApplianceSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceUplinkStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationCellularGatewayUplinkStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary);
    void getOrganizationClientsBandwidthUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary);
    void getOrganizationClientsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationClientsOverview_200_response summary);
    void getOrganizationConfigurationChangesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationDevicesAvailabilitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary);
    void getOrganizationDevicesStatusesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatusesOverview_200_response summary);
    void getOrganizationDevicesStatusesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationDevicesStatuses_200_response summary);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary);
    void getOrganizationDevicesUplinksLossAndLatencySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary);
    void getOrganizationLicensesOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationOpenapiSpecSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSensorReadingsHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary);
    void getOrganizationSensorReadingsLatestSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary);
    void getOrganizationSummaryTopAppliancesByUtilizationSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary);
    void getOrganizationSummaryTopClientsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSsidsByUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary);
    void getOrganizationUplinksStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary);
    void getOrganizationWebhooksAlertTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationWebhooksLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use generateDeviceCameraSnapshotSignalError() instead")
    void generateDeviceCameraSnapshotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDeviceCameraSnapshotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdministeredIdentitiesMeSignalError() instead")
    void getAdministeredIdentitiesMeSignalE(OAIGetAdministeredIdentitiesMe_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdministeredIdentitiesMeSignalError(OAIGetAdministeredIdentitiesMe_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceDhcpSubnetsSignalError() instead")
    void getDeviceApplianceDhcpSubnetsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceDhcpSubnetsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePerformanceSignalError() instead")
    void getDeviceAppliancePerformanceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePerformanceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalError() instead")
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedSignalError() instead")
    void getDeviceAppliancePrefixesDelegatedSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsLiveSignalError() instead")
    void getDeviceCameraAnalyticsLiveSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsLiveSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsOverviewSignalError() instead")
    void getDeviceCameraAnalyticsOverviewSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsOverviewSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsRecentSignalError() instead")
    void getDeviceCameraAnalyticsRecentSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsRecentSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZoneHistorySignalError() instead")
    void getDeviceCameraAnalyticsZoneHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZoneHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZonesSignalError() instead")
    void getDeviceCameraAnalyticsZonesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZonesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceClientsSignalError() instead")
    void getDeviceClientsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceClientsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLldpCdpSignalError() instead")
    void getDeviceLldpCdpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLldpCdpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLossAndLatencyHistorySignalError() instead")
    void getDeviceLossAndLatencyHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLossAndLatencyHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalError() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalError() instead")
    void getDeviceSwitchPortsStatusesSignalE(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalError(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessConnectionStatsSignalError() instead")
    void getDeviceWirelessConnectionStatsSignalE(OAIGetDeviceWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessConnectionStatsSignalError(OAIGetDeviceWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessLatencyStatsSignalError() instead")
    void getDeviceWirelessLatencyStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessLatencyStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessStatusSignalError() instead")
    void getDeviceWirelessStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsHistorySignalError() instead")
    void getNetworkAlertsHistorySignalE(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsHistorySignalError(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceClientSecurityEventsSignalError() instead")
    void getNetworkApplianceClientSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceClientSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityEventsSignalError() instead")
    void getNetworkApplianceSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceUplinksUsageHistorySignalError() instead")
    void getNetworkApplianceUplinksUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceUplinksUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientSignalError() instead")
    void getNetworkBluetoothClientSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientsSignalError() instead")
    void getNetworkBluetoothClientsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientTrafficHistorySignalError() instead")
    void getNetworkClientTrafficHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientTrafficHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientUsageHistorySignalError() instead")
    void getNetworkClientUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSignalError() instead")
    void getNetworkClientSignalE(OAIGetNetworkClient_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSignalError(OAIGetNetworkClient_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsApplicationUsageSignalError() instead")
    void getNetworkClientsApplicationUsageSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsApplicationUsageSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsBandwidthUsageHistorySignalError() instead")
    void getNetworkClientsBandwidthUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsBandwidthUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsOverviewSignalError() instead")
    void getNetworkClientsOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsUsageHistoriesSignalError() instead")
    void getNetworkClientsUsageHistoriesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsUsageHistoriesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsSignalError() instead")
    void getNetworkClientsSignalE(OAIGetNetworkClients_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsSignalError(OAIGetNetworkClients_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsEventTypesSignalError() instead")
    void getNetworkEventsEventTypesSignalE(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsEventTypesSignalError(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsSignalError() instead")
    void getNetworkEventsSignalE(OAIGetNetworkEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsSignalError(OAIGetNetworkEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkInsightApplicationHealthByTimeSignalError() instead")
    void getNetworkInsightApplicationHealthByTimeSignalE(QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkInsightApplicationHealthByTimeSignalError(QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetworkHealthChannelUtilizationSignalError() instead")
    void getNetworkNetworkHealthChannelUtilizationSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetworkHealthChannelUtilizationSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsCurrentOverviewByMetricSignalError() instead")
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalE(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalError(OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsOverviewByMetricSignalError() instead")
    void getNetworkSensorAlertsOverviewByMetricSignalE(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsOverviewByMetricSignalError(QList<OAIGetNetworkSensorAlertsOverviewByMetric_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCellularUsageHistorySignalError() instead")
    void getNetworkSmDeviceCellularUsageHistorySignalE(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCellularUsageHistorySignalError(QList<OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceConnectivitySignalError() instead")
    void getNetworkSmDeviceConnectivitySignalE(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceConnectivitySignalError(QList<OAIGetNetworkSmDeviceConnectivity_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDesktopLogsSignalError() instead")
    void getNetworkSmDeviceDesktopLogsSignalE(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDesktopLogsSignalError(QList<OAIGetNetworkSmDeviceDesktopLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceCommandLogsSignalError() instead")
    void getNetworkSmDeviceDeviceCommandLogsSignalE(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceCommandLogsSignalError(QList<OAIGetNetworkSmDeviceDeviceCommandLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicePerformanceHistorySignalError() instead")
    void getNetworkSmDevicePerformanceHistorySignalE(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicePerformanceHistorySignalError(QList<OAIGetNetworkSmDevicePerformanceHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSplashLoginAttemptsSignalError() instead")
    void getNetworkSplashLoginAttemptsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSplashLoginAttemptsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTopologyLinkLayerSignalError() instead")
    void getNetworkTopologyLinkLayerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTopologyLinkLayerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficSignalError() instead")
    void getNetworkTrafficSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAirMarshalSignalError() instead")
    void getNetworkWirelessAirMarshalSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAirMarshalSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessChannelUtilizationHistorySignalError() instead")
    void getNetworkWirelessChannelUtilizationHistorySignalE(QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessChannelUtilizationHistorySignalError(QList<OAIGetNetworkWirelessChannelUtilizationHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectionStatsSignalError() instead")
    void getNetworkWirelessClientConnectionStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectionStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectivityEventsSignalError() instead")
    void getNetworkWirelessClientConnectivityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectivityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientCountHistorySignalError() instead")
    void getNetworkWirelessClientCountHistorySignalE(QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientCountHistorySignalError(QList<OAIGetNetworkWirelessClientCountHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyHistorySignalError() instead")
    void getNetworkWirelessClientLatencyHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyStatsSignalError() instead")
    void getNetworkWirelessClientLatencyStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsConnectionStatsSignalError() instead")
    void getNetworkWirelessClientsConnectionStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsConnectionStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsLatencyStatsSignalError() instead")
    void getNetworkWirelessClientsLatencyStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsLatencyStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessConnectionStatsSignalError() instead")
    void getNetworkWirelessConnectionStatsSignalE(OAIGetNetworkWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessConnectionStatsSignalError(OAIGetNetworkWirelessConnectionStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDataRateHistorySignalError() instead")
    void getNetworkWirelessDataRateHistorySignalE(QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDataRateHistorySignalError(QList<OAIGetNetworkWirelessDataRateHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesConnectionStatsSignalError() instead")
    void getNetworkWirelessDevicesConnectionStatsSignalE(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesConnectionStatsSignalError(QList<OAIGetDeviceWirelessConnectionStats_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesLatencyStatsSignalError() instead")
    void getNetworkWirelessDevicesLatencyStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesLatencyStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessFailedConnectionsSignalError() instead")
    void getNetworkWirelessFailedConnectionsSignalE(QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessFailedConnectionsSignalError(QList<OAIGetNetworkWirelessFailedConnections_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyHistorySignalError() instead")
    void getNetworkWirelessLatencyHistorySignalE(QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyHistorySignalError(QList<OAIGetNetworkWirelessLatencyHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyStatsSignalError() instead")
    void getNetworkWirelessLatencyStatsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyStatsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessMeshStatusesSignalError() instead")
    void getNetworkWirelessMeshStatusesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessMeshStatusesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSignalQualityHistorySignalError() instead")
    void getNetworkWirelessSignalQualityHistorySignalE(QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSignalQualityHistorySignalError(QList<OAIGetNetworkWirelessSignalQualityHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessUsageHistorySignalError() instead")
    void getNetworkWirelessUsageHistorySignalE(QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessUsageHistorySignalError(QList<OAIGetNetworkWirelessUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalError() instead")
    void getOrganizationAdaptivePolicyOverviewSignalE(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalError(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalError() instead")
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalE(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalError(QList<OAIGetOrganizationApiRequestsOverviewResponseCodesByInterval_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewSignalError() instead")
    void getOrganizationApiRequestsOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsSignalError() instead")
    void getOrganizationApiRequestsSignalE(QList<OAIGetOrganizationApiRequests_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsSignalError(QList<OAIGetOrganizationApiRequests_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityEventsSignalError() instead")
    void getOrganizationApplianceSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceUplinkStatusesSignalError() instead")
    void getOrganizationApplianceUplinkStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceUplinkStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatsSignalError() instead")
    void getOrganizationApplianceVpnStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalError() instead")
    void getOrganizationApplianceVpnStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCellularGatewayUplinkStatusesSignalError() instead")
    void getOrganizationCellularGatewayUplinkStatusesSignalE(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCellularGatewayUplinkStatusesSignalError(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsBandwidthUsageHistorySignalError() instead")
    void getOrganizationClientsBandwidthUsageHistorySignalE(QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsBandwidthUsageHistorySignalError(QList<OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsOverviewSignalError() instead")
    void getOrganizationClientsOverviewSignalE(OAIGetOrganizationClientsOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsOverviewSignalError(OAIGetOrganizationClientsOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigurationChangesSignalError() instead")
    void getOrganizationConfigurationChangesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigurationChangesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesAvailabilitiesSignalError() instead")
    void getOrganizationDevicesAvailabilitiesSignalE(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesAvailabilitiesSignalError(QList<OAIGetOrganizationDevicesAvailabilities_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalError() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalE(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalError(QList<OAIGetOrganizationDevicesPowerModulesStatusesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalError() instead")
    void getOrganizationDevicesStatusesOverviewSignalE(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalError(OAIGetOrganizationDevicesStatusesOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalError() instead")
    void getOrganizationDevicesStatusesSignalE(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalError(OAIGetOrganizationDevicesStatuses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksAddressesByDeviceSignalError() instead")
    void getOrganizationDevicesUplinksAddressesByDeviceSignalE(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalError(QList<OAIGetOrganizationDevicesUplinksAddressesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksLossAndLatencySignalError() instead")
    void getOrganizationDevicesUplinksLossAndLatencySignalE(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksLossAndLatencySignalError(QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesOverviewSignalError() instead")
    void getOrganizationLicensesOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationOpenapiSpecSignalError() instead")
    void getOrganizationOpenapiSpecSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationOpenapiSpecSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsHistorySignalError() instead")
    void getOrganizationSensorReadingsHistorySignalE(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsHistorySignalError(QList<OAIGetOrganizationSensorReadingsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsLatestSignalError() instead")
    void getOrganizationSensorReadingsLatestSignalE(QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsLatestSignalError(QList<OAIGetOrganizationSensorReadingsLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopAppliancesByUtilizationSignalError() instead")
    void getOrganizationSummaryTopAppliancesByUtilizationSignalE(QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopAppliancesByUtilizationSignalError(QList<OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsByUsageSignalError() instead")
    void getOrganizationSummaryTopClientsByUsageSignalE(QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsByUsageSignalError(QList<OAIGetOrganizationSummaryTopClientsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsManufacturersByUsageSignalError() instead")
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalE(QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalError(QList<OAIGetOrganizationSummaryTopClientsManufacturersByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesByUsageSignalError() instead")
    void getOrganizationSummaryTopDevicesByUsageSignalE(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesByUsageSignalError(QList<OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesModelsByUsageSignalError() instead")
    void getOrganizationSummaryTopDevicesModelsByUsageSignalE(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalError(QList<OAIGetOrganizationSummaryTopDevicesModelsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSsidsByUsageSignalError() instead")
    void getOrganizationSummaryTopSsidsByUsageSignalE(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSsidsByUsageSignalError(QList<OAIGetOrganizationSummaryTopSsidsByUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSwitchesByEnergyUsageSignalError() instead")
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalE(QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalError(QList<OAIGetOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksStatusesSignalError() instead")
    void getOrganizationUplinksStatusesSignalE(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksStatusesSignalError(QList<OAIGetOrganizationUplinksStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksAlertTypesSignalError() instead")
    void getOrganizationWebhooksAlertTypesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksAlertTypesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksLogsSignalError() instead")
    void getOrganizationWebhooksLogsSignalE(QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksLogsSignalError(QList<OAIGetOrganizationWebhooksLogs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateDeviceCameraSnapshotSignalErrorFull() instead")
    void generateDeviceCameraSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDeviceCameraSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdministeredIdentitiesMeSignalErrorFull() instead")
    void getAdministeredIdentitiesMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdministeredIdentitiesMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceDhcpSubnetsSignalErrorFull() instead")
    void getDeviceApplianceDhcpSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceDhcpSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePerformanceSignalErrorFull() instead")
    void getDeviceAppliancePerformanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePerformanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalErrorFull() instead")
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedSignalErrorFull() instead")
    void getDeviceAppliancePrefixesDelegatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsLiveSignalErrorFull() instead")
    void getDeviceCameraAnalyticsLiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsLiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsOverviewSignalErrorFull() instead")
    void getDeviceCameraAnalyticsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsRecentSignalErrorFull() instead")
    void getDeviceCameraAnalyticsRecentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsRecentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZoneHistorySignalErrorFull() instead")
    void getDeviceCameraAnalyticsZoneHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZoneHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZonesSignalErrorFull() instead")
    void getDeviceCameraAnalyticsZonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceClientsSignalErrorFull() instead")
    void getDeviceClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLldpCdpSignalErrorFull() instead")
    void getDeviceLldpCdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLldpCdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLossAndLatencyHistorySignalErrorFull() instead")
    void getDeviceLossAndLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLossAndLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessConnectionStatsSignalErrorFull() instead")
    void getDeviceWirelessConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessLatencyStatsSignalErrorFull() instead")
    void getDeviceWirelessLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessStatusSignalErrorFull() instead")
    void getDeviceWirelessStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsHistorySignalErrorFull() instead")
    void getNetworkAlertsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceClientSecurityEventsSignalErrorFull() instead")
    void getNetworkApplianceClientSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceClientSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityEventsSignalErrorFull() instead")
    void getNetworkApplianceSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceUplinksUsageHistorySignalErrorFull() instead")
    void getNetworkApplianceUplinksUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceUplinksUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientSignalErrorFull() instead")
    void getNetworkBluetoothClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientsSignalErrorFull() instead")
    void getNetworkBluetoothClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientTrafficHistorySignalErrorFull() instead")
    void getNetworkClientTrafficHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientTrafficHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientUsageHistorySignalErrorFull() instead")
    void getNetworkClientUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSignalErrorFull() instead")
    void getNetworkClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsApplicationUsageSignalErrorFull() instead")
    void getNetworkClientsApplicationUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsApplicationUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsBandwidthUsageHistorySignalErrorFull() instead")
    void getNetworkClientsBandwidthUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsBandwidthUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsOverviewSignalErrorFull() instead")
    void getNetworkClientsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsUsageHistoriesSignalErrorFull() instead")
    void getNetworkClientsUsageHistoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsUsageHistoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsSignalErrorFull() instead")
    void getNetworkClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsEventTypesSignalErrorFull() instead")
    void getNetworkEventsEventTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsEventTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsSignalErrorFull() instead")
    void getNetworkEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkInsightApplicationHealthByTimeSignalErrorFull() instead")
    void getNetworkInsightApplicationHealthByTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkInsightApplicationHealthByTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetworkHealthChannelUtilizationSignalErrorFull() instead")
    void getNetworkNetworkHealthChannelUtilizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetworkHealthChannelUtilizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsCurrentOverviewByMetricSignalErrorFull() instead")
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsCurrentOverviewByMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsOverviewByMetricSignalErrorFull() instead")
    void getNetworkSensorAlertsOverviewByMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsOverviewByMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCellularUsageHistorySignalErrorFull() instead")
    void getNetworkSmDeviceCellularUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCellularUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceConnectivitySignalErrorFull() instead")
    void getNetworkSmDeviceConnectivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceConnectivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDesktopLogsSignalErrorFull() instead")
    void getNetworkSmDeviceDesktopLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDesktopLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceCommandLogsSignalErrorFull() instead")
    void getNetworkSmDeviceDeviceCommandLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceCommandLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicePerformanceHistorySignalErrorFull() instead")
    void getNetworkSmDevicePerformanceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicePerformanceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSplashLoginAttemptsSignalErrorFull() instead")
    void getNetworkSplashLoginAttemptsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSplashLoginAttemptsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTopologyLinkLayerSignalErrorFull() instead")
    void getNetworkTopologyLinkLayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTopologyLinkLayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficSignalErrorFull() instead")
    void getNetworkTrafficSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAirMarshalSignalErrorFull() instead")
    void getNetworkWirelessAirMarshalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAirMarshalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessChannelUtilizationHistorySignalErrorFull() instead")
    void getNetworkWirelessChannelUtilizationHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessChannelUtilizationHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessClientConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientConnectivityEventsSignalErrorFull() instead")
    void getNetworkWirelessClientConnectivityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientConnectivityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientCountHistorySignalErrorFull() instead")
    void getNetworkWirelessClientCountHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientCountHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyHistorySignalErrorFull() instead")
    void getNetworkWirelessClientLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessClientLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessClientsConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessClientsLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessClientsLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessClientsLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDataRateHistorySignalErrorFull() instead")
    void getNetworkWirelessDataRateHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDataRateHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesConnectionStatsSignalErrorFull() instead")
    void getNetworkWirelessDevicesConnectionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesConnectionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessDevicesLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessDevicesLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessDevicesLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessFailedConnectionsSignalErrorFull() instead")
    void getNetworkWirelessFailedConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessFailedConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyHistorySignalErrorFull() instead")
    void getNetworkWirelessLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessLatencyStatsSignalErrorFull() instead")
    void getNetworkWirelessLatencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessLatencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessMeshStatusesSignalErrorFull() instead")
    void getNetworkWirelessMeshStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessMeshStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSignalQualityHistorySignalErrorFull() instead")
    void getNetworkWirelessSignalQualityHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSignalQualityHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessUsageHistorySignalErrorFull() instead")
    void getNetworkWirelessUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalErrorFull() instead")
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewResponseCodesByIntervalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsOverviewSignalErrorFull() instead")
    void getOrganizationApiRequestsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApiRequestsSignalErrorFull() instead")
    void getOrganizationApiRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApiRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityEventsSignalErrorFull() instead")
    void getOrganizationApplianceSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceUplinkStatusesSignalErrorFull() instead")
    void getOrganizationApplianceUplinkStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceUplinkStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatsSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCellularGatewayUplinkStatusesSignalErrorFull() instead")
    void getOrganizationCellularGatewayUplinkStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCellularGatewayUplinkStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsBandwidthUsageHistorySignalErrorFull() instead")
    void getOrganizationClientsBandwidthUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsBandwidthUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsOverviewSignalErrorFull() instead")
    void getOrganizationClientsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigurationChangesSignalErrorFull() instead")
    void getOrganizationConfigurationChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigurationChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesAvailabilitiesSignalErrorFull() instead")
    void getOrganizationDevicesAvailabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesAvailabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesPowerModulesStatusesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesOverviewSignalErrorFull() instead")
    void getOrganizationDevicesStatusesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesStatusesSignalErrorFull() instead")
    void getOrganizationDevicesStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksAddressesByDeviceSignalErrorFull() instead")
    void getOrganizationDevicesUplinksAddressesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksAddressesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesUplinksLossAndLatencySignalErrorFull() instead")
    void getOrganizationDevicesUplinksLossAndLatencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesUplinksLossAndLatencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesOverviewSignalErrorFull() instead")
    void getOrganizationLicensesOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationOpenapiSpecSignalErrorFull() instead")
    void getOrganizationOpenapiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationOpenapiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsHistorySignalErrorFull() instead")
    void getOrganizationSensorReadingsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSensorReadingsLatestSignalErrorFull() instead")
    void getOrganizationSensorReadingsLatestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSensorReadingsLatestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopAppliancesByUtilizationSignalErrorFull() instead")
    void getOrganizationSummaryTopAppliancesByUtilizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopAppliancesByUtilizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopClientsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopClientsManufacturersByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopClientsManufacturersByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopDevicesByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopDevicesModelsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopDevicesModelsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopDevicesModelsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSsidsByUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopSsidsByUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSsidsByUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSummaryTopSwitchesByEnergyUsageSignalErrorFull() instead")
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSummaryTopSwitchesByEnergyUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksStatusesSignalErrorFull() instead")
    void getOrganizationUplinksStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksAlertTypesSignalErrorFull() instead")
    void getOrganizationWebhooksAlertTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksAlertTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWebhooksLogsSignalErrorFull() instead")
    void getOrganizationWebhooksLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWebhooksLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
