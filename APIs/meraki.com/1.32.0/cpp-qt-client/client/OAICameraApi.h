/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICameraApi_H
#define OAI_OAICameraApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkCameraQualityRetentionProfile_request.h"
#include "OAICreateNetworkCameraWirelessProfile_request.h"
#include "OAICreateOrganizationCameraCustomAnalyticsArtifact_request.h"
#include "OAIGenerateDeviceCameraSnapshot_request.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceCameraCustomAnalytics_request.h"
#include "OAIUpdateDeviceCameraQualityAndRetention_request.h"
#include "OAIUpdateDeviceCameraSense_request.h"
#include "OAIUpdateDeviceCameraVideoSettings_request.h"
#include "OAIUpdateDeviceCameraWirelessProfiles_request.h"
#include "OAIUpdateNetworkCameraQualityRetentionProfile_request.h"
#include "OAIUpdateNetworkCameraWirelessProfile_request.h"
#include "OAIUpdateOrganizationCameraOnboardingStatuses_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICameraApi : public QObject {
    Q_OBJECT

public:
    OAICameraApi(const int timeOut = 0);
    ~OAICameraApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_camera_quality_retention_profile_request OAICreateNetworkCameraQualityRetentionProfile_request [required]
    */
    virtual void createNetworkCameraQualityRetentionProfile(const QString &network_id, const OAICreateNetworkCameraQualityRetentionProfile_request &oai_create_network_camera_quality_retention_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_camera_wireless_profile_request OAICreateNetworkCameraWirelessProfile_request [required]
    */
    virtual void createNetworkCameraWirelessProfile(const QString &network_id, const OAICreateNetworkCameraWirelessProfile_request &oai_create_network_camera_wireless_profile_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_camera_custom_analytics_artifact_request OAICreateOrganizationCameraCustomAnalyticsArtifact_request [optional]
    */
    virtual void createOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const ::OpenAPI::OptionalParam<OAICreateOrganizationCameraCustomAnalyticsArtifact_request> &oai_create_organization_camera_custom_analytics_artifact_request = ::OpenAPI::OptionalParam<OAICreateOrganizationCameraCustomAnalyticsArtifact_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    */
    virtual void deleteNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    */
    virtual void deleteNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void deleteOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const QString &artifact_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_generate_device_camera_snapshot_request OAIGenerateDeviceCameraSnapshot_request [optional]
    */
    virtual void generateDeviceCameraSnapshot(const QString &serial, const ::OpenAPI::OptionalParam<OAIGenerateDeviceCameraSnapshot_request> &oai_generate_device_camera_snapshot_request = ::OpenAPI::OptionalParam<OAIGenerateDeviceCameraSnapshot_request>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraAnalyticsLive(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsOverview(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsRecent(const QString &serial, const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  zone_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  object_type QString [optional]
    */
    virtual void getDeviceCameraAnalyticsZoneHistory(const QString &serial, const QString &zone_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &object_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraAnalyticsZones(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraCustomAnalytics(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraQualityAndRetention(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraSense(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraSenseObjectDetectionModels(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  timestamp QDateTime [optional]
    */
    virtual void getDeviceCameraVideoLink(const QString &serial, const ::OpenAPI::OptionalParam<QDateTime> &timestamp = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraVideoSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraWirelessProfiles(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    */
    virtual void getNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraQualityRetentionProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraSchedules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    */
    virtual void getNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraWirelessProfiles(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void getOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const QString &artifact_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationCameraCustomAnalyticsArtifacts(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationCameraOnboardingStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_custom_analytics_request OAIUpdateDeviceCameraCustomAnalytics_request [optional]
    */
    virtual void updateDeviceCameraCustomAnalytics(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraCustomAnalytics_request> &oai_update_device_camera_custom_analytics_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraCustomAnalytics_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_quality_and_retention_request OAIUpdateDeviceCameraQualityAndRetention_request [optional]
    */
    virtual void updateDeviceCameraQualityAndRetention(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraQualityAndRetention_request> &oai_update_device_camera_quality_and_retention_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraQualityAndRetention_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_sense_request OAIUpdateDeviceCameraSense_request [optional]
    */
    virtual void updateDeviceCameraSense(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraSense_request> &oai_update_device_camera_sense_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraSense_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_video_settings_request OAIUpdateDeviceCameraVideoSettings_request [optional]
    */
    virtual void updateDeviceCameraVideoSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraVideoSettings_request> &oai_update_device_camera_video_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraVideoSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_wireless_profiles_request OAIUpdateDeviceCameraWirelessProfiles_request [required]
    */
    virtual void updateDeviceCameraWirelessProfiles(const QString &serial, const OAIUpdateDeviceCameraWirelessProfiles_request &oai_update_device_camera_wireless_profiles_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    * @param[in]  oai_update_network_camera_quality_retention_profile_request OAIUpdateNetworkCameraQualityRetentionProfile_request [optional]
    */
    virtual void updateNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraQualityRetentionProfile_request> &oai_update_network_camera_quality_retention_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraQualityRetentionProfile_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    * @param[in]  oai_update_network_camera_wireless_profile_request OAIUpdateNetworkCameraWirelessProfile_request [optional]
    */
    virtual void updateNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraWirelessProfile_request> &oai_update_network_camera_wireless_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraWirelessProfile_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_camera_onboarding_statuses_request OAIUpdateOrganizationCameraOnboardingStatuses_request [optional]
    */
    virtual void updateOrganizationCameraOnboardingStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationCameraOnboardingStatuses_request> &oai_update_organization_camera_onboarding_statuses_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationCameraOnboardingStatuses_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void createNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void createOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void generateDeviceCameraSnapshotCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsLiveCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsOverviewCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsRecentCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsZoneHistoryCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraAnalyticsZonesCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraCustomAnalyticsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraQualityAndRetentionCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraSenseCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraSenseObjectDetectionModelsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraVideoLinkCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraVideoSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraCustomAnalyticsArtifactsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraOnboardingStatusesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraCustomAnalyticsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraQualityAndRetentionCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraSenseCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraVideoSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCameraOnboardingStatusesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void createNetworkCameraWirelessProfileSignal(OAIObject summary);
    void createOrganizationCameraCustomAnalyticsArtifactSignal(OAIObject summary);
    void deleteNetworkCameraQualityRetentionProfileSignal();
    void deleteNetworkCameraWirelessProfileSignal();
    void deleteOrganizationCameraCustomAnalyticsArtifactSignal();
    void generateDeviceCameraSnapshotSignal(OAIObject summary);
    void getDeviceCameraAnalyticsLiveSignal(OAIObject summary);
    void getDeviceCameraAnalyticsOverviewSignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsRecentSignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZoneHistorySignal(QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZonesSignal(QList<OAIObject> summary);
    void getDeviceCameraCustomAnalyticsSignal(OAIObject summary);
    void getDeviceCameraQualityAndRetentionSignal(OAIObject summary);
    void getDeviceCameraSenseSignal(OAIObject summary);
    void getDeviceCameraSenseObjectDetectionModelsSignal(QList<OAIObject> summary);
    void getDeviceCameraVideoLinkSignal(OAIObject summary);
    void getDeviceCameraVideoSettingsSignal(OAIObject summary);
    void getDeviceCameraWirelessProfilesSignal(OAIObject summary);
    void getNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void getNetworkCameraQualityRetentionProfilesSignal(QList<OAIObject> summary);
    void getNetworkCameraSchedulesSignal(QList<OAIObject> summary);
    void getNetworkCameraWirelessProfileSignal(OAIObject summary);
    void getNetworkCameraWirelessProfilesSignal(QList<OAIObject> summary);
    void getOrganizationCameraCustomAnalyticsArtifactSignal(OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactsSignal(QList<OAIObject> summary);
    void getOrganizationCameraOnboardingStatusesSignal(QList<OAIObject> summary);
    void updateDeviceCameraCustomAnalyticsSignal(OAIObject summary);
    void updateDeviceCameraQualityAndRetentionSignal(OAIObject summary);
    void updateDeviceCameraSenseSignal(OAIObject summary);
    void updateDeviceCameraVideoSettingsSignal(OAIObject summary);
    void updateDeviceCameraWirelessProfilesSignal(OAIObject summary);
    void updateNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void updateNetworkCameraWirelessProfileSignal(OAIObject summary);
    void updateOrganizationCameraOnboardingStatusesSignal(OAIObject summary);


    void createNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker);
    void generateDeviceCameraSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraAnalyticsLiveSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraAnalyticsOverviewSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsRecentSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZoneHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraAnalyticsZonesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraCustomAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraQualityAndRetentionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraSenseSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraSenseObjectDetectionModelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraVideoLinkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraVideoSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraQualityRetentionProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkCameraSchedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationCameraOnboardingStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateDeviceCameraCustomAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraQualityAndRetentionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraSenseSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraVideoSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationCameraOnboardingStatusesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkCameraQualityRetentionProfileSignalError() instead")
    void createNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkCameraWirelessProfileSignalError() instead")
    void createNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void createOrganizationCameraCustomAnalyticsArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationCameraCustomAnalyticsArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraQualityRetentionProfileSignalError() instead")
    void deleteNetworkCameraQualityRetentionProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraQualityRetentionProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraWirelessProfileSignalError() instead")
    void deleteNetworkCameraWirelessProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraWirelessProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDeviceCameraSnapshotSignalError() instead")
    void generateDeviceCameraSnapshotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDeviceCameraSnapshotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsLiveSignalError() instead")
    void getDeviceCameraAnalyticsLiveSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsLiveSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsOverviewSignalError() instead")
    void getDeviceCameraAnalyticsOverviewSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsOverviewSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsRecentSignalError() instead")
    void getDeviceCameraAnalyticsRecentSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsRecentSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZoneHistorySignalError() instead")
    void getDeviceCameraAnalyticsZoneHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZoneHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZonesSignalError() instead")
    void getDeviceCameraAnalyticsZonesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZonesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraCustomAnalyticsSignalError() instead")
    void getDeviceCameraCustomAnalyticsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraCustomAnalyticsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraQualityAndRetentionSignalError() instead")
    void getDeviceCameraQualityAndRetentionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraQualityAndRetentionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseSignalError() instead")
    void getDeviceCameraSenseSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseObjectDetectionModelsSignalError() instead")
    void getDeviceCameraSenseObjectDetectionModelsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseObjectDetectionModelsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoLinkSignalError() instead")
    void getDeviceCameraVideoLinkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoLinkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoSettingsSignalError() instead")
    void getDeviceCameraVideoSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraWirelessProfilesSignalError() instead")
    void getDeviceCameraWirelessProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraWirelessProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfileSignalError() instead")
    void getNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfilesSignalError() instead")
    void getNetworkCameraQualityRetentionProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraSchedulesSignalError() instead")
    void getNetworkCameraSchedulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraSchedulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfileSignalError() instead")
    void getNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfilesSignalError() instead")
    void getNetworkCameraWirelessProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void getOrganizationCameraCustomAnalyticsArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactsSignalError() instead")
    void getOrganizationCameraCustomAnalyticsArtifactsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraOnboardingStatusesSignalError() instead")
    void getOrganizationCameraOnboardingStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraOnboardingStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraCustomAnalyticsSignalError() instead")
    void updateDeviceCameraCustomAnalyticsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraCustomAnalyticsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraQualityAndRetentionSignalError() instead")
    void updateDeviceCameraQualityAndRetentionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraQualityAndRetentionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraSenseSignalError() instead")
    void updateDeviceCameraSenseSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraSenseSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraVideoSettingsSignalError() instead")
    void updateDeviceCameraVideoSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraVideoSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraWirelessProfilesSignalError() instead")
    void updateDeviceCameraWirelessProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraWirelessProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraQualityRetentionProfileSignalError() instead")
    void updateNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraWirelessProfileSignalError() instead")
    void updateNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationCameraOnboardingStatusesSignalError() instead")
    void updateOrganizationCameraOnboardingStatusesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationCameraOnboardingStatusesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void createNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkCameraWirelessProfileSignalErrorFull() instead")
    void createNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void createOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void deleteNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraWirelessProfileSignalErrorFull() instead")
    void deleteNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDeviceCameraSnapshotSignalErrorFull() instead")
    void generateDeviceCameraSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDeviceCameraSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsLiveSignalErrorFull() instead")
    void getDeviceCameraAnalyticsLiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsLiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsOverviewSignalErrorFull() instead")
    void getDeviceCameraAnalyticsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsRecentSignalErrorFull() instead")
    void getDeviceCameraAnalyticsRecentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsRecentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZoneHistorySignalErrorFull() instead")
    void getDeviceCameraAnalyticsZoneHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZoneHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraAnalyticsZonesSignalErrorFull() instead")
    void getDeviceCameraAnalyticsZonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraAnalyticsZonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraCustomAnalyticsSignalErrorFull() instead")
    void getDeviceCameraCustomAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraCustomAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraQualityAndRetentionSignalErrorFull() instead")
    void getDeviceCameraQualityAndRetentionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraQualityAndRetentionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseSignalErrorFull() instead")
    void getDeviceCameraSenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseObjectDetectionModelsSignalErrorFull() instead")
    void getDeviceCameraSenseObjectDetectionModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseObjectDetectionModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoLinkSignalErrorFull() instead")
    void getDeviceCameraVideoLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoSettingsSignalErrorFull() instead")
    void getDeviceCameraVideoSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraWirelessProfilesSignalErrorFull() instead")
    void getDeviceCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void getNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfilesSignalErrorFull() instead")
    void getNetworkCameraQualityRetentionProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraSchedulesSignalErrorFull() instead")
    void getNetworkCameraSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfileSignalErrorFull() instead")
    void getNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfilesSignalErrorFull() instead")
    void getNetworkCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void getOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactsSignalErrorFull() instead")
    void getOrganizationCameraCustomAnalyticsArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraOnboardingStatusesSignalErrorFull() instead")
    void getOrganizationCameraOnboardingStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraOnboardingStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraCustomAnalyticsSignalErrorFull() instead")
    void updateDeviceCameraCustomAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraCustomAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraQualityAndRetentionSignalErrorFull() instead")
    void updateDeviceCameraQualityAndRetentionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraQualityAndRetentionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraSenseSignalErrorFull() instead")
    void updateDeviceCameraSenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraSenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraVideoSettingsSignalErrorFull() instead")
    void updateDeviceCameraVideoSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraVideoSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraWirelessProfilesSignalErrorFull() instead")
    void updateDeviceCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void updateNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraWirelessProfileSignalErrorFull() instead")
    void updateNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationCameraOnboardingStatusesSignalErrorFull() instead")
    void updateOrganizationCameraOnboardingStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationCameraOnboardingStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
