/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfilesApi_H
#define OAI_OAIProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkSensorAlertsProfile_request.h"
#include "OAICreateOrganizationAlertsProfile_request.h"
#include "OAIGetNetworkSensorAlertsProfiles_200_response_inner.h"
#include "OAIGetNetworkSmProfiles_200_response_inner.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfiles_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSensorAlertsProfile_request.h"
#include "OAIUpdateOrganizationAlertsProfile_request.h"
#include "OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIProfilesApi(const int timeOut = 0);
    ~OAIProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sensor_alerts_profile_request OAICreateNetworkSensorAlertsProfile_request [required]
    */
    virtual void createNetworkSensorAlertsProfile(const QString &network_id, const OAICreateNetworkSensorAlertsProfile_request &oai_create_network_sensor_alerts_profile_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_alerts_profile_request OAICreateOrganizationAlertsProfile_request [required]
    */
    virtual void createOrganizationAlertsProfile(const QString &organization_id, const OAICreateOrganizationAlertsProfile_request &oai_create_organization_alerts_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteNetworkSensorAlertsProfile(const QString &network_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  alert_config_id QString [required]
    */
    virtual void deleteOrganizationAlertsProfile(const QString &organization_id, const QString &alert_config_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getNetworkSensorAlertsProfile(const QString &network_id, const QString &id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorAlertsProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSmProfiles(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAlertsProfiles(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePorts(const QString &organization_id, const QString &config_template_id, const QString &profile_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfiles(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_network_sensor_alerts_profile_request OAIUpdateNetworkSensorAlertsProfile_request [optional]
    */
    virtual void updateNetworkSensorAlertsProfile(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSensorAlertsProfile_request> &oai_update_network_sensor_alerts_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSensorAlertsProfile_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  alert_config_id QString [required]
    * @param[in]  oai_update_organization_alerts_profile_request OAIUpdateOrganizationAlertsProfile_request [optional]
    */
    virtual void updateOrganizationAlertsProfile(const QString &organization_id, const QString &alert_config_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAlertsProfile_request> &oai_update_organization_alerts_profile_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAlertsProfile_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_organization_config_template_switch_profile_port_request OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request [optional]
    */
    virtual void updateOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request> &oai_update_organization_config_template_switch_profile_port_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAlertsProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void createOrganizationAlertsProfileSignal(OAIObject summary);
    void deleteNetworkSensorAlertsProfileSignal();
    void deleteOrganizationAlertsProfileSignal();
    void getNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void getNetworkSensorAlertsProfilesSignal(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary);
    void getNetworkSmProfilesSignal(QList<OAIGetNetworkSmProfiles_200_response_inner> summary);
    void getOrganizationAlertsProfilesSignal(QList<OAIObject> summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignal(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilesSignal(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary);
    void updateNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void updateOrganizationAlertsProfileSignal(OAIObject summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);


    void createNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void createOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void getNetworkSensorAlertsProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary);
    void getNetworkSmProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmProfiles_200_response_inner> summary);
    void getOrganizationAlertsProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary);
    void updateNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void updateOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use createNetworkSensorAlertsProfileSignalError() instead")
    void createNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAlertsProfileSignalError() instead")
    void createOrganizationAlertsProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAlertsProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSensorAlertsProfileSignalError() instead")
    void deleteNetworkSensorAlertsProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSensorAlertsProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAlertsProfileSignalError() instead")
    void deleteOrganizationAlertsProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAlertsProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfileSignalError() instead")
    void getNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfilesSignalError() instead")
    void getNetworkSensorAlertsProfilesSignalE(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfilesSignalError(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalError() instead")
    void getNetworkSmProfilesSignalE(QList<OAIGetNetworkSmProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalError(QList<OAIGetNetworkSmProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAlertsProfilesSignalError() instead")
    void getOrganizationAlertsProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAlertsProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalE(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalError(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilesSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilesSignalE(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilesSignalError(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSensorAlertsProfileSignalError() instead")
    void updateNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAlertsProfileSignalError() instead")
    void updateOrganizationAlertsProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAlertsProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkSensorAlertsProfileSignalErrorFull() instead")
    void createNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAlertsProfileSignalErrorFull() instead")
    void createOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSensorAlertsProfileSignalErrorFull() instead")
    void deleteNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAlertsProfileSignalErrorFull() instead")
    void deleteOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfileSignalErrorFull() instead")
    void getNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfilesSignalErrorFull() instead")
    void getNetworkSensorAlertsProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalErrorFull() instead")
    void getNetworkSmProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAlertsProfilesSignalErrorFull() instead")
    void getOrganizationAlertsProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAlertsProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilesSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSensorAlertsProfileSignalErrorFull() instead")
    void updateNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAlertsProfileSignalErrorFull() instead")
    void updateOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
