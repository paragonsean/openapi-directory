/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::~OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner() {}

void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::initializeModel() {

    m_alternate_management_ip_isSet = false;
    m_alternate_management_ip_isValid = false;

    m_dns1_isSet = false;
    m_dns1_isValid = false;

    m_dns2_isSet = false;
    m_dns2_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_subnet_mask_isSet = false;
    m_subnet_mask_isValid = false;
}

void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::fromJsonObject(QJsonObject json) {

    m_alternate_management_ip_isValid = ::OpenAPI::fromJsonValue(m_alternate_management_ip, json[QString("alternateManagementIp")]);
    m_alternate_management_ip_isSet = !json[QString("alternateManagementIp")].isNull() && m_alternate_management_ip_isValid;

    m_dns1_isValid = ::OpenAPI::fromJsonValue(m_dns1, json[QString("dns1")]);
    m_dns1_isSet = !json[QString("dns1")].isNull() && m_dns1_isValid;

    m_dns2_isValid = ::OpenAPI::fromJsonValue(m_dns2, json[QString("dns2")]);
    m_dns2_isSet = !json[QString("dns2")].isNull() && m_dns2_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_subnet_mask_isValid = ::OpenAPI::fromJsonValue(m_subnet_mask, json[QString("subnetMask")]);
    m_subnet_mask_isSet = !json[QString("subnetMask")].isNull() && m_subnet_mask_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_management_ip_isSet) {
        obj.insert(QString("alternateManagementIp"), ::OpenAPI::toJsonValue(m_alternate_management_ip));
    }
    if (m_dns1_isSet) {
        obj.insert(QString("dns1"), ::OpenAPI::toJsonValue(m_dns1));
    }
    if (m_dns2_isSet) {
        obj.insert(QString("dns2"), ::OpenAPI::toJsonValue(m_dns2));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_subnet_mask_isSet) {
        obj.insert(QString("subnetMask"), ::OpenAPI::toJsonValue(m_subnet_mask));
    }
    return obj;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::getAlternateManagementIp() const {
    return m_alternate_management_ip;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::setAlternateManagementIp(const QString &alternate_management_ip) {
    m_alternate_management_ip = alternate_management_ip;
    m_alternate_management_ip_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_alternate_management_ip_Set() const{
    return m_alternate_management_ip_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_alternate_management_ip_Valid() const{
    return m_alternate_management_ip_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::getDns1() const {
    return m_dns1;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::setDns1(const QString &dns1) {
    m_dns1 = dns1;
    m_dns1_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_dns1_Set() const{
    return m_dns1_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_dns1_Valid() const{
    return m_dns1_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::getDns2() const {
    return m_dns2;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::setDns2(const QString &dns2) {
    m_dns2 = dns2;
    m_dns2_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_dns2_Set() const{
    return m_dns2_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_dns2_Valid() const{
    return m_dns2_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::getGateway() const {
    return m_gateway;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::getSerial() const {
    return m_serial;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::getSubnetMask() const {
    return m_subnet_mask;
}
void OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::setSubnetMask(const QString &subnet_mask) {
    m_subnet_mask = subnet_mask;
    m_subnet_mask_isSet = true;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_subnet_mask_Set() const{
    return m_subnet_mask_isSet;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::is_subnet_mask_Valid() const{
    return m_subnet_mask_isValid;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_management_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessAlternateManagementInterface_request_accessPoints_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alternate_management_ip_isValid && m_serial_isValid && true;
}

} // namespace OpenAPI
