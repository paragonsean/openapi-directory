/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::~OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner() {}

void OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::initializeModel() {

    m_received_isSet = false;
    m_received_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;
}

void OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::fromJsonObject(QJsonObject json) {

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;
}

QString OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    return obj;
}

float OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::getReceived() const {
    return m_received;
}
void OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::setReceived(const float &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::is_received_Set() const{
    return m_received_isSet;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::is_received_Valid() const{
    return m_received_isValid;
}

float OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::getSent() const {
    return m_sent;
}
void OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::setSent(const float &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::is_sent_Valid() const{
    return m_sent_isValid;
}

QString OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::getTs() const {
    return m_ts;
}
void OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDeviceCellularUsageHistory_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
