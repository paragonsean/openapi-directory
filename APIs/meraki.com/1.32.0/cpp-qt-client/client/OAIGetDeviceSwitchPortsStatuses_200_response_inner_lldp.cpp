/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp() {
    this->initializeModel();
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::~OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp() {}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::initializeModel() {

    m_chassis_id_isSet = false;
    m_chassis_id_isValid = false;

    m_management_address_isSet = false;
    m_management_address_isValid = false;

    m_management_vlan_isSet = false;
    m_management_vlan_isValid = false;

    m_port_description_isSet = false;
    m_port_description_isValid = false;

    m_port_id_isSet = false;
    m_port_id_isValid = false;

    m_port_vlan_isSet = false;
    m_port_vlan_isValid = false;

    m_system_capabilities_isSet = false;
    m_system_capabilities_isValid = false;

    m_system_description_isSet = false;
    m_system_description_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::fromJsonObject(QJsonObject json) {

    m_chassis_id_isValid = ::OpenAPI::fromJsonValue(m_chassis_id, json[QString("chassisId")]);
    m_chassis_id_isSet = !json[QString("chassisId")].isNull() && m_chassis_id_isValid;

    m_management_address_isValid = ::OpenAPI::fromJsonValue(m_management_address, json[QString("managementAddress")]);
    m_management_address_isSet = !json[QString("managementAddress")].isNull() && m_management_address_isValid;

    m_management_vlan_isValid = ::OpenAPI::fromJsonValue(m_management_vlan, json[QString("managementVlan")]);
    m_management_vlan_isSet = !json[QString("managementVlan")].isNull() && m_management_vlan_isValid;

    m_port_description_isValid = ::OpenAPI::fromJsonValue(m_port_description, json[QString("portDescription")]);
    m_port_description_isSet = !json[QString("portDescription")].isNull() && m_port_description_isValid;

    m_port_id_isValid = ::OpenAPI::fromJsonValue(m_port_id, json[QString("portId")]);
    m_port_id_isSet = !json[QString("portId")].isNull() && m_port_id_isValid;

    m_port_vlan_isValid = ::OpenAPI::fromJsonValue(m_port_vlan, json[QString("portVlan")]);
    m_port_vlan_isSet = !json[QString("portVlan")].isNull() && m_port_vlan_isValid;

    m_system_capabilities_isValid = ::OpenAPI::fromJsonValue(m_system_capabilities, json[QString("systemCapabilities")]);
    m_system_capabilities_isSet = !json[QString("systemCapabilities")].isNull() && m_system_capabilities_isValid;

    m_system_description_isValid = ::OpenAPI::fromJsonValue(m_system_description, json[QString("systemDescription")]);
    m_system_description_isSet = !json[QString("systemDescription")].isNull() && m_system_description_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::asJsonObject() const {
    QJsonObject obj;
    if (m_chassis_id_isSet) {
        obj.insert(QString("chassisId"), ::OpenAPI::toJsonValue(m_chassis_id));
    }
    if (m_management_address_isSet) {
        obj.insert(QString("managementAddress"), ::OpenAPI::toJsonValue(m_management_address));
    }
    if (m_management_vlan_isSet) {
        obj.insert(QString("managementVlan"), ::OpenAPI::toJsonValue(m_management_vlan));
    }
    if (m_port_description_isSet) {
        obj.insert(QString("portDescription"), ::OpenAPI::toJsonValue(m_port_description));
    }
    if (m_port_id_isSet) {
        obj.insert(QString("portId"), ::OpenAPI::toJsonValue(m_port_id));
    }
    if (m_port_vlan_isSet) {
        obj.insert(QString("portVlan"), ::OpenAPI::toJsonValue(m_port_vlan));
    }
    if (m_system_capabilities_isSet) {
        obj.insert(QString("systemCapabilities"), ::OpenAPI::toJsonValue(m_system_capabilities));
    }
    if (m_system_description_isSet) {
        obj.insert(QString("systemDescription"), ::OpenAPI::toJsonValue(m_system_description));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    return obj;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getChassisId() const {
    return m_chassis_id;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setChassisId(const QString &chassis_id) {
    m_chassis_id = chassis_id;
    m_chassis_id_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_chassis_id_Set() const{
    return m_chassis_id_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_chassis_id_Valid() const{
    return m_chassis_id_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getManagementAddress() const {
    return m_management_address;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setManagementAddress(const QString &management_address) {
    m_management_address = management_address;
    m_management_address_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_management_address_Set() const{
    return m_management_address_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_management_address_Valid() const{
    return m_management_address_isValid;
}

qint32 OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getManagementVlan() const {
    return m_management_vlan;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setManagementVlan(const qint32 &management_vlan) {
    m_management_vlan = management_vlan;
    m_management_vlan_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_management_vlan_Set() const{
    return m_management_vlan_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_management_vlan_Valid() const{
    return m_management_vlan_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getPortDescription() const {
    return m_port_description;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setPortDescription(const QString &port_description) {
    m_port_description = port_description;
    m_port_description_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_port_description_Set() const{
    return m_port_description_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_port_description_Valid() const{
    return m_port_description_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getPortId() const {
    return m_port_id;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setPortId(const QString &port_id) {
    m_port_id = port_id;
    m_port_id_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_port_id_Set() const{
    return m_port_id_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_port_id_Valid() const{
    return m_port_id_isValid;
}

qint32 OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getPortVlan() const {
    return m_port_vlan;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setPortVlan(const qint32 &port_vlan) {
    m_port_vlan = port_vlan;
    m_port_vlan_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_port_vlan_Set() const{
    return m_port_vlan_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_port_vlan_Valid() const{
    return m_port_vlan_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getSystemCapabilities() const {
    return m_system_capabilities;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setSystemCapabilities(const QString &system_capabilities) {
    m_system_capabilities = system_capabilities;
    m_system_capabilities_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_system_capabilities_Set() const{
    return m_system_capabilities_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_system_capabilities_Valid() const{
    return m_system_capabilities_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getSystemDescription() const {
    return m_system_description;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setSystemDescription(const QString &system_description) {
    m_system_description = system_description;
    m_system_description_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_system_description_Set() const{
    return m_system_description_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_system_description_Valid() const{
    return m_system_description_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::getSystemName() const {
    return m_system_name;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::is_system_name_Valid() const{
    return m_system_name_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chassis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_capabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_lldp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
