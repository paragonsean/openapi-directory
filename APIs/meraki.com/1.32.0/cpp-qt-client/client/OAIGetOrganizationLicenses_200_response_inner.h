/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOrganizationLicenses_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetOrganizationLicenses_200_response_inner_H
#define OAIGetOrganizationLicenses_200_response_inner_H

#include <QJsonObject>

#include "OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner;

class OAIGetOrganizationLicenses_200_response_inner : public OAIObject {
public:
    OAIGetOrganizationLicenses_200_response_inner();
    OAIGetOrganizationLicenses_200_response_inner(QString json);
    ~OAIGetOrganizationLicenses_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActivationDate() const;
    void setActivationDate(const QString &activation_date);
    bool is_activation_date_Set() const;
    bool is_activation_date_Valid() const;

    QString getClaimDate() const;
    void setClaimDate(const QString &claim_date);
    bool is_claim_date_Set() const;
    bool is_claim_date_Valid() const;

    QString getDeviceSerial() const;
    void setDeviceSerial(const QString &device_serial);
    bool is_device_serial_Set() const;
    bool is_device_serial_Valid() const;

    qint32 getDurationInDays() const;
    void setDurationInDays(const qint32 &duration_in_days);
    bool is_duration_in_days_Set() const;
    bool is_duration_in_days_Valid() const;

    QString getExpirationDate() const;
    void setExpirationDate(const QString &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    QString getHeadLicenseId() const;
    void setHeadLicenseId(const QString &head_license_id);
    bool is_head_license_id_Set() const;
    bool is_head_license_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLicenseKey() const;
    void setLicenseKey(const QString &license_key);
    bool is_license_key_Set() const;
    bool is_license_key_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    QString getNetworkId() const;
    void setNetworkId(const QString &network_id);
    bool is_network_id_Set() const;
    bool is_network_id_Valid() const;

    QString getOrderNumber() const;
    void setOrderNumber(const QString &order_number);
    bool is_order_number_Set() const;
    bool is_order_number_Valid() const;

    QList<OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner> getPermanentlyQueuedLicenses() const;
    void setPermanentlyQueuedLicenses(const QList<OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner> &permanently_queued_licenses);
    bool is_permanently_queued_licenses_Set() const;
    bool is_permanently_queued_licenses_Valid() const;

    qint32 getSeatCount() const;
    void setSeatCount(const qint32 &seat_count);
    bool is_seat_count_Set() const;
    bool is_seat_count_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getTotalDurationInDays() const;
    void setTotalDurationInDays(const qint32 &total_duration_in_days);
    bool is_total_duration_in_days_Set() const;
    bool is_total_duration_in_days_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_activation_date;
    bool m_activation_date_isSet;
    bool m_activation_date_isValid;

    QString m_claim_date;
    bool m_claim_date_isSet;
    bool m_claim_date_isValid;

    QString m_device_serial;
    bool m_device_serial_isSet;
    bool m_device_serial_isValid;

    qint32 m_duration_in_days;
    bool m_duration_in_days_isSet;
    bool m_duration_in_days_isValid;

    QString m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    QString m_head_license_id;
    bool m_head_license_id_isSet;
    bool m_head_license_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_license_key;
    bool m_license_key_isSet;
    bool m_license_key_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    QString m_network_id;
    bool m_network_id_isSet;
    bool m_network_id_isValid;

    QString m_order_number;
    bool m_order_number_isSet;
    bool m_order_number_isValid;

    QList<OAIGetOrganizationLicenses_200_response_inner_permanentlyQueuedLicenses_inner> m_permanently_queued_licenses;
    bool m_permanently_queued_licenses_isSet;
    bool m_permanently_queued_licenses_isValid;

    qint32 m_seat_count;
    bool m_seat_count_isSet;
    bool m_seat_count_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_total_duration_in_days;
    bool m_total_duration_in_days_isSet;
    bool m_total_duration_in_days_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOrganizationLicenses_200_response_inner)

#endif // OAIGetOrganizationLicenses_200_response_inner_H
