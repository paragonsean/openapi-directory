/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings() {
    this->initializeModel();
}

OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::~OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings() {}

void OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_target_power_isSet = false;
    m_target_power_isValid = false;
}

void OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_target_power_isValid = ::OpenAPI::fromJsonValue(m_target_power, json[QString("targetPower")]);
    m_target_power_isSet = !json[QString("targetPower")].isNull() && m_target_power_isValid;
}

QString OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_target_power_isSet) {
        obj.insert(QString("targetPower"), ::OpenAPI::toJsonValue(m_target_power));
    }
    return obj;
}

qint32 OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::getChannel() const {
    return m_channel;
}
void OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::setChannel(const qint32 &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::getTargetPower() const {
    return m_target_power;
}
void OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::setTargetPower(const qint32 &target_power) {
    m_target_power = target_power;
    m_target_power_isSet = true;
}

bool OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::is_target_power_Set() const{
    return m_target_power_isSet;
}

bool OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::is_target_power_Valid() const{
    return m_target_power_isValid;
}

bool OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_power_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDeviceWirelessRadioSettings_request_twoFourGhzSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
