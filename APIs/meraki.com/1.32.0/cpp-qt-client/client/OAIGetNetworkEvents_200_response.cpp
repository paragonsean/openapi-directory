/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkEvents_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkEvents_200_response::OAIGetNetworkEvents_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkEvents_200_response::OAIGetNetworkEvents_200_response() {
    this->initializeModel();
}

OAIGetNetworkEvents_200_response::~OAIGetNetworkEvents_200_response() {}

void OAIGetNetworkEvents_200_response::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_page_end_at_isSet = false;
    m_page_end_at_isValid = false;

    m_page_start_at_isSet = false;
    m_page_start_at_isValid = false;
}

void OAIGetNetworkEvents_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkEvents_200_response::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_page_end_at_isValid = ::OpenAPI::fromJsonValue(m_page_end_at, json[QString("pageEndAt")]);
    m_page_end_at_isSet = !json[QString("pageEndAt")].isNull() && m_page_end_at_isValid;

    m_page_start_at_isValid = ::OpenAPI::fromJsonValue(m_page_start_at, json[QString("pageStartAt")]);
    m_page_start_at_isSet = !json[QString("pageStartAt")].isNull() && m_page_start_at_isValid;
}

QString OAIGetNetworkEvents_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkEvents_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_page_end_at_isSet) {
        obj.insert(QString("pageEndAt"), ::OpenAPI::toJsonValue(m_page_end_at));
    }
    if (m_page_start_at_isSet) {
        obj.insert(QString("pageStartAt"), ::OpenAPI::toJsonValue(m_page_start_at));
    }
    return obj;
}

QList<OAIGetNetworkEvents_200_response_events_inner> OAIGetNetworkEvents_200_response::getEvents() const {
    return m_events;
}
void OAIGetNetworkEvents_200_response::setEvents(const QList<OAIGetNetworkEvents_200_response_events_inner> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGetNetworkEvents_200_response::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGetNetworkEvents_200_response::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIGetNetworkEvents_200_response::getMessage() const {
    return m_message;
}
void OAIGetNetworkEvents_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetNetworkEvents_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetNetworkEvents_200_response::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIGetNetworkEvents_200_response::getPageEndAt() const {
    return m_page_end_at;
}
void OAIGetNetworkEvents_200_response::setPageEndAt(const QString &page_end_at) {
    m_page_end_at = page_end_at;
    m_page_end_at_isSet = true;
}

bool OAIGetNetworkEvents_200_response::is_page_end_at_Set() const{
    return m_page_end_at_isSet;
}

bool OAIGetNetworkEvents_200_response::is_page_end_at_Valid() const{
    return m_page_end_at_isValid;
}

QString OAIGetNetworkEvents_200_response::getPageStartAt() const {
    return m_page_start_at;
}
void OAIGetNetworkEvents_200_response::setPageStartAt(const QString &page_start_at) {
    m_page_start_at = page_start_at;
    m_page_start_at_isSet = true;
}

bool OAIGetNetworkEvents_200_response::is_page_start_at_Set() const{
    return m_page_start_at_isSet;
}

bool OAIGetNetworkEvents_200_response::is_page_start_at_Valid() const{
    return m_page_start_at_isValid;
}

bool OAIGetNetworkEvents_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkEvents_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
