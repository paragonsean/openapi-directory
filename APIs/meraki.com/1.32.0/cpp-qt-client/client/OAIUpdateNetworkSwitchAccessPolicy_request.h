/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkSwitchAccessPolicy_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkSwitchAccessPolicy_request_H
#define OAIUpdateNetworkSwitchAccessPolicy_request_H

#include <QJsonObject>

#include "OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner.h"
#include "OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner.h"
#include "OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x.h"
#include "OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x;
class OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius;
class OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner;
class OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner;

class OAIUpdateNetworkSwitchAccessPolicy_request : public OAIObject {
public:
    OAIUpdateNetworkSwitchAccessPolicy_request();
    OAIUpdateNetworkSwitchAccessPolicy_request(QString json);
    ~OAIUpdateNetworkSwitchAccessPolicy_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessPolicyType() const;
    void setAccessPolicyType(const QString &access_policy_type);
    bool is_access_policy_type_Set() const;
    bool is_access_policy_type_Valid() const;

    OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x getDot1x() const;
    void setDot1x(const OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x &dot1x);
    bool is_dot1x_Set() const;
    bool is_dot1x_Valid() const;

    bool isGuestPortBouncing() const;
    void setGuestPortBouncing(const bool &guest_port_bouncing);
    bool is_guest_port_bouncing_Set() const;
    bool is_guest_port_bouncing_Valid() const;

    qint32 getGuestVlanId() const;
    void setGuestVlanId(const qint32 &guest_vlan_id);
    bool is_guest_vlan_id_Set() const;
    bool is_guest_vlan_id_Valid() const;

    QString getHostMode() const;
    void setHostMode(const QString &host_mode);
    bool is_host_mode_Set() const;
    bool is_host_mode_Valid() const;

    bool isIncreaseAccessSpeed() const;
    void setIncreaseAccessSpeed(const bool &increase_access_speed);
    bool is_increase_access_speed_Set() const;
    bool is_increase_access_speed_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius getRadius() const;
    void setRadius(const OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius &radius);
    bool is_radius_Set() const;
    bool is_radius_Valid() const;

    bool isRadiusAccountingEnabled() const;
    void setRadiusAccountingEnabled(const bool &radius_accounting_enabled);
    bool is_radius_accounting_enabled_Set() const;
    bool is_radius_accounting_enabled_Valid() const;

    QList<OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner> getRadiusAccountingServers() const;
    void setRadiusAccountingServers(const QList<OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner> &radius_accounting_servers);
    bool is_radius_accounting_servers_Set() const;
    bool is_radius_accounting_servers_Valid() const;

    bool isRadiusCoaSupportEnabled() const;
    void setRadiusCoaSupportEnabled(const bool &radius_coa_support_enabled);
    bool is_radius_coa_support_enabled_Set() const;
    bool is_radius_coa_support_enabled_Valid() const;

    QString getRadiusGroupAttribute() const;
    void setRadiusGroupAttribute(const QString &radius_group_attribute);
    bool is_radius_group_attribute_Set() const;
    bool is_radius_group_attribute_Valid() const;

    QList<OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner> getRadiusServers() const;
    void setRadiusServers(const QList<OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner> &radius_servers);
    bool is_radius_servers_Set() const;
    bool is_radius_servers_Valid() const;

    bool isRadiusTestingEnabled() const;
    void setRadiusTestingEnabled(const bool &radius_testing_enabled);
    bool is_radius_testing_enabled_Set() const;
    bool is_radius_testing_enabled_Valid() const;

    bool isUrlRedirectWalledGardenEnabled() const;
    void setUrlRedirectWalledGardenEnabled(const bool &url_redirect_walled_garden_enabled);
    bool is_url_redirect_walled_garden_enabled_Set() const;
    bool is_url_redirect_walled_garden_enabled_Valid() const;

    QList<QString> getUrlRedirectWalledGardenRanges() const;
    void setUrlRedirectWalledGardenRanges(const QList<QString> &url_redirect_walled_garden_ranges);
    bool is_url_redirect_walled_garden_ranges_Set() const;
    bool is_url_redirect_walled_garden_ranges_Valid() const;

    bool isVoiceVlanClients() const;
    void setVoiceVlanClients(const bool &voice_vlan_clients);
    bool is_voice_vlan_clients_Set() const;
    bool is_voice_vlan_clients_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_policy_type;
    bool m_access_policy_type_isSet;
    bool m_access_policy_type_isValid;

    OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x m_dot1x;
    bool m_dot1x_isSet;
    bool m_dot1x_isValid;

    bool m_guest_port_bouncing;
    bool m_guest_port_bouncing_isSet;
    bool m_guest_port_bouncing_isValid;

    qint32 m_guest_vlan_id;
    bool m_guest_vlan_id_isSet;
    bool m_guest_vlan_id_isValid;

    QString m_host_mode;
    bool m_host_mode_isSet;
    bool m_host_mode_isValid;

    bool m_increase_access_speed;
    bool m_increase_access_speed_isSet;
    bool m_increase_access_speed_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius m_radius;
    bool m_radius_isSet;
    bool m_radius_isValid;

    bool m_radius_accounting_enabled;
    bool m_radius_accounting_enabled_isSet;
    bool m_radius_accounting_enabled_isValid;

    QList<OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner> m_radius_accounting_servers;
    bool m_radius_accounting_servers_isSet;
    bool m_radius_accounting_servers_isValid;

    bool m_radius_coa_support_enabled;
    bool m_radius_coa_support_enabled_isSet;
    bool m_radius_coa_support_enabled_isValid;

    QString m_radius_group_attribute;
    bool m_radius_group_attribute_isSet;
    bool m_radius_group_attribute_isValid;

    QList<OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner> m_radius_servers;
    bool m_radius_servers_isSet;
    bool m_radius_servers_isValid;

    bool m_radius_testing_enabled;
    bool m_radius_testing_enabled_isSet;
    bool m_radius_testing_enabled_isValid;

    bool m_url_redirect_walled_garden_enabled;
    bool m_url_redirect_walled_garden_enabled_isSet;
    bool m_url_redirect_walled_garden_enabled_isValid;

    QList<QString> m_url_redirect_walled_garden_ranges;
    bool m_url_redirect_walled_garden_ranges_isSet;
    bool m_url_redirect_walled_garden_ranges_isValid;

    bool m_voice_vlan_clients;
    bool m_voice_vlan_clients_isSet;
    bool m_voice_vlan_clients_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkSwitchAccessPolicy_request)

#endif // OAIUpdateNetworkSwitchAccessPolicy_request_H
