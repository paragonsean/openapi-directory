/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request() {
    this->initializeModel();
}

OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::~OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request() {}

void OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::getDescription() const {
    return m_description;
}
void OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateNetworkAppliancePrefixesDelegatedStatic_request_origin OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::getOrigin() const {
    return m_origin;
}
void OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::setOrigin(const OAICreateNetworkAppliancePrefixesDelegatedStatic_request_origin &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::getPrefix() const {
    return m_prefix;
}
void OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
