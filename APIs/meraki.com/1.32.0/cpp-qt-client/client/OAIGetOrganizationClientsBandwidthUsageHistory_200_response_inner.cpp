/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::~OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner() {}

void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::initializeModel() {

    m_downstream_isSet = false;
    m_downstream_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_upstream_isSet = false;
    m_upstream_isValid = false;
}

void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::fromJsonObject(QJsonObject json) {

    m_downstream_isValid = ::OpenAPI::fromJsonValue(m_downstream, json[QString("downstream")]);
    m_downstream_isSet = !json[QString("downstream")].isNull() && m_downstream_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_upstream_isValid = ::OpenAPI::fromJsonValue(m_upstream, json[QString("upstream")]);
    m_upstream_isSet = !json[QString("upstream")].isNull() && m_upstream_isValid;
}

QString OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_downstream_isSet) {
        obj.insert(QString("downstream"), ::OpenAPI::toJsonValue(m_downstream));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_upstream_isSet) {
        obj.insert(QString("upstream"), ::OpenAPI::toJsonValue(m_upstream));
    }
    return obj;
}

qint32 OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::getDownstream() const {
    return m_downstream;
}
void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::setDownstream(const qint32 &downstream) {
    m_downstream = downstream;
    m_downstream_isSet = true;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_downstream_Set() const{
    return m_downstream_isSet;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_downstream_Valid() const{
    return m_downstream_isValid;
}

qint32 OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::getTotal() const {
    return m_total;
}
void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_total_Valid() const{
    return m_total_isValid;
}

QDateTime OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::getTs() const {
    return m_ts;
}
void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::setTs(const QDateTime &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

qint32 OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::getUpstream() const {
    return m_upstream;
}
void OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::setUpstream(const qint32 &upstream) {
    m_upstream = upstream;
    m_upstream_isSet = true;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_upstream_Set() const{
    return m_upstream_isSet;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::is_upstream_Valid() const{
    return m_upstream_isValid;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_downstream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationClientsBandwidthUsageHistory_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
