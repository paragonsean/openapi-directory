/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchDhcpServerPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchDhcpServerPolicy_request::OAIUpdateNetworkSwitchDhcpServerPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchDhcpServerPolicy_request::OAIUpdateNetworkSwitchDhcpServerPolicy_request() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchDhcpServerPolicy_request::~OAIUpdateNetworkSwitchDhcpServerPolicy_request() {}

void OAIUpdateNetworkSwitchDhcpServerPolicy_request::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_allowed_servers_isSet = false;
    m_allowed_servers_isValid = false;

    m_arp_inspection_isSet = false;
    m_arp_inspection_isValid = false;

    m_blocked_servers_isSet = false;
    m_blocked_servers_isValid = false;

    m_default_policy_isSet = false;
    m_default_policy_isValid = false;
}

void OAIUpdateNetworkSwitchDhcpServerPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchDhcpServerPolicy_request::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_allowed_servers_isValid = ::OpenAPI::fromJsonValue(m_allowed_servers, json[QString("allowedServers")]);
    m_allowed_servers_isSet = !json[QString("allowedServers")].isNull() && m_allowed_servers_isValid;

    m_arp_inspection_isValid = ::OpenAPI::fromJsonValue(m_arp_inspection, json[QString("arpInspection")]);
    m_arp_inspection_isSet = !json[QString("arpInspection")].isNull() && m_arp_inspection_isValid;

    m_blocked_servers_isValid = ::OpenAPI::fromJsonValue(m_blocked_servers, json[QString("blockedServers")]);
    m_blocked_servers_isSet = !json[QString("blockedServers")].isNull() && m_blocked_servers_isValid;

    m_default_policy_isValid = ::OpenAPI::fromJsonValue(m_default_policy, json[QString("defaultPolicy")]);
    m_default_policy_isSet = !json[QString("defaultPolicy")].isNull() && m_default_policy_isValid;
}

QString OAIUpdateNetworkSwitchDhcpServerPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchDhcpServerPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts.isSet()) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_allowed_servers.size() > 0) {
        obj.insert(QString("allowedServers"), ::OpenAPI::toJsonValue(m_allowed_servers));
    }
    if (m_arp_inspection.isSet()) {
        obj.insert(QString("arpInspection"), ::OpenAPI::toJsonValue(m_arp_inspection));
    }
    if (m_blocked_servers.size() > 0) {
        obj.insert(QString("blockedServers"), ::OpenAPI::toJsonValue(m_blocked_servers));
    }
    if (m_default_policy_isSet) {
        obj.insert(QString("defaultPolicy"), ::OpenAPI::toJsonValue(m_default_policy));
    }
    return obj;
}

OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts OAIUpdateNetworkSwitchDhcpServerPolicy_request::getAlerts() const {
    return m_alerts;
}
void OAIUpdateNetworkSwitchDhcpServerPolicy_request::setAlerts(const OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QList<QString> OAIUpdateNetworkSwitchDhcpServerPolicy_request::getAllowedServers() const {
    return m_allowed_servers;
}
void OAIUpdateNetworkSwitchDhcpServerPolicy_request::setAllowedServers(const QList<QString> &allowed_servers) {
    m_allowed_servers = allowed_servers;
    m_allowed_servers_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_allowed_servers_Set() const{
    return m_allowed_servers_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_allowed_servers_Valid() const{
    return m_allowed_servers_isValid;
}

OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection OAIUpdateNetworkSwitchDhcpServerPolicy_request::getArpInspection() const {
    return m_arp_inspection;
}
void OAIUpdateNetworkSwitchDhcpServerPolicy_request::setArpInspection(const OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection &arp_inspection) {
    m_arp_inspection = arp_inspection;
    m_arp_inspection_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_arp_inspection_Set() const{
    return m_arp_inspection_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_arp_inspection_Valid() const{
    return m_arp_inspection_isValid;
}

QList<QString> OAIUpdateNetworkSwitchDhcpServerPolicy_request::getBlockedServers() const {
    return m_blocked_servers;
}
void OAIUpdateNetworkSwitchDhcpServerPolicy_request::setBlockedServers(const QList<QString> &blocked_servers) {
    m_blocked_servers = blocked_servers;
    m_blocked_servers_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_blocked_servers_Set() const{
    return m_blocked_servers_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_blocked_servers_Valid() const{
    return m_blocked_servers_isValid;
}

QString OAIUpdateNetworkSwitchDhcpServerPolicy_request::getDefaultPolicy() const {
    return m_default_policy;
}
void OAIUpdateNetworkSwitchDhcpServerPolicy_request::setDefaultPolicy(const QString &default_policy) {
    m_default_policy = default_policy;
    m_default_policy_isSet = true;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_default_policy_Set() const{
    return m_default_policy_isSet;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::is_default_policy_Valid() const{
    return m_default_policy_isValid;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_arp_inspection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchDhcpServerPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
