/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::~OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits() {}

void OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::initializeModel() {

    m_limit_down_isSet = false;
    m_limit_down_isValid = false;

    m_limit_up_isSet = false;
    m_limit_up_isValid = false;
}

void OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::fromJsonObject(QJsonObject json) {

    m_limit_down_isValid = ::OpenAPI::fromJsonValue(m_limit_down, json[QString("limitDown")]);
    m_limit_down_isSet = !json[QString("limitDown")].isNull() && m_limit_down_isValid;

    m_limit_up_isValid = ::OpenAPI::fromJsonValue(m_limit_up, json[QString("limitUp")]);
    m_limit_up_isSet = !json[QString("limitUp")].isNull() && m_limit_up_isValid;
}

QString OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_down_isSet) {
        obj.insert(QString("limitDown"), ::OpenAPI::toJsonValue(m_limit_down));
    }
    if (m_limit_up_isSet) {
        obj.insert(QString("limitUp"), ::OpenAPI::toJsonValue(m_limit_up));
    }
    return obj;
}

qint32 OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::getLimitDown() const {
    return m_limit_down;
}
void OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::setLimitDown(const qint32 &limit_down) {
    m_limit_down = limit_down;
    m_limit_down_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::is_limit_down_Set() const{
    return m_limit_down_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::is_limit_down_Valid() const{
    return m_limit_down_isValid;
}

qint32 OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::getLimitUp() const {
    return m_limit_up;
}
void OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::setLimitUp(const qint32 &limit_up) {
    m_limit_up = limit_up;
    m_limit_up_isSet = true;
}

bool OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::is_limit_up_Set() const{
    return m_limit_up_isSet;
}

bool OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::is_limit_up_Valid() const{
    return m_limit_up_isValid;
}

bool OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_up_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceTrafficShaping_request_globalBandwidthLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
