/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkFirmwareUpgradesStagedEvent_request.h"
#include "OAIGetNetworkEventsEventTypes_200_response_inner.h"
#include "OAIGetNetworkEvents_200_response.h"
#include "OAIGetNetworkFirmwareUpgradesStagedEvents_200_response.h"
#include "OAIObject.h"
#include "OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request.h"
#include "OAIUpdateNetworkFirmwareUpgradesStagedEvents_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_event_request OAICreateNetworkFirmwareUpgradesStagedEvent_request [required]
    */
    virtual void createNetworkFirmwareUpgradesStagedEvent(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedEvent_request &oai_create_network_firmware_upgrades_staged_event_request);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void deferNetworkFirmwareUpgradesStagedEvents(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getNetworkApplianceClientSecurityEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getNetworkApplianceSecurityEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkEventsEventTypes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  product_type QString [optional]
    * @param[in]  included_event_types QList<QString> [optional]
    * @param[in]  excluded_event_types QList<QString> [optional]
    * @param[in]  device_mac QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  device_name QString [optional]
    * @param[in]  client_ip QString [optional]
    * @param[in]  client_mac QString [optional]
    * @param[in]  client_name QString [optional]
    * @param[in]  sm_device_mac QString [optional]
    * @param[in]  sm_device_name QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &excluded_event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &device_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sm_device_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sm_device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedEvents(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getOrganizationApplianceSecurityEvents(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_rollbacks_network_firmware_upgrades_staged_events_request OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request [required]
    */
    virtual void rollbacksNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request &oai_rollbacks_network_firmware_upgrades_staged_events_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_staged_events_request OAIUpdateNetworkFirmwareUpgradesStagedEvents_request [required]
    */
    virtual void updateNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIUpdateNetworkFirmwareUpgradesStagedEvents_request &oai_update_network_firmware_upgrades_staged_events_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkFirmwareUpgradesStagedEventCallback(OAIHttpRequestWorker *worker);
    void deferNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceClientSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkEventsEventTypesCallback(OAIHttpRequestWorker *worker);
    void getNetworkEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void rollbacksNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkFirmwareUpgradesStagedEventSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void deferNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getNetworkApplianceClientSecurityEventsSignal(QList<OAIObject> summary);
    void getNetworkApplianceSecurityEventsSignal(QList<OAIObject> summary);
    void getNetworkEventsEventTypesSignal(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary);
    void getNetworkEventsSignal(OAIGetNetworkEvents_200_response summary);
    void getNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getOrganizationApplianceSecurityEventsSignal(QList<OAIObject> summary);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void updateNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);


    void createNetworkFirmwareUpgradesStagedEventSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void deferNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getNetworkApplianceClientSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkEventsEventTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary);
    void getNetworkEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkEvents_200_response summary);
    void getNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getOrganizationApplianceSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void updateNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);

    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedEventSignalError() instead")
    void createNetworkFirmwareUpgradesStagedEventSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedEventSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deferNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void deferNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deferNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceClientSecurityEventsSignalError() instead")
    void getNetworkApplianceClientSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceClientSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityEventsSignalError() instead")
    void getNetworkApplianceSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsEventTypesSignalError() instead")
    void getNetworkEventsEventTypesSignalE(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsEventTypesSignalError(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsSignalError() instead")
    void getNetworkEventsSignalE(OAIGetNetworkEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsSignalError(OAIGetNetworkEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void getNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityEventsSignalError() instead")
    void getOrganizationApplianceSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbacksNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedEventSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesStagedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void deferNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceClientSecurityEventsSignalErrorFull() instead")
    void getNetworkApplianceClientSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceClientSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityEventsSignalErrorFull() instead")
    void getNetworkApplianceSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsEventTypesSignalErrorFull() instead")
    void getNetworkEventsEventTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsEventTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsSignalErrorFull() instead")
    void getNetworkEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityEventsSignalErrorFull() instead")
    void getOrganizationApplianceSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
