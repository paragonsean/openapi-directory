/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip() {
    this->initializeModel();
}

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::~OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip() {}

void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::initializeModel() {

    m_dscp_isSet = false;
    m_dscp_isValid = false;

    m_header_length_isSet = false;
    m_header_length_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::fromJsonObject(QJsonObject json) {

    m_dscp_isValid = ::OpenAPI::fromJsonValue(m_dscp, json[QString("dscp")]);
    m_dscp_isSet = !json[QString("dscp")].isNull() && m_dscp_isValid;

    m_header_length_isValid = ::OpenAPI::fromJsonValue(m_header_length, json[QString("headerLength")]);
    m_header_length_isSet = !json[QString("headerLength")].isNull() && m_header_length_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::asJsonObject() const {
    QJsonObject obj;
    if (m_dscp.isSet()) {
        obj.insert(QString("dscp"), ::OpenAPI::toJsonValue(m_dscp));
    }
    if (m_header_length_isSet) {
        obj.insert(QString("headerLength"), ::OpenAPI::toJsonValue(m_header_length));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip_dscp OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getDscp() const {
    return m_dscp;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setDscp(const OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip_dscp &dscp) {
    m_dscp = dscp;
    m_dscp_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_dscp_Set() const{
    return m_dscp_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_dscp_Valid() const{
    return m_dscp_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getHeaderLength() const {
    return m_header_length;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setHeaderLength(const qint32 &header_length) {
    m_header_length = header_length;
    m_header_length_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_header_length_Set() const{
    return m_header_length_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_header_length_Valid() const{
    return m_header_length_isValid;
}

QString OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getId() const {
    return m_id;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getLength() const {
    return m_length;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_length_Set() const{
    return m_length_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getProtocol() const {
    return m_protocol;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setProtocol(const qint32 &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getTtl() const {
    return m_ttl;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_ttl_Valid() const{
    return m_ttl_isValid;
}

qint32 OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::getVersion() const {
    return m_version;
}
void OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dscp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_ip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
