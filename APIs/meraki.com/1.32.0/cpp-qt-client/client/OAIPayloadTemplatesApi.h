/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayloadTemplatesApi_H
#define OAI_OAIPayloadTemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkWebhooksPayloadTemplate_request.h"
#include "OAIGetNetworkWebhooksPayloadTemplates_200_response_inner.h"
#include "OAIUpdateNetworkWebhooksPayloadTemplate_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayloadTemplatesApi : public QObject {
    Q_OBJECT

public:
    OAIPayloadTemplatesApi(const int timeOut = 0);
    ~OAIPayloadTemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_payload_template_request OAICreateNetworkWebhooksPayloadTemplate_request [required]
    */
    virtual void createNetworkWebhooksPayloadTemplate(const QString &network_id, const OAICreateNetworkWebhooksPayloadTemplate_request &oai_create_network_webhooks_payload_template_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    */
    virtual void deleteNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    */
    virtual void getNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWebhooksPayloadTemplates(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    * @param[in]  oai_update_network_webhooks_payload_template_request OAIUpdateNetworkWebhooksPayloadTemplate_request [optional]
    */
    virtual void updateNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksPayloadTemplate_request> &oai_update_network_webhooks_payload_template_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksPayloadTemplate_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplatesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void deleteNetworkWebhooksPayloadTemplateSignal();
    void getNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void getNetworkWebhooksPayloadTemplatesSignal(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary);
    void updateNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);


    void createNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void deleteNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void getNetworkWebhooksPayloadTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary);
    void updateNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksPayloadTemplateSignalError() instead")
    void createNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksPayloadTemplateSignalError() instead")
    void deleteNetworkWebhooksPayloadTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksPayloadTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplateSignalError() instead")
    void getNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplatesSignalError() instead")
    void getNetworkWebhooksPayloadTemplatesSignalE(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplatesSignalError(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksPayloadTemplateSignalError() instead")
    void updateNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void createNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void deleteNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void getNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplatesSignalErrorFull() instead")
    void getNetworkWebhooksPayloadTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void updateNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
