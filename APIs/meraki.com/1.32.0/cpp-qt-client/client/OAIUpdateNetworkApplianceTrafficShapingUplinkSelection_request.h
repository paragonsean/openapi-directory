/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_H
#define OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_H

#include <QJsonObject>

#include "OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback.h"
#include "OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner.h"
#include "OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback;
class OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner;
class OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner;

class OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request : public OAIObject {
public:
    OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request();
    OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request(QString json);
    ~OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActiveActiveAutoVpnEnabled() const;
    void setActiveActiveAutoVpnEnabled(const bool &active_active_auto_vpn_enabled);
    bool is_active_active_auto_vpn_enabled_Set() const;
    bool is_active_active_auto_vpn_enabled_Valid() const;

    QString getDefaultUplink() const;
    void setDefaultUplink(const QString &default_uplink);
    bool is_default_uplink_Set() const;
    bool is_default_uplink_Valid() const;

    OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback getFailoverAndFailback() const;
    void setFailoverAndFailback(const OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback &failover_and_failback);
    bool is_failover_and_failback_Set() const;
    bool is_failover_and_failback_Valid() const;

    bool isLoadBalancingEnabled() const;
    void setLoadBalancingEnabled(const bool &load_balancing_enabled);
    bool is_load_balancing_enabled_Set() const;
    bool is_load_balancing_enabled_Valid() const;

    QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner> getVpnTrafficUplinkPreferences() const;
    void setVpnTrafficUplinkPreferences(const QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner> &vpn_traffic_uplink_preferences);
    bool is_vpn_traffic_uplink_preferences_Set() const;
    bool is_vpn_traffic_uplink_preferences_Valid() const;

    QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner> getWanTrafficUplinkPreferences() const;
    void setWanTrafficUplinkPreferences(const QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner> &wan_traffic_uplink_preferences);
    bool is_wan_traffic_uplink_preferences_Set() const;
    bool is_wan_traffic_uplink_preferences_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active_active_auto_vpn_enabled;
    bool m_active_active_auto_vpn_enabled_isSet;
    bool m_active_active_auto_vpn_enabled_isValid;

    QString m_default_uplink;
    bool m_default_uplink_isSet;
    bool m_default_uplink_isValid;

    OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_failoverAndFailback m_failover_and_failback;
    bool m_failover_and_failback_isSet;
    bool m_failover_and_failback_isValid;

    bool m_load_balancing_enabled;
    bool m_load_balancing_enabled_isSet;
    bool m_load_balancing_enabled_isValid;

    QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner> m_vpn_traffic_uplink_preferences;
    bool m_vpn_traffic_uplink_preferences_isSet;
    bool m_vpn_traffic_uplink_preferences_isValid;

    QList<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_wanTrafficUplinkPreferences_inner> m_wan_traffic_uplink_preferences;
    bool m_wan_traffic_uplink_preferences_isSet;
    bool m_wan_traffic_uplink_preferences_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request)

#endif // OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request_H
