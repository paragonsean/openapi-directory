/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp() {
    this->initializeModel();
}

OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::~OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp() {}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_management_address_isSet = false;
    m_management_address_isValid = false;

    m_native_vlan_isSet = false;
    m_native_vlan_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_port_id_isSet = false;
    m_port_id_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vtp_management_domain_isSet = false;
    m_vtp_management_domain_isValid = false;
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_management_address_isValid = ::OpenAPI::fromJsonValue(m_management_address, json[QString("managementAddress")]);
    m_management_address_isSet = !json[QString("managementAddress")].isNull() && m_management_address_isValid;

    m_native_vlan_isValid = ::OpenAPI::fromJsonValue(m_native_vlan, json[QString("nativeVlan")]);
    m_native_vlan_isSet = !json[QString("nativeVlan")].isNull() && m_native_vlan_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_port_id_isValid = ::OpenAPI::fromJsonValue(m_port_id, json[QString("portId")]);
    m_port_id_isSet = !json[QString("portId")].isNull() && m_port_id_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vtp_management_domain_isValid = ::OpenAPI::fromJsonValue(m_vtp_management_domain, json[QString("vtpManagementDomain")]);
    m_vtp_management_domain_isSet = !json[QString("vtpManagementDomain")].isNull() && m_vtp_management_domain_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_capabilities_isSet) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_management_address_isSet) {
        obj.insert(QString("managementAddress"), ::OpenAPI::toJsonValue(m_management_address));
    }
    if (m_native_vlan_isSet) {
        obj.insert(QString("nativeVlan"), ::OpenAPI::toJsonValue(m_native_vlan));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_port_id_isSet) {
        obj.insert(QString("portId"), ::OpenAPI::toJsonValue(m_port_id));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vtp_management_domain_isSet) {
        obj.insert(QString("vtpManagementDomain"), ::OpenAPI::toJsonValue(m_vtp_management_domain));
    }
    return obj;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getAddress() const {
    return m_address;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getCapabilities() const {
    return m_capabilities;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setCapabilities(const QString &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getDeviceId() const {
    return m_device_id;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getManagementAddress() const {
    return m_management_address;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setManagementAddress(const QString &management_address) {
    m_management_address = management_address;
    m_management_address_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_management_address_Set() const{
    return m_management_address_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_management_address_Valid() const{
    return m_management_address_isValid;
}

qint32 OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getNativeVlan() const {
    return m_native_vlan;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setNativeVlan(const qint32 &native_vlan) {
    m_native_vlan = native_vlan;
    m_native_vlan_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_native_vlan_Set() const{
    return m_native_vlan_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_native_vlan_Valid() const{
    return m_native_vlan_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getPlatform() const {
    return m_platform;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getPortId() const {
    return m_port_id;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setPortId(const QString &port_id) {
    m_port_id = port_id;
    m_port_id_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_port_id_Set() const{
    return m_port_id_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_port_id_Valid() const{
    return m_port_id_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getSystemName() const {
    return m_system_name;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_system_name_Valid() const{
    return m_system_name_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getVersion() const {
    return m_version;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::getVtpManagementDomain() const {
    return m_vtp_management_domain;
}
void OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::setVtpManagementDomain(const QString &vtp_management_domain) {
    m_vtp_management_domain = vtp_management_domain;
    m_vtp_management_domain_isSet = true;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_vtp_management_domain_Set() const{
    return m_vtp_management_domain_isSet;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::is_vtp_management_domain_Valid() const{
    return m_vtp_management_domain_isValid;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vtp_management_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceSwitchPortsStatuses_200_response_inner_cdp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
