/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDeviceSecurityCenters_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::OAIGetNetworkSmDeviceSecurityCenters_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::OAIGetNetworkSmDeviceSecurityCenters_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::~OAIGetNetworkSmDeviceSecurityCenters_200_response_inner() {}

void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::initializeModel() {

    m_anti_virus_name_isSet = false;
    m_anti_virus_name_isValid = false;

    m_fire_wall_name_isSet = false;
    m_fire_wall_name_isValid = false;

    m_has_anti_virus_isSet = false;
    m_has_anti_virus_isValid = false;

    m_has_fire_wall_installed_isSet = false;
    m_has_fire_wall_installed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_auto_login_disabled_isSet = false;
    m_is_auto_login_disabled_isValid = false;

    m_is_disk_encrypted_isSet = false;
    m_is_disk_encrypted_isValid = false;

    m_is_fire_wall_enabled_isSet = false;
    m_is_fire_wall_enabled_isValid = false;

    m_is_rooted_isSet = false;
    m_is_rooted_isValid = false;

    m_running_procs_isSet = false;
    m_running_procs_isValid = false;
}

void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::fromJsonObject(QJsonObject json) {

    m_anti_virus_name_isValid = ::OpenAPI::fromJsonValue(m_anti_virus_name, json[QString("antiVirusName")]);
    m_anti_virus_name_isSet = !json[QString("antiVirusName")].isNull() && m_anti_virus_name_isValid;

    m_fire_wall_name_isValid = ::OpenAPI::fromJsonValue(m_fire_wall_name, json[QString("fireWallName")]);
    m_fire_wall_name_isSet = !json[QString("fireWallName")].isNull() && m_fire_wall_name_isValid;

    m_has_anti_virus_isValid = ::OpenAPI::fromJsonValue(m_has_anti_virus, json[QString("hasAntiVirus")]);
    m_has_anti_virus_isSet = !json[QString("hasAntiVirus")].isNull() && m_has_anti_virus_isValid;

    m_has_fire_wall_installed_isValid = ::OpenAPI::fromJsonValue(m_has_fire_wall_installed, json[QString("hasFireWallInstalled")]);
    m_has_fire_wall_installed_isSet = !json[QString("hasFireWallInstalled")].isNull() && m_has_fire_wall_installed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_auto_login_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_auto_login_disabled, json[QString("isAutoLoginDisabled")]);
    m_is_auto_login_disabled_isSet = !json[QString("isAutoLoginDisabled")].isNull() && m_is_auto_login_disabled_isValid;

    m_is_disk_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_disk_encrypted, json[QString("isDiskEncrypted")]);
    m_is_disk_encrypted_isSet = !json[QString("isDiskEncrypted")].isNull() && m_is_disk_encrypted_isValid;

    m_is_fire_wall_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_fire_wall_enabled, json[QString("isFireWallEnabled")]);
    m_is_fire_wall_enabled_isSet = !json[QString("isFireWallEnabled")].isNull() && m_is_fire_wall_enabled_isValid;

    m_is_rooted_isValid = ::OpenAPI::fromJsonValue(m_is_rooted, json[QString("isRooted")]);
    m_is_rooted_isSet = !json[QString("isRooted")].isNull() && m_is_rooted_isValid;

    m_running_procs_isValid = ::OpenAPI::fromJsonValue(m_running_procs, json[QString("runningProcs")]);
    m_running_procs_isSet = !json[QString("runningProcs")].isNull() && m_running_procs_isValid;
}

QString OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_anti_virus_name_isSet) {
        obj.insert(QString("antiVirusName"), ::OpenAPI::toJsonValue(m_anti_virus_name));
    }
    if (m_fire_wall_name_isSet) {
        obj.insert(QString("fireWallName"), ::OpenAPI::toJsonValue(m_fire_wall_name));
    }
    if (m_has_anti_virus_isSet) {
        obj.insert(QString("hasAntiVirus"), ::OpenAPI::toJsonValue(m_has_anti_virus));
    }
    if (m_has_fire_wall_installed_isSet) {
        obj.insert(QString("hasFireWallInstalled"), ::OpenAPI::toJsonValue(m_has_fire_wall_installed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_auto_login_disabled_isSet) {
        obj.insert(QString("isAutoLoginDisabled"), ::OpenAPI::toJsonValue(m_is_auto_login_disabled));
    }
    if (m_is_disk_encrypted_isSet) {
        obj.insert(QString("isDiskEncrypted"), ::OpenAPI::toJsonValue(m_is_disk_encrypted));
    }
    if (m_is_fire_wall_enabled_isSet) {
        obj.insert(QString("isFireWallEnabled"), ::OpenAPI::toJsonValue(m_is_fire_wall_enabled));
    }
    if (m_is_rooted_isSet) {
        obj.insert(QString("isRooted"), ::OpenAPI::toJsonValue(m_is_rooted));
    }
    if (m_running_procs_isSet) {
        obj.insert(QString("runningProcs"), ::OpenAPI::toJsonValue(m_running_procs));
    }
    return obj;
}

QString OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::getAntiVirusName() const {
    return m_anti_virus_name;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setAntiVirusName(const QString &anti_virus_name) {
    m_anti_virus_name = anti_virus_name;
    m_anti_virus_name_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_anti_virus_name_Set() const{
    return m_anti_virus_name_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_anti_virus_name_Valid() const{
    return m_anti_virus_name_isValid;
}

QString OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::getFireWallName() const {
    return m_fire_wall_name;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setFireWallName(const QString &fire_wall_name) {
    m_fire_wall_name = fire_wall_name;
    m_fire_wall_name_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_fire_wall_name_Set() const{
    return m_fire_wall_name_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_fire_wall_name_Valid() const{
    return m_fire_wall_name_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isHasAntiVirus() const {
    return m_has_anti_virus;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setHasAntiVirus(const bool &has_anti_virus) {
    m_has_anti_virus = has_anti_virus;
    m_has_anti_virus_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_has_anti_virus_Set() const{
    return m_has_anti_virus_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_has_anti_virus_Valid() const{
    return m_has_anti_virus_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isHasFireWallInstalled() const {
    return m_has_fire_wall_installed;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setHasFireWallInstalled(const bool &has_fire_wall_installed) {
    m_has_fire_wall_installed = has_fire_wall_installed;
    m_has_fire_wall_installed_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_has_fire_wall_installed_Set() const{
    return m_has_fire_wall_installed_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_has_fire_wall_installed_Valid() const{
    return m_has_fire_wall_installed_isValid;
}

QString OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isIsAutoLoginDisabled() const {
    return m_is_auto_login_disabled;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setIsAutoLoginDisabled(const bool &is_auto_login_disabled) {
    m_is_auto_login_disabled = is_auto_login_disabled;
    m_is_auto_login_disabled_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_auto_login_disabled_Set() const{
    return m_is_auto_login_disabled_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_auto_login_disabled_Valid() const{
    return m_is_auto_login_disabled_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isIsDiskEncrypted() const {
    return m_is_disk_encrypted;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setIsDiskEncrypted(const bool &is_disk_encrypted) {
    m_is_disk_encrypted = is_disk_encrypted;
    m_is_disk_encrypted_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_disk_encrypted_Set() const{
    return m_is_disk_encrypted_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_disk_encrypted_Valid() const{
    return m_is_disk_encrypted_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isIsFireWallEnabled() const {
    return m_is_fire_wall_enabled;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setIsFireWallEnabled(const bool &is_fire_wall_enabled) {
    m_is_fire_wall_enabled = is_fire_wall_enabled;
    m_is_fire_wall_enabled_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_fire_wall_enabled_Set() const{
    return m_is_fire_wall_enabled_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_fire_wall_enabled_Valid() const{
    return m_is_fire_wall_enabled_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isIsRooted() const {
    return m_is_rooted;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setIsRooted(const bool &is_rooted) {
    m_is_rooted = is_rooted;
    m_is_rooted_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_rooted_Set() const{
    return m_is_rooted_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_is_rooted_Valid() const{
    return m_is_rooted_isValid;
}

QString OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::getRunningProcs() const {
    return m_running_procs;
}
void OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::setRunningProcs(const QString &running_procs) {
    m_running_procs = running_procs;
    m_running_procs_isSet = true;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_running_procs_Set() const{
    return m_running_procs_isSet;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::is_running_procs_Valid() const{
    return m_running_procs_isValid;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anti_virus_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fire_wall_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_anti_virus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fire_wall_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_login_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disk_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_fire_wall_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rooted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_procs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDeviceSecurityCenters_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
