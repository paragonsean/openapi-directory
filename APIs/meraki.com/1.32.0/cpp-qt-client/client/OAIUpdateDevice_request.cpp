/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDevice_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDevice_request::OAIUpdateDevice_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDevice_request::OAIUpdateDevice_request() {
    this->initializeModel();
}

OAIUpdateDevice_request::~OAIUpdateDevice_request() {}

void OAIUpdateDevice_request::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_floor_plan_id_isSet = false;
    m_floor_plan_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_move_map_marker_isSet = false;
    m_move_map_marker_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_switch_profile_id_isSet = false;
    m_switch_profile_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateDevice_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDevice_request::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_floor_plan_id_isValid = ::OpenAPI::fromJsonValue(m_floor_plan_id, json[QString("floorPlanId")]);
    m_floor_plan_id_isSet = !json[QString("floorPlanId")].isNull() && m_floor_plan_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_move_map_marker_isValid = ::OpenAPI::fromJsonValue(m_move_map_marker, json[QString("moveMapMarker")]);
    m_move_map_marker_isSet = !json[QString("moveMapMarker")].isNull() && m_move_map_marker_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_switch_profile_id_isValid = ::OpenAPI::fromJsonValue(m_switch_profile_id, json[QString("switchProfileId")]);
    m_switch_profile_id_isSet = !json[QString("switchProfileId")].isNull() && m_switch_profile_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateDevice_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDevice_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_floor_plan_id_isSet) {
        obj.insert(QString("floorPlanId"), ::OpenAPI::toJsonValue(m_floor_plan_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_move_map_marker_isSet) {
        obj.insert(QString("moveMapMarker"), ::OpenAPI::toJsonValue(m_move_map_marker));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_switch_profile_id_isSet) {
        obj.insert(QString("switchProfileId"), ::OpenAPI::toJsonValue(m_switch_profile_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateDevice_request::getAddress() const {
    return m_address;
}
void OAIUpdateDevice_request::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUpdateDevice_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUpdateDevice_request::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIUpdateDevice_request::getFloorPlanId() const {
    return m_floor_plan_id;
}
void OAIUpdateDevice_request::setFloorPlanId(const QString &floor_plan_id) {
    m_floor_plan_id = floor_plan_id;
    m_floor_plan_id_isSet = true;
}

bool OAIUpdateDevice_request::is_floor_plan_id_Set() const{
    return m_floor_plan_id_isSet;
}

bool OAIUpdateDevice_request::is_floor_plan_id_Valid() const{
    return m_floor_plan_id_isValid;
}

float OAIUpdateDevice_request::getLat() const {
    return m_lat;
}
void OAIUpdateDevice_request::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIUpdateDevice_request::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIUpdateDevice_request::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIUpdateDevice_request::getLng() const {
    return m_lng;
}
void OAIUpdateDevice_request::setLng(const float &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIUpdateDevice_request::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIUpdateDevice_request::is_lng_Valid() const{
    return m_lng_isValid;
}

bool OAIUpdateDevice_request::isMoveMapMarker() const {
    return m_move_map_marker;
}
void OAIUpdateDevice_request::setMoveMapMarker(const bool &move_map_marker) {
    m_move_map_marker = move_map_marker;
    m_move_map_marker_isSet = true;
}

bool OAIUpdateDevice_request::is_move_map_marker_Set() const{
    return m_move_map_marker_isSet;
}

bool OAIUpdateDevice_request::is_move_map_marker_Valid() const{
    return m_move_map_marker_isValid;
}

QString OAIUpdateDevice_request::getName() const {
    return m_name;
}
void OAIUpdateDevice_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateDevice_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateDevice_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateDevice_request::getNotes() const {
    return m_notes;
}
void OAIUpdateDevice_request::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUpdateDevice_request::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUpdateDevice_request::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIUpdateDevice_request::getSwitchProfileId() const {
    return m_switch_profile_id;
}
void OAIUpdateDevice_request::setSwitchProfileId(const QString &switch_profile_id) {
    m_switch_profile_id = switch_profile_id;
    m_switch_profile_id_isSet = true;
}

bool OAIUpdateDevice_request::is_switch_profile_id_Set() const{
    return m_switch_profile_id_isSet;
}

bool OAIUpdateDevice_request::is_switch_profile_id_Valid() const{
    return m_switch_profile_id_isValid;
}

QList<QString> OAIUpdateDevice_request::getTags() const {
    return m_tags;
}
void OAIUpdateDevice_request::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateDevice_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateDevice_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateDevice_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_map_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDevice_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
