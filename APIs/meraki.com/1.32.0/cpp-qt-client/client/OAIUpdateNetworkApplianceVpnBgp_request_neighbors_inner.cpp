/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::~OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner() {}

void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::initializeModel() {

    m_allow_transit_isSet = false;
    m_allow_transit_isValid = false;

    m_ebgp_hold_timer_isSet = false;
    m_ebgp_hold_timer_isValid = false;

    m_ebgp_multihop_isSet = false;
    m_ebgp_multihop_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_ipv6_isSet = false;
    m_ipv6_isValid = false;

    m_receive_limit_isSet = false;
    m_receive_limit_isValid = false;

    m_remote_as_number_isSet = false;
    m_remote_as_number_isValid = false;
}

void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::fromJsonObject(QJsonObject json) {

    m_allow_transit_isValid = ::OpenAPI::fromJsonValue(m_allow_transit, json[QString("allowTransit")]);
    m_allow_transit_isSet = !json[QString("allowTransit")].isNull() && m_allow_transit_isValid;

    m_ebgp_hold_timer_isValid = ::OpenAPI::fromJsonValue(m_ebgp_hold_timer, json[QString("ebgpHoldTimer")]);
    m_ebgp_hold_timer_isSet = !json[QString("ebgpHoldTimer")].isNull() && m_ebgp_hold_timer_isValid;

    m_ebgp_multihop_isValid = ::OpenAPI::fromJsonValue(m_ebgp_multihop, json[QString("ebgpMultihop")]);
    m_ebgp_multihop_isSet = !json[QString("ebgpMultihop")].isNull() && m_ebgp_multihop_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_ipv6_isValid = ::OpenAPI::fromJsonValue(m_ipv6, json[QString("ipv6")]);
    m_ipv6_isSet = !json[QString("ipv6")].isNull() && m_ipv6_isValid;

    m_receive_limit_isValid = ::OpenAPI::fromJsonValue(m_receive_limit, json[QString("receiveLimit")]);
    m_receive_limit_isSet = !json[QString("receiveLimit")].isNull() && m_receive_limit_isValid;

    m_remote_as_number_isValid = ::OpenAPI::fromJsonValue(m_remote_as_number, json[QString("remoteAsNumber")]);
    m_remote_as_number_isSet = !json[QString("remoteAsNumber")].isNull() && m_remote_as_number_isValid;
}

QString OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_transit_isSet) {
        obj.insert(QString("allowTransit"), ::OpenAPI::toJsonValue(m_allow_transit));
    }
    if (m_ebgp_hold_timer_isSet) {
        obj.insert(QString("ebgpHoldTimer"), ::OpenAPI::toJsonValue(m_ebgp_hold_timer));
    }
    if (m_ebgp_multihop_isSet) {
        obj.insert(QString("ebgpMultihop"), ::OpenAPI::toJsonValue(m_ebgp_multihop));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_ipv6.isSet()) {
        obj.insert(QString("ipv6"), ::OpenAPI::toJsonValue(m_ipv6));
    }
    if (m_receive_limit_isSet) {
        obj.insert(QString("receiveLimit"), ::OpenAPI::toJsonValue(m_receive_limit));
    }
    if (m_remote_as_number_isSet) {
        obj.insert(QString("remoteAsNumber"), ::OpenAPI::toJsonValue(m_remote_as_number));
    }
    return obj;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::isAllowTransit() const {
    return m_allow_transit;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setAllowTransit(const bool &allow_transit) {
    m_allow_transit = allow_transit;
    m_allow_transit_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_allow_transit_Set() const{
    return m_allow_transit_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_allow_transit_Valid() const{
    return m_allow_transit_isValid;
}

qint32 OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::getEbgpHoldTimer() const {
    return m_ebgp_hold_timer;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setEbgpHoldTimer(const qint32 &ebgp_hold_timer) {
    m_ebgp_hold_timer = ebgp_hold_timer;
    m_ebgp_hold_timer_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ebgp_hold_timer_Set() const{
    return m_ebgp_hold_timer_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ebgp_hold_timer_Valid() const{
    return m_ebgp_hold_timer_isValid;
}

qint32 OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::getEbgpMultihop() const {
    return m_ebgp_multihop;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setEbgpMultihop(const qint32 &ebgp_multihop) {
    m_ebgp_multihop = ebgp_multihop;
    m_ebgp_multihop_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ebgp_multihop_Set() const{
    return m_ebgp_multihop_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ebgp_multihop_Valid() const{
    return m_ebgp_multihop_isValid;
}

QString OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::getIp() const {
    return m_ip;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner_ipv6 OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::getIpv6() const {
    return m_ipv6;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setIpv6(const OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner_ipv6 &ipv6) {
    m_ipv6 = ipv6;
    m_ipv6_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ipv6_Set() const{
    return m_ipv6_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_ipv6_Valid() const{
    return m_ipv6_isValid;
}

qint32 OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::getReceiveLimit() const {
    return m_receive_limit;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setReceiveLimit(const qint32 &receive_limit) {
    m_receive_limit = receive_limit;
    m_receive_limit_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_receive_limit_Set() const{
    return m_receive_limit_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_receive_limit_Valid() const{
    return m_receive_limit_isValid;
}

qint32 OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::getRemoteAsNumber() const {
    return m_remote_as_number;
}
void OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::setRemoteAsNumber(const qint32 &remote_as_number) {
    m_remote_as_number = remote_as_number;
    m_remote_as_number_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_remote_as_number_Set() const{
    return m_remote_as_number_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::is_remote_as_number_Valid() const{
    return m_remote_as_number_isValid;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_transit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebgp_hold_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebgp_multihop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_as_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ebgp_hold_timer_isValid && m_ebgp_multihop_isValid && m_remote_as_number_isValid && true;
}

} // namespace OpenAPI
