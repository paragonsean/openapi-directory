/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceLiveToolsPing_200_response_results_latencies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceLiveToolsPing_200_response_results_latencies::OAIGetDeviceLiveToolsPing_200_response_results_latencies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceLiveToolsPing_200_response_results_latencies::OAIGetDeviceLiveToolsPing_200_response_results_latencies() {
    this->initializeModel();
}

OAIGetDeviceLiveToolsPing_200_response_results_latencies::~OAIGetDeviceLiveToolsPing_200_response_results_latencies() {}

void OAIGetDeviceLiveToolsPing_200_response_results_latencies::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;
}

void OAIGetDeviceLiveToolsPing_200_response_results_latencies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceLiveToolsPing_200_response_results_latencies::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;
}

QString OAIGetDeviceLiveToolsPing_200_response_results_latencies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceLiveToolsPing_200_response_results_latencies::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    return obj;
}

float OAIGetDeviceLiveToolsPing_200_response_results_latencies::getAverage() const {
    return m_average;
}
void OAIGetDeviceLiveToolsPing_200_response_results_latencies::setAverage(const float &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::is_average_Set() const{
    return m_average_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::is_average_Valid() const{
    return m_average_isValid;
}

float OAIGetDeviceLiveToolsPing_200_response_results_latencies::getMaximum() const {
    return m_maximum;
}
void OAIGetDeviceLiveToolsPing_200_response_results_latencies::setMaximum(const float &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::is_maximum_Valid() const{
    return m_maximum_isValid;
}

float OAIGetDeviceLiveToolsPing_200_response_results_latencies::getMinimum() const {
    return m_minimum;
}
void OAIGetDeviceLiveToolsPing_200_response_results_latencies::setMinimum(const float &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::is_minimum_Valid() const{
    return m_minimum_isValid;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceLiveToolsPing_200_response_results_latencies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
