/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner() {
    this->initializeModel();
}

OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::~OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner() {}

void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::initializeModel() {

    m_downloaded_at_isSet = false;
    m_downloaded_at_isValid = false;

    m_last_connected_at_isSet = false;
    m_last_connected_at_isValid = false;

    m_scep_completed_at_isSet = false;
    m_scep_completed_at_isValid = false;

    m_trusted_access_config_id_isSet = false;
    m_trusted_access_config_id_isValid = false;
}

void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::fromJsonObject(QJsonObject json) {

    m_downloaded_at_isValid = ::OpenAPI::fromJsonValue(m_downloaded_at, json[QString("downloadedAt")]);
    m_downloaded_at_isSet = !json[QString("downloadedAt")].isNull() && m_downloaded_at_isValid;

    m_last_connected_at_isValid = ::OpenAPI::fromJsonValue(m_last_connected_at, json[QString("lastConnectedAt")]);
    m_last_connected_at_isSet = !json[QString("lastConnectedAt")].isNull() && m_last_connected_at_isValid;

    m_scep_completed_at_isValid = ::OpenAPI::fromJsonValue(m_scep_completed_at, json[QString("scepCompletedAt")]);
    m_scep_completed_at_isSet = !json[QString("scepCompletedAt")].isNull() && m_scep_completed_at_isValid;

    m_trusted_access_config_id_isValid = ::OpenAPI::fromJsonValue(m_trusted_access_config_id, json[QString("trustedAccessConfigId")]);
    m_trusted_access_config_id_isSet = !json[QString("trustedAccessConfigId")].isNull() && m_trusted_access_config_id_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_downloaded_at_isSet) {
        obj.insert(QString("downloadedAt"), ::OpenAPI::toJsonValue(m_downloaded_at));
    }
    if (m_last_connected_at_isSet) {
        obj.insert(QString("lastConnectedAt"), ::OpenAPI::toJsonValue(m_last_connected_at));
    }
    if (m_scep_completed_at_isSet) {
        obj.insert(QString("scepCompletedAt"), ::OpenAPI::toJsonValue(m_scep_completed_at));
    }
    if (m_trusted_access_config_id_isSet) {
        obj.insert(QString("trustedAccessConfigId"), ::OpenAPI::toJsonValue(m_trusted_access_config_id));
    }
    return obj;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::getDownloadedAt() const {
    return m_downloaded_at;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::setDownloadedAt(const QString &downloaded_at) {
    m_downloaded_at = downloaded_at;
    m_downloaded_at_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_downloaded_at_Set() const{
    return m_downloaded_at_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_downloaded_at_Valid() const{
    return m_downloaded_at_isValid;
}

QDateTime OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::getLastConnectedAt() const {
    return m_last_connected_at;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::setLastConnectedAt(const QDateTime &last_connected_at) {
    m_last_connected_at = last_connected_at;
    m_last_connected_at_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_last_connected_at_Set() const{
    return m_last_connected_at_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_last_connected_at_Valid() const{
    return m_last_connected_at_isValid;
}

QDateTime OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::getScepCompletedAt() const {
    return m_scep_completed_at;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::setScepCompletedAt(const QDateTime &scep_completed_at) {
    m_scep_completed_at = scep_completed_at;
    m_scep_completed_at_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_scep_completed_at_Set() const{
    return m_scep_completed_at_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_scep_completed_at_Valid() const{
    return m_scep_completed_at_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::getTrustedAccessConfigId() const {
    return m_trusted_access_config_id;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::setTrustedAccessConfigId(const QString &trusted_access_config_id) {
    m_trusted_access_config_id = trusted_access_config_id;
    m_trusted_access_config_id_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_trusted_access_config_id_Set() const{
    return m_trusted_access_config_id_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::is_trusted_access_config_id_Valid() const{
    return m_trusted_access_config_id_isValid;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_downloaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_connected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scep_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_access_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
