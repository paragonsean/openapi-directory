/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceLiveToolsPing_200_response_results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceLiveToolsPing_200_response_results::OAIGetDeviceLiveToolsPing_200_response_results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceLiveToolsPing_200_response_results::OAIGetDeviceLiveToolsPing_200_response_results() {
    this->initializeModel();
}

OAIGetDeviceLiveToolsPing_200_response_results::~OAIGetDeviceLiveToolsPing_200_response_results() {}

void OAIGetDeviceLiveToolsPing_200_response_results::initializeModel() {

    m_latencies_isSet = false;
    m_latencies_isValid = false;

    m_loss_isSet = false;
    m_loss_isValid = false;

    m_received_isSet = false;
    m_received_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;
}

void OAIGetDeviceLiveToolsPing_200_response_results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceLiveToolsPing_200_response_results::fromJsonObject(QJsonObject json) {

    m_latencies_isValid = ::OpenAPI::fromJsonValue(m_latencies, json[QString("latencies")]);
    m_latencies_isSet = !json[QString("latencies")].isNull() && m_latencies_isValid;

    m_loss_isValid = ::OpenAPI::fromJsonValue(m_loss, json[QString("loss")]);
    m_loss_isSet = !json[QString("loss")].isNull() && m_loss_isValid;

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;
}

QString OAIGetDeviceLiveToolsPing_200_response_results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceLiveToolsPing_200_response_results::asJsonObject() const {
    QJsonObject obj;
    if (m_latencies.isSet()) {
        obj.insert(QString("latencies"), ::OpenAPI::toJsonValue(m_latencies));
    }
    if (m_loss.isSet()) {
        obj.insert(QString("loss"), ::OpenAPI::toJsonValue(m_loss));
    }
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_replies.size() > 0) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    return obj;
}

OAIGetDeviceLiveToolsPing_200_response_results_latencies OAIGetDeviceLiveToolsPing_200_response_results::getLatencies() const {
    return m_latencies;
}
void OAIGetDeviceLiveToolsPing_200_response_results::setLatencies(const OAIGetDeviceLiveToolsPing_200_response_results_latencies &latencies) {
    m_latencies = latencies;
    m_latencies_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_latencies_Set() const{
    return m_latencies_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_latencies_Valid() const{
    return m_latencies_isValid;
}

OAIGetDeviceLiveToolsPing_200_response_results_loss OAIGetDeviceLiveToolsPing_200_response_results::getLoss() const {
    return m_loss;
}
void OAIGetDeviceLiveToolsPing_200_response_results::setLoss(const OAIGetDeviceLiveToolsPing_200_response_results_loss &loss) {
    m_loss = loss;
    m_loss_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_loss_Set() const{
    return m_loss_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_loss_Valid() const{
    return m_loss_isValid;
}

qint32 OAIGetDeviceLiveToolsPing_200_response_results::getReceived() const {
    return m_received;
}
void OAIGetDeviceLiveToolsPing_200_response_results::setReceived(const qint32 &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_received_Set() const{
    return m_received_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_received_Valid() const{
    return m_received_isValid;
}

QList<OAIGetDeviceLiveToolsPing_200_response_results_replies_inner> OAIGetDeviceLiveToolsPing_200_response_results::getReplies() const {
    return m_replies;
}
void OAIGetDeviceLiveToolsPing_200_response_results::setReplies(const QList<OAIGetDeviceLiveToolsPing_200_response_results_replies_inner> &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_replies_Valid() const{
    return m_replies_isValid;
}

qint32 OAIGetDeviceLiveToolsPing_200_response_results::getSent() const {
    return m_sent;
}
void OAIGetDeviceLiveToolsPing_200_response_results::setSent(const qint32 &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::is_sent_Valid() const{
    return m_sent_isValid;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceLiveToolsPing_200_response_results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
