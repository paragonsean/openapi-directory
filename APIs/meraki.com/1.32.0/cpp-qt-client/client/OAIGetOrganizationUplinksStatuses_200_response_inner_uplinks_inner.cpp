/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner() {
    this->initializeModel();
}

OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::~OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner() {}

void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::initializeModel() {

    m_apn_isSet = false;
    m_apn_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_dns1_isSet = false;
    m_dns1_isValid = false;

    m_dns2_isSet = false;
    m_dns2_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_iccid_isSet = false;
    m_iccid_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_ip_assigned_by_isSet = false;
    m_ip_assigned_by_isValid = false;

    m_primary_dns_isSet = false;
    m_primary_dns_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_secondary_dns_isSet = false;
    m_secondary_dns_isValid = false;

    m_signal_stat_isSet = false;
    m_signal_stat_isValid = false;

    m_signal_type_isSet = false;
    m_signal_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::fromJsonObject(QJsonObject json) {

    m_apn_isValid = ::OpenAPI::fromJsonValue(m_apn, json[QString("apn")]);
    m_apn_isSet = !json[QString("apn")].isNull() && m_apn_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_dns1_isValid = ::OpenAPI::fromJsonValue(m_dns1, json[QString("dns1")]);
    m_dns1_isSet = !json[QString("dns1")].isNull() && m_dns1_isValid;

    m_dns2_isValid = ::OpenAPI::fromJsonValue(m_dns2, json[QString("dns2")]);
    m_dns2_isSet = !json[QString("dns2")].isNull() && m_dns2_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_iccid_isValid = ::OpenAPI::fromJsonValue(m_iccid, json[QString("iccid")]);
    m_iccid_isSet = !json[QString("iccid")].isNull() && m_iccid_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_ip_assigned_by_isValid = ::OpenAPI::fromJsonValue(m_ip_assigned_by, json[QString("ipAssignedBy")]);
    m_ip_assigned_by_isSet = !json[QString("ipAssignedBy")].isNull() && m_ip_assigned_by_isValid;

    m_primary_dns_isValid = ::OpenAPI::fromJsonValue(m_primary_dns, json[QString("primaryDns")]);
    m_primary_dns_isSet = !json[QString("primaryDns")].isNull() && m_primary_dns_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIp")]);
    m_public_ip_isSet = !json[QString("publicIp")].isNull() && m_public_ip_isValid;

    m_secondary_dns_isValid = ::OpenAPI::fromJsonValue(m_secondary_dns, json[QString("secondaryDns")]);
    m_secondary_dns_isSet = !json[QString("secondaryDns")].isNull() && m_secondary_dns_isValid;

    m_signal_stat_isValid = ::OpenAPI::fromJsonValue(m_signal_stat, json[QString("signalStat")]);
    m_signal_stat_isSet = !json[QString("signalStat")].isNull() && m_signal_stat_isValid;

    m_signal_type_isValid = ::OpenAPI::fromJsonValue(m_signal_type, json[QString("signalType")]);
    m_signal_type_isSet = !json[QString("signalType")].isNull() && m_signal_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_apn_isSet) {
        obj.insert(QString("apn"), ::OpenAPI::toJsonValue(m_apn));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_dns1_isSet) {
        obj.insert(QString("dns1"), ::OpenAPI::toJsonValue(m_dns1));
    }
    if (m_dns2_isSet) {
        obj.insert(QString("dns2"), ::OpenAPI::toJsonValue(m_dns2));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_iccid_isSet) {
        obj.insert(QString("iccid"), ::OpenAPI::toJsonValue(m_iccid));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_ip_assigned_by_isSet) {
        obj.insert(QString("ipAssignedBy"), ::OpenAPI::toJsonValue(m_ip_assigned_by));
    }
    if (m_primary_dns_isSet) {
        obj.insert(QString("primaryDns"), ::OpenAPI::toJsonValue(m_primary_dns));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIp"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_secondary_dns_isSet) {
        obj.insert(QString("secondaryDns"), ::OpenAPI::toJsonValue(m_secondary_dns));
    }
    if (m_signal_stat.isSet()) {
        obj.insert(QString("signalStat"), ::OpenAPI::toJsonValue(m_signal_stat));
    }
    if (m_signal_type_isSet) {
        obj.insert(QString("signalType"), ::OpenAPI::toJsonValue(m_signal_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getApn() const {
    return m_apn;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setApn(const QString &apn) {
    m_apn = apn;
    m_apn_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_apn_Set() const{
    return m_apn_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_apn_Valid() const{
    return m_apn_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getConnectionType() const {
    return m_connection_type;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getDns1() const {
    return m_dns1;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setDns1(const QString &dns1) {
    m_dns1 = dns1;
    m_dns1_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_dns1_Set() const{
    return m_dns1_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_dns1_Valid() const{
    return m_dns1_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getDns2() const {
    return m_dns2;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setDns2(const QString &dns2) {
    m_dns2 = dns2;
    m_dns2_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_dns2_Set() const{
    return m_dns2_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_dns2_Valid() const{
    return m_dns2_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getGateway() const {
    return m_gateway;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getIccid() const {
    return m_iccid;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setIccid(const QString &iccid) {
    m_iccid = iccid;
    m_iccid_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_iccid_Set() const{
    return m_iccid_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_iccid_Valid() const{
    return m_iccid_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getInterface() const {
    return m_interface;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getIp() const {
    return m_ip;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getIpAssignedBy() const {
    return m_ip_assigned_by;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setIpAssignedBy(const QString &ip_assigned_by) {
    m_ip_assigned_by = ip_assigned_by;
    m_ip_assigned_by_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_ip_assigned_by_Set() const{
    return m_ip_assigned_by_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_ip_assigned_by_Valid() const{
    return m_ip_assigned_by_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getPrimaryDns() const {
    return m_primary_dns;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setPrimaryDns(const QString &primary_dns) {
    m_primary_dns = primary_dns;
    m_primary_dns_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_primary_dns_Set() const{
    return m_primary_dns_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_primary_dns_Valid() const{
    return m_primary_dns_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getProvider() const {
    return m_provider;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getPublicIp() const {
    return m_public_ip;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getSecondaryDns() const {
    return m_secondary_dns;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setSecondaryDns(const QString &secondary_dns) {
    m_secondary_dns = secondary_dns;
    m_secondary_dns_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_secondary_dns_Set() const{
    return m_secondary_dns_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_secondary_dns_Valid() const{
    return m_secondary_dns_isValid;
}

OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner_uplinks_inner_signalStat OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getSignalStat() const {
    return m_signal_stat;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setSignalStat(const OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner_uplinks_inner_signalStat &signal_stat) {
    m_signal_stat = signal_stat;
    m_signal_stat_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_signal_stat_Set() const{
    return m_signal_stat_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_signal_stat_Valid() const{
    return m_signal_stat_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getSignalType() const {
    return m_signal_type;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setSignalType(const QString &signal_type) {
    m_signal_type = signal_type;
    m_signal_type_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_signal_type_Set() const{
    return m_signal_type_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_signal_type_Valid() const{
    return m_signal_type_isValid;
}

QString OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::getStatus() const {
    return m_status;
}
void OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iccid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_assigned_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_stat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationUplinksStatuses_200_response_inner_uplinks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
