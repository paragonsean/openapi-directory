/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDeviceCameraSense_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDeviceCameraSense_request::OAIUpdateDeviceCameraSense_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDeviceCameraSense_request::OAIUpdateDeviceCameraSense_request() {
    this->initializeModel();
}

OAIUpdateDeviceCameraSense_request::~OAIUpdateDeviceCameraSense_request() {}

void OAIUpdateDeviceCameraSense_request::initializeModel() {

    m_audio_detection_isSet = false;
    m_audio_detection_isValid = false;

    m_detection_model_id_isSet = false;
    m_detection_model_id_isValid = false;

    m_mqtt_broker_id_isSet = false;
    m_mqtt_broker_id_isValid = false;

    m_sense_enabled_isSet = false;
    m_sense_enabled_isValid = false;
}

void OAIUpdateDeviceCameraSense_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDeviceCameraSense_request::fromJsonObject(QJsonObject json) {

    m_audio_detection_isValid = ::OpenAPI::fromJsonValue(m_audio_detection, json[QString("audioDetection")]);
    m_audio_detection_isSet = !json[QString("audioDetection")].isNull() && m_audio_detection_isValid;

    m_detection_model_id_isValid = ::OpenAPI::fromJsonValue(m_detection_model_id, json[QString("detectionModelId")]);
    m_detection_model_id_isSet = !json[QString("detectionModelId")].isNull() && m_detection_model_id_isValid;

    m_mqtt_broker_id_isValid = ::OpenAPI::fromJsonValue(m_mqtt_broker_id, json[QString("mqttBrokerId")]);
    m_mqtt_broker_id_isSet = !json[QString("mqttBrokerId")].isNull() && m_mqtt_broker_id_isValid;

    m_sense_enabled_isValid = ::OpenAPI::fromJsonValue(m_sense_enabled, json[QString("senseEnabled")]);
    m_sense_enabled_isSet = !json[QString("senseEnabled")].isNull() && m_sense_enabled_isValid;
}

QString OAIUpdateDeviceCameraSense_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDeviceCameraSense_request::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_detection.isSet()) {
        obj.insert(QString("audioDetection"), ::OpenAPI::toJsonValue(m_audio_detection));
    }
    if (m_detection_model_id_isSet) {
        obj.insert(QString("detectionModelId"), ::OpenAPI::toJsonValue(m_detection_model_id));
    }
    if (m_mqtt_broker_id_isSet) {
        obj.insert(QString("mqttBrokerId"), ::OpenAPI::toJsonValue(m_mqtt_broker_id));
    }
    if (m_sense_enabled_isSet) {
        obj.insert(QString("senseEnabled"), ::OpenAPI::toJsonValue(m_sense_enabled));
    }
    return obj;
}

OAIUpdateDeviceCameraSense_request_audioDetection OAIUpdateDeviceCameraSense_request::getAudioDetection() const {
    return m_audio_detection;
}
void OAIUpdateDeviceCameraSense_request::setAudioDetection(const OAIUpdateDeviceCameraSense_request_audioDetection &audio_detection) {
    m_audio_detection = audio_detection;
    m_audio_detection_isSet = true;
}

bool OAIUpdateDeviceCameraSense_request::is_audio_detection_Set() const{
    return m_audio_detection_isSet;
}

bool OAIUpdateDeviceCameraSense_request::is_audio_detection_Valid() const{
    return m_audio_detection_isValid;
}

QString OAIUpdateDeviceCameraSense_request::getDetectionModelId() const {
    return m_detection_model_id;
}
void OAIUpdateDeviceCameraSense_request::setDetectionModelId(const QString &detection_model_id) {
    m_detection_model_id = detection_model_id;
    m_detection_model_id_isSet = true;
}

bool OAIUpdateDeviceCameraSense_request::is_detection_model_id_Set() const{
    return m_detection_model_id_isSet;
}

bool OAIUpdateDeviceCameraSense_request::is_detection_model_id_Valid() const{
    return m_detection_model_id_isValid;
}

QString OAIUpdateDeviceCameraSense_request::getMqttBrokerId() const {
    return m_mqtt_broker_id;
}
void OAIUpdateDeviceCameraSense_request::setMqttBrokerId(const QString &mqtt_broker_id) {
    m_mqtt_broker_id = mqtt_broker_id;
    m_mqtt_broker_id_isSet = true;
}

bool OAIUpdateDeviceCameraSense_request::is_mqtt_broker_id_Set() const{
    return m_mqtt_broker_id_isSet;
}

bool OAIUpdateDeviceCameraSense_request::is_mqtt_broker_id_Valid() const{
    return m_mqtt_broker_id_isValid;
}

bool OAIUpdateDeviceCameraSense_request::isSenseEnabled() const {
    return m_sense_enabled;
}
void OAIUpdateDeviceCameraSense_request::setSenseEnabled(const bool &sense_enabled) {
    m_sense_enabled = sense_enabled;
    m_sense_enabled_isSet = true;
}

bool OAIUpdateDeviceCameraSense_request::is_sense_enabled_Set() const{
    return m_sense_enabled_isSet;
}

bool OAIUpdateDeviceCameraSense_request::is_sense_enabled_Valid() const{
    return m_sense_enabled_isValid;
}

bool OAIUpdateDeviceCameraSense_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mqtt_broker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sense_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDeviceCameraSense_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
