/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISamlApi_H
#define OAI_OAISamlApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationSamlIdp_request.h"
#include "OAIGetOrganizationSamlIdps_200_response_inner.h"
#include "OAIGetOrganizationSaml_200_response.h"
#include "OAIUpdateOrganizationSamlIdp_request.h"
#include "OAIUpdateOrganizationSaml_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISamlApi : public QObject {
    Q_OBJECT

public:
    OAISamlApi(const int timeOut = 0);
    ~OAISamlApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_saml_idp_request OAICreateOrganizationSamlIdp_request [required]
    */
    virtual void createOrganizationSamlIdp(const QString &organization_id, const OAICreateOrganizationSamlIdp_request &oai_create_organization_saml_idp_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    */
    virtual void deleteOrganizationSamlIdp(const QString &organization_id, const QString &idp_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    */
    virtual void getOrganizationSamlIdp(const QString &organization_id, const QString &idp_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSamlIdps(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSaml(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    * @param[in]  oai_update_organization_saml_idp_request OAIUpdateOrganizationSamlIdp_request [optional]
    */
    virtual void updateOrganizationSamlIdp(const QString &organization_id, const QString &idp_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlIdp_request> &oai_update_organization_saml_idp_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlIdp_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_saml_request OAIUpdateOrganizationSaml_request [optional]
    */
    virtual void updateOrganizationSaml(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSaml_request> &oai_update_organization_saml_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSaml_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationSamlIdpSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void deleteOrganizationSamlIdpSignal();
    void getOrganizationSamlIdpSignal(OAIGetOrganizationSamlIdps_200_response_inner summary);
    void getOrganizationSamlIdpsSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void getOrganizationSamlSignal(OAIGetOrganizationSaml_200_response summary);
    void updateOrganizationSamlIdpSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void updateOrganizationSamlSignal(OAIGetOrganizationSaml_200_response summary);


    void createOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void deleteOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSamlIdps_200_response_inner summary);
    void getOrganizationSamlIdpsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void getOrganizationSamlSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSaml_200_response summary);
    void updateOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void updateOrganizationSamlSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSaml_200_response summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationSamlIdpSignalError() instead")
    void createOrganizationSamlIdpSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlIdpSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlIdpSignalError() instead")
    void deleteOrganizationSamlIdpSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlIdpSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpSignalError() instead")
    void getOrganizationSamlIdpSignalE(OAIGetOrganizationSamlIdps_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpSignalError(OAIGetOrganizationSamlIdps_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpsSignalError() instead")
    void getOrganizationSamlIdpsSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpsSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlSignalError() instead")
    void getOrganizationSamlSignalE(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlSignalError(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlIdpSignalError() instead")
    void updateOrganizationSamlIdpSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlIdpSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlSignalError() instead")
    void updateOrganizationSamlSignalE(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlSignalError(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationSamlIdpSignalErrorFull() instead")
    void createOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlIdpSignalErrorFull() instead")
    void deleteOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpSignalErrorFull() instead")
    void getOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpsSignalErrorFull() instead")
    void getOrganizationSamlIdpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlSignalErrorFull() instead")
    void getOrganizationSamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlIdpSignalErrorFull() instead")
    void updateOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlSignalErrorFull() instead")
    void updateOrganizationSamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
