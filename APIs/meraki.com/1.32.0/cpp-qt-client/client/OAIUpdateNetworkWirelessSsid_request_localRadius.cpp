/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsid_request_localRadius.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsid_request_localRadius::OAIUpdateNetworkWirelessSsid_request_localRadius(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsid_request_localRadius::OAIUpdateNetworkWirelessSsid_request_localRadius() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsid_request_localRadius::~OAIUpdateNetworkWirelessSsid_request_localRadius() {}

void OAIUpdateNetworkWirelessSsid_request_localRadius::initializeModel() {

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_certificate_authentication_isSet = false;
    m_certificate_authentication_isValid = false;

    m_password_authentication_isSet = false;
    m_password_authentication_isValid = false;
}

void OAIUpdateNetworkWirelessSsid_request_localRadius::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsid_request_localRadius::fromJsonObject(QJsonObject json) {

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cacheTimeout")]);
    m_cache_timeout_isSet = !json[QString("cacheTimeout")].isNull() && m_cache_timeout_isValid;

    m_certificate_authentication_isValid = ::OpenAPI::fromJsonValue(m_certificate_authentication, json[QString("certificateAuthentication")]);
    m_certificate_authentication_isSet = !json[QString("certificateAuthentication")].isNull() && m_certificate_authentication_isValid;

    m_password_authentication_isValid = ::OpenAPI::fromJsonValue(m_password_authentication, json[QString("passwordAuthentication")]);
    m_password_authentication_isSet = !json[QString("passwordAuthentication")].isNull() && m_password_authentication_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request_localRadius::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsid_request_localRadius::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cacheTimeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_certificate_authentication.isSet()) {
        obj.insert(QString("certificateAuthentication"), ::OpenAPI::toJsonValue(m_certificate_authentication));
    }
    if (m_password_authentication.isSet()) {
        obj.insert(QString("passwordAuthentication"), ::OpenAPI::toJsonValue(m_password_authentication));
    }
    return obj;
}

qint32 OAIUpdateNetworkWirelessSsid_request_localRadius::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIUpdateNetworkWirelessSsid_request_localRadius::setCacheTimeout(const qint32 &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

OAIUpdateNetworkWirelessSsid_request_localRadius_certificateAuthentication OAIUpdateNetworkWirelessSsid_request_localRadius::getCertificateAuthentication() const {
    return m_certificate_authentication;
}
void OAIUpdateNetworkWirelessSsid_request_localRadius::setCertificateAuthentication(const OAIUpdateNetworkWirelessSsid_request_localRadius_certificateAuthentication &certificate_authentication) {
    m_certificate_authentication = certificate_authentication;
    m_certificate_authentication_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::is_certificate_authentication_Set() const{
    return m_certificate_authentication_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::is_certificate_authentication_Valid() const{
    return m_certificate_authentication_isValid;
}

OAIUpdateNetworkWirelessSsid_request_localRadius_passwordAuthentication OAIUpdateNetworkWirelessSsid_request_localRadius::getPasswordAuthentication() const {
    return m_password_authentication;
}
void OAIUpdateNetworkWirelessSsid_request_localRadius::setPasswordAuthentication(const OAIUpdateNetworkWirelessSsid_request_localRadius_passwordAuthentication &password_authentication) {
    m_password_authentication = password_authentication;
    m_password_authentication_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::is_password_authentication_Set() const{
    return m_password_authentication_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::is_password_authentication_Valid() const{
    return m_password_authentication_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsid_request_localRadius::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
