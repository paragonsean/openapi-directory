/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceVpnBgp_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceVpnBgp_request::OAIUpdateNetworkApplianceVpnBgp_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceVpnBgp_request::OAIUpdateNetworkApplianceVpnBgp_request() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceVpnBgp_request::~OAIUpdateNetworkApplianceVpnBgp_request() {}

void OAIUpdateNetworkApplianceVpnBgp_request::initializeModel() {

    m_as_number_isSet = false;
    m_as_number_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_ibgp_hold_timer_isSet = false;
    m_ibgp_hold_timer_isValid = false;

    m_neighbors_isSet = false;
    m_neighbors_isValid = false;
}

void OAIUpdateNetworkApplianceVpnBgp_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceVpnBgp_request::fromJsonObject(QJsonObject json) {

    m_as_number_isValid = ::OpenAPI::fromJsonValue(m_as_number, json[QString("asNumber")]);
    m_as_number_isSet = !json[QString("asNumber")].isNull() && m_as_number_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_ibgp_hold_timer_isValid = ::OpenAPI::fromJsonValue(m_ibgp_hold_timer, json[QString("ibgpHoldTimer")]);
    m_ibgp_hold_timer_isSet = !json[QString("ibgpHoldTimer")].isNull() && m_ibgp_hold_timer_isValid;

    m_neighbors_isValid = ::OpenAPI::fromJsonValue(m_neighbors, json[QString("neighbors")]);
    m_neighbors_isSet = !json[QString("neighbors")].isNull() && m_neighbors_isValid;
}

QString OAIUpdateNetworkApplianceVpnBgp_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceVpnBgp_request::asJsonObject() const {
    QJsonObject obj;
    if (m_as_number_isSet) {
        obj.insert(QString("asNumber"), ::OpenAPI::toJsonValue(m_as_number));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_ibgp_hold_timer_isSet) {
        obj.insert(QString("ibgpHoldTimer"), ::OpenAPI::toJsonValue(m_ibgp_hold_timer));
    }
    if (m_neighbors.size() > 0) {
        obj.insert(QString("neighbors"), ::OpenAPI::toJsonValue(m_neighbors));
    }
    return obj;
}

qint32 OAIUpdateNetworkApplianceVpnBgp_request::getAsNumber() const {
    return m_as_number;
}
void OAIUpdateNetworkApplianceVpnBgp_request::setAsNumber(const qint32 &as_number) {
    m_as_number = as_number;
    m_as_number_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_as_number_Set() const{
    return m_as_number_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_as_number_Valid() const{
    return m_as_number_isValid;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkApplianceVpnBgp_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIUpdateNetworkApplianceVpnBgp_request::getIbgpHoldTimer() const {
    return m_ibgp_hold_timer;
}
void OAIUpdateNetworkApplianceVpnBgp_request::setIbgpHoldTimer(const qint32 &ibgp_hold_timer) {
    m_ibgp_hold_timer = ibgp_hold_timer;
    m_ibgp_hold_timer_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_ibgp_hold_timer_Set() const{
    return m_ibgp_hold_timer_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_ibgp_hold_timer_Valid() const{
    return m_ibgp_hold_timer_isValid;
}

QList<OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner> OAIUpdateNetworkApplianceVpnBgp_request::getNeighbors() const {
    return m_neighbors;
}
void OAIUpdateNetworkApplianceVpnBgp_request::setNeighbors(const QList<OAIUpdateNetworkApplianceVpnBgp_request_neighbors_inner> &neighbors) {
    m_neighbors = neighbors;
    m_neighbors_isSet = true;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_neighbors_Set() const{
    return m_neighbors_isSet;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::is_neighbors_Valid() const{
    return m_neighbors_isValid;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_as_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ibgp_hold_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceVpnBgp_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
