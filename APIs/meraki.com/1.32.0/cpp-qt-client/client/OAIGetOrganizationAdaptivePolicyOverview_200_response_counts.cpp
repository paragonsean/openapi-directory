/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationAdaptivePolicyOverview_200_response_counts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::OAIGetOrganizationAdaptivePolicyOverview_200_response_counts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::OAIGetOrganizationAdaptivePolicyOverview_200_response_counts() {
    this->initializeModel();
}

OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::~OAIGetOrganizationAdaptivePolicyOverview_200_response_counts() {}

void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::initializeModel() {

    m_allow_policies_isSet = false;
    m_allow_policies_isValid = false;

    m_custom_acls_isSet = false;
    m_custom_acls_isValid = false;

    m_custom_groups_isSet = false;
    m_custom_groups_isValid = false;

    m_deny_policies_isSet = false;
    m_deny_policies_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_policy_objects_isSet = false;
    m_policy_objects_isValid = false;
}

void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::fromJsonObject(QJsonObject json) {

    m_allow_policies_isValid = ::OpenAPI::fromJsonValue(m_allow_policies, json[QString("allowPolicies")]);
    m_allow_policies_isSet = !json[QString("allowPolicies")].isNull() && m_allow_policies_isValid;

    m_custom_acls_isValid = ::OpenAPI::fromJsonValue(m_custom_acls, json[QString("customAcls")]);
    m_custom_acls_isSet = !json[QString("customAcls")].isNull() && m_custom_acls_isValid;

    m_custom_groups_isValid = ::OpenAPI::fromJsonValue(m_custom_groups, json[QString("customGroups")]);
    m_custom_groups_isSet = !json[QString("customGroups")].isNull() && m_custom_groups_isValid;

    m_deny_policies_isValid = ::OpenAPI::fromJsonValue(m_deny_policies, json[QString("denyPolicies")]);
    m_deny_policies_isSet = !json[QString("denyPolicies")].isNull() && m_deny_policies_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_policy_objects_isValid = ::OpenAPI::fromJsonValue(m_policy_objects, json[QString("policyObjects")]);
    m_policy_objects_isSet = !json[QString("policyObjects")].isNull() && m_policy_objects_isValid;
}

QString OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_policies_isSet) {
        obj.insert(QString("allowPolicies"), ::OpenAPI::toJsonValue(m_allow_policies));
    }
    if (m_custom_acls_isSet) {
        obj.insert(QString("customAcls"), ::OpenAPI::toJsonValue(m_custom_acls));
    }
    if (m_custom_groups_isSet) {
        obj.insert(QString("customGroups"), ::OpenAPI::toJsonValue(m_custom_groups));
    }
    if (m_deny_policies_isSet) {
        obj.insert(QString("denyPolicies"), ::OpenAPI::toJsonValue(m_deny_policies));
    }
    if (m_groups_isSet) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_policies_isSet) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_policy_objects_isSet) {
        obj.insert(QString("policyObjects"), ::OpenAPI::toJsonValue(m_policy_objects));
    }
    return obj;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getAllowPolicies() const {
    return m_allow_policies;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setAllowPolicies(const qint32 &allow_policies) {
    m_allow_policies = allow_policies;
    m_allow_policies_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_allow_policies_Set() const{
    return m_allow_policies_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_allow_policies_Valid() const{
    return m_allow_policies_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getCustomAcls() const {
    return m_custom_acls;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setCustomAcls(const qint32 &custom_acls) {
    m_custom_acls = custom_acls;
    m_custom_acls_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_custom_acls_Set() const{
    return m_custom_acls_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_custom_acls_Valid() const{
    return m_custom_acls_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getCustomGroups() const {
    return m_custom_groups;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setCustomGroups(const qint32 &custom_groups) {
    m_custom_groups = custom_groups;
    m_custom_groups_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_custom_groups_Set() const{
    return m_custom_groups_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_custom_groups_Valid() const{
    return m_custom_groups_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getDenyPolicies() const {
    return m_deny_policies;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setDenyPolicies(const qint32 &deny_policies) {
    m_deny_policies = deny_policies;
    m_deny_policies_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_deny_policies_Set() const{
    return m_deny_policies_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_deny_policies_Valid() const{
    return m_deny_policies_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getGroups() const {
    return m_groups;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setGroups(const qint32 &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getPolicies() const {
    return m_policies;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setPolicies(const qint32 &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_policies_Valid() const{
    return m_policies_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::getPolicyObjects() const {
    return m_policy_objects;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::setPolicyObjects(const qint32 &policy_objects) {
    m_policy_objects = policy_objects;
    m_policy_objects_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_policy_objects_Set() const{
    return m_policy_objects_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::is_policy_objects_Valid() const{
    return m_policy_objects_isValid;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_acls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_objects_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_counts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
