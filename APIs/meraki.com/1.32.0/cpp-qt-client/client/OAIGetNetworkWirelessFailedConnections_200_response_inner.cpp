/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkWirelessFailedConnections_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkWirelessFailedConnections_200_response_inner::OAIGetNetworkWirelessFailedConnections_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkWirelessFailedConnections_200_response_inner::OAIGetNetworkWirelessFailedConnections_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkWirelessFailedConnections_200_response_inner::~OAIGetNetworkWirelessFailedConnections_200_response_inner() {}

void OAIGetNetworkWirelessFailedConnections_200_response_inner::initializeModel() {

    m_client_mac_isSet = false;
    m_client_mac_isValid = false;

    m_failure_step_isSet = false;
    m_failure_step_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_ssid_number_isSet = false;
    m_ssid_number_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;
}

void OAIGetNetworkWirelessFailedConnections_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkWirelessFailedConnections_200_response_inner::fromJsonObject(QJsonObject json) {

    m_client_mac_isValid = ::OpenAPI::fromJsonValue(m_client_mac, json[QString("clientMac")]);
    m_client_mac_isSet = !json[QString("clientMac")].isNull() && m_client_mac_isValid;

    m_failure_step_isValid = ::OpenAPI::fromJsonValue(m_failure_step, json[QString("failureStep")]);
    m_failure_step_isSet = !json[QString("failureStep")].isNull() && m_failure_step_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_ssid_number_isValid = ::OpenAPI::fromJsonValue(m_ssid_number, json[QString("ssidNumber")]);
    m_ssid_number_isSet = !json[QString("ssidNumber")].isNull() && m_ssid_number_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;
}

QString OAIGetNetworkWirelessFailedConnections_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkWirelessFailedConnections_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_client_mac_isSet) {
        obj.insert(QString("clientMac"), ::OpenAPI::toJsonValue(m_client_mac));
    }
    if (m_failure_step_isSet) {
        obj.insert(QString("failureStep"), ::OpenAPI::toJsonValue(m_failure_step));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_ssid_number_isSet) {
        obj.insert(QString("ssidNumber"), ::OpenAPI::toJsonValue(m_ssid_number));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    return obj;
}

QString OAIGetNetworkWirelessFailedConnections_200_response_inner::getClientMac() const {
    return m_client_mac;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setClientMac(const QString &client_mac) {
    m_client_mac = client_mac;
    m_client_mac_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_client_mac_Set() const{
    return m_client_mac_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_client_mac_Valid() const{
    return m_client_mac_isValid;
}

QString OAIGetNetworkWirelessFailedConnections_200_response_inner::getFailureStep() const {
    return m_failure_step;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setFailureStep(const QString &failure_step) {
    m_failure_step = failure_step;
    m_failure_step_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_failure_step_Set() const{
    return m_failure_step_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_failure_step_Valid() const{
    return m_failure_step_isValid;
}

QString OAIGetNetworkWirelessFailedConnections_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

qint32 OAIGetNetworkWirelessFailedConnections_200_response_inner::getSsidNumber() const {
    return m_ssid_number;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setSsidNumber(const qint32 &ssid_number) {
    m_ssid_number = ssid_number;
    m_ssid_number_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_ssid_number_Set() const{
    return m_ssid_number_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_ssid_number_Valid() const{
    return m_ssid_number_isValid;
}

QDateTime OAIGetNetworkWirelessFailedConnections_200_response_inner::getTs() const {
    return m_ts;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setTs(const QDateTime &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIGetNetworkWirelessFailedConnections_200_response_inner::getType() const {
    return m_type;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIGetNetworkWirelessFailedConnections_200_response_inner::getVlan() const {
    return m_vlan;
}
void OAIGetNetworkWirelessFailedConnections_200_response_inner::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::is_vlan_Valid() const{
    return m_vlan_isValid;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkWirelessFailedConnections_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
