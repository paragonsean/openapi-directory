/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationDevicesStatuses_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationDevicesStatuses_200_response::OAIGetOrganizationDevicesStatuses_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationDevicesStatuses_200_response::OAIGetOrganizationDevicesStatuses_200_response() {
    this->initializeModel();
}

OAIGetOrganizationDevicesStatuses_200_response::~OAIGetOrganizationDevicesStatuses_200_response() {}

void OAIGetOrganizationDevicesStatuses_200_response::initializeModel() {

    m_components_isSet = false;
    m_components_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_type_isSet = false;
    m_ip_type_isValid = false;

    m_lan_ip_isSet = false;
    m_lan_ip_isValid = false;

    m_last_reported_at_isSet = false;
    m_last_reported_at_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_primary_dns_isSet = false;
    m_primary_dns_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_secondary_dns_isSet = false;
    m_secondary_dns_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetOrganizationDevicesStatuses_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationDevicesStatuses_200_response::fromJsonObject(QJsonObject json) {

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ip_type_isValid = ::OpenAPI::fromJsonValue(m_ip_type, json[QString("ipType")]);
    m_ip_type_isSet = !json[QString("ipType")].isNull() && m_ip_type_isValid;

    m_lan_ip_isValid = ::OpenAPI::fromJsonValue(m_lan_ip, json[QString("lanIp")]);
    m_lan_ip_isSet = !json[QString("lanIp")].isNull() && m_lan_ip_isValid;

    m_last_reported_at_isValid = ::OpenAPI::fromJsonValue(m_last_reported_at, json[QString("lastReportedAt")]);
    m_last_reported_at_isSet = !json[QString("lastReportedAt")].isNull() && m_last_reported_at_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_primary_dns_isValid = ::OpenAPI::fromJsonValue(m_primary_dns, json[QString("primaryDns")]);
    m_primary_dns_isSet = !json[QString("primaryDns")].isNull() && m_primary_dns_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIp")]);
    m_public_ip_isSet = !json[QString("publicIp")].isNull() && m_public_ip_isValid;

    m_secondary_dns_isValid = ::OpenAPI::fromJsonValue(m_secondary_dns, json[QString("secondaryDns")]);
    m_secondary_dns_isSet = !json[QString("secondaryDns")].isNull() && m_secondary_dns_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationDevicesStatuses_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_components.isSet()) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip_type_isSet) {
        obj.insert(QString("ipType"), ::OpenAPI::toJsonValue(m_ip_type));
    }
    if (m_lan_ip_isSet) {
        obj.insert(QString("lanIp"), ::OpenAPI::toJsonValue(m_lan_ip));
    }
    if (m_last_reported_at_isSet) {
        obj.insert(QString("lastReportedAt"), ::OpenAPI::toJsonValue(m_last_reported_at));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_primary_dns_isSet) {
        obj.insert(QString("primaryDns"), ::OpenAPI::toJsonValue(m_primary_dns));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIp"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_secondary_dns_isSet) {
        obj.insert(QString("secondaryDns"), ::OpenAPI::toJsonValue(m_secondary_dns));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetOrganizationDevicesStatuses_200_response_components OAIGetOrganizationDevicesStatuses_200_response::getComponents() const {
    return m_components;
}
void OAIGetOrganizationDevicesStatuses_200_response::setComponents(const OAIGetOrganizationDevicesStatuses_200_response_components &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_components_Set() const{
    return m_components_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_components_Valid() const{
    return m_components_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getGateway() const {
    return m_gateway;
}
void OAIGetOrganizationDevicesStatuses_200_response::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getIpType() const {
    return m_ip_type;
}
void OAIGetOrganizationDevicesStatuses_200_response::setIpType(const QString &ip_type) {
    m_ip_type = ip_type;
    m_ip_type_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_ip_type_Set() const{
    return m_ip_type_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_ip_type_Valid() const{
    return m_ip_type_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getLanIp() const {
    return m_lan_ip;
}
void OAIGetOrganizationDevicesStatuses_200_response::setLanIp(const QString &lan_ip) {
    m_lan_ip = lan_ip;
    m_lan_ip_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_lan_ip_Set() const{
    return m_lan_ip_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_lan_ip_Valid() const{
    return m_lan_ip_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getLastReportedAt() const {
    return m_last_reported_at;
}
void OAIGetOrganizationDevicesStatuses_200_response::setLastReportedAt(const QString &last_reported_at) {
    m_last_reported_at = last_reported_at;
    m_last_reported_at_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_last_reported_at_Set() const{
    return m_last_reported_at_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_last_reported_at_Valid() const{
    return m_last_reported_at_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getMac() const {
    return m_mac;
}
void OAIGetOrganizationDevicesStatuses_200_response::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getModel() const {
    return m_model;
}
void OAIGetOrganizationDevicesStatuses_200_response::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getName() const {
    return m_name;
}
void OAIGetOrganizationDevicesStatuses_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getNetworkId() const {
    return m_network_id;
}
void OAIGetOrganizationDevicesStatuses_200_response::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getPrimaryDns() const {
    return m_primary_dns;
}
void OAIGetOrganizationDevicesStatuses_200_response::setPrimaryDns(const QString &primary_dns) {
    m_primary_dns = primary_dns;
    m_primary_dns_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_primary_dns_Set() const{
    return m_primary_dns_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_primary_dns_Valid() const{
    return m_primary_dns_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getProductType() const {
    return m_product_type;
}
void OAIGetOrganizationDevicesStatuses_200_response::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getPublicIp() const {
    return m_public_ip;
}
void OAIGetOrganizationDevicesStatuses_200_response::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getSecondaryDns() const {
    return m_secondary_dns;
}
void OAIGetOrganizationDevicesStatuses_200_response::setSecondaryDns(const QString &secondary_dns) {
    m_secondary_dns = secondary_dns;
    m_secondary_dns_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_secondary_dns_Set() const{
    return m_secondary_dns_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_secondary_dns_Valid() const{
    return m_secondary_dns_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getSerial() const {
    return m_serial;
}
void OAIGetOrganizationDevicesStatuses_200_response::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIGetOrganizationDevicesStatuses_200_response::getStatus() const {
    return m_status;
}
void OAIGetOrganizationDevicesStatuses_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIGetOrganizationDevicesStatuses_200_response::getTags() const {
    return m_tags;
}
void OAIGetOrganizationDevicesStatuses_200_response::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetOrganizationDevicesStatuses_200_response::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetOrganizationDevicesStatuses_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lan_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_reported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationDevicesStatuses_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
