/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationAdaptivePolicyOverview_200_response_limits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::OAIGetOrganizationAdaptivePolicyOverview_200_response_limits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::OAIGetOrganizationAdaptivePolicyOverview_200_response_limits() {
    this->initializeModel();
}

OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::~OAIGetOrganizationAdaptivePolicyOverview_200_response_limits() {}

void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::initializeModel() {

    m_acls_in_a_policy_isSet = false;
    m_acls_in_a_policy_isValid = false;

    m_custom_groups_isSet = false;
    m_custom_groups_isValid = false;

    m_policy_objects_isSet = false;
    m_policy_objects_isValid = false;

    m_rules_in_an_acl_isSet = false;
    m_rules_in_an_acl_isValid = false;
}

void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::fromJsonObject(QJsonObject json) {

    m_acls_in_a_policy_isValid = ::OpenAPI::fromJsonValue(m_acls_in_a_policy, json[QString("aclsInAPolicy")]);
    m_acls_in_a_policy_isSet = !json[QString("aclsInAPolicy")].isNull() && m_acls_in_a_policy_isValid;

    m_custom_groups_isValid = ::OpenAPI::fromJsonValue(m_custom_groups, json[QString("customGroups")]);
    m_custom_groups_isSet = !json[QString("customGroups")].isNull() && m_custom_groups_isValid;

    m_policy_objects_isValid = ::OpenAPI::fromJsonValue(m_policy_objects, json[QString("policyObjects")]);
    m_policy_objects_isSet = !json[QString("policyObjects")].isNull() && m_policy_objects_isValid;

    m_rules_in_an_acl_isValid = ::OpenAPI::fromJsonValue(m_rules_in_an_acl, json[QString("rulesInAnAcl")]);
    m_rules_in_an_acl_isSet = !json[QString("rulesInAnAcl")].isNull() && m_rules_in_an_acl_isValid;
}

QString OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::asJsonObject() const {
    QJsonObject obj;
    if (m_acls_in_a_policy_isSet) {
        obj.insert(QString("aclsInAPolicy"), ::OpenAPI::toJsonValue(m_acls_in_a_policy));
    }
    if (m_custom_groups_isSet) {
        obj.insert(QString("customGroups"), ::OpenAPI::toJsonValue(m_custom_groups));
    }
    if (m_policy_objects_isSet) {
        obj.insert(QString("policyObjects"), ::OpenAPI::toJsonValue(m_policy_objects));
    }
    if (m_rules_in_an_acl_isSet) {
        obj.insert(QString("rulesInAnAcl"), ::OpenAPI::toJsonValue(m_rules_in_an_acl));
    }
    return obj;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::getAclsInAPolicy() const {
    return m_acls_in_a_policy;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::setAclsInAPolicy(const qint32 &acls_in_a_policy) {
    m_acls_in_a_policy = acls_in_a_policy;
    m_acls_in_a_policy_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_acls_in_a_policy_Set() const{
    return m_acls_in_a_policy_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_acls_in_a_policy_Valid() const{
    return m_acls_in_a_policy_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::getCustomGroups() const {
    return m_custom_groups;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::setCustomGroups(const qint32 &custom_groups) {
    m_custom_groups = custom_groups;
    m_custom_groups_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_custom_groups_Set() const{
    return m_custom_groups_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_custom_groups_Valid() const{
    return m_custom_groups_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::getPolicyObjects() const {
    return m_policy_objects;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::setPolicyObjects(const qint32 &policy_objects) {
    m_policy_objects = policy_objects;
    m_policy_objects_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_policy_objects_Set() const{
    return m_policy_objects_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_policy_objects_Valid() const{
    return m_policy_objects_isValid;
}

qint32 OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::getRulesInAnAcl() const {
    return m_rules_in_an_acl;
}
void OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::setRulesInAnAcl(const qint32 &rules_in_an_acl) {
    m_rules_in_an_acl = rules_in_an_acl;
    m_rules_in_an_acl_isSet = true;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_rules_in_an_acl_Set() const{
    return m_rules_in_an_acl_isSet;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::is_rules_in_an_acl_Valid() const{
    return m_rules_in_an_acl_isValid;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acls_in_a_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_objects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_in_an_acl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationAdaptivePolicyOverview_200_response_limits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
