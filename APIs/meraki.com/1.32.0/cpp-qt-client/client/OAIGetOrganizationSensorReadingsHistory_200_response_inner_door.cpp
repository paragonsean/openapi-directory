/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationSensorReadingsHistory_200_response_inner_door.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::OAIGetOrganizationSensorReadingsHistory_200_response_inner_door(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::OAIGetOrganizationSensorReadingsHistory_200_response_inner_door() {
    this->initializeModel();
}

OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::~OAIGetOrganizationSensorReadingsHistory_200_response_inner_door() {}

void OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::initializeModel() {

    m_open_isSet = false;
    m_open_isValid = false;
}

void OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::fromJsonObject(QJsonObject json) {

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;
}

QString OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::asJsonObject() const {
    QJsonObject obj;
    if (m_open_isSet) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    return obj;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::isOpen() const {
    return m_open;
}
void OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::setOpen(const bool &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::is_open_Set() const{
    return m_open_isSet;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::is_open_Valid() const{
    return m_open_isValid;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationSensorReadingsHistory_200_response_inner_door::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
