/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmUserAccessDevices_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmUserAccessDevices_200_response_inner::OAIGetNetworkSmUserAccessDevices_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmUserAccessDevices_200_response_inner::OAIGetNetworkSmUserAccessDevices_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmUserAccessDevices_200_response_inner::~OAIGetNetworkSmUserAccessDevices_200_response_inner() {}

void OAIGetNetworkSmUserAccessDevices_200_response_inner::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_system_type_isSet = false;
    m_system_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_trusted_access_connections_isSet = false;
    m_trusted_access_connections_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIGetNetworkSmUserAccessDevices_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmUserAccessDevices_200_response_inner::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_system_type_isValid = ::OpenAPI::fromJsonValue(m_system_type, json[QString("systemType")]);
    m_system_type_isSet = !json[QString("systemType")].isNull() && m_system_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_trusted_access_connections_isValid = ::OpenAPI::fromJsonValue(m_trusted_access_connections, json[QString("trustedAccessConnections")]);
    m_trusted_access_connections_isSet = !json[QString("trustedAccessConnections")].isNull() && m_trusted_access_connections_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmUserAccessDevices_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_system_type_isSet) {
        obj.insert(QString("systemType"), ::OpenAPI::toJsonValue(m_system_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_trusted_access_connections.size() > 0) {
        obj.insert(QString("trustedAccessConnections"), ::OpenAPI::toJsonValue(m_trusted_access_connections));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::getEmail() const {
    return m_email;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::getMac() const {
    return m_mac;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::getSystemType() const {
    return m_system_type;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setSystemType(const QString &system_type) {
    m_system_type = system_type;
    m_system_type_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_system_type_Set() const{
    return m_system_type_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_system_type_Valid() const{
    return m_system_type_isValid;
}

QList<QString> OAIGetNetworkSmUserAccessDevices_200_response_inner::getTags() const {
    return m_tags;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner> OAIGetNetworkSmUserAccessDevices_200_response_inner::getTrustedAccessConnections() const {
    return m_trusted_access_connections;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setTrustedAccessConnections(const QList<OAIGetNetworkSmUserAccessDevices_200_response_inner_trustedAccessConnections_inner> &trusted_access_connections) {
    m_trusted_access_connections = trusted_access_connections;
    m_trusted_access_connections_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_trusted_access_connections_Set() const{
    return m_trusted_access_connections_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_trusted_access_connections_Valid() const{
    return m_trusted_access_connections_isValid;
}

QString OAIGetNetworkSmUserAccessDevices_200_response_inner::getUsername() const {
    return m_username;
}
void OAIGetNetworkSmUserAccessDevices_200_response_inner::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_access_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmUserAccessDevices_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
