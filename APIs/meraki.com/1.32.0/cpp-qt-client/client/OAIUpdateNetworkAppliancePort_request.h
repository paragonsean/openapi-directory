/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkAppliancePort_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkAppliancePort_request_H
#define OAIUpdateNetworkAppliancePort_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateNetworkAppliancePort_request : public OAIObject {
public:
    OAIUpdateNetworkAppliancePort_request();
    OAIUpdateNetworkAppliancePort_request(QString json);
    ~OAIUpdateNetworkAppliancePort_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessPolicy() const;
    void setAccessPolicy(const QString &access_policy);
    bool is_access_policy_Set() const;
    bool is_access_policy_Valid() const;

    QString getAllowedVlans() const;
    void setAllowedVlans(const QString &allowed_vlans);
    bool is_allowed_vlans_Set() const;
    bool is_allowed_vlans_Valid() const;

    bool isDropUntaggedTraffic() const;
    void setDropUntaggedTraffic(const bool &drop_untagged_traffic);
    bool is_drop_untagged_traffic_Set() const;
    bool is_drop_untagged_traffic_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getVlan() const;
    void setVlan(const qint32 &vlan);
    bool is_vlan_Set() const;
    bool is_vlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_policy;
    bool m_access_policy_isSet;
    bool m_access_policy_isValid;

    QString m_allowed_vlans;
    bool m_allowed_vlans_isSet;
    bool m_allowed_vlans_isValid;

    bool m_drop_untagged_traffic;
    bool m_drop_untagged_traffic_isSet;
    bool m_drop_untagged_traffic_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_vlan;
    bool m_vlan_isSet;
    bool m_vlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkAppliancePort_request)

#endif // OAIUpdateNetworkAppliancePort_request_H
