/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomAnalyticsApi_H
#define OAI_OAICustomAnalyticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationCameraCustomAnalyticsArtifact_request.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceCameraCustomAnalytics_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomAnalyticsApi : public QObject {
    Q_OBJECT

public:
    OAICustomAnalyticsApi(const int timeOut = 0);
    ~OAICustomAnalyticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_camera_custom_analytics_artifact_request OAICreateOrganizationCameraCustomAnalyticsArtifact_request [optional]
    */
    virtual void createOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const ::OpenAPI::OptionalParam<OAICreateOrganizationCameraCustomAnalyticsArtifact_request> &oai_create_organization_camera_custom_analytics_artifact_request = ::OpenAPI::OptionalParam<OAICreateOrganizationCameraCustomAnalyticsArtifact_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void deleteOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const QString &artifact_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraCustomAnalytics(const QString &serial);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void getOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const QString &artifact_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationCameraCustomAnalyticsArtifacts(const QString &organization_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_custom_analytics_request OAIUpdateDeviceCameraCustomAnalytics_request [optional]
    */
    virtual void updateDeviceCameraCustomAnalytics(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraCustomAnalytics_request> &oai_update_device_camera_custom_analytics_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraCustomAnalytics_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraCustomAnalyticsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraCustomAnalyticsArtifactsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraCustomAnalyticsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationCameraCustomAnalyticsArtifactSignal(OAIObject summary);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignal();
    void getDeviceCameraCustomAnalyticsSignal(OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactSignal(OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactsSignal(QList<OAIObject> summary);
    void updateDeviceCameraCustomAnalyticsSignal(OAIObject summary);


    void createOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceCameraCustomAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateDeviceCameraCustomAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void createOrganizationCameraCustomAnalyticsArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationCameraCustomAnalyticsArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraCustomAnalyticsSignalError() instead")
    void getDeviceCameraCustomAnalyticsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraCustomAnalyticsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void getOrganizationCameraCustomAnalyticsArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactsSignalError() instead")
    void getOrganizationCameraCustomAnalyticsArtifactsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraCustomAnalyticsSignalError() instead")
    void updateDeviceCameraCustomAnalyticsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraCustomAnalyticsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void createOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraCustomAnalyticsSignalErrorFull() instead")
    void getDeviceCameraCustomAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraCustomAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void getOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactsSignalErrorFull() instead")
    void getOrganizationCameraCustomAnalyticsArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraCustomAnalyticsSignalErrorFull() instead")
    void updateDeviceCameraCustomAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraCustomAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
