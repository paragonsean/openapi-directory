/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::~OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner() {}

void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_time_series_isSet = false;
    m_time_series_isValid = false;

    m_uplink_isSet = false;
    m_uplink_isValid = false;
}

void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_time_series_isValid = ::OpenAPI::fromJsonValue(m_time_series, json[QString("timeSeries")]);
    m_time_series_isSet = !json[QString("timeSeries")].isNull() && m_time_series_isValid;

    m_uplink_isValid = ::OpenAPI::fromJsonValue(m_uplink, json[QString("uplink")]);
    m_uplink_isSet = !json[QString("uplink")].isNull() && m_uplink_isValid;
}

QString OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_time_series.size() > 0) {
        obj.insert(QString("timeSeries"), ::OpenAPI::toJsonValue(m_time_series));
    }
    if (m_uplink_isSet) {
        obj.insert(QString("uplink"), ::OpenAPI::toJsonValue(m_uplink));
    }
    return obj;
}

QString OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::getIp() const {
    return m_ip;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::getNetworkId() const {
    return m_network_id;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner> OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::getTimeSeries() const {
    return m_time_series;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::setTimeSeries(const QList<OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner> &time_series) {
    m_time_series = time_series;
    m_time_series_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_time_series_Set() const{
    return m_time_series_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_time_series_Valid() const{
    return m_time_series_isValid;
}

QString OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::getUplink() const {
    return m_uplink;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::setUplink(const QString &uplink) {
    m_uplink = uplink;
    m_uplink_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_uplink_Set() const{
    return m_uplink_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::is_uplink_Valid() const{
    return m_uplink_isValid;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
