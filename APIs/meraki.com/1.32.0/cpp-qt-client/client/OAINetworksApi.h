/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworksApi_H
#define OAI_OAINetworksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBindNetwork_request.h"
#include "OAIClaimNetworkDevices_request.h"
#include "OAICombineOrganizationNetworks_200_response.h"
#include "OAICombineOrganizationNetworks_request.h"
#include "OAICreateNetworkFirmwareUpgradesRollback_200_response.h"
#include "OAICreateNetworkFirmwareUpgradesRollback_request.h"
#include "OAICreateNetworkFirmwareUpgradesStagedEvent_request.h"
#include "OAICreateNetworkFirmwareUpgradesStagedGroup_request.h"
#include "OAICreateNetworkFloorPlan_request.h"
#include "OAICreateNetworkGroupPolicy_request.h"
#include "OAICreateNetworkMerakiAuthUser_request.h"
#include "OAICreateNetworkMqttBroker_request.h"
#include "OAICreateNetworkPiiRequest_request.h"
#include "OAICreateNetworkWebhooksHttpServer_request.h"
#include "OAICreateNetworkWebhooksPayloadTemplate_request.h"
#include "OAICreateNetworkWebhooksWebhookTest_201_response.h"
#include "OAICreateNetworkWebhooksWebhookTest_request.h"
#include "OAICreateOrganizationNetwork_request.h"
#include "OAIGetNetworkAlertsHistory_200_response_inner.h"
#include "OAIGetNetworkClient_200_response.h"
#include "OAIGetNetworkClients_200_response.h"
#include "OAIGetNetworkEventsEventTypes_200_response_inner.h"
#include "OAIGetNetworkEvents_200_response.h"
#include "OAIGetNetworkFirmwareUpgradesStagedEvents_200_response.h"
#include "OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner.h"
#include "OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner.h"
#include "OAIGetNetworkFirmwareUpgrades_200_response.h"
#include "OAIGetNetworkHealthAlerts_200_response_inner.h"
#include "OAIGetNetworkMerakiAuthUsers_200_response_inner.h"
#include "OAIGetNetworkPoliciesByClient_200_response_inner.h"
#include "OAIGetNetworkSettings_200_response.h"
#include "OAIGetNetworkSyslogServers_200_response.h"
#include "OAIGetNetworkWebhooksHttpServers_200_response_inner.h"
#include "OAIGetNetworkWebhooksPayloadTemplates_200_response_inner.h"
#include "OAIGetNetwork_200_response.h"
#include "OAIObject.h"
#include "OAIProvisionNetworkClients_request.h"
#include "OAIRemoveNetworkDevices_request.h"
#include "OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request.h"
#include "OAISplitNetwork_200_response.h"
#include "OAIUnbindNetwork_request.h"
#include "OAIUpdateNetworkAlertsSettings_request.h"
#include "OAIUpdateNetworkClientPolicy_request.h"
#include "OAIUpdateNetworkClientSplashAuthorizationStatus_request.h"
#include "OAIUpdateNetworkFirmwareUpgradesStagedEvents_request.h"
#include "OAIUpdateNetworkFirmwareUpgradesStagedStages_request.h"
#include "OAIUpdateNetworkFirmwareUpgrades_request.h"
#include "OAIUpdateNetworkFloorPlan_request.h"
#include "OAIUpdateNetworkGroupPolicy_request.h"
#include "OAIUpdateNetworkMerakiAuthUser_request.h"
#include "OAIUpdateNetworkMqttBroker_request.h"
#include "OAIUpdateNetworkNetflow_request.h"
#include "OAIUpdateNetworkSettings_request.h"
#include "OAIUpdateNetworkSnmp_request.h"
#include "OAIUpdateNetworkSyslogServers_request.h"
#include "OAIUpdateNetworkTrafficAnalysis_request.h"
#include "OAIUpdateNetworkWebhooksHttpServer_request.h"
#include "OAIUpdateNetworkWebhooksPayloadTemplate_request.h"
#include "OAIUpdateNetwork_request.h"
#include "OAIVmxNetworkDevicesClaim_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworksApi : public QObject {
    Q_OBJECT

public:
    OAINetworksApi(const int timeOut = 0);
    ~OAINetworksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_bind_network_request OAIBindNetwork_request [required]
    */
    virtual void bindNetwork(const QString &network_id, const OAIBindNetwork_request &oai_bind_network_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_claim_network_devices_request OAIClaimNetworkDevices_request [required]
    */
    virtual void claimNetworkDevices(const QString &network_id, const OAIClaimNetworkDevices_request &oai_claim_network_devices_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_combine_organization_networks_request OAICombineOrganizationNetworks_request [required]
    */
    virtual void combineOrganizationNetworks(const QString &organization_id, const OAICombineOrganizationNetworks_request &oai_combine_organization_networks_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_rollback_request OAICreateNetworkFirmwareUpgradesRollback_request [required]
    */
    virtual void createNetworkFirmwareUpgradesRollback(const QString &network_id, const OAICreateNetworkFirmwareUpgradesRollback_request &oai_create_network_firmware_upgrades_rollback_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_event_request OAICreateNetworkFirmwareUpgradesStagedEvent_request [required]
    */
    virtual void createNetworkFirmwareUpgradesStagedEvent(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedEvent_request &oai_create_network_firmware_upgrades_staged_event_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_group_request OAICreateNetworkFirmwareUpgradesStagedGroup_request [required]
    */
    virtual void createNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedGroup_request &oai_create_network_firmware_upgrades_staged_group_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_floor_plan_request OAICreateNetworkFloorPlan_request [required]
    */
    virtual void createNetworkFloorPlan(const QString &network_id, const OAICreateNetworkFloorPlan_request &oai_create_network_floor_plan_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_group_policy_request OAICreateNetworkGroupPolicy_request [required]
    */
    virtual void createNetworkGroupPolicy(const QString &network_id, const OAICreateNetworkGroupPolicy_request &oai_create_network_group_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_meraki_auth_user_request OAICreateNetworkMerakiAuthUser_request [required]
    */
    virtual void createNetworkMerakiAuthUser(const QString &network_id, const OAICreateNetworkMerakiAuthUser_request &oai_create_network_meraki_auth_user_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_mqtt_broker_request OAICreateNetworkMqttBroker_request [required]
    */
    virtual void createNetworkMqttBroker(const QString &network_id, const OAICreateNetworkMqttBroker_request &oai_create_network_mqtt_broker_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_pii_request_request OAICreateNetworkPiiRequest_request [optional]
    */
    virtual void createNetworkPiiRequest(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkPiiRequest_request> &oai_create_network_pii_request_request = ::OpenAPI::OptionalParam<OAICreateNetworkPiiRequest_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_http_server_request OAICreateNetworkWebhooksHttpServer_request [required]
    */
    virtual void createNetworkWebhooksHttpServer(const QString &network_id, const OAICreateNetworkWebhooksHttpServer_request &oai_create_network_webhooks_http_server_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_payload_template_request OAICreateNetworkWebhooksPayloadTemplate_request [required]
    */
    virtual void createNetworkWebhooksPayloadTemplate(const QString &network_id, const OAICreateNetworkWebhooksPayloadTemplate_request &oai_create_network_webhooks_payload_template_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_webhook_test_request OAICreateNetworkWebhooksWebhookTest_request [required]
    */
    virtual void createNetworkWebhooksWebhookTest(const QString &network_id, const OAICreateNetworkWebhooksWebhookTest_request &oai_create_network_webhooks_webhook_test_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_network_request OAICreateOrganizationNetwork_request [required]
    */
    virtual void createOrganizationNetwork(const QString &organization_id, const OAICreateOrganizationNetwork_request &oai_create_organization_network_request);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void deferNetworkFirmwareUpgradesStagedEvents(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void deleteNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void deleteNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  floor_plan_id QString [required]
    */
    virtual void deleteNetworkFloorPlan(const QString &network_id, const QString &floor_plan_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_policy_id QString [required]
    */
    virtual void deleteNetworkGroupPolicy(const QString &network_id, const QString &group_policy_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  meraki_auth_user_id QString [required]
    */
    virtual void deleteNetworkMerakiAuthUser(const QString &network_id, const QString &meraki_auth_user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    */
    virtual void deleteNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void deleteNetworkPiiRequest(const QString &network_id, const QString &request_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  http_server_id QString [required]
    */
    virtual void deleteNetworkWebhooksHttpServer(const QString &network_id, const QString &http_server_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    */
    virtual void deleteNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkAlertsHistory(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAlertsSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  bluetooth_client_id QString [required]
    * @param[in]  include_connectivity_history bool [optional]
    * @param[in]  connectivity_history_timespan qint32 [optional]
    */
    virtual void getNetworkBluetoothClient(const QString &network_id, const QString &bluetooth_client_id, const ::OpenAPI::OptionalParam<bool> &include_connectivity_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &connectivity_history_timespan = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  include_connectivity_history bool [optional]
    */
    virtual void getNetworkBluetoothClients(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_connectivity_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClient(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientPolicy(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientSplashAuthorizationStatus(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkClientTrafficHistory(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientUsageHistory(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  ip QString [optional]
    * @param[in]  ip6 QString [optional]
    * @param[in]  ip6_local QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  os QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  vlan QString [optional]
    * @param[in]  recent_device_connections QList<QString> [optional]
    */
    virtual void getNetworkClients(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip6 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip6_local = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recent_device_connections = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  clients QString [required]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkClientsApplicationUsage(const QString &network_id, const QString &clients, const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkClientsBandwidthUsageHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkClientsOverview(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  clients QString [required]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkClientsUsageHistories(const QString &network_id, const QString &clients, const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkDevices(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  product_type QString [optional]
    * @param[in]  included_event_types QList<QString> [optional]
    * @param[in]  excluded_event_types QList<QString> [optional]
    * @param[in]  device_mac QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  device_name QString [optional]
    * @param[in]  client_ip QString [optional]
    * @param[in]  client_mac QString [optional]
    * @param[in]  client_name QString [optional]
    * @param[in]  sm_device_mac QString [optional]
    * @param[in]  sm_device_name QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &excluded_event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &device_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sm_device_mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sm_device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkEventsEventTypes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgrades(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedEvents(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedGroups(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedStages(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  floor_plan_id QString [required]
    */
    virtual void getNetworkFloorPlan(const QString &network_id, const QString &floor_plan_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFloorPlans(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkGroupPolicies(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_policy_id QString [required]
    */
    virtual void getNetworkGroupPolicy(const QString &network_id, const QString &group_policy_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkHealthAlerts(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  meraki_auth_user_id QString [required]
    */
    virtual void getNetworkMerakiAuthUser(const QString &network_id, const QString &meraki_auth_user_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkMerakiAuthUsers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    */
    virtual void getNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkMqttBrokers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkNetflow(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkNetworkHealthChannelUtilization(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiPiiKeys(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void getNetworkPiiRequest(const QString &network_id, const QString &request_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkPiiRequests(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiSmDevicesForKey(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiSmOwnersForKey(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkPoliciesByClient(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSnmp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  ssid_number qint32 [optional]
    * @param[in]  login_identifier QString [optional]
    * @param[in]  timespan qint32 [optional]
    */
    virtual void getNetworkSplashLoginAttempts(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &ssid_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &login_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timespan = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSyslogServers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTopologyLinkLayer(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  device_type QString [optional]
    */
    virtual void getNetworkTraffic(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &device_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTrafficAnalysis(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTrafficShapingApplicationCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTrafficShapingDscpTaggingOptions(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  http_server_id QString [required]
    */
    virtual void getNetworkWebhooksHttpServer(const QString &network_id, const QString &http_server_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWebhooksHttpServers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    */
    virtual void getNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWebhooksPayloadTemplates(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  webhook_test_id QString [required]
    */
    virtual void getNetworkWebhooksWebhookTest(const QString &network_id, const QString &webhook_test_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  device_type QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationInventoryOnboardingCloudMonitoringNetworks(const QString &organization_id, const QString &device_type, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [optional]
    * @param[in]  is_bound_to_config_template bool [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationNetworks(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &config_template_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_bound_to_config_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_provision_network_clients_request OAIProvisionNetworkClients_request [required]
    */
    virtual void provisionNetworkClients(const QString &network_id, const OAIProvisionNetworkClients_request &oai_provision_network_clients_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_remove_network_devices_request OAIRemoveNetworkDevices_request [required]
    */
    virtual void removeNetworkDevices(const QString &network_id, const OAIRemoveNetworkDevices_request &oai_remove_network_devices_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_rollbacks_network_firmware_upgrades_staged_events_request OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request [required]
    */
    virtual void rollbacksNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request &oai_rollbacks_network_firmware_upgrades_staged_events_request);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void splitNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_unbind_network_request OAIUnbindNetwork_request [optional]
    */
    virtual void unbindNetwork(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUnbindNetwork_request> &oai_unbind_network_request = ::OpenAPI::OptionalParam<OAIUnbindNetwork_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_request OAIUpdateNetwork_request [optional]
    */
    virtual void updateNetwork(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetwork_request> &oai_update_network_request = ::OpenAPI::OptionalParam<OAIUpdateNetwork_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_alerts_settings_request OAIUpdateNetworkAlertsSettings_request [optional]
    */
    virtual void updateNetworkAlertsSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAlertsSettings_request> &oai_update_network_alerts_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAlertsSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_network_client_policy_request OAIUpdateNetworkClientPolicy_request [required]
    */
    virtual void updateNetworkClientPolicy(const QString &network_id, const QString &client_id, const OAIUpdateNetworkClientPolicy_request &oai_update_network_client_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_network_client_splash_authorization_status_request OAIUpdateNetworkClientSplashAuthorizationStatus_request [required]
    */
    virtual void updateNetworkClientSplashAuthorizationStatus(const QString &network_id, const QString &client_id, const OAIUpdateNetworkClientSplashAuthorizationStatus_request &oai_update_network_client_splash_authorization_status_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_request OAIUpdateNetworkFirmwareUpgrades_request [optional]
    */
    virtual void updateNetworkFirmwareUpgrades(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgrades_request> &oai_update_network_firmware_upgrades_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgrades_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_staged_events_request OAIUpdateNetworkFirmwareUpgradesStagedEvents_request [required]
    */
    virtual void updateNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIUpdateNetworkFirmwareUpgradesStagedEvents_request &oai_update_network_firmware_upgrades_staged_events_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_group_request OAICreateNetworkFirmwareUpgradesStagedGroup_request [required]
    */
    virtual void updateNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id, const OAICreateNetworkFirmwareUpgradesStagedGroup_request &oai_create_network_firmware_upgrades_staged_group_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_staged_stages_request OAIUpdateNetworkFirmwareUpgradesStagedStages_request [optional]
    */
    virtual void updateNetworkFirmwareUpgradesStagedStages(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgradesStagedStages_request> &oai_update_network_firmware_upgrades_staged_stages_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgradesStagedStages_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  floor_plan_id QString [required]
    * @param[in]  oai_update_network_floor_plan_request OAIUpdateNetworkFloorPlan_request [optional]
    */
    virtual void updateNetworkFloorPlan(const QString &network_id, const QString &floor_plan_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkFloorPlan_request> &oai_update_network_floor_plan_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkFloorPlan_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_policy_id QString [required]
    * @param[in]  oai_update_network_group_policy_request OAIUpdateNetworkGroupPolicy_request [optional]
    */
    virtual void updateNetworkGroupPolicy(const QString &network_id, const QString &group_policy_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkGroupPolicy_request> &oai_update_network_group_policy_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkGroupPolicy_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  meraki_auth_user_id QString [required]
    * @param[in]  oai_update_network_meraki_auth_user_request OAIUpdateNetworkMerakiAuthUser_request [optional]
    */
    virtual void updateNetworkMerakiAuthUser(const QString &network_id, const QString &meraki_auth_user_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkMerakiAuthUser_request> &oai_update_network_meraki_auth_user_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkMerakiAuthUser_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    * @param[in]  oai_update_network_mqtt_broker_request OAIUpdateNetworkMqttBroker_request [optional]
    */
    virtual void updateNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkMqttBroker_request> &oai_update_network_mqtt_broker_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkMqttBroker_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_netflow_request OAIUpdateNetworkNetflow_request [optional]
    */
    virtual void updateNetworkNetflow(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkNetflow_request> &oai_update_network_netflow_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkNetflow_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_settings_request OAIUpdateNetworkSettings_request [optional]
    */
    virtual void updateNetworkSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSettings_request> &oai_update_network_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_snmp_request OAIUpdateNetworkSnmp_request [optional]
    */
    virtual void updateNetworkSnmp(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSnmp_request> &oai_update_network_snmp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSnmp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_syslog_servers_request OAIUpdateNetworkSyslogServers_request [required]
    */
    virtual void updateNetworkSyslogServers(const QString &network_id, const OAIUpdateNetworkSyslogServers_request &oai_update_network_syslog_servers_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_traffic_analysis_request OAIUpdateNetworkTrafficAnalysis_request [optional]
    */
    virtual void updateNetworkTrafficAnalysis(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkTrafficAnalysis_request> &oai_update_network_traffic_analysis_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkTrafficAnalysis_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  http_server_id QString [required]
    * @param[in]  oai_update_network_webhooks_http_server_request OAIUpdateNetworkWebhooksHttpServer_request [optional]
    */
    virtual void updateNetworkWebhooksHttpServer(const QString &network_id, const QString &http_server_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksHttpServer_request> &oai_update_network_webhooks_http_server_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksHttpServer_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    * @param[in]  oai_update_network_webhooks_payload_template_request OAIUpdateNetworkWebhooksPayloadTemplate_request [optional]
    */
    virtual void updateNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksPayloadTemplate_request> &oai_update_network_webhooks_payload_template_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksPayloadTemplate_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_vmx_network_devices_claim_request OAIVmxNetworkDevicesClaim_request [required]
    */
    virtual void vmxNetworkDevicesClaim(const QString &network_id, const OAIVmxNetworkDevicesClaim_request &oai_vmx_network_devices_claim_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bindNetworkCallback(OAIHttpRequestWorker *worker);
    void claimNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void combineOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void createNetworkFirmwareUpgradesRollbackCallback(OAIHttpRequestWorker *worker);
    void createNetworkFirmwareUpgradesStagedEventCallback(OAIHttpRequestWorker *worker);
    void createNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void createNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void createNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void createNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void createNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void createNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void createNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void createNetworkWebhooksWebhookTestCallback(OAIHttpRequestWorker *worker);
    void createOrganizationNetworkCallback(OAIHttpRequestWorker *worker);
    void deferNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void getNetworkCallback(OAIHttpRequestWorker *worker);
    void getNetworkAlertsHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkAlertsSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkBluetoothClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkBluetoothClientsCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientSplashAuthorizationStatusCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientTrafficHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsApplicationUsageCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsBandwidthUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsOverviewCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsUsageHistoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkEventsEventTypesCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupsCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedStagesCallback(OAIHttpRequestWorker *worker);
    void getNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void getNetworkFloorPlansCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkHealthAlertsCallback(OAIHttpRequestWorker *worker);
    void getNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void getNetworkMerakiAuthUsersCallback(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokersCallback(OAIHttpRequestWorker *worker);
    void getNetworkNetflowCallback(OAIHttpRequestWorker *worker);
    void getNetworkNetworkHealthChannelUtilizationCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiPiiKeysCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiRequestsCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiSmDevicesForKeyCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiSmOwnersForKeyCallback(OAIHttpRequestWorker *worker);
    void getNetworkPoliciesByClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSnmpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSplashLoginAttemptsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSyslogServersCallback(OAIHttpRequestWorker *worker);
    void getNetworkTopologyLinkLayerCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficAnalysisCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficShapingApplicationCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficShapingDscpTaggingOptionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksHttpServersCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplatesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksWebhookTestCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksCallback(OAIHttpRequestWorker *worker);
    void getOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void provisionNetworkClientsCallback(OAIHttpRequestWorker *worker);
    void removeNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void rollbacksNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void splitNetworkCallback(OAIHttpRequestWorker *worker);
    void unbindNetworkCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAlertsSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkClientPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkClientSplashAuthorizationStatusCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedStagesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void updateNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void updateNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void updateNetworkNetflowCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSnmpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSyslogServersCallback(OAIHttpRequestWorker *worker);
    void updateNetworkTrafficAnalysisCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void vmxNetworkDevicesClaimCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bindNetworkSignal(OAIObject summary);
    void claimNetworkDevicesSignal();
    void combineOrganizationNetworksSignal(OAICombineOrganizationNetworks_200_response summary);
    void createNetworkFirmwareUpgradesRollbackSignal(OAICreateNetworkFirmwareUpgradesRollback_200_response summary);
    void createNetworkFirmwareUpgradesStagedEventSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void createNetworkFirmwareUpgradesStagedGroupSignal(OAIObject summary);
    void createNetworkFloorPlanSignal(OAIObject summary);
    void createNetworkGroupPolicySignal(OAIObject summary);
    void createNetworkMerakiAuthUserSignal(OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void createNetworkMqttBrokerSignal(OAIObject summary);
    void createNetworkPiiRequestSignal(OAIObject summary);
    void createNetworkWebhooksHttpServerSignal(OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void createNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void createNetworkWebhooksWebhookTestSignal(OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void createOrganizationNetworkSignal(OAIGetNetwork_200_response summary);
    void deferNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void deleteNetworkSignal();
    void deleteNetworkFirmwareUpgradesStagedGroupSignal();
    void deleteNetworkFloorPlanSignal();
    void deleteNetworkGroupPolicySignal();
    void deleteNetworkMerakiAuthUserSignal();
    void deleteNetworkMqttBrokerSignal();
    void deleteNetworkPiiRequestSignal();
    void deleteNetworkWebhooksHttpServerSignal();
    void deleteNetworkWebhooksPayloadTemplateSignal();
    void getNetworkSignal(OAIGetNetwork_200_response summary);
    void getNetworkAlertsHistorySignal(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary);
    void getNetworkAlertsSettingsSignal(OAIObject summary);
    void getNetworkBluetoothClientSignal(OAIObject summary);
    void getNetworkBluetoothClientsSignal(QList<OAIObject> summary);
    void getNetworkClientSignal(OAIGetNetworkClient_200_response summary);
    void getNetworkClientPolicySignal(OAIObject summary);
    void getNetworkClientSplashAuthorizationStatusSignal(OAIObject summary);
    void getNetworkClientTrafficHistorySignal(QList<OAIObject> summary);
    void getNetworkClientUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkClientsSignal(OAIGetNetworkClients_200_response summary);
    void getNetworkClientsApplicationUsageSignal(QList<OAIObject> summary);
    void getNetworkClientsBandwidthUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkClientsOverviewSignal(OAIObject summary);
    void getNetworkClientsUsageHistoriesSignal(QList<OAIObject> summary);
    void getNetworkDevicesSignal(QList<OAIObject> summary);
    void getNetworkEventsSignal(OAIGetNetworkEvents_200_response summary);
    void getNetworkEventsEventTypesSignal(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary);
    void getNetworkFirmwareUpgradesSignal(OAIGetNetworkFirmwareUpgrades_200_response summary);
    void getNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getNetworkFirmwareUpgradesStagedGroupSignal(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary);
    void getNetworkFirmwareUpgradesStagedGroupsSignal(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary);
    void getNetworkFirmwareUpgradesStagedStagesSignal(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void getNetworkFloorPlanSignal(OAIObject summary);
    void getNetworkFloorPlansSignal(QList<OAIObject> summary);
    void getNetworkGroupPoliciesSignal(QList<OAIObject> summary);
    void getNetworkGroupPolicySignal(OAIObject summary);
    void getNetworkHealthAlertsSignal(QList<OAIGetNetworkHealthAlerts_200_response_inner> summary);
    void getNetworkMerakiAuthUserSignal(OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void getNetworkMerakiAuthUsersSignal(QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary);
    void getNetworkMqttBrokerSignal(OAIObject summary);
    void getNetworkMqttBrokersSignal(QList<OAIObject> summary);
    void getNetworkNetflowSignal(OAIObject summary);
    void getNetworkNetworkHealthChannelUtilizationSignal(QList<OAIObject> summary);
    void getNetworkPiiPiiKeysSignal(OAIObject summary);
    void getNetworkPiiRequestSignal(OAIObject summary);
    void getNetworkPiiRequestsSignal(QList<OAIObject> summary);
    void getNetworkPiiSmDevicesForKeySignal(OAIObject summary);
    void getNetworkPiiSmOwnersForKeySignal(OAIObject summary);
    void getNetworkPoliciesByClientSignal(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary);
    void getNetworkSettingsSignal(OAIGetNetworkSettings_200_response summary);
    void getNetworkSnmpSignal(OAIObject summary);
    void getNetworkSplashLoginAttemptsSignal(QList<OAIObject> summary);
    void getNetworkSyslogServersSignal(OAIGetNetworkSyslogServers_200_response summary);
    void getNetworkTopologyLinkLayerSignal(OAIObject summary);
    void getNetworkTrafficSignal(QList<OAIObject> summary);
    void getNetworkTrafficAnalysisSignal(OAIObject summary);
    void getNetworkTrafficShapingApplicationCategoriesSignal(OAIObject summary);
    void getNetworkTrafficShapingDscpTaggingOptionsSignal(QList<OAIObject> summary);
    void getNetworkWebhooksHttpServerSignal(OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void getNetworkWebhooksHttpServersSignal(QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary);
    void getNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void getNetworkWebhooksPayloadTemplatesSignal(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary);
    void getNetworkWebhooksWebhookTestSignal(OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignal(QList<OAIGetNetwork_200_response> summary);
    void getOrganizationNetworksSignal(QList<OAIGetNetwork_200_response> summary);
    void provisionNetworkClientsSignal(OAIObject summary);
    void removeNetworkDevicesSignal();
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void splitNetworkSignal(OAISplitNetwork_200_response summary);
    void unbindNetworkSignal(OAIGetNetwork_200_response summary);
    void updateNetworkSignal(OAIGetNetwork_200_response summary);
    void updateNetworkAlertsSettingsSignal(OAIObject summary);
    void updateNetworkClientPolicySignal(OAIObject summary);
    void updateNetworkClientSplashAuthorizationStatusSignal(OAIObject summary);
    void updateNetworkFirmwareUpgradesSignal(OAIGetNetworkFirmwareUpgrades_200_response summary);
    void updateNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void updateNetworkFirmwareUpgradesStagedGroupSignal(OAIObject summary);
    void updateNetworkFirmwareUpgradesStagedStagesSignal(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void updateNetworkFloorPlanSignal(OAIObject summary);
    void updateNetworkGroupPolicySignal(OAIObject summary);
    void updateNetworkMerakiAuthUserSignal(OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void updateNetworkMqttBrokerSignal(OAIObject summary);
    void updateNetworkNetflowSignal(OAIObject summary);
    void updateNetworkSettingsSignal(OAIGetNetworkSettings_200_response summary);
    void updateNetworkSnmpSignal(OAIObject summary);
    void updateNetworkSyslogServersSignal(OAIGetNetworkSyslogServers_200_response summary);
    void updateNetworkTrafficAnalysisSignal(OAIObject summary);
    void updateNetworkWebhooksHttpServerSignal(OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void updateNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void vmxNetworkDevicesClaimSignal(OAIObject summary);


    void bindNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void claimNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void combineOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, OAICombineOrganizationNetworks_200_response summary);
    void createNetworkFirmwareUpgradesRollbackSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkFirmwareUpgradesRollback_200_response summary);
    void createNetworkFirmwareUpgradesStagedEventSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void createNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void createNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void createNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void createNetworkWebhooksWebhookTestSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void createOrganizationNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void deferNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void deleteNetworkSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void getNetworkAlertsHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAlertsHistory_200_response_inner> summary);
    void getNetworkAlertsSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkBluetoothClientSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkBluetoothClientsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkClient_200_response summary);
    void getNetworkClientPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientSplashAuthorizationStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientTrafficHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkClients_200_response summary);
    void getNetworkClientsApplicationUsageSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsBandwidthUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientsUsageHistoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkEvents_200_response summary);
    void getNetworkEventsEventTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary);
    void getNetworkFirmwareUpgradesSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgrades_200_response summary);
    void getNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary);
    void getNetworkFirmwareUpgradesStagedGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary);
    void getNetworkFirmwareUpgradesStagedStagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void getNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkFloorPlansSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkHealthAlertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkHealthAlerts_200_response_inner> summary);
    void getNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void getNetworkMerakiAuthUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary);
    void getNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkMqttBrokersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkNetflowSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkNetworkHealthChannelUtilizationSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkPiiPiiKeysSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkPiiSmDevicesForKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiSmOwnersForKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPoliciesByClientSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary);
    void getNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSettings_200_response summary);
    void getNetworkSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSplashLoginAttemptsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSyslogServersSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSyslogServers_200_response summary);
    void getNetworkTopologyLinkLayerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkTrafficAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficShapingApplicationCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficShapingDscpTaggingOptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void getNetworkWebhooksHttpServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary);
    void getNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void getNetworkWebhooksPayloadTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary);
    void getNetworkWebhooksWebhookTestSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetwork_200_response> summary);
    void getOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetwork_200_response> summary);
    void provisionNetworkClientsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void removeNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void splitNetworkSignalFull(OAIHttpRequestWorker *worker, OAISplitNetwork_200_response summary);
    void unbindNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void updateNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void updateNetworkAlertsSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkClientPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkClientSplashAuthorizationStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkFirmwareUpgradesSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgrades_200_response summary);
    void updateNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void updateNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkFirmwareUpgradesStagedStagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void updateNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void updateNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkNetflowSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSettings_200_response summary);
    void updateNetworkSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSyslogServersSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSyslogServers_200_response summary);
    void updateNetworkTrafficAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void updateNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void vmxNetworkDevicesClaimSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use bindNetworkSignalError() instead")
    void bindNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bindNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalError() instead")
    void claimNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalError() instead")
    void combineOrganizationNetworksSignalE(OAICombineOrganizationNetworks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalError(OAICombineOrganizationNetworks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesRollbackSignalError() instead")
    void createNetworkFirmwareUpgradesRollbackSignalE(OAICreateNetworkFirmwareUpgradesRollback_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesRollbackSignalError(OAICreateNetworkFirmwareUpgradesRollback_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedEventSignalError() instead")
    void createNetworkFirmwareUpgradesStagedEventSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedEventSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void createNetworkFirmwareUpgradesStagedGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFloorPlanSignalError() instead")
    void createNetworkFloorPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFloorPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupPolicySignalError() instead")
    void createNetworkGroupPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMerakiAuthUserSignalError() instead")
    void createNetworkMerakiAuthUserSignalE(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMerakiAuthUserSignalError(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMqttBrokerSignalError() instead")
    void createNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkPiiRequestSignalError() instead")
    void createNetworkPiiRequestSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkPiiRequestSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksHttpServerSignalError() instead")
    void createNetworkWebhooksHttpServerSignalE(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksHttpServerSignalError(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksPayloadTemplateSignalError() instead")
    void createNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksWebhookTestSignalError() instead")
    void createNetworkWebhooksWebhookTestSignalE(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksWebhookTestSignalError(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalError() instead")
    void createOrganizationNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deferNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void deferNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deferNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalError() instead")
    void deleteNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void deleteNetworkFirmwareUpgradesStagedGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFloorPlanSignalError() instead")
    void deleteNetworkFloorPlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFloorPlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPolicySignalError() instead")
    void deleteNetworkGroupPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMerakiAuthUserSignalError() instead")
    void deleteNetworkMerakiAuthUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMerakiAuthUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMqttBrokerSignalError() instead")
    void deleteNetworkMqttBrokerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMqttBrokerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkPiiRequestSignalError() instead")
    void deleteNetworkPiiRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkPiiRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksHttpServerSignalError() instead")
    void deleteNetworkWebhooksHttpServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksHttpServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksPayloadTemplateSignalError() instead")
    void deleteNetworkWebhooksPayloadTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksPayloadTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSignalError() instead")
    void getNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsHistorySignalError() instead")
    void getNetworkAlertsHistorySignalE(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsHistorySignalError(QList<OAIGetNetworkAlertsHistory_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsSettingsSignalError() instead")
    void getNetworkAlertsSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientSignalError() instead")
    void getNetworkBluetoothClientSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientsSignalError() instead")
    void getNetworkBluetoothClientsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSignalError() instead")
    void getNetworkClientSignalE(OAIGetNetworkClient_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSignalError(OAIGetNetworkClient_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientPolicySignalError() instead")
    void getNetworkClientPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSplashAuthorizationStatusSignalError() instead")
    void getNetworkClientSplashAuthorizationStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSplashAuthorizationStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientTrafficHistorySignalError() instead")
    void getNetworkClientTrafficHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientTrafficHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientUsageHistorySignalError() instead")
    void getNetworkClientUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsSignalError() instead")
    void getNetworkClientsSignalE(OAIGetNetworkClients_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsSignalError(OAIGetNetworkClients_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsApplicationUsageSignalError() instead")
    void getNetworkClientsApplicationUsageSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsApplicationUsageSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsBandwidthUsageHistorySignalError() instead")
    void getNetworkClientsBandwidthUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsBandwidthUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsOverviewSignalError() instead")
    void getNetworkClientsOverviewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsOverviewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsUsageHistoriesSignalError() instead")
    void getNetworkClientsUsageHistoriesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsUsageHistoriesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalError() instead")
    void getNetworkDevicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsSignalError() instead")
    void getNetworkEventsSignalE(OAIGetNetworkEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsSignalError(OAIGetNetworkEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsEventTypesSignalError() instead")
    void getNetworkEventsEventTypesSignalE(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsEventTypesSignalError(QList<OAIGetNetworkEventsEventTypes_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesSignalError() instead")
    void getNetworkFirmwareUpgradesSignalE(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesSignalError(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void getNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void getNetworkFirmwareUpgradesStagedGroupSignalE(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupSignalError(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupsSignalError() instead")
    void getNetworkFirmwareUpgradesStagedGroupsSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupsSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedStagesSignalError() instead")
    void getNetworkFirmwareUpgradesStagedStagesSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedStagesSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlanSignalError() instead")
    void getNetworkFloorPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlansSignalError() instead")
    void getNetworkFloorPlansSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlansSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPoliciesSignalError() instead")
    void getNetworkGroupPoliciesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPoliciesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPolicySignalError() instead")
    void getNetworkGroupPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkHealthAlertsSignalError() instead")
    void getNetworkHealthAlertsSignalE(QList<OAIGetNetworkHealthAlerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkHealthAlertsSignalError(QList<OAIGetNetworkHealthAlerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUserSignalError() instead")
    void getNetworkMerakiAuthUserSignalE(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUserSignalError(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUsersSignalError() instead")
    void getNetworkMerakiAuthUsersSignalE(QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUsersSignalError(QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokerSignalError() instead")
    void getNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokersSignalError() instead")
    void getNetworkMqttBrokersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetflowSignalError() instead")
    void getNetworkNetflowSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetflowSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetworkHealthChannelUtilizationSignalError() instead")
    void getNetworkNetworkHealthChannelUtilizationSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetworkHealthChannelUtilizationSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiPiiKeysSignalError() instead")
    void getNetworkPiiPiiKeysSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiPiiKeysSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestSignalError() instead")
    void getNetworkPiiRequestSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestsSignalError() instead")
    void getNetworkPiiRequestsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmDevicesForKeySignalError() instead")
    void getNetworkPiiSmDevicesForKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmDevicesForKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmOwnersForKeySignalError() instead")
    void getNetworkPiiSmOwnersForKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmOwnersForKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPoliciesByClientSignalError() instead")
    void getNetworkPoliciesByClientSignalE(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPoliciesByClientSignalError(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSettingsSignalError() instead")
    void getNetworkSettingsSignalE(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSettingsSignalError(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSnmpSignalError() instead")
    void getNetworkSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSplashLoginAttemptsSignalError() instead")
    void getNetworkSplashLoginAttemptsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSplashLoginAttemptsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSyslogServersSignalError() instead")
    void getNetworkSyslogServersSignalE(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSyslogServersSignalError(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTopologyLinkLayerSignalError() instead")
    void getNetworkTopologyLinkLayerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTopologyLinkLayerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficSignalError() instead")
    void getNetworkTrafficSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficAnalysisSignalError() instead")
    void getNetworkTrafficAnalysisSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficAnalysisSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingApplicationCategoriesSignalError() instead")
    void getNetworkTrafficShapingApplicationCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingApplicationCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingDscpTaggingOptionsSignalError() instead")
    void getNetworkTrafficShapingDscpTaggingOptionsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingDscpTaggingOptionsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServerSignalError() instead")
    void getNetworkWebhooksHttpServerSignalE(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServerSignalError(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServersSignalError() instead")
    void getNetworkWebhooksHttpServersSignalE(QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServersSignalError(QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplateSignalError() instead")
    void getNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplatesSignalError() instead")
    void getNetworkWebhooksPayloadTemplatesSignalE(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplatesSignalError(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksWebhookTestSignalError() instead")
    void getNetworkWebhooksWebhookTestSignalE(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksWebhookTestSignalError(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalError() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalE(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalError(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalError() instead")
    void getOrganizationNetworksSignalE(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalError(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionNetworkClientsSignalError() instead")
    void provisionNetworkClientsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionNetworkClientsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDevicesSignalError() instead")
    void removeNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbacksNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitNetworkSignalError() instead")
    void splitNetworkSignalE(OAISplitNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void splitNetworkSignalError(OAISplitNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbindNetworkSignalError() instead")
    void unbindNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unbindNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSignalError() instead")
    void updateNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAlertsSettingsSignalError() instead")
    void updateNetworkAlertsSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAlertsSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientPolicySignalError() instead")
    void updateNetworkClientPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientSplashAuthorizationStatusSignalError() instead")
    void updateNetworkClientSplashAuthorizationStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientSplashAuthorizationStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesSignalError() instead")
    void updateNetworkFirmwareUpgradesSignalE(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesSignalError(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedStagesSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedStagesSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedStagesSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFloorPlanSignalError() instead")
    void updateNetworkFloorPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFloorPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkGroupPolicySignalError() instead")
    void updateNetworkGroupPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkGroupPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMerakiAuthUserSignalError() instead")
    void updateNetworkMerakiAuthUserSignalE(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMerakiAuthUserSignalError(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMqttBrokerSignalError() instead")
    void updateNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkNetflowSignalError() instead")
    void updateNetworkNetflowSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkNetflowSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSettingsSignalError() instead")
    void updateNetworkSettingsSignalE(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSettingsSignalError(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSnmpSignalError() instead")
    void updateNetworkSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSyslogServersSignalError() instead")
    void updateNetworkSyslogServersSignalE(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSyslogServersSignalError(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkTrafficAnalysisSignalError() instead")
    void updateNetworkTrafficAnalysisSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkTrafficAnalysisSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksHttpServerSignalError() instead")
    void updateNetworkWebhooksHttpServerSignalE(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksHttpServerSignalError(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksPayloadTemplateSignalError() instead")
    void updateNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vmxNetworkDevicesClaimSignalError() instead")
    void vmxNetworkDevicesClaimSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vmxNetworkDevicesClaimSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bindNetworkSignalErrorFull() instead")
    void bindNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bindNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalErrorFull() instead")
    void claimNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalErrorFull() instead")
    void combineOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesRollbackSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesRollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesRollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedEventSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesStagedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFloorPlanSignalErrorFull() instead")
    void createNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupPolicySignalErrorFull() instead")
    void createNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMerakiAuthUserSignalErrorFull() instead")
    void createNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMqttBrokerSignalErrorFull() instead")
    void createNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkPiiRequestSignalErrorFull() instead")
    void createNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksHttpServerSignalErrorFull() instead")
    void createNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void createNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksWebhookTestSignalErrorFull() instead")
    void createNetworkWebhooksWebhookTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksWebhookTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalErrorFull() instead")
    void createOrganizationNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void deferNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalErrorFull() instead")
    void deleteNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void deleteNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFloorPlanSignalErrorFull() instead")
    void deleteNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPolicySignalErrorFull() instead")
    void deleteNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMerakiAuthUserSignalErrorFull() instead")
    void deleteNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMqttBrokerSignalErrorFull() instead")
    void deleteNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkPiiRequestSignalErrorFull() instead")
    void deleteNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksHttpServerSignalErrorFull() instead")
    void deleteNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void deleteNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSignalErrorFull() instead")
    void getNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsHistorySignalErrorFull() instead")
    void getNetworkAlertsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsSettingsSignalErrorFull() instead")
    void getNetworkAlertsSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientSignalErrorFull() instead")
    void getNetworkBluetoothClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkBluetoothClientsSignalErrorFull() instead")
    void getNetworkBluetoothClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkBluetoothClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSignalErrorFull() instead")
    void getNetworkClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientPolicySignalErrorFull() instead")
    void getNetworkClientPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSplashAuthorizationStatusSignalErrorFull() instead")
    void getNetworkClientSplashAuthorizationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSplashAuthorizationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientTrafficHistorySignalErrorFull() instead")
    void getNetworkClientTrafficHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientTrafficHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientUsageHistorySignalErrorFull() instead")
    void getNetworkClientUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsSignalErrorFull() instead")
    void getNetworkClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsApplicationUsageSignalErrorFull() instead")
    void getNetworkClientsApplicationUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsApplicationUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsBandwidthUsageHistorySignalErrorFull() instead")
    void getNetworkClientsBandwidthUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsBandwidthUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsOverviewSignalErrorFull() instead")
    void getNetworkClientsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsUsageHistoriesSignalErrorFull() instead")
    void getNetworkClientsUsageHistoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsUsageHistoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalErrorFull() instead")
    void getNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsSignalErrorFull() instead")
    void getNetworkEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkEventsEventTypesSignalErrorFull() instead")
    void getNetworkEventsEventTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkEventsEventTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupsSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedStagesSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedStagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedStagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlanSignalErrorFull() instead")
    void getNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlansSignalErrorFull() instead")
    void getNetworkFloorPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPoliciesSignalErrorFull() instead")
    void getNetworkGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPolicySignalErrorFull() instead")
    void getNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkHealthAlertsSignalErrorFull() instead")
    void getNetworkHealthAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkHealthAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUserSignalErrorFull() instead")
    void getNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUsersSignalErrorFull() instead")
    void getNetworkMerakiAuthUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokerSignalErrorFull() instead")
    void getNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokersSignalErrorFull() instead")
    void getNetworkMqttBrokersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetflowSignalErrorFull() instead")
    void getNetworkNetflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetworkHealthChannelUtilizationSignalErrorFull() instead")
    void getNetworkNetworkHealthChannelUtilizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetworkHealthChannelUtilizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiPiiKeysSignalErrorFull() instead")
    void getNetworkPiiPiiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiPiiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestSignalErrorFull() instead")
    void getNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestsSignalErrorFull() instead")
    void getNetworkPiiRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmDevicesForKeySignalErrorFull() instead")
    void getNetworkPiiSmDevicesForKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmDevicesForKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmOwnersForKeySignalErrorFull() instead")
    void getNetworkPiiSmOwnersForKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmOwnersForKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPoliciesByClientSignalErrorFull() instead")
    void getNetworkPoliciesByClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPoliciesByClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSettingsSignalErrorFull() instead")
    void getNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSnmpSignalErrorFull() instead")
    void getNetworkSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSplashLoginAttemptsSignalErrorFull() instead")
    void getNetworkSplashLoginAttemptsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSplashLoginAttemptsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSyslogServersSignalErrorFull() instead")
    void getNetworkSyslogServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSyslogServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTopologyLinkLayerSignalErrorFull() instead")
    void getNetworkTopologyLinkLayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTopologyLinkLayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficSignalErrorFull() instead")
    void getNetworkTrafficSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficAnalysisSignalErrorFull() instead")
    void getNetworkTrafficAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingApplicationCategoriesSignalErrorFull() instead")
    void getNetworkTrafficShapingApplicationCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingApplicationCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingDscpTaggingOptionsSignalErrorFull() instead")
    void getNetworkTrafficShapingDscpTaggingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingDscpTaggingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServerSignalErrorFull() instead")
    void getNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServersSignalErrorFull() instead")
    void getNetworkWebhooksHttpServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void getNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplatesSignalErrorFull() instead")
    void getNetworkWebhooksPayloadTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksWebhookTestSignalErrorFull() instead")
    void getNetworkWebhooksWebhookTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksWebhookTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalErrorFull() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalErrorFull() instead")
    void getOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionNetworkClientsSignalErrorFull() instead")
    void provisionNetworkClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionNetworkClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDevicesSignalErrorFull() instead")
    void removeNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitNetworkSignalErrorFull() instead")
    void splitNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void splitNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbindNetworkSignalErrorFull() instead")
    void unbindNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unbindNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSignalErrorFull() instead")
    void updateNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAlertsSettingsSignalErrorFull() instead")
    void updateNetworkAlertsSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAlertsSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientPolicySignalErrorFull() instead")
    void updateNetworkClientPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientSplashAuthorizationStatusSignalErrorFull() instead")
    void updateNetworkClientSplashAuthorizationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientSplashAuthorizationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedStagesSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedStagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedStagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFloorPlanSignalErrorFull() instead")
    void updateNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkGroupPolicySignalErrorFull() instead")
    void updateNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMerakiAuthUserSignalErrorFull() instead")
    void updateNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMqttBrokerSignalErrorFull() instead")
    void updateNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkNetflowSignalErrorFull() instead")
    void updateNetworkNetflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkNetflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSettingsSignalErrorFull() instead")
    void updateNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSnmpSignalErrorFull() instead")
    void updateNetworkSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSyslogServersSignalErrorFull() instead")
    void updateNetworkSyslogServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSyslogServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkTrafficAnalysisSignalErrorFull() instead")
    void updateNetworkTrafficAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkTrafficAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksHttpServerSignalErrorFull() instead")
    void updateNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void updateNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vmxNetworkDevicesClaimSignalErrorFull() instead")
    void vmxNetworkDevicesClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vmxNetworkDevicesClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
