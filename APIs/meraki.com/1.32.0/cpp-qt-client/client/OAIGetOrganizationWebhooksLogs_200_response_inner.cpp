/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationWebhooksLogs_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationWebhooksLogs_200_response_inner::OAIGetOrganizationWebhooksLogs_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationWebhooksLogs_200_response_inner::OAIGetOrganizationWebhooksLogs_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationWebhooksLogs_200_response_inner::~OAIGetOrganizationWebhooksLogs_200_response_inner() {}

void OAIGetOrganizationWebhooksLogs_200_response_inner::initializeModel() {

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_logged_at_isSet = false;
    m_logged_at_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_response_duration_isSet = false;
    m_response_duration_isValid = false;

    m_sent_at_isSet = false;
    m_sent_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGetOrganizationWebhooksLogs_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationWebhooksLogs_200_response_inner::fromJsonObject(QJsonObject json) {

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("alertType")]);
    m_alert_type_isSet = !json[QString("alertType")].isNull() && m_alert_type_isValid;

    m_logged_at_isValid = ::OpenAPI::fromJsonValue(m_logged_at, json[QString("loggedAt")]);
    m_logged_at_isSet = !json[QString("loggedAt")].isNull() && m_logged_at_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("responseCode")]);
    m_response_code_isSet = !json[QString("responseCode")].isNull() && m_response_code_isValid;

    m_response_duration_isValid = ::OpenAPI::fromJsonValue(m_response_duration, json[QString("responseDuration")]);
    m_response_duration_isSet = !json[QString("responseDuration")].isNull() && m_response_duration_isValid;

    m_sent_at_isValid = ::OpenAPI::fromJsonValue(m_sent_at, json[QString("sentAt")]);
    m_sent_at_isSet = !json[QString("sentAt")].isNull() && m_sent_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGetOrganizationWebhooksLogs_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationWebhooksLogs_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_type_isSet) {
        obj.insert(QString("alertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_logged_at_isSet) {
        obj.insert(QString("loggedAt"), ::OpenAPI::toJsonValue(m_logged_at));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("responseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_response_duration_isSet) {
        obj.insert(QString("responseDuration"), ::OpenAPI::toJsonValue(m_response_duration));
    }
    if (m_sent_at_isSet) {
        obj.insert(QString("sentAt"), ::OpenAPI::toJsonValue(m_sent_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGetOrganizationWebhooksLogs_200_response_inner::getAlertType() const {
    return m_alert_type;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setAlertType(const QString &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

QDateTime OAIGetOrganizationWebhooksLogs_200_response_inner::getLoggedAt() const {
    return m_logged_at;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setLoggedAt(const QDateTime &logged_at) {
    m_logged_at = logged_at;
    m_logged_at_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_logged_at_Set() const{
    return m_logged_at_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_logged_at_Valid() const{
    return m_logged_at_isValid;
}

QString OAIGetOrganizationWebhooksLogs_200_response_inner::getNetworkId() const {
    return m_network_id;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIGetOrganizationWebhooksLogs_200_response_inner::getOrganizationId() const {
    return m_organization_id;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

qint32 OAIGetOrganizationWebhooksLogs_200_response_inner::getResponseCode() const {
    return m_response_code;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setResponseCode(const qint32 &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_response_code_Valid() const{
    return m_response_code_isValid;
}

qint32 OAIGetOrganizationWebhooksLogs_200_response_inner::getResponseDuration() const {
    return m_response_duration;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setResponseDuration(const qint32 &response_duration) {
    m_response_duration = response_duration;
    m_response_duration_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_response_duration_Set() const{
    return m_response_duration_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_response_duration_Valid() const{
    return m_response_duration_isValid;
}

QDateTime OAIGetOrganizationWebhooksLogs_200_response_inner::getSentAt() const {
    return m_sent_at;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setSentAt(const QDateTime &sent_at) {
    m_sent_at = sent_at;
    m_sent_at_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_sent_at_Set() const{
    return m_sent_at_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_sent_at_Valid() const{
    return m_sent_at_isValid;
}

QString OAIGetOrganizationWebhooksLogs_200_response_inner::getUrl() const {
    return m_url;
}
void OAIGetOrganizationWebhooksLogs_200_response_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationWebhooksLogs_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
