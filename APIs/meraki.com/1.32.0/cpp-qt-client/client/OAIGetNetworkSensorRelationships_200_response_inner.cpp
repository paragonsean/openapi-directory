/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSensorRelationships_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSensorRelationships_200_response_inner::OAIGetNetworkSensorRelationships_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSensorRelationships_200_response_inner::OAIGetNetworkSensorRelationships_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSensorRelationships_200_response_inner::~OAIGetNetworkSensorRelationships_200_response_inner() {}

void OAIGetNetworkSensorRelationships_200_response_inner::initializeModel() {

    m_device_isSet = false;
    m_device_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;
}

void OAIGetNetworkSensorRelationships_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSensorRelationships_200_response_inner::fromJsonObject(QJsonObject json) {

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;
}

QString OAIGetNetworkSensorRelationships_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSensorRelationships_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_relationships.isSet()) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    return obj;
}

OAIGetNetworkSensorRelationships_200_response_inner_device OAIGetNetworkSensorRelationships_200_response_inner::getDevice() const {
    return m_device;
}
void OAIGetNetworkSensorRelationships_200_response_inner::setDevice(const OAIGetNetworkSensorRelationships_200_response_inner_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIGetNetworkSensorRelationships_200_response_inner::is_device_Set() const{
    return m_device_isSet;
}

bool OAIGetNetworkSensorRelationships_200_response_inner::is_device_Valid() const{
    return m_device_isValid;
}

OAIGetNetworkSensorRelationships_200_response_inner_relationships OAIGetNetworkSensorRelationships_200_response_inner::getRelationships() const {
    return m_relationships;
}
void OAIGetNetworkSensorRelationships_200_response_inner::setRelationships(const OAIGetNetworkSensorRelationships_200_response_inner_relationships &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIGetNetworkSensorRelationships_200_response_inner::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIGetNetworkSensorRelationships_200_response_inner::is_relationships_Valid() const{
    return m_relationships_isValid;
}

bool OAIGetNetworkSensorRelationships_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSensorRelationships_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
