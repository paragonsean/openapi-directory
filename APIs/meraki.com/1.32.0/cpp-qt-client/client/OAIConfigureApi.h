/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigureApi_H
#define OAI_OAIConfigureApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddNetworkSwitchStack_request.h"
#include "OAIAssignOrganizationLicensesSeats_200_response.h"
#include "OAIAssignOrganizationLicensesSeats_request.h"
#include "OAIBindNetwork_request.h"
#include "OAICheckinNetworkSmDevices_200_response.h"
#include "OAICheckinNetworkSmDevices_request.h"
#include "OAIClaimIntoOrganizationInventory_request.h"
#include "OAIClaimIntoOrganization_request.h"
#include "OAIClaimNetworkDevices_request.h"
#include "OAICloneOrganizationSwitchDevices_request.h"
#include "OAICloneOrganization_request.h"
#include "OAICombineOrganizationNetworks_200_response.h"
#include "OAICombineOrganizationNetworks_request.h"
#include "OAICreateDeviceApplianceVmxAuthenticationToken_201_response.h"
#include "OAICreateDeviceSwitchRoutingInterface_request.h"
#include "OAICreateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAICreateNetworkAppliancePrefixesDelegatedStatic_request.h"
#include "OAICreateNetworkApplianceStaticRoute_request.h"
#include "OAICreateNetworkApplianceTrafficShapingCustomPerformanceClass_request.h"
#include "OAICreateNetworkApplianceVlan_201_response.h"
#include "OAICreateNetworkApplianceVlan_request.h"
#include "OAICreateNetworkCameraQualityRetentionProfile_request.h"
#include "OAICreateNetworkCameraWirelessProfile_request.h"
#include "OAICreateNetworkFirmwareUpgradesRollback_200_response.h"
#include "OAICreateNetworkFirmwareUpgradesRollback_request.h"
#include "OAICreateNetworkFirmwareUpgradesStagedEvent_request.h"
#include "OAICreateNetworkFirmwareUpgradesStagedGroup_request.h"
#include "OAICreateNetworkFloorPlan_request.h"
#include "OAICreateNetworkGroupPolicy_request.h"
#include "OAICreateNetworkMerakiAuthUser_request.h"
#include "OAICreateNetworkMqttBroker_request.h"
#include "OAICreateNetworkPiiRequest_request.h"
#include "OAICreateNetworkSensorAlertsProfile_request.h"
#include "OAICreateNetworkSmBypassActivationLockAttempt_request.h"
#include "OAICreateNetworkSmTargetGroup_request.h"
#include "OAICreateNetworkSwitchAccessPolicy_request.h"
#include "OAICreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request.h"
#include "OAICreateNetworkSwitchLinkAggregation_request.h"
#include "OAICreateNetworkSwitchPortSchedule_request.h"
#include "OAICreateNetworkSwitchQosRule_request.h"
#include "OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAICreateNetworkSwitchStackRoutingInterface_request.h"
#include "OAICreateNetworkSwitchStack_request.h"
#include "OAICreateNetworkWebhooksHttpServer_request.h"
#include "OAICreateNetworkWebhooksPayloadTemplate_request.h"
#include "OAICreateNetworkWebhooksWebhookTest_201_response.h"
#include "OAICreateNetworkWebhooksWebhookTest_request.h"
#include "OAICreateNetworkWirelessRfProfile_201_response.h"
#include "OAICreateNetworkWirelessRfProfile_request.h"
#include "OAICreateNetworkWirelessSsidIdentityPsk_request.h"
#include "OAICreateOrganizationActionBatch_201_response.h"
#include "OAICreateOrganizationActionBatch_request.h"
#include "OAICreateOrganizationAdaptivePolicyAcl_request.h"
#include "OAICreateOrganizationAdaptivePolicyGroup_request.h"
#include "OAICreateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAICreateOrganizationAdmin_request.h"
#include "OAICreateOrganizationAlertsProfile_request.h"
#include "OAICreateOrganizationBrandingPolicy_201_response.h"
#include "OAICreateOrganizationBrandingPolicy_request.h"
#include "OAICreateOrganizationCameraCustomAnalyticsArtifact_request.h"
#include "OAICreateOrganizationConfigTemplate_request.h"
#include "OAICreateOrganizationEarlyAccessFeaturesOptIn_request.h"
#include "OAICreateOrganizationInsightMonitoredMediaServer_request.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_request.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner.h"
#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request.h"
#include "OAICreateOrganizationNetwork_request.h"
#include "OAICreateOrganizationPolicyObject_request.h"
#include "OAICreateOrganizationPolicyObjectsGroup_request.h"
#include "OAICreateOrganizationSamlIdp_request.h"
#include "OAICreateOrganizationSamlRole_request.h"
#include "OAICreateOrganization_request.h"
#include "OAIGetDeviceApplianceUplinksSettings_200_response.h"
#include "OAIGetDeviceSensorRelationships_200_response_inner.h"
#include "OAIGetDeviceSwitchPorts_200_response_inner.h"
#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner.h"
#include "OAIGetDeviceSwitchRoutingStaticRoute_200_response.h"
#include "OAIGetDeviceWirelessBluetoothSettings_200_response.h"
#include "OAIGetNetworkAppliancePorts_200_response_inner.h"
#include "OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner.h"
#include "OAIGetNetworkApplianceSettings_200_response.h"
#include "OAIGetNetworkApplianceSingleLan_200_response.h"
#include "OAIGetNetworkApplianceSsids_200_response_inner.h"
#include "OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response.h"
#include "OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response.h"
#include "OAIGetNetworkApplianceVlans_200_response_inner.h"
#include "OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response.h"
#include "OAIGetNetworkCellularGatewayDhcp_200_response.h"
#include "OAIGetNetworkFirmwareUpgradesStagedEvents_200_response.h"
#include "OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner.h"
#include "OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner.h"
#include "OAIGetNetworkFirmwareUpgrades_200_response.h"
#include "OAIGetNetworkHealthAlerts_200_response_inner.h"
#include "OAIGetNetworkMerakiAuthUsers_200_response_inner.h"
#include "OAIGetNetworkPoliciesByClient_200_response_inner.h"
#include "OAIGetNetworkSensorAlertsProfiles_200_response_inner.h"
#include "OAIGetNetworkSensorRelationships_200_response_inner.h"
#include "OAIGetNetworkSettings_200_response.h"
#include "OAIGetNetworkSmDeviceCerts_200_response_inner.h"
#include "OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner.h"
#include "OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner.h"
#include "OAIGetNetworkSmDeviceSecurityCenters_200_response_inner.h"
#include "OAIGetNetworkSmDeviceSoftwares_200_response_inner.h"
#include "OAIGetNetworkSmDeviceWlanLists_200_response_inner.h"
#include "OAIGetNetworkSmDevices_200_response_inner.h"
#include "OAIGetNetworkSmProfiles_200_response_inner.h"
#include "OAIGetNetworkSmTrustedAccessConfigs_200_response_inner.h"
#include "OAIGetNetworkSmUserAccessDevices_200_response_inner.h"
#include "OAIGetNetworkSmUsers_200_response_inner.h"
#include "OAIGetNetworkSwitchAccessControlLists_200_response.h"
#include "OAIGetNetworkSwitchAccessPolicies_200_response_inner.h"
#include "OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner.h"
#include "OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner.h"
#include "OAIGetNetworkSwitchMtu_200_response.h"
#include "OAIGetNetworkSwitchSettings_200_response.h"
#include "OAIGetNetworkSwitchStack_200_response.h"
#include "OAIGetNetworkSwitchStormControl_200_response.h"
#include "OAIGetNetworkSyslogServers_200_response.h"
#include "OAIGetNetworkWebhooksHttpServers_200_response_inner.h"
#include "OAIGetNetworkWebhooksPayloadTemplates_200_response_inner.h"
#include "OAIGetNetworkWirelessBluetoothSettings_200_response.h"
#include "OAIGetNetworkWirelessSettings_200_response.h"
#include "OAIGetNetworkWirelessSsidEapOverride_200_response.h"
#include "OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner.h"
#include "OAIGetNetworkWirelessSsidSplashSettings_200_response.h"
#include "OAIGetNetwork_200_response.h"
#include "OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response.h"
#include "OAIGetOrganizationBrandingPoliciesPriorities_200_response.h"
#include "OAIGetOrganizationBrandingPolicies_200_response_inner.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfiles_200_response.h"
#include "OAIGetOrganizationDevices_200_response_inner.h"
#include "OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner.h"
#include "OAIGetOrganizationFirmwareUpgrades_200_response_inner.h"
#include "OAIGetOrganizationInsightApplications_200_response_inner.h"
#include "OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner.h"
#include "OAIGetOrganizationInventoryDevices_200_response_inner.h"
#include "OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner.h"
#include "OAIGetOrganizationLicenses_200_response_inner.h"
#include "OAIGetOrganizationLicensingCotermLicenses_200_response_inner.h"
#include "OAIGetOrganizationLoginSecurity_200_response.h"
#include "OAIGetOrganizationSamlIdps_200_response_inner.h"
#include "OAIGetOrganizationSaml_200_response.h"
#include "OAIGetOrganizationSmApnsCert_200_response.h"
#include "OAIGetOrganizationSmVppAccounts_200_response_inner.h"
#include "OAIGetOrganizationSwitchPortsBySwitch_200_response_inner.h"
#include "OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner.h"
#include "OAIGetOrganizations_200_response_inner.h"
#include "OAILockNetworkSmDevices_request.h"
#include "OAIModifyNetworkSmDevicesTags_200_response_inner.h"
#include "OAIModifyNetworkSmDevicesTags_request.h"
#include "OAIMoveNetworkSmDevices_200_response.h"
#include "OAIMoveNetworkSmDevices_request.h"
#include "OAIMoveOrganizationLicensesSeats_200_response.h"
#include "OAIMoveOrganizationLicensesSeats_request.h"
#include "OAIMoveOrganizationLicenses_200_response.h"
#include "OAIMoveOrganizationLicenses_request.h"
#include "OAIMoveOrganizationLicensingCotermLicenses_200_response.h"
#include "OAIMoveOrganizationLicensingCotermLicenses_request.h"
#include "OAIObject.h"
#include "OAIProvisionNetworkClients_request.h"
#include "OAIReleaseFromOrganizationInventory_request.h"
#include "OAIRemoveNetworkDevices_request.h"
#include "OAIRemoveNetworkSwitchStack_request.h"
#include "OAIRenewOrganizationLicensesSeats_request.h"
#include "OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request.h"
#include "OAISplitNetwork_200_response.h"
#include "OAIUnbindNetwork_request.h"
#include "OAIUpdateDeviceApplianceUplinksSettings_request.h"
#include "OAIUpdateDeviceCameraCustomAnalytics_request.h"
#include "OAIUpdateDeviceCameraQualityAndRetention_request.h"
#include "OAIUpdateDeviceCameraSense_request.h"
#include "OAIUpdateDeviceCameraVideoSettings_request.h"
#include "OAIUpdateDeviceCameraWirelessProfiles_request.h"
#include "OAIUpdateDeviceCellularGatewayLan_request.h"
#include "OAIUpdateDeviceCellularGatewayPortForwardingRules_request.h"
#include "OAIUpdateDeviceCellularSims_request.h"
#include "OAIUpdateDeviceManagementInterface_request.h"
#include "OAIUpdateDeviceSensorRelationships_request.h"
#include "OAIUpdateDeviceSwitchPort_request.h"
#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request.h"
#include "OAIUpdateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAIUpdateDeviceSwitchWarmSpare_request.h"
#include "OAIUpdateDeviceWirelessBluetoothSettings_request.h"
#include "OAIUpdateDeviceWirelessRadioSettings_request.h"
#include "OAIUpdateDevice_request.h"
#include "OAIUpdateNetworkAlertsSettings_request.h"
#include "OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request.h"
#include "OAIUpdateNetworkApplianceContentFiltering_request.h"
#include "OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallFirewalledService_request.h"
#include "OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallL7FirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallPortForwardingRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallSettings_request.h"
#include "OAIUpdateNetworkAppliancePort_request.h"
#include "OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request.h"
#include "OAIUpdateNetworkApplianceSecurityIntrusion_request.h"
#include "OAIUpdateNetworkApplianceSecurityMalware_request.h"
#include "OAIUpdateNetworkApplianceSettings_request.h"
#include "OAIUpdateNetworkApplianceSingleLan_request.h"
#include "OAIUpdateNetworkApplianceSsid_request.h"
#include "OAIUpdateNetworkApplianceStaticRoute_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingRules_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request.h"
#include "OAIUpdateNetworkApplianceTrafficShaping_request.h"
#include "OAIUpdateNetworkApplianceVlan_request.h"
#include "OAIUpdateNetworkApplianceVlansSettings_request.h"
#include "OAIUpdateNetworkApplianceVpnBgp_request.h"
#include "OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request.h"
#include "OAIUpdateNetworkApplianceWarmSpare_request.h"
#include "OAIUpdateNetworkCameraQualityRetentionProfile_request.h"
#include "OAIUpdateNetworkCameraWirelessProfile_request.h"
#include "OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request.h"
#include "OAIUpdateNetworkCellularGatewayDhcp_request.h"
#include "OAIUpdateNetworkCellularGatewaySubnetPool_request.h"
#include "OAIUpdateNetworkCellularGatewayUplink_request.h"
#include "OAIUpdateNetworkClientPolicy_request.h"
#include "OAIUpdateNetworkClientSplashAuthorizationStatus_request.h"
#include "OAIUpdateNetworkFirmwareUpgradesStagedEvents_request.h"
#include "OAIUpdateNetworkFirmwareUpgradesStagedStages_request.h"
#include "OAIUpdateNetworkFirmwareUpgrades_request.h"
#include "OAIUpdateNetworkFloorPlan_request.h"
#include "OAIUpdateNetworkGroupPolicy_request.h"
#include "OAIUpdateNetworkMerakiAuthUser_request.h"
#include "OAIUpdateNetworkMqttBroker_request.h"
#include "OAIUpdateNetworkNetflow_request.h"
#include "OAIUpdateNetworkSensorAlertsProfile_request.h"
#include "OAIUpdateNetworkSettings_request.h"
#include "OAIUpdateNetworkSmDevicesFields_200_response_inner.h"
#include "OAIUpdateNetworkSmDevicesFields_request.h"
#include "OAIUpdateNetworkSnmp_request.h"
#include "OAIUpdateNetworkSwitchAccessControlLists_request.h"
#include "OAIUpdateNetworkSwitchAccessPolicy_request.h"
#include "OAIUpdateNetworkSwitchAlternateManagementInterface_request.h"
#include "OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request.h"
#include "OAIUpdateNetworkSwitchDhcpServerPolicy_request.h"
#include "OAIUpdateNetworkSwitchDscpToCosMappings_request.h"
#include "OAIUpdateNetworkSwitchLinkAggregation_request.h"
#include "OAIUpdateNetworkSwitchMtu_request.h"
#include "OAIUpdateNetworkSwitchPortSchedule_request.h"
#include "OAIUpdateNetworkSwitchQosRule_request.h"
#include "OAIUpdateNetworkSwitchQosRulesOrder_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticast_request.h"
#include "OAIUpdateNetworkSwitchRoutingOspf_request.h"
#include "OAIUpdateNetworkSwitchSettings_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterface_request.h"
#include "OAIUpdateNetworkSwitchStormControl_request.h"
#include "OAIUpdateNetworkSwitchStp_request.h"
#include "OAIUpdateNetworkSyslogServers_request.h"
#include "OAIUpdateNetworkTrafficAnalysis_request.h"
#include "OAIUpdateNetworkWebhooksHttpServer_request.h"
#include "OAIUpdateNetworkWebhooksPayloadTemplate_request.h"
#include "OAIUpdateNetworkWirelessAlternateManagementInterface_request.h"
#include "OAIUpdateNetworkWirelessBilling_request.h"
#include "OAIUpdateNetworkWirelessBluetoothSettings_request.h"
#include "OAIUpdateNetworkWirelessRfProfile_request.h"
#include "OAIUpdateNetworkWirelessSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidBonjourForwarding_request.h"
#include "OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request.h"
#include "OAIUpdateNetworkWirelessSsidEapOverride_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidHotspot20_request.h"
#include "OAIUpdateNetworkWirelessSsidIdentityPsk_request.h"
#include "OAIUpdateNetworkWirelessSsidSchedules_request.h"
#include "OAIUpdateNetworkWirelessSsidSplashSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidTrafficShapingRules_request.h"
#include "OAIUpdateNetworkWirelessSsidVpn_request.h"
#include "OAIUpdateNetworkWirelessSsid_request.h"
#include "OAIUpdateNetwork_request.h"
#include "OAIUpdateOrganizationActionBatch_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyAcl_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyGroup_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAIUpdateOrganizationAdaptivePolicySettings_request.h"
#include "OAIUpdateOrganizationAdmin_request.h"
#include "OAIUpdateOrganizationAlertsProfile_request.h"
#include "OAIUpdateOrganizationApplianceSecurityIntrusion_request.h"
#include "OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request.h"
#include "OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request.h"
#include "OAIUpdateOrganizationBrandingPoliciesPriorities_request.h"
#include "OAIUpdateOrganizationBrandingPolicy_request.h"
#include "OAIUpdateOrganizationCameraOnboardingStatuses_request.h"
#include "OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request.h"
#include "OAIUpdateOrganizationConfigTemplate_request.h"
#include "OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request.h"
#include "OAIUpdateOrganizationInsightMonitoredMediaServer_request.h"
#include "OAIUpdateOrganizationLicense_request.h"
#include "OAIUpdateOrganizationLoginSecurity_request.h"
#include "OAIUpdateOrganizationPolicyObject_request.h"
#include "OAIUpdateOrganizationPolicyObjectsGroup_request.h"
#include "OAIUpdateOrganizationSamlIdp_request.h"
#include "OAIUpdateOrganizationSamlRole_200_response.h"
#include "OAIUpdateOrganizationSamlRole_request.h"
#include "OAIUpdateOrganizationSaml_request.h"
#include "OAIUpdateOrganizationSnmp_request.h"
#include "OAIUpdateOrganization_request.h"
#include "OAIVmxNetworkDevicesClaim_request.h"
#include "OAIWipeNetworkSmDevices_200_response.h"
#include "OAIWipeNetworkSmDevices_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigureApi : public QObject {
    Q_OBJECT

public:
    OAIConfigureApi(const int timeOut = 0);
    ~OAIConfigureApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_add_network_switch_stack_request OAIAddNetworkSwitchStack_request [required]
    */
    virtual void addNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id, const OAIAddNetworkSwitchStack_request &oai_add_network_switch_stack_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_assign_organization_licenses_seats_request OAIAssignOrganizationLicensesSeats_request [required]
    */
    virtual void assignOrganizationLicensesSeats(const QString &organization_id, const OAIAssignOrganizationLicensesSeats_request &oai_assign_organization_licenses_seats_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_bind_network_request OAIBindNetwork_request [required]
    */
    virtual void bindNetwork(const QString &network_id, const OAIBindNetwork_request &oai_bind_network_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_checkin_network_sm_devices_request OAICheckinNetworkSmDevices_request [optional]
    */
    virtual void checkinNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAICheckinNetworkSmDevices_request> &oai_checkin_network_sm_devices_request = ::OpenAPI::OptionalParam<OAICheckinNetworkSmDevices_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_claim_into_organization_inventory_request OAIClaimIntoOrganizationInventory_request [optional]
    */
    virtual void claimIntoOrganizationInventory(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIClaimIntoOrganizationInventory_request> &oai_claim_into_organization_inventory_request = ::OpenAPI::OptionalParam<OAIClaimIntoOrganizationInventory_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_claim_into_organization_request OAIClaimIntoOrganization_request [optional]
    */
    virtual void claimIntoOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIClaimIntoOrganization_request> &oai_claim_into_organization_request = ::OpenAPI::OptionalParam<OAIClaimIntoOrganization_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_claim_network_devices_request OAIClaimNetworkDevices_request [required]
    */
    virtual void claimNetworkDevices(const QString &network_id, const OAIClaimNetworkDevices_request &oai_claim_network_devices_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_clone_organization_switch_devices_request OAICloneOrganizationSwitchDevices_request [required]
    */
    virtual void cloneOrganizationSwitchDevices(const QString &organization_id, const OAICloneOrganizationSwitchDevices_request &oai_clone_organization_switch_devices_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_clone_organization_request OAICloneOrganization_request [required]
    */
    virtual void cloneOrganization(const QString &organization_id, const OAICloneOrganization_request &oai_clone_organization_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_combine_organization_networks_request OAICombineOrganizationNetworks_request [required]
    */
    virtual void combineOrganizationNetworks(const QString &organization_id, const OAICombineOrganizationNetworks_request &oai_combine_organization_networks_request);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void createDeviceApplianceVmxAuthenticationToken(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_interface_request OAICreateDeviceSwitchRoutingInterface_request [optional]
    */
    virtual void createDeviceSwitchRoutingInterface(const QString &serial, const ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request> &oai_create_device_switch_routing_interface_request = ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createDeviceSwitchRoutingStaticRoute(const QString &serial, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_prefixes_delegated_static_request OAICreateNetworkAppliancePrefixesDelegatedStatic_request [required]
    */
    virtual void createNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const OAICreateNetworkAppliancePrefixesDelegatedStatic_request &oai_create_network_appliance_prefixes_delegated_static_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_static_route_request OAICreateNetworkApplianceStaticRoute_request [required]
    */
    virtual void createNetworkApplianceStaticRoute(const QString &network_id, const OAICreateNetworkApplianceStaticRoute_request &oai_create_network_appliance_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_traffic_shaping_custom_performance_class_request OAICreateNetworkApplianceTrafficShapingCustomPerformanceClass_request [required]
    */
    virtual void createNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const OAICreateNetworkApplianceTrafficShapingCustomPerformanceClass_request &oai_create_network_appliance_traffic_shaping_custom_performance_class_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_vlan_request OAICreateNetworkApplianceVlan_request [required]
    */
    virtual void createNetworkApplianceVlan(const QString &network_id, const OAICreateNetworkApplianceVlan_request &oai_create_network_appliance_vlan_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_camera_quality_retention_profile_request OAICreateNetworkCameraQualityRetentionProfile_request [required]
    */
    virtual void createNetworkCameraQualityRetentionProfile(const QString &network_id, const OAICreateNetworkCameraQualityRetentionProfile_request &oai_create_network_camera_quality_retention_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_camera_wireless_profile_request OAICreateNetworkCameraWirelessProfile_request [required]
    */
    virtual void createNetworkCameraWirelessProfile(const QString &network_id, const OAICreateNetworkCameraWirelessProfile_request &oai_create_network_camera_wireless_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_rollback_request OAICreateNetworkFirmwareUpgradesRollback_request [required]
    */
    virtual void createNetworkFirmwareUpgradesRollback(const QString &network_id, const OAICreateNetworkFirmwareUpgradesRollback_request &oai_create_network_firmware_upgrades_rollback_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_event_request OAICreateNetworkFirmwareUpgradesStagedEvent_request [required]
    */
    virtual void createNetworkFirmwareUpgradesStagedEvent(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedEvent_request &oai_create_network_firmware_upgrades_staged_event_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_group_request OAICreateNetworkFirmwareUpgradesStagedGroup_request [required]
    */
    virtual void createNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const OAICreateNetworkFirmwareUpgradesStagedGroup_request &oai_create_network_firmware_upgrades_staged_group_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_floor_plan_request OAICreateNetworkFloorPlan_request [required]
    */
    virtual void createNetworkFloorPlan(const QString &network_id, const OAICreateNetworkFloorPlan_request &oai_create_network_floor_plan_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_group_policy_request OAICreateNetworkGroupPolicy_request [required]
    */
    virtual void createNetworkGroupPolicy(const QString &network_id, const OAICreateNetworkGroupPolicy_request &oai_create_network_group_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_meraki_auth_user_request OAICreateNetworkMerakiAuthUser_request [required]
    */
    virtual void createNetworkMerakiAuthUser(const QString &network_id, const OAICreateNetworkMerakiAuthUser_request &oai_create_network_meraki_auth_user_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_mqtt_broker_request OAICreateNetworkMqttBroker_request [required]
    */
    virtual void createNetworkMqttBroker(const QString &network_id, const OAICreateNetworkMqttBroker_request &oai_create_network_mqtt_broker_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_pii_request_request OAICreateNetworkPiiRequest_request [optional]
    */
    virtual void createNetworkPiiRequest(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkPiiRequest_request> &oai_create_network_pii_request_request = ::OpenAPI::OptionalParam<OAICreateNetworkPiiRequest_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sensor_alerts_profile_request OAICreateNetworkSensorAlertsProfile_request [required]
    */
    virtual void createNetworkSensorAlertsProfile(const QString &network_id, const OAICreateNetworkSensorAlertsProfile_request &oai_create_network_sensor_alerts_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sm_bypass_activation_lock_attempt_request OAICreateNetworkSmBypassActivationLockAttempt_request [required]
    */
    virtual void createNetworkSmBypassActivationLockAttempt(const QString &network_id, const OAICreateNetworkSmBypassActivationLockAttempt_request &oai_create_network_sm_bypass_activation_lock_attempt_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sm_target_group_request OAICreateNetworkSmTargetGroup_request [optional]
    */
    virtual void createNetworkSmTargetGroup(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request> &oai_create_network_sm_target_group_request = ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_access_policy_request OAICreateNetworkSwitchAccessPolicy_request [required]
    */
    virtual void createNetworkSwitchAccessPolicy(const QString &network_id, const OAICreateNetworkSwitchAccessPolicy_request &oai_create_network_switch_access_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request OAICreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request [required]
    */
    virtual void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(const QString &network_id, const OAICreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request &oai_create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_link_aggregation_request OAICreateNetworkSwitchLinkAggregation_request [optional]
    */
    virtual void createNetworkSwitchLinkAggregation(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkSwitchLinkAggregation_request> &oai_create_network_switch_link_aggregation_request = ::OpenAPI::OptionalParam<OAICreateNetworkSwitchLinkAggregation_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_port_schedule_request OAICreateNetworkSwitchPortSchedule_request [required]
    */
    virtual void createNetworkSwitchPortSchedule(const QString &network_id, const OAICreateNetworkSwitchPortSchedule_request &oai_create_network_switch_port_schedule_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_qos_rule_request OAICreateNetworkSwitchQosRule_request [required]
    */
    virtual void createNetworkSwitchQosRule(const QString &network_id, const OAICreateNetworkSwitchQosRule_request &oai_create_network_switch_qos_rule_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_routing_multicast_rendezvous_point_request OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void createNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_create_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_network_switch_stack_routing_interface_request OAICreateNetworkSwitchStackRoutingInterface_request [required]
    */
    virtual void createNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const OAICreateNetworkSwitchStackRoutingInterface_request &oai_create_network_switch_stack_routing_interface_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_stack_request OAICreateNetworkSwitchStack_request [required]
    */
    virtual void createNetworkSwitchStack(const QString &network_id, const OAICreateNetworkSwitchStack_request &oai_create_network_switch_stack_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_http_server_request OAICreateNetworkWebhooksHttpServer_request [required]
    */
    virtual void createNetworkWebhooksHttpServer(const QString &network_id, const OAICreateNetworkWebhooksHttpServer_request &oai_create_network_webhooks_http_server_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_payload_template_request OAICreateNetworkWebhooksPayloadTemplate_request [required]
    */
    virtual void createNetworkWebhooksPayloadTemplate(const QString &network_id, const OAICreateNetworkWebhooksPayloadTemplate_request &oai_create_network_webhooks_payload_template_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_webhooks_webhook_test_request OAICreateNetworkWebhooksWebhookTest_request [required]
    */
    virtual void createNetworkWebhooksWebhookTest(const QString &network_id, const OAICreateNetworkWebhooksWebhookTest_request &oai_create_network_webhooks_webhook_test_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_wireless_rf_profile_request OAICreateNetworkWirelessRfProfile_request [required]
    */
    virtual void createNetworkWirelessRfProfile(const QString &network_id, const OAICreateNetworkWirelessRfProfile_request &oai_create_network_wireless_rf_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_create_network_wireless_ssid_identity_psk_request OAICreateNetworkWirelessSsidIdentityPsk_request [required]
    */
    virtual void createNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const OAICreateNetworkWirelessSsidIdentityPsk_request &oai_create_network_wireless_ssid_identity_psk_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_action_batch_request OAICreateOrganizationActionBatch_request [required]
    */
    virtual void createOrganizationActionBatch(const QString &organization_id, const OAICreateOrganizationActionBatch_request &oai_create_organization_action_batch_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_acl_request OAICreateOrganizationAdaptivePolicyAcl_request [required]
    */
    virtual void createOrganizationAdaptivePolicyAcl(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyAcl_request &oai_create_organization_adaptive_policy_acl_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_group_request OAICreateOrganizationAdaptivePolicyGroup_request [required]
    */
    virtual void createOrganizationAdaptivePolicyGroup(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyGroup_request &oai_create_organization_adaptive_policy_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_policy_request OAICreateOrganizationAdaptivePolicyPolicy_request [required]
    */
    virtual void createOrganizationAdaptivePolicyPolicy(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyPolicy_request &oai_create_organization_adaptive_policy_policy_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_admin_request OAICreateOrganizationAdmin_request [required]
    */
    virtual void createOrganizationAdmin(const QString &organization_id, const OAICreateOrganizationAdmin_request &oai_create_organization_admin_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_alerts_profile_request OAICreateOrganizationAlertsProfile_request [required]
    */
    virtual void createOrganizationAlertsProfile(const QString &organization_id, const OAICreateOrganizationAlertsProfile_request &oai_create_organization_alerts_profile_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_branding_policy_request OAICreateOrganizationBrandingPolicy_request [optional]
    */
    virtual void createOrganizationBrandingPolicy(const QString &organization_id, const ::OpenAPI::OptionalParam<OAICreateOrganizationBrandingPolicy_request> &oai_create_organization_branding_policy_request = ::OpenAPI::OptionalParam<OAICreateOrganizationBrandingPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_camera_custom_analytics_artifact_request OAICreateOrganizationCameraCustomAnalyticsArtifact_request [optional]
    */
    virtual void createOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const ::OpenAPI::OptionalParam<OAICreateOrganizationCameraCustomAnalyticsArtifact_request> &oai_create_organization_camera_custom_analytics_artifact_request = ::OpenAPI::OptionalParam<OAICreateOrganizationCameraCustomAnalyticsArtifact_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_config_template_request OAICreateOrganizationConfigTemplate_request [required]
    */
    virtual void createOrganizationConfigTemplate(const QString &organization_id, const OAICreateOrganizationConfigTemplate_request &oai_create_organization_config_template_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_early_access_features_opt_in_request OAICreateOrganizationEarlyAccessFeaturesOptIn_request [required]
    */
    virtual void createOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const OAICreateOrganizationEarlyAccessFeaturesOptIn_request &oai_create_organization_early_access_features_opt_in_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_insight_monitored_media_server_request OAICreateOrganizationInsightMonitoredMediaServer_request [required]
    */
    virtual void createOrganizationInsightMonitoredMediaServer(const QString &organization_id, const OAICreateOrganizationInsightMonitoredMediaServer_request &oai_create_organization_insight_monitored_media_server_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_inventory_onboarding_cloud_monitoring_export_event_request OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request [required]
    */
    virtual void createOrganizationInventoryOnboardingCloudMonitoringExportEvent(const QString &organization_id, const OAICreateOrganizationInventoryOnboardingCloudMonitoringExportEvent_request &oai_create_organization_inventory_onboarding_cloud_monitoring_export_event_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_inventory_onboarding_cloud_monitoring_import_request OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_request [required]
    */
    virtual void createOrganizationInventoryOnboardingCloudMonitoringImport(const QString &organization_id, const OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_request &oai_create_organization_inventory_onboarding_cloud_monitoring_import_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_inventory_onboarding_cloud_monitoring_prepare_request OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request [required]
    */
    virtual void createOrganizationInventoryOnboardingCloudMonitoringPrepare(const QString &organization_id, const OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request &oai_create_organization_inventory_onboarding_cloud_monitoring_prepare_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_network_request OAICreateOrganizationNetwork_request [required]
    */
    virtual void createOrganizationNetwork(const QString &organization_id, const OAICreateOrganizationNetwork_request &oai_create_organization_network_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_object_request OAICreateOrganizationPolicyObject_request [required]
    */
    virtual void createOrganizationPolicyObject(const QString &organization_id, const OAICreateOrganizationPolicyObject_request &oai_create_organization_policy_object_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_policy_objects_group_request OAICreateOrganizationPolicyObjectsGroup_request [required]
    */
    virtual void createOrganizationPolicyObjectsGroup(const QString &organization_id, const OAICreateOrganizationPolicyObjectsGroup_request &oai_create_organization_policy_objects_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_saml_idp_request OAICreateOrganizationSamlIdp_request [required]
    */
    virtual void createOrganizationSamlIdp(const QString &organization_id, const OAICreateOrganizationSamlIdp_request &oai_create_organization_saml_idp_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_saml_role_request OAICreateOrganizationSamlRole_request [required]
    */
    virtual void createOrganizationSamlRole(const QString &organization_id, const OAICreateOrganizationSamlRole_request &oai_create_organization_saml_role_request);

    /**
    * @param[in]  oai_create_organization_request OAICreateOrganization_request [required]
    */
    virtual void createOrganization(const OAICreateOrganization_request &oai_create_organization_request);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void deferNetworkFirmwareUpgradesStagedEvents(const QString &network_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_delegated_prefix_id QString [required]
    */
    virtual void deleteNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const QString &static_delegated_prefix_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  custom_performance_class_id QString [required]
    */
    virtual void deleteNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const QString &custom_performance_class_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  vlan_id QString [required]
    */
    virtual void deleteNetworkApplianceVlan(const QString &network_id, const QString &vlan_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    */
    virtual void deleteNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    */
    virtual void deleteNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void deleteNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  floor_plan_id QString [required]
    */
    virtual void deleteNetworkFloorPlan(const QString &network_id, const QString &floor_plan_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_policy_id QString [required]
    */
    virtual void deleteNetworkGroupPolicy(const QString &network_id, const QString &group_policy_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  meraki_auth_user_id QString [required]
    */
    virtual void deleteNetworkMerakiAuthUser(const QString &network_id, const QString &meraki_auth_user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    */
    virtual void deleteNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void deleteNetworkPiiRequest(const QString &network_id, const QString &request_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteNetworkSensorAlertsProfile(const QString &network_id, const QString &id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  target_group_id QString [required]
    */
    virtual void deleteNetworkSmTargetGroup(const QString &network_id, const QString &target_group_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_access_device_id QString [required]
    */
    virtual void deleteNetworkSmUserAccessDevice(const QString &network_id, const QString &user_access_device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  access_policy_number QString [required]
    */
    virtual void deleteNetworkSwitchAccessPolicy(const QString &network_id, const QString &access_policy_number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  trusted_server_id QString [required]
    */
    virtual void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(const QString &network_id, const QString &trusted_server_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  link_aggregation_id QString [required]
    */
    virtual void deleteNetworkSwitchLinkAggregation(const QString &network_id, const QString &link_aggregation_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_schedule_id QString [required]
    */
    virtual void deleteNetworkSwitchPortSchedule(const QString &network_id, const QString &port_schedule_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void deleteNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void deleteNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void deleteNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  http_server_id QString [required]
    */
    virtual void deleteNetworkWebhooksHttpServer(const QString &network_id, const QString &http_server_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    */
    virtual void deleteNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    */
    virtual void deleteNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    */
    virtual void deleteNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void deleteNetwork(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  action_batch_id QString [required]
    */
    virtual void deleteOrganizationActionBatch(const QString &organization_id, const QString &action_batch_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  admin_id QString [required]
    */
    virtual void deleteOrganizationAdmin(const QString &organization_id, const QString &admin_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  alert_config_id QString [required]
    */
    virtual void deleteOrganizationAlertsProfile(const QString &organization_id, const QString &alert_config_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  branding_policy_id QString [required]
    */
    virtual void deleteOrganizationBrandingPolicy(const QString &organization_id, const QString &branding_policy_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void deleteOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const QString &artifact_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void deleteOrganizationConfigTemplate(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    */
    virtual void deleteOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  monitored_media_server_id QString [required]
    */
    virtual void deleteOrganizationInsightMonitoredMediaServer(const QString &organization_id, const QString &monitored_media_server_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    */
    virtual void deleteOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void deleteOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    */
    virtual void deleteOrganizationSamlIdp(const QString &organization_id, const QString &idp_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  saml_role_id QString [required]
    */
    virtual void deleteOrganizationSamlRole(const QString &organization_id, const QString &saml_role_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void deleteOrganizationUser(const QString &organization_id, const QString &user_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void deleteOrganization(const QString &organization_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceApplianceUplinksSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraCustomAnalytics(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraQualityAndRetention(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraSenseObjectDetectionModels(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraSense(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  timestamp QDateTime [optional]
    */
    virtual void getDeviceCameraVideoLink(const QString &serial, const ::OpenAPI::OptionalParam<QDateTime> &timestamp = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraVideoSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraWirelessProfiles(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCellularGatewayLan(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCellularGatewayPortForwardingRules(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCellularSims(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceManagementInterface(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSensorRelationships(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getDeviceSwitchPort(const QString &serial, const QString &port_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchPorts(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaces(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoutes(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchWarmSpare(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessBluetoothSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessRadioSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDevice(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAlertsSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceConnectivityMonitoringDestinations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceContentFilteringCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceContentFiltering(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallCellularFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  service QString [required]
    */
    virtual void getNetworkApplianceFirewallFirewalledService(const QString &network_id, const QString &service);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallFirewalledServices(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallInboundCellularFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallInboundFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL3FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL7FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallOneToManyNatRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallOneToOneNatRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallPortForwardingRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getNetworkAppliancePort(const QString &network_id, const QString &port_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAppliancePorts(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_delegated_prefix_id QString [required]
    */
    virtual void getNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const QString &static_delegated_prefix_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAppliancePrefixesDelegatedStatics(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSecurityIntrusion(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSecurityMalware(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSingleLan(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkApplianceSsid(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSsids(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceStaticRoutes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  custom_performance_class_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const QString &custom_performance_class_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingCustomPerformanceClasses(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingUplinkBandwidth(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingUplinkSelection(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShaping(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  vlan_id QString [required]
    */
    virtual void getNetworkApplianceVlan(const QString &network_id, const QString &vlan_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVlansSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVlans(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVpnBgp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVpnSiteToSiteVpn(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceWarmSpare(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    */
    virtual void getNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraQualityRetentionProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraSchedules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    */
    virtual void getNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraWirelessProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewayConnectivityMonitoringDestinations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewayDhcp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewaySubnetPool(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewayUplink(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientPolicy(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientSplashAuthorizationStatus(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkDevices(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedEvents(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedGroups(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgradesStagedStages(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFirmwareUpgrades(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  floor_plan_id QString [required]
    */
    virtual void getNetworkFloorPlan(const QString &network_id, const QString &floor_plan_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkFloorPlans(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkGroupPolicies(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_policy_id QString [required]
    */
    virtual void getNetworkGroupPolicy(const QString &network_id, const QString &group_policy_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkHealthAlerts(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  meraki_auth_user_id QString [required]
    */
    virtual void getNetworkMerakiAuthUser(const QString &network_id, const QString &meraki_auth_user_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkMerakiAuthUsers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    */
    virtual void getNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkMqttBrokers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkNetflow(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiPiiKeys(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void getNetworkPiiRequest(const QString &network_id, const QString &request_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkPiiRequests(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiSmDevicesForKey(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiSmOwnersForKey(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkPoliciesByClient(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getNetworkSensorAlertsProfile(const QString &network_id, const QString &id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorAlertsProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSensorRelationships(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  attempt_id QString [required]
    */
    virtual void getNetworkSmBypassActivationLockAttempt(const QString &network_id, const QString &attempt_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceCerts(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceDeviceProfiles(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceNetworkAdapters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceRestrictions(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceSecurityCenters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceSoftwares(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceWlanLists(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  wifi_macs QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  scope QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &wifi_macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &scope = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSmProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  target_group_id QString [required]
    * @param[in]  with_details bool [optional]
    */
    virtual void getNetworkSmTargetGroup(const QString &network_id, const QString &target_group_id, const ::OpenAPI::OptionalParam<bool> &with_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  with_details bool [optional]
    */
    virtual void getNetworkSmTargetGroups(const QString &network_id, const ::OpenAPI::OptionalParam<bool> &with_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmTrustedAccessConfigs(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmUserAccessDevices(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getNetworkSmUserDeviceProfiles(const QString &network_id, const QString &user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getNetworkSmUserSoftwares(const QString &network_id, const QString &user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  usernames QList<QString> [optional]
    * @param[in]  emails QList<QString> [optional]
    * @param[in]  scope QList<QString> [optional]
    */
    virtual void getNetworkSmUsers(const QString &network_id, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &usernames = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &emails = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &scope = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSnmp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchAccessControlLists(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchAccessPolicies(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  access_policy_number QString [required]
    */
    virtual void getNetworkSwitchAccessPolicy(const QString &network_id, const QString &access_policy_number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchAlternateManagementInterface(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchDhcpServerPolicy(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpV4ServersSeen(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchDscpToCosMappings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchLinkAggregations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchMtu(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchPortSchedules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void getNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchQosRulesOrder(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchQosRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoints(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticast(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingOspf(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaces(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoutes(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStacks(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStormControl(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSyslogServers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTrafficAnalysis(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTrafficShapingApplicationCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkTrafficShapingDscpTaggingOptions(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  http_server_id QString [required]
    */
    virtual void getNetworkWebhooksHttpServer(const QString &network_id, const QString &http_server_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWebhooksHttpServers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    */
    virtual void getNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWebhooksPayloadTemplates(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  webhook_test_id QString [required]
    */
    virtual void getNetworkWebhooksWebhookTest(const QString &network_id, const QString &webhook_test_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessAlternateManagementInterface(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessBilling(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessBluetoothSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    */
    virtual void getNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  include_template_profiles bool [optional]
    */
    virtual void getNetworkWirelessRfProfiles(const QString &network_id, const ::OpenAPI::OptionalParam<bool> &include_template_profiles = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidBonjourForwarding(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidDeviceTypeGroupPolicies(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidEapOverride(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidHotspot20(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    */
    virtual void getNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidIdentityPsks(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSchedules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidTrafficShapingRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidVpn(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsid(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessSsids(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetwork(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  action_batch_id QString [required]
    */
    virtual void getOrganizationActionBatch(const QString &organization_id, const QString &action_batch_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  status QString [optional]
    */
    virtual void getOrganizationActionBatches(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyAcls(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroups(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicies(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicySettings(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdmins(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAlertsProfiles(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceSecurityIntrusion(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceVpnThirdPartyVPNPeers(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceVpnVpnFirewallRules(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationBrandingPoliciesPriorities(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationBrandingPolicies(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  branding_policy_id QString [required]
    */
    virtual void getOrganizationBrandingPolicy(const QString &organization_id, const QString &branding_policy_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void getOrganizationCameraCustomAnalyticsArtifact(const QString &organization_id, const QString &artifact_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationCameraCustomAnalyticsArtifacts(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationCameraOnboardingStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  mac QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationClientsSearch(const QString &organization_id, const QString &mac, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePorts(const QString &organization_id, const QString &config_template_id, const QString &profile_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfiles(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void getOrganizationConfigTemplate(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationConfigTemplates(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  configuration_updated_after QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  product_types QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  sensor_metrics QList<QString> [optional]
    * @param[in]  sensor_alert_profile_ids QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    */
    virtual void getOrganizationDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sensor_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sensor_alert_profile_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeaturesOptIns(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationEarlyAccessFeatures(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  firmware_upgrade_ids QList<QString> [optional]
    * @param[in]  firmware_upgrade_batch_ids QList<QString> [optional]
    */
    virtual void getOrganizationFirmwareUpgradesByDevice(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &firmware_upgrade_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &firmware_upgrade_batch_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  status QList<QString> [optional]
    * @param[in]  product_type QList<QString> [optional]
    */
    virtual void getOrganizationFirmwareUpgrades(const QString &organization_id, const ::OpenAPI::OptionalParam<QList<QString>> &status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_type = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationInsightApplications(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  monitored_media_server_id QString [required]
    */
    virtual void getOrganizationInsightMonitoredMediaServer(const QString &organization_id, const QString &monitored_media_server_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationInsightMonitoredMediaServers(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void getOrganizationInventoryDevice(const QString &organization_id, const QString &serial);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  used_state QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  models QList<QString> [optional]
    * @param[in]  order_numbers QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  product_types QList<QString> [optional]
    */
    virtual void getOrganizationInventoryDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &used_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &models = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_numbers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  import_ids QList<QString> [required]
    */
    virtual void getOrganizationInventoryOnboardingCloudMonitoringImports(const QString &organization_id, const QList<QString> &import_ids);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  device_type QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationInventoryOnboardingCloudMonitoringNetworks(const QString &organization_id, const QString &device_type, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  license_id QString [required]
    */
    virtual void getOrganizationLicense(const QString &organization_id, const QString &license_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  device_serial QString [optional]
    * @param[in]  network_id QString [optional]
    * @param[in]  state QString [optional]
    */
    virtual void getOrganizationLicenses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  invalidated bool [optional]
    * @param[in]  expired bool [optional]
    */
    virtual void getOrganizationLicensingCotermLicenses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &invalidated = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expired = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationLoginSecurity(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [optional]
    * @param[in]  is_bound_to_config_template bool [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  tags_filter_type QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationNetworks(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &config_template_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_bound_to_config_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tags_filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    */
    virtual void getOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    */
    virtual void getOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjectsGroups(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getOrganizationPolicyObjects(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    */
    virtual void getOrganizationSamlIdp(const QString &organization_id, const QString &idp_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSamlIdps(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  saml_role_id QString [required]
    */
    virtual void getOrganizationSamlRole(const QString &organization_id, const QString &saml_role_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSamlRoles(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSaml(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSmApnsCert(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  vpp_account_id QString [required]
    */
    virtual void getOrganizationSmVppAccount(const QString &organization_id, const QString &vpp_account_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSmVppAccounts(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSnmp(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  port_profile_ids QList<QString> [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  configuration_updated_after QString [optional]
    */
    virtual void getOrganizationSwitchPortsBySwitch(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &port_profile_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationWirelessDevicesEthernetStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganization(const QString &organization_id);


    virtual void getOrganizations();

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_lock_network_sm_devices_request OAILockNetworkSmDevices_request [optional]
    */
    virtual void lockNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request> &oai_lock_network_sm_devices_request = ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_modify_network_sm_devices_tags_request OAIModifyNetworkSmDevicesTags_request [required]
    */
    virtual void modifyNetworkSmDevicesTags(const QString &network_id, const OAIModifyNetworkSmDevicesTags_request &oai_modify_network_sm_devices_tags_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_move_network_sm_devices_request OAIMoveNetworkSmDevices_request [required]
    */
    virtual void moveNetworkSmDevices(const QString &network_id, const OAIMoveNetworkSmDevices_request &oai_move_network_sm_devices_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_move_organization_licenses_seats_request OAIMoveOrganizationLicensesSeats_request [required]
    */
    virtual void moveOrganizationLicensesSeats(const QString &organization_id, const OAIMoveOrganizationLicensesSeats_request &oai_move_organization_licenses_seats_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_move_organization_licenses_request OAIMoveOrganizationLicenses_request [required]
    */
    virtual void moveOrganizationLicenses(const QString &organization_id, const OAIMoveOrganizationLicenses_request &oai_move_organization_licenses_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_move_organization_licensing_coterm_licenses_request OAIMoveOrganizationLicensingCotermLicenses_request [required]
    */
    virtual void moveOrganizationLicensingCotermLicenses(const QString &organization_id, const OAIMoveOrganizationLicensingCotermLicenses_request &oai_move_organization_licensing_coterm_licenses_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_provision_network_clients_request OAIProvisionNetworkClients_request [required]
    */
    virtual void provisionNetworkClients(const QString &network_id, const OAIProvisionNetworkClients_request &oai_provision_network_clients_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void refreshNetworkSmDeviceDetails(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_release_from_organization_inventory_request OAIReleaseFromOrganizationInventory_request [optional]
    */
    virtual void releaseFromOrganizationInventory(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIReleaseFromOrganizationInventory_request> &oai_release_from_organization_inventory_request = ::OpenAPI::OptionalParam<OAIReleaseFromOrganizationInventory_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_remove_network_devices_request OAIRemoveNetworkDevices_request [required]
    */
    virtual void removeNetworkDevices(const QString &network_id, const OAIRemoveNetworkDevices_request &oai_remove_network_devices_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_remove_network_switch_stack_request OAIRemoveNetworkSwitchStack_request [required]
    */
    virtual void removeNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id, const OAIRemoveNetworkSwitchStack_request &oai_remove_network_switch_stack_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_renew_organization_licenses_seats_request OAIRenewOrganizationLicensesSeats_request [required]
    */
    virtual void renewOrganizationLicensesSeats(const QString &organization_id, const OAIRenewOrganizationLicensesSeats_request &oai_renew_organization_licenses_seats_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_rollbacks_network_firmware_upgrades_staged_events_request OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request [required]
    */
    virtual void rollbacksNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIRollbacksNetworkFirmwareUpgradesStagedEvents_request &oai_rollbacks_network_firmware_upgrades_staged_events_request);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void splitNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void swapNetworkApplianceWarmSpare(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_unbind_network_request OAIUnbindNetwork_request [optional]
    */
    virtual void unbindNetwork(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUnbindNetwork_request> &oai_unbind_network_request = ::OpenAPI::OptionalParam<OAIUnbindNetwork_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void unenrollNetworkSmDevice(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_appliance_uplinks_settings_request OAIUpdateDeviceApplianceUplinksSettings_request [required]
    */
    virtual void updateDeviceApplianceUplinksSettings(const QString &serial, const OAIUpdateDeviceApplianceUplinksSettings_request &oai_update_device_appliance_uplinks_settings_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_custom_analytics_request OAIUpdateDeviceCameraCustomAnalytics_request [optional]
    */
    virtual void updateDeviceCameraCustomAnalytics(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraCustomAnalytics_request> &oai_update_device_camera_custom_analytics_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraCustomAnalytics_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_quality_and_retention_request OAIUpdateDeviceCameraQualityAndRetention_request [optional]
    */
    virtual void updateDeviceCameraQualityAndRetention(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraQualityAndRetention_request> &oai_update_device_camera_quality_and_retention_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraQualityAndRetention_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_sense_request OAIUpdateDeviceCameraSense_request [optional]
    */
    virtual void updateDeviceCameraSense(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraSense_request> &oai_update_device_camera_sense_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraSense_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_video_settings_request OAIUpdateDeviceCameraVideoSettings_request [optional]
    */
    virtual void updateDeviceCameraVideoSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraVideoSettings_request> &oai_update_device_camera_video_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraVideoSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_wireless_profiles_request OAIUpdateDeviceCameraWirelessProfiles_request [required]
    */
    virtual void updateDeviceCameraWirelessProfiles(const QString &serial, const OAIUpdateDeviceCameraWirelessProfiles_request &oai_update_device_camera_wireless_profiles_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_cellular_gateway_lan_request OAIUpdateDeviceCellularGatewayLan_request [optional]
    */
    virtual void updateDeviceCellularGatewayLan(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularGatewayLan_request> &oai_update_device_cellular_gateway_lan_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularGatewayLan_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_cellular_gateway_port_forwarding_rules_request OAIUpdateDeviceCellularGatewayPortForwardingRules_request [optional]
    */
    virtual void updateDeviceCellularGatewayPortForwardingRules(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularGatewayPortForwardingRules_request> &oai_update_device_cellular_gateway_port_forwarding_rules_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularGatewayPortForwardingRules_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_cellular_sims_request OAIUpdateDeviceCellularSims_request [optional]
    */
    virtual void updateDeviceCellularSims(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularSims_request> &oai_update_device_cellular_sims_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCellularSims_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_management_interface_request OAIUpdateDeviceManagementInterface_request [optional]
    */
    virtual void updateDeviceManagementInterface(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceManagementInterface_request> &oai_update_device_management_interface_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceManagementInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_sensor_relationships_request OAIUpdateDeviceSensorRelationships_request [optional]
    */
    virtual void updateDeviceSensorRelationships(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSensorRelationships_request> &oai_update_device_sensor_relationships_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSensorRelationships_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_device_switch_port_request OAIUpdateDeviceSwitchPort_request [optional]
    */
    virtual void updateDeviceSwitchPort(const QString &serial, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchPort_request> &oai_update_device_switch_port_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchPort_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_device_switch_routing_interface_dhcp_request OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request> &oai_update_device_switch_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_create_device_switch_routing_interface_request OAICreateDeviceSwitchRoutingInterface_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request> &oai_create_device_switch_routing_interface_request = ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_switch_warm_spare_request OAIUpdateDeviceSwitchWarmSpare_request [required]
    */
    virtual void updateDeviceSwitchWarmSpare(const QString &serial, const OAIUpdateDeviceSwitchWarmSpare_request &oai_update_device_switch_warm_spare_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_wireless_bluetooth_settings_request OAIUpdateDeviceWirelessBluetoothSettings_request [optional]
    */
    virtual void updateDeviceWirelessBluetoothSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessBluetoothSettings_request> &oai_update_device_wireless_bluetooth_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessBluetoothSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_wireless_radio_settings_request OAIUpdateDeviceWirelessRadioSettings_request [optional]
    */
    virtual void updateDeviceWirelessRadioSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessRadioSettings_request> &oai_update_device_wireless_radio_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessRadioSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_request OAIUpdateDevice_request [optional]
    */
    virtual void updateDevice(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDevice_request> &oai_update_device_request = ::OpenAPI::OptionalParam<OAIUpdateDevice_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_alerts_settings_request OAIUpdateNetworkAlertsSettings_request [optional]
    */
    virtual void updateNetworkAlertsSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAlertsSettings_request> &oai_update_network_alerts_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAlertsSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_connectivity_monitoring_destinations_request OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request [optional]
    */
    virtual void updateNetworkApplianceConnectivityMonitoringDestinations(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request> &oai_update_network_appliance_connectivity_monitoring_destinations_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_content_filtering_request OAIUpdateNetworkApplianceContentFiltering_request [optional]
    */
    virtual void updateNetworkApplianceContentFiltering(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceContentFiltering_request> &oai_update_network_appliance_content_filtering_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceContentFiltering_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_cellular_firewall_rules_request OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallCellularFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request> &oai_update_network_appliance_firewall_cellular_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  service QString [required]
    * @param[in]  oai_update_network_appliance_firewall_firewalled_service_request OAIUpdateNetworkApplianceFirewallFirewalledService_request [required]
    */
    virtual void updateNetworkApplianceFirewallFirewalledService(const QString &network_id, const QString &service, const OAIUpdateNetworkApplianceFirewallFirewalledService_request &oai_update_network_appliance_firewall_firewalled_service_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_cellular_firewall_rules_request OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallInboundCellularFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request> &oai_update_network_appliance_firewall_cellular_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallInboundFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL3FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_l7_firewall_rules_request OAIUpdateNetworkApplianceFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL7FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallL7FirewallRules_request> &oai_update_network_appliance_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallL7FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_one_to_many_nat_rules_request OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallOneToManyNatRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request &oai_update_network_appliance_firewall_one_to_many_nat_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_one_to_one_nat_rules_request OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallOneToOneNatRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request &oai_update_network_appliance_firewall_one_to_one_nat_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_port_forwarding_rules_request OAIUpdateNetworkApplianceFirewallPortForwardingRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallPortForwardingRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallPortForwardingRules_request &oai_update_network_appliance_firewall_port_forwarding_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_settings_request OAIUpdateNetworkApplianceFirewallSettings_request [optional]
    */
    virtual void updateNetworkApplianceFirewallSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request> &oai_update_network_appliance_firewall_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_network_appliance_port_request OAIUpdateNetworkAppliancePort_request [optional]
    */
    virtual void updateNetworkAppliancePort(const QString &network_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePort_request> &oai_update_network_appliance_port_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePort_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_delegated_prefix_id QString [required]
    * @param[in]  oai_update_network_appliance_prefixes_delegated_static_request OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request [optional]
    */
    virtual void updateNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const QString &static_delegated_prefix_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request> &oai_update_network_appliance_prefixes_delegated_static_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_security_intrusion_request OAIUpdateNetworkApplianceSecurityIntrusion_request [optional]
    */
    virtual void updateNetworkApplianceSecurityIntrusion(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSecurityIntrusion_request> &oai_update_network_appliance_security_intrusion_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSecurityIntrusion_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_security_malware_request OAIUpdateNetworkApplianceSecurityMalware_request [required]
    */
    virtual void updateNetworkApplianceSecurityMalware(const QString &network_id, const OAIUpdateNetworkApplianceSecurityMalware_request &oai_update_network_appliance_security_malware_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_settings_request OAIUpdateNetworkApplianceSettings_request [optional]
    */
    virtual void updateNetworkApplianceSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSettings_request> &oai_update_network_appliance_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_single_lan_request OAIUpdateNetworkApplianceSingleLan_request [optional]
    */
    virtual void updateNetworkApplianceSingleLan(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSingleLan_request> &oai_update_network_appliance_single_lan_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSingleLan_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_appliance_ssid_request OAIUpdateNetworkApplianceSsid_request [optional]
    */
    virtual void updateNetworkApplianceSsid(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSsid_request> &oai_update_network_appliance_ssid_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSsid_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_network_appliance_static_route_request OAIUpdateNetworkApplianceStaticRoute_request [optional]
    */
    virtual void updateNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceStaticRoute_request> &oai_update_network_appliance_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  custom_performance_class_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_custom_performance_class_request OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const QString &custom_performance_class_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request> &oai_update_network_appliance_traffic_shaping_custom_performance_class_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_rules_request OAIUpdateNetworkApplianceTrafficShapingRules_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingRules_request> &oai_update_network_appliance_traffic_shaping_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_uplink_bandwidth_request OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingUplinkBandwidth(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request> &oai_update_network_appliance_traffic_shaping_uplink_bandwidth_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_uplink_selection_request OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingUplinkSelection(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request> &oai_update_network_appliance_traffic_shaping_uplink_selection_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_request OAIUpdateNetworkApplianceTrafficShaping_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShaping(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShaping_request> &oai_update_network_appliance_traffic_shaping_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShaping_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  vlan_id QString [required]
    * @param[in]  oai_update_network_appliance_vlan_request OAIUpdateNetworkApplianceVlan_request [optional]
    */
    virtual void updateNetworkApplianceVlan(const QString &network_id, const QString &vlan_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlan_request> &oai_update_network_appliance_vlan_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlan_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vlans_settings_request OAIUpdateNetworkApplianceVlansSettings_request [optional]
    */
    virtual void updateNetworkApplianceVlansSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlansSettings_request> &oai_update_network_appliance_vlans_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlansSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vpn_bgp_request OAIUpdateNetworkApplianceVpnBgp_request [required]
    */
    virtual void updateNetworkApplianceVpnBgp(const QString &network_id, const OAIUpdateNetworkApplianceVpnBgp_request &oai_update_network_appliance_vpn_bgp_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vpn_site_to_site_vpn_request OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request [required]
    */
    virtual void updateNetworkApplianceVpnSiteToSiteVpn(const QString &network_id, const OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request &oai_update_network_appliance_vpn_site_to_site_vpn_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_warm_spare_request OAIUpdateNetworkApplianceWarmSpare_request [required]
    */
    virtual void updateNetworkApplianceWarmSpare(const QString &network_id, const OAIUpdateNetworkApplianceWarmSpare_request &oai_update_network_appliance_warm_spare_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    * @param[in]  oai_update_network_camera_quality_retention_profile_request OAIUpdateNetworkCameraQualityRetentionProfile_request [optional]
    */
    virtual void updateNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraQualityRetentionProfile_request> &oai_update_network_camera_quality_retention_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraQualityRetentionProfile_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    * @param[in]  oai_update_network_camera_wireless_profile_request OAIUpdateNetworkCameraWirelessProfile_request [optional]
    */
    virtual void updateNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraWirelessProfile_request> &oai_update_network_camera_wireless_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraWirelessProfile_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_connectivity_monitoring_destinations_request OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request [optional]
    */
    virtual void updateNetworkCellularGatewayConnectivityMonitoringDestinations(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request> &oai_update_network_cellular_gateway_connectivity_monitoring_destinations_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_dhcp_request OAIUpdateNetworkCellularGatewayDhcp_request [optional]
    */
    virtual void updateNetworkCellularGatewayDhcp(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayDhcp_request> &oai_update_network_cellular_gateway_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_subnet_pool_request OAIUpdateNetworkCellularGatewaySubnetPool_request [optional]
    */
    virtual void updateNetworkCellularGatewaySubnetPool(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewaySubnetPool_request> &oai_update_network_cellular_gateway_subnet_pool_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewaySubnetPool_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_uplink_request OAIUpdateNetworkCellularGatewayUplink_request [optional]
    */
    virtual void updateNetworkCellularGatewayUplink(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayUplink_request> &oai_update_network_cellular_gateway_uplink_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayUplink_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_network_client_policy_request OAIUpdateNetworkClientPolicy_request [required]
    */
    virtual void updateNetworkClientPolicy(const QString &network_id, const QString &client_id, const OAIUpdateNetworkClientPolicy_request &oai_update_network_client_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_network_client_splash_authorization_status_request OAIUpdateNetworkClientSplashAuthorizationStatus_request [required]
    */
    virtual void updateNetworkClientSplashAuthorizationStatus(const QString &network_id, const QString &client_id, const OAIUpdateNetworkClientSplashAuthorizationStatus_request &oai_update_network_client_splash_authorization_status_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_staged_events_request OAIUpdateNetworkFirmwareUpgradesStagedEvents_request [required]
    */
    virtual void updateNetworkFirmwareUpgradesStagedEvents(const QString &network_id, const OAIUpdateNetworkFirmwareUpgradesStagedEvents_request &oai_update_network_firmware_upgrades_staged_events_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  oai_create_network_firmware_upgrades_staged_group_request OAICreateNetworkFirmwareUpgradesStagedGroup_request [required]
    */
    virtual void updateNetworkFirmwareUpgradesStagedGroup(const QString &network_id, const QString &group_id, const OAICreateNetworkFirmwareUpgradesStagedGroup_request &oai_create_network_firmware_upgrades_staged_group_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_staged_stages_request OAIUpdateNetworkFirmwareUpgradesStagedStages_request [optional]
    */
    virtual void updateNetworkFirmwareUpgradesStagedStages(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgradesStagedStages_request> &oai_update_network_firmware_upgrades_staged_stages_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgradesStagedStages_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_firmware_upgrades_request OAIUpdateNetworkFirmwareUpgrades_request [optional]
    */
    virtual void updateNetworkFirmwareUpgrades(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgrades_request> &oai_update_network_firmware_upgrades_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkFirmwareUpgrades_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  floor_plan_id QString [required]
    * @param[in]  oai_update_network_floor_plan_request OAIUpdateNetworkFloorPlan_request [optional]
    */
    virtual void updateNetworkFloorPlan(const QString &network_id, const QString &floor_plan_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkFloorPlan_request> &oai_update_network_floor_plan_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkFloorPlan_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  group_policy_id QString [required]
    * @param[in]  oai_update_network_group_policy_request OAIUpdateNetworkGroupPolicy_request [optional]
    */
    virtual void updateNetworkGroupPolicy(const QString &network_id, const QString &group_policy_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkGroupPolicy_request> &oai_update_network_group_policy_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkGroupPolicy_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  meraki_auth_user_id QString [required]
    * @param[in]  oai_update_network_meraki_auth_user_request OAIUpdateNetworkMerakiAuthUser_request [optional]
    */
    virtual void updateNetworkMerakiAuthUser(const QString &network_id, const QString &meraki_auth_user_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkMerakiAuthUser_request> &oai_update_network_meraki_auth_user_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkMerakiAuthUser_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    * @param[in]  oai_update_network_mqtt_broker_request OAIUpdateNetworkMqttBroker_request [optional]
    */
    virtual void updateNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkMqttBroker_request> &oai_update_network_mqtt_broker_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkMqttBroker_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_netflow_request OAIUpdateNetworkNetflow_request [optional]
    */
    virtual void updateNetworkNetflow(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkNetflow_request> &oai_update_network_netflow_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkNetflow_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_network_sensor_alerts_profile_request OAIUpdateNetworkSensorAlertsProfile_request [optional]
    */
    virtual void updateNetworkSensorAlertsProfile(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSensorAlertsProfile_request> &oai_update_network_sensor_alerts_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSensorAlertsProfile_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_settings_request OAIUpdateNetworkSettings_request [optional]
    */
    virtual void updateNetworkSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSettings_request> &oai_update_network_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_sm_devices_fields_request OAIUpdateNetworkSmDevicesFields_request [required]
    */
    virtual void updateNetworkSmDevicesFields(const QString &network_id, const OAIUpdateNetworkSmDevicesFields_request &oai_update_network_sm_devices_fields_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  target_group_id QString [required]
    * @param[in]  oai_create_network_sm_target_group_request OAICreateNetworkSmTargetGroup_request [optional]
    */
    virtual void updateNetworkSmTargetGroup(const QString &network_id, const QString &target_group_id, const ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request> &oai_create_network_sm_target_group_request = ::OpenAPI::OptionalParam<OAICreateNetworkSmTargetGroup_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_snmp_request OAIUpdateNetworkSnmp_request [optional]
    */
    virtual void updateNetworkSnmp(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSnmp_request> &oai_update_network_snmp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSnmp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_access_control_lists_request OAIUpdateNetworkSwitchAccessControlLists_request [required]
    */
    virtual void updateNetworkSwitchAccessControlLists(const QString &network_id, const OAIUpdateNetworkSwitchAccessControlLists_request &oai_update_network_switch_access_control_lists_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  access_policy_number QString [required]
    * @param[in]  oai_update_network_switch_access_policy_request OAIUpdateNetworkSwitchAccessPolicy_request [optional]
    */
    virtual void updateNetworkSwitchAccessPolicy(const QString &network_id, const QString &access_policy_number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAccessPolicy_request> &oai_update_network_switch_access_policy_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAccessPolicy_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_alternate_management_interface_request OAIUpdateNetworkSwitchAlternateManagementInterface_request [optional]
    */
    virtual void updateNetworkSwitchAlternateManagementInterface(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAlternateManagementInterface_request> &oai_update_network_switch_alternate_management_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAlternateManagementInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  trusted_server_id QString [required]
    * @param[in]  oai_update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request [optional]
    */
    virtual void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(const QString &network_id, const QString &trusted_server_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request> &oai_update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_dhcp_server_policy_request OAIUpdateNetworkSwitchDhcpServerPolicy_request [optional]
    */
    virtual void updateNetworkSwitchDhcpServerPolicy(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicy_request> &oai_update_network_switch_dhcp_server_policy_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicy_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_dscp_to_cos_mappings_request OAIUpdateNetworkSwitchDscpToCosMappings_request [required]
    */
    virtual void updateNetworkSwitchDscpToCosMappings(const QString &network_id, const OAIUpdateNetworkSwitchDscpToCosMappings_request &oai_update_network_switch_dscp_to_cos_mappings_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  link_aggregation_id QString [required]
    * @param[in]  oai_update_network_switch_link_aggregation_request OAIUpdateNetworkSwitchLinkAggregation_request [optional]
    */
    virtual void updateNetworkSwitchLinkAggregation(const QString &network_id, const QString &link_aggregation_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchLinkAggregation_request> &oai_update_network_switch_link_aggregation_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchLinkAggregation_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_mtu_request OAIUpdateNetworkSwitchMtu_request [optional]
    */
    virtual void updateNetworkSwitchMtu(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchMtu_request> &oai_update_network_switch_mtu_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchMtu_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_schedule_id QString [required]
    * @param[in]  oai_update_network_switch_port_schedule_request OAIUpdateNetworkSwitchPortSchedule_request [optional]
    */
    virtual void updateNetworkSwitchPortSchedule(const QString &network_id, const QString &port_schedule_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchPortSchedule_request> &oai_update_network_switch_port_schedule_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchPortSchedule_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    * @param[in]  oai_update_network_switch_qos_rule_request OAIUpdateNetworkSwitchQosRule_request [optional]
    */
    virtual void updateNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchQosRule_request> &oai_update_network_switch_qos_rule_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchQosRule_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_qos_rules_order_request OAIUpdateNetworkSwitchQosRulesOrder_request [required]
    */
    virtual void updateNetworkSwitchQosRulesOrder(const QString &network_id, const OAIUpdateNetworkSwitchQosRulesOrder_request &oai_update_network_switch_qos_rules_order_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_rendezvous_point_request OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void updateNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id, const OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_update_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_request OAIUpdateNetworkSwitchRoutingMulticast_request [optional]
    */
    virtual void updateNetworkSwitchRoutingMulticast(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request> &oai_update_network_switch_routing_multicast_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_ospf_request OAIUpdateNetworkSwitchRoutingOspf_request [optional]
    */
    virtual void updateNetworkSwitchRoutingOspf(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingOspf_request> &oai_update_network_switch_routing_ospf_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingOspf_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_request OAIUpdateNetworkSwitchSettings_request [optional]
    */
    virtual void updateNetworkSwitchSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request> &oai_update_network_switch_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_dhcp_request OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request> &oai_update_network_switch_stack_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_request OAIUpdateNetworkSwitchStackRoutingInterface_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request> &oai_update_network_switch_stack_routing_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_storm_control_request OAIUpdateNetworkSwitchStormControl_request [optional]
    */
    virtual void updateNetworkSwitchStormControl(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStormControl_request> &oai_update_network_switch_storm_control_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStormControl_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_stp_request OAIUpdateNetworkSwitchStp_request [optional]
    */
    virtual void updateNetworkSwitchStp(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStp_request> &oai_update_network_switch_stp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_syslog_servers_request OAIUpdateNetworkSyslogServers_request [required]
    */
    virtual void updateNetworkSyslogServers(const QString &network_id, const OAIUpdateNetworkSyslogServers_request &oai_update_network_syslog_servers_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_traffic_analysis_request OAIUpdateNetworkTrafficAnalysis_request [optional]
    */
    virtual void updateNetworkTrafficAnalysis(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkTrafficAnalysis_request> &oai_update_network_traffic_analysis_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkTrafficAnalysis_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  http_server_id QString [required]
    * @param[in]  oai_update_network_webhooks_http_server_request OAIUpdateNetworkWebhooksHttpServer_request [optional]
    */
    virtual void updateNetworkWebhooksHttpServer(const QString &network_id, const QString &http_server_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksHttpServer_request> &oai_update_network_webhooks_http_server_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksHttpServer_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  payload_template_id QString [required]
    * @param[in]  oai_update_network_webhooks_payload_template_request OAIUpdateNetworkWebhooksPayloadTemplate_request [optional]
    */
    virtual void updateNetworkWebhooksPayloadTemplate(const QString &network_id, const QString &payload_template_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksPayloadTemplate_request> &oai_update_network_webhooks_payload_template_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWebhooksPayloadTemplate_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_alternate_management_interface_request OAIUpdateNetworkWirelessAlternateManagementInterface_request [optional]
    */
    virtual void updateNetworkWirelessAlternateManagementInterface(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessAlternateManagementInterface_request> &oai_update_network_wireless_alternate_management_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessAlternateManagementInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_billing_request OAIUpdateNetworkWirelessBilling_request [optional]
    */
    virtual void updateNetworkWirelessBilling(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBilling_request> &oai_update_network_wireless_billing_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBilling_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_bluetooth_settings_request OAIUpdateNetworkWirelessBluetoothSettings_request [optional]
    */
    virtual void updateNetworkWirelessBluetoothSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBluetoothSettings_request> &oai_update_network_wireless_bluetooth_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBluetoothSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rf_profile_id QString [required]
    * @param[in]  oai_update_network_wireless_rf_profile_request OAIUpdateNetworkWirelessRfProfile_request [optional]
    */
    virtual void updateNetworkWirelessRfProfile(const QString &network_id, const QString &rf_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessRfProfile_request> &oai_update_network_wireless_rf_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessRfProfile_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_settings_request OAIUpdateNetworkWirelessSettings_request [optional]
    */
    virtual void updateNetworkWirelessSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSettings_request> &oai_update_network_wireless_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_bonjour_forwarding_request OAIUpdateNetworkWirelessSsidBonjourForwarding_request [optional]
    */
    virtual void updateNetworkWirelessSsidBonjourForwarding(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidBonjourForwarding_request> &oai_update_network_wireless_ssid_bonjour_forwarding_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidBonjourForwarding_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_device_type_group_policies_request OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request [optional]
    */
    virtual void updateNetworkWirelessSsidDeviceTypeGroupPolicies(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request> &oai_update_network_wireless_ssid_device_type_group_policies_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidDeviceTypeGroupPolicies_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_eap_override_request OAIUpdateNetworkWirelessSsidEapOverride_request [optional]
    */
    virtual void updateNetworkWirelessSsidEapOverride(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidEapOverride_request> &oai_update_network_wireless_ssid_eap_override_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidEapOverride_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_hotspot20_request OAIUpdateNetworkWirelessSsidHotspot20_request [optional]
    */
    virtual void updateNetworkWirelessSsidHotspot20(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidHotspot20_request> &oai_update_network_wireless_ssid_hotspot20_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidHotspot20_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  identity_psk_id QString [required]
    * @param[in]  oai_update_network_wireless_ssid_identity_psk_request OAIUpdateNetworkWirelessSsidIdentityPsk_request [optional]
    */
    virtual void updateNetworkWirelessSsidIdentityPsk(const QString &network_id, const QString &number, const QString &identity_psk_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidIdentityPsk_request> &oai_update_network_wireless_ssid_identity_psk_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidIdentityPsk_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_schedules_request OAIUpdateNetworkWirelessSsidSchedules_request [optional]
    */
    virtual void updateNetworkWirelessSsidSchedules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSchedules_request> &oai_update_network_wireless_ssid_schedules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSchedules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_splash_settings_request OAIUpdateNetworkWirelessSsidSplashSettings_request [optional]
    */
    virtual void updateNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request> &oai_update_network_wireless_ssid_splash_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_traffic_shaping_rules_request OAIUpdateNetworkWirelessSsidTrafficShapingRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidTrafficShapingRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidTrafficShapingRules_request> &oai_update_network_wireless_ssid_traffic_shaping_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidTrafficShapingRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_vpn_request OAIUpdateNetworkWirelessSsidVpn_request [optional]
    */
    virtual void updateNetworkWirelessSsidVpn(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request> &oai_update_network_wireless_ssid_vpn_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_request OAIUpdateNetworkWirelessSsid_request [optional]
    */
    virtual void updateNetworkWirelessSsid(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsid_request> &oai_update_network_wireless_ssid_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsid_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_request OAIUpdateNetwork_request [optional]
    */
    virtual void updateNetwork(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetwork_request> &oai_update_network_request = ::OpenAPI::OptionalParam<OAIUpdateNetwork_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  action_batch_id QString [required]
    * @param[in]  oai_update_organization_action_batch_request OAIUpdateOrganizationActionBatch_request [optional]
    */
    virtual void updateOrganizationActionBatch(const QString &organization_id, const QString &action_batch_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationActionBatch_request> &oai_update_organization_action_batch_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationActionBatch_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_acl_request OAIUpdateOrganizationAdaptivePolicyAcl_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyAcl_request> &oai_update_organization_adaptive_policy_acl_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyAcl_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_group_request OAIUpdateOrganizationAdaptivePolicyGroup_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request> &oai_update_organization_adaptive_policy_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_policy_request OAIUpdateOrganizationAdaptivePolicyPolicy_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request> &oai_update_organization_adaptive_policy_policy_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_settings_request OAIUpdateOrganizationAdaptivePolicySettings_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicySettings(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request> &oai_update_organization_adaptive_policy_settings_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  admin_id QString [required]
    * @param[in]  oai_update_organization_admin_request OAIUpdateOrganizationAdmin_request [optional]
    */
    virtual void updateOrganizationAdmin(const QString &organization_id, const QString &admin_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdmin_request> &oai_update_organization_admin_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdmin_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  alert_config_id QString [required]
    * @param[in]  oai_update_organization_alerts_profile_request OAIUpdateOrganizationAlertsProfile_request [optional]
    */
    virtual void updateOrganizationAlertsProfile(const QString &organization_id, const QString &alert_config_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAlertsProfile_request> &oai_update_organization_alerts_profile_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAlertsProfile_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_security_intrusion_request OAIUpdateOrganizationApplianceSecurityIntrusion_request [required]
    */
    virtual void updateOrganizationApplianceSecurityIntrusion(const QString &organization_id, const OAIUpdateOrganizationApplianceSecurityIntrusion_request &oai_update_organization_appliance_security_intrusion_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_vpn_third_party_vpn_peers_request OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request [required]
    */
    virtual void updateOrganizationApplianceVpnThirdPartyVPNPeers(const QString &organization_id, const OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request &oai_update_organization_appliance_vpn_third_party_vpn_peers_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_vpn_vpn_firewall_rules_request OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request [optional]
    */
    virtual void updateOrganizationApplianceVpnVpnFirewallRules(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request> &oai_update_organization_appliance_vpn_vpn_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_branding_policies_priorities_request OAIUpdateOrganizationBrandingPoliciesPriorities_request [optional]
    */
    virtual void updateOrganizationBrandingPoliciesPriorities(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPoliciesPriorities_request> &oai_update_organization_branding_policies_priorities_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPoliciesPriorities_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  branding_policy_id QString [required]
    * @param[in]  oai_update_organization_branding_policy_request OAIUpdateOrganizationBrandingPolicy_request [optional]
    */
    virtual void updateOrganizationBrandingPolicy(const QString &organization_id, const QString &branding_policy_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPolicy_request> &oai_update_organization_branding_policy_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationBrandingPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_camera_onboarding_statuses_request OAIUpdateOrganizationCameraOnboardingStatuses_request [optional]
    */
    virtual void updateOrganizationCameraOnboardingStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationCameraOnboardingStatuses_request> &oai_update_organization_camera_onboarding_statuses_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationCameraOnboardingStatuses_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_organization_config_template_switch_profile_port_request OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request [optional]
    */
    virtual void updateOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request> &oai_update_organization_config_template_switch_profile_port_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  oai_update_organization_config_template_request OAIUpdateOrganizationConfigTemplate_request [optional]
    */
    virtual void updateOrganizationConfigTemplate(const QString &organization_id, const QString &config_template_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplate_request> &oai_update_organization_config_template_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplate_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  opt_in_id QString [required]
    * @param[in]  oai_update_organization_early_access_features_opt_in_request OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request [optional]
    */
    virtual void updateOrganizationEarlyAccessFeaturesOptIn(const QString &organization_id, const QString &opt_in_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request> &oai_update_organization_early_access_features_opt_in_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationEarlyAccessFeaturesOptIn_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  monitored_media_server_id QString [required]
    * @param[in]  oai_update_organization_insight_monitored_media_server_request OAIUpdateOrganizationInsightMonitoredMediaServer_request [optional]
    */
    virtual void updateOrganizationInsightMonitoredMediaServer(const QString &organization_id, const QString &monitored_media_server_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationInsightMonitoredMediaServer_request> &oai_update_organization_insight_monitored_media_server_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationInsightMonitoredMediaServer_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  license_id QString [required]
    * @param[in]  oai_update_organization_license_request OAIUpdateOrganizationLicense_request [optional]
    */
    virtual void updateOrganizationLicense(const QString &organization_id, const QString &license_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationLicense_request> &oai_update_organization_license_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationLicense_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_login_security_request OAIUpdateOrganizationLoginSecurity_request [optional]
    */
    virtual void updateOrganizationLoginSecurity(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationLoginSecurity_request> &oai_update_organization_login_security_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationLoginSecurity_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_id QString [required]
    * @param[in]  oai_update_organization_policy_object_request OAIUpdateOrganizationPolicyObject_request [optional]
    */
    virtual void updateOrganizationPolicyObject(const QString &organization_id, const QString &policy_object_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObject_request> &oai_update_organization_policy_object_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObject_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  policy_object_group_id QString [required]
    * @param[in]  oai_update_organization_policy_objects_group_request OAIUpdateOrganizationPolicyObjectsGroup_request [optional]
    */
    virtual void updateOrganizationPolicyObjectsGroup(const QString &organization_id, const QString &policy_object_group_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request> &oai_update_organization_policy_objects_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationPolicyObjectsGroup_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  idp_id QString [required]
    * @param[in]  oai_update_organization_saml_idp_request OAIUpdateOrganizationSamlIdp_request [optional]
    */
    virtual void updateOrganizationSamlIdp(const QString &organization_id, const QString &idp_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlIdp_request> &oai_update_organization_saml_idp_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlIdp_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  saml_role_id QString [required]
    * @param[in]  oai_update_organization_saml_role_request OAIUpdateOrganizationSamlRole_request [optional]
    */
    virtual void updateOrganizationSamlRole(const QString &organization_id, const QString &saml_role_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlRole_request> &oai_update_organization_saml_role_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSamlRole_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_saml_request OAIUpdateOrganizationSaml_request [optional]
    */
    virtual void updateOrganizationSaml(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSaml_request> &oai_update_organization_saml_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSaml_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_snmp_request OAIUpdateOrganizationSnmp_request [optional]
    */
    virtual void updateOrganizationSnmp(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationSnmp_request> &oai_update_organization_snmp_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationSnmp_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_request OAIUpdateOrganization_request [optional]
    */
    virtual void updateOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganization_request> &oai_update_organization_request = ::OpenAPI::OptionalParam<OAIUpdateOrganization_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_vmx_network_devices_claim_request OAIVmxNetworkDevicesClaim_request [required]
    */
    virtual void vmxNetworkDevicesClaim(const QString &network_id, const OAIVmxNetworkDevicesClaim_request &oai_vmx_network_devices_claim_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_wipe_network_sm_devices_request OAIWipeNetworkSmDevices_request [optional]
    */
    virtual void wipeNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevices_request> &oai_wipe_network_sm_devices_request = ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevices_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void assignOrganizationLicensesSeatsCallback(OAIHttpRequestWorker *worker);
    void bindNetworkCallback(OAIHttpRequestWorker *worker);
    void checkinNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void claimIntoOrganizationInventoryCallback(OAIHttpRequestWorker *worker);
    void claimIntoOrganizationCallback(OAIHttpRequestWorker *worker);
    void claimNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void cloneOrganizationSwitchDevicesCallback(OAIHttpRequestWorker *worker);
    void cloneOrganizationCallback(OAIHttpRequestWorker *worker);
    void combineOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void createDeviceApplianceVmxAuthenticationTokenCallback(OAIHttpRequestWorker *worker);
    void createDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void createNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void createNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void createNetworkFirmwareUpgradesRollbackCallback(OAIHttpRequestWorker *worker);
    void createNetworkFirmwareUpgradesStagedEventCallback(OAIHttpRequestWorker *worker);
    void createNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void createNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void createNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void createNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void createNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void createNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void createNetworkSmBypassActivationLockAttemptCallback(OAIHttpRequestWorker *worker);
    void createNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchLinkAggregationCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchPortScheduleCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void createNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void createNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void createNetworkWebhooksWebhookTestCallback(OAIHttpRequestWorker *worker);
    void createNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void createNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void createOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdminCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void createOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void createOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void createOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void createOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInventoryOnboardingCloudMonitoringImportCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareCallback(OAIHttpRequestWorker *worker);
    void createOrganizationNetworkCallback(OAIHttpRequestWorker *worker);
    void createOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void createOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void createOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void createOrganizationCallback(OAIHttpRequestWorker *worker);
    void deferNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSmUserAccessDeviceCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchLinkAggregationCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchPortScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdminCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationUserCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCallback(OAIHttpRequestWorker *worker);
    void getDeviceApplianceUplinksSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraCustomAnalyticsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraQualityAndRetentionCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraSenseObjectDetectionModelsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraSenseCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraVideoLinkCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraVideoSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void getDeviceCellularGatewayLanCallback(OAIHttpRequestWorker *worker);
    void getDeviceCellularGatewayPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void getDeviceCellularSimsCallback(OAIHttpRequestWorker *worker);
    void getDeviceManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void getDeviceSensorRelationshipsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchWarmSpareCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessRadioSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCallback(OAIHttpRequestWorker *worker);
    void getNetworkAlertsSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceContentFilteringCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceContentFilteringCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallFirewalledServiceCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallFirewalledServicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallInboundFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallOneToManyNatRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallOneToOneNatRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePortCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePortsCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePrefixesDelegatedStaticsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityMalwareCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSingleLanCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingUplinkBandwidthCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingUplinkSelectionCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlansSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlansCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVpnBgpCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVpnSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceWarmSpareCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void getNetworkCellularGatewayDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkCellularGatewaySubnetPoolCallback(OAIHttpRequestWorker *worker);
    void getNetworkCellularGatewayUplinkCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientSplashAuthorizationStatusCallback(OAIHttpRequestWorker *worker);
    void getNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedGroupsCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesStagedStagesCallback(OAIHttpRequestWorker *worker);
    void getNetworkFirmwareUpgradesCallback(OAIHttpRequestWorker *worker);
    void getNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void getNetworkFloorPlansCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkHealthAlertsCallback(OAIHttpRequestWorker *worker);
    void getNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void getNetworkMerakiAuthUsersCallback(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokersCallback(OAIHttpRequestWorker *worker);
    void getNetworkNetflowCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiPiiKeysCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiRequestsCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiSmDevicesForKeyCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiSmOwnersForKeyCallback(OAIHttpRequestWorker *worker);
    void getNetworkPoliciesByClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorAlertsProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSensorRelationshipsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmBypassActivationLockAttemptCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCertsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceNetworkAdaptersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceRestrictionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceSecurityCentersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceWlanListsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmTrustedAccessConfigsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserAccessDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUsersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSnmpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAccessControlListsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpServerPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpV4ServersSeenCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDscpToCosMappingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchLinkAggregationsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchMtuCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchPortSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingOspfCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStacksCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStormControlCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSyslogServersCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficAnalysisCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficShapingApplicationCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficShapingDscpTaggingOptionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksHttpServersCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksPayloadTemplatesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWebhooksWebhookTestCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessBillingCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessRfProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidBonjourForwardingCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidEapOverrideCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidHotspot20Callback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidIdentityPsksCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidsCallback(OAIHttpRequestWorker *worker);
    void getNetworkCallback(OAIHttpRequestWorker *worker);
    void getOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void getOrganizationActionBatchesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPoliciesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdminsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAlertsProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnVpnFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationBrandingPoliciesPrioritiesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationBrandingPoliciesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraCustomAnalyticsArtifactCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraCustomAnalyticsArtifactsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCameraOnboardingStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationClientsSearchCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplatesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesOptInsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationEarlyAccessFeaturesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationFirmwareUpgradesByDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationFirmwareUpgradesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInsightApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInsightMonitoredMediaServersCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryDeviceCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicenseCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicensesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLicensingCotermLicensesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationLoginSecurityCallback(OAIHttpRequestWorker *worker);
    void getOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPolicyObjectsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlIdpsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlRolesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSamlCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSmApnsCertCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSmVppAccountCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSmVppAccountsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSnmpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSwitchPortsBySwitchCallback(OAIHttpRequestWorker *worker);
    void getOrganizationWirelessDevicesEthernetStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationsCallback(OAIHttpRequestWorker *worker);
    void lockNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void modifyNetworkSmDevicesTagsCallback(OAIHttpRequestWorker *worker);
    void moveNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void moveOrganizationLicensesSeatsCallback(OAIHttpRequestWorker *worker);
    void moveOrganizationLicensesCallback(OAIHttpRequestWorker *worker);
    void moveOrganizationLicensingCotermLicensesCallback(OAIHttpRequestWorker *worker);
    void provisionNetworkClientsCallback(OAIHttpRequestWorker *worker);
    void refreshNetworkSmDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void releaseFromOrganizationInventoryCallback(OAIHttpRequestWorker *worker);
    void removeNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void removeNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void renewOrganizationLicensesSeatsCallback(OAIHttpRequestWorker *worker);
    void rollbacksNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void splitNetworkCallback(OAIHttpRequestWorker *worker);
    void swapNetworkApplianceWarmSpareCallback(OAIHttpRequestWorker *worker);
    void unbindNetworkCallback(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceApplianceUplinksSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraCustomAnalyticsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraQualityAndRetentionCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraSenseCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraVideoSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCellularGatewayLanCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCellularGatewayPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCellularSimsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSensorRelationshipsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchPortCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchWarmSpareCallback(OAIHttpRequestWorker *worker);
    void updateDeviceWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceWirelessRadioSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAlertsSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceContentFilteringCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallFirewalledServiceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallInboundFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallOneToManyNatRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallOneToOneNatRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAppliancePortCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSecurityMalwareCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSingleLanCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSsidCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingUplinkSelectionCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVlansSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVpnBgpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVpnSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceWarmSpareCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewayDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewaySubnetPoolCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewayUplinkCallback(OAIHttpRequestWorker *worker);
    void updateNetworkClientPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkClientSplashAuthorizationStatusCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedEventsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedGroupCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesStagedStagesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFirmwareUpgradesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkFloorPlanCallback(OAIHttpRequestWorker *worker);
    void updateNetworkGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkMerakiAuthUserCallback(OAIHttpRequestWorker *worker);
    void updateNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void updateNetworkNetflowCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSensorAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmDevicesFieldsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmTargetGroupCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSnmpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchAccessControlListsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchDhcpServerPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchDscpToCosMappingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchLinkAggregationCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchMtuCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchPortScheduleCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingOspfCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStormControlCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSyslogServersCallback(OAIHttpRequestWorker *worker);
    void updateNetworkTrafficAnalysisCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWebhooksHttpServerCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWebhooksPayloadTemplateCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessBillingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessRfProfileCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidBonjourForwardingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidEapOverrideCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidHotspot20Callback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidIdentityPskCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSchedulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationActionBatchCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdminCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAlertsProfileCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceVpnVpnFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationBrandingPoliciesPrioritiesCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationBrandingPolicyCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCameraOnboardingStatusesCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationConfigTemplateCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationEarlyAccessFeaturesOptInCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationLicenseCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationLoginSecurityCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationPolicyObjectsGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlIdpCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlRoleCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSamlCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSnmpCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCallback(OAIHttpRequestWorker *worker);
    void vmxNetworkDevicesClaimCallback(OAIHttpRequestWorker *worker);
    void wipeNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addNetworkSwitchStackSignal(OAIObject summary);
    void assignOrganizationLicensesSeatsSignal(OAIAssignOrganizationLicensesSeats_200_response summary);
    void bindNetworkSignal(OAIObject summary);
    void checkinNetworkSmDevicesSignal(OAICheckinNetworkSmDevices_200_response summary);
    void claimIntoOrganizationInventorySignal(OAIObject summary);
    void claimIntoOrganizationSignal(OAIObject summary);
    void claimNetworkDevicesSignal();
    void cloneOrganizationSwitchDevicesSignal(OAIObject summary);
    void cloneOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void combineOrganizationNetworksSignal(OAICombineOrganizationNetworks_200_response summary);
    void createDeviceApplianceVmxAuthenticationTokenSignal(OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary);
    void createDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void createDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void createNetworkAppliancePrefixesDelegatedStaticSignal(OAIObject summary);
    void createNetworkApplianceStaticRouteSignal(OAIObject summary);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignal(OAIObject summary);
    void createNetworkApplianceVlanSignal(OAICreateNetworkApplianceVlan_201_response summary);
    void createNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void createNetworkCameraWirelessProfileSignal(OAIObject summary);
    void createNetworkFirmwareUpgradesRollbackSignal(OAICreateNetworkFirmwareUpgradesRollback_200_response summary);
    void createNetworkFirmwareUpgradesStagedEventSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void createNetworkFirmwareUpgradesStagedGroupSignal(OAIObject summary);
    void createNetworkFloorPlanSignal(OAIObject summary);
    void createNetworkGroupPolicySignal(OAIObject summary);
    void createNetworkMerakiAuthUserSignal(OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void createNetworkMqttBrokerSignal(OAIObject summary);
    void createNetworkPiiRequestSignal(OAIObject summary);
    void createNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void createNetworkSmBypassActivationLockAttemptSignal(OAIObject summary);
    void createNetworkSmTargetGroupSignal(OAIObject summary);
    void createNetworkSwitchAccessPolicySignal(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignal(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void createNetworkSwitchLinkAggregationSignal(OAIObject summary);
    void createNetworkSwitchPortScheduleSignal(OAIObject summary);
    void createNetworkSwitchQosRuleSignal(OAIObject summary);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void createNetworkSwitchStackSignal(OAIObject summary);
    void createNetworkWebhooksHttpServerSignal(OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void createNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void createNetworkWebhooksWebhookTestSignal(OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void createNetworkWirelessRfProfileSignal(OAICreateNetworkWirelessRfProfile_201_response summary);
    void createNetworkWirelessSsidIdentityPskSignal(OAIObject summary);
    void createOrganizationActionBatchSignal(OAICreateOrganizationActionBatch_201_response summary);
    void createOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void createOrganizationAdminSignal(OAIObject summary);
    void createOrganizationAlertsProfileSignal(OAIObject summary);
    void createOrganizationBrandingPolicySignal(OAICreateOrganizationBrandingPolicy_201_response summary);
    void createOrganizationCameraCustomAnalyticsArtifactSignal(OAIObject summary);
    void createOrganizationConfigTemplateSignal(OAIObject summary);
    void createOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void createOrganizationInsightMonitoredMediaServerSignal(OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignal(OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignal(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignal(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary);
    void createOrganizationNetworkSignal(OAIGetNetwork_200_response summary);
    void createOrganizationPolicyObjectSignal(OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void createOrganizationSamlIdpSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void createOrganizationSamlRoleSignal(OAIObject summary);
    void createOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void deferNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void deleteDeviceSwitchRoutingInterfaceSignal();
    void deleteDeviceSwitchRoutingStaticRouteSignal();
    void deleteNetworkAppliancePrefixesDelegatedStaticSignal();
    void deleteNetworkApplianceStaticRouteSignal();
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignal();
    void deleteNetworkApplianceVlanSignal();
    void deleteNetworkCameraQualityRetentionProfileSignal();
    void deleteNetworkCameraWirelessProfileSignal();
    void deleteNetworkFirmwareUpgradesStagedGroupSignal();
    void deleteNetworkFloorPlanSignal();
    void deleteNetworkGroupPolicySignal();
    void deleteNetworkMerakiAuthUserSignal();
    void deleteNetworkMqttBrokerSignal();
    void deleteNetworkPiiRequestSignal();
    void deleteNetworkSensorAlertsProfileSignal();
    void deleteNetworkSmTargetGroupSignal();
    void deleteNetworkSmUserAccessDeviceSignal();
    void deleteNetworkSwitchAccessPolicySignal();
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignal();
    void deleteNetworkSwitchLinkAggregationSignal();
    void deleteNetworkSwitchPortScheduleSignal();
    void deleteNetworkSwitchQosRuleSignal();
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignal();
    void deleteNetworkSwitchStackRoutingInterfaceSignal();
    void deleteNetworkSwitchStackRoutingStaticRouteSignal();
    void deleteNetworkSwitchStackSignal();
    void deleteNetworkWebhooksHttpServerSignal();
    void deleteNetworkWebhooksPayloadTemplateSignal();
    void deleteNetworkWirelessRfProfileSignal();
    void deleteNetworkWirelessSsidIdentityPskSignal();
    void deleteNetworkSignal();
    void deleteOrganizationActionBatchSignal();
    void deleteOrganizationAdaptivePolicyAclSignal();
    void deleteOrganizationAdaptivePolicyGroupSignal();
    void deleteOrganizationAdaptivePolicyPolicySignal();
    void deleteOrganizationAdminSignal();
    void deleteOrganizationAlertsProfileSignal();
    void deleteOrganizationBrandingPolicySignal();
    void deleteOrganizationCameraCustomAnalyticsArtifactSignal();
    void deleteOrganizationConfigTemplateSignal();
    void deleteOrganizationEarlyAccessFeaturesOptInSignal();
    void deleteOrganizationInsightMonitoredMediaServerSignal();
    void deleteOrganizationPolicyObjectSignal();
    void deleteOrganizationPolicyObjectsGroupSignal();
    void deleteOrganizationSamlIdpSignal();
    void deleteOrganizationSamlRoleSignal();
    void deleteOrganizationUserSignal();
    void deleteOrganizationSignal();
    void getDeviceApplianceUplinksSettingsSignal(OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void getDeviceCameraCustomAnalyticsSignal(OAIObject summary);
    void getDeviceCameraQualityAndRetentionSignal(OAIObject summary);
    void getDeviceCameraSenseObjectDetectionModelsSignal(QList<OAIObject> summary);
    void getDeviceCameraSenseSignal(OAIObject summary);
    void getDeviceCameraVideoLinkSignal(OAIObject summary);
    void getDeviceCameraVideoSettingsSignal(OAIObject summary);
    void getDeviceCameraWirelessProfilesSignal(OAIObject summary);
    void getDeviceCellularGatewayLanSignal(OAIObject summary);
    void getDeviceCellularGatewayPortForwardingRulesSignal(OAIObject summary);
    void getDeviceCellularSimsSignal(OAIObject summary);
    void getDeviceManagementInterfaceSignal(OAIObject summary);
    void getDeviceSensorRelationshipsSignal(QList<OAIGetDeviceSensorRelationships_200_response_inner> summary);
    void getDeviceSwitchPortSignal(OAIGetDeviceSwitchPorts_200_response_inner summary);
    void getDeviceSwitchPortsSignal(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary);
    void getDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void getDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void getDeviceSwitchRoutingInterfacesSignal(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary);
    void getDeviceSwitchRoutingStaticRouteSignal(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getDeviceSwitchWarmSpareSignal(OAIObject summary);
    void getDeviceWirelessBluetoothSettingsSignal(OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void getDeviceWirelessRadioSettingsSignal(OAIObject summary);
    void getDeviceSignal(OAIObject summary);
    void getNetworkAlertsSettingsSignal(OAIObject summary);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void getNetworkApplianceContentFilteringCategoriesSignal(OAIObject summary);
    void getNetworkApplianceContentFilteringSignal(OAIObject summary);
    void getNetworkApplianceFirewallCellularFirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServiceSignal(OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServicesSignal(QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignal(QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundFirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallOneToManyNatRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallOneToOneNatRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallPortForwardingRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void getNetworkAppliancePortSignal(OAIGetNetworkAppliancePorts_200_response_inner summary);
    void getNetworkAppliancePortsSignal(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary);
    void getNetworkAppliancePrefixesDelegatedStaticSignal(OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary);
    void getNetworkAppliancePrefixesDelegatedStaticsSignal(QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary);
    void getNetworkApplianceSecurityIntrusionSignal(OAIObject summary);
    void getNetworkApplianceSecurityMalwareSignal(OAIObject summary);
    void getNetworkApplianceSettingsSignal(OAIGetNetworkApplianceSettings_200_response summary);
    void getNetworkApplianceSingleLanSignal(OAIGetNetworkApplianceSingleLan_200_response summary);
    void getNetworkApplianceSsidSignal(OAIGetNetworkApplianceSsids_200_response_inner summary);
    void getNetworkApplianceSsidsSignal(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary);
    void getNetworkApplianceStaticRouteSignal(OAIObject summary);
    void getNetworkApplianceStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignal(OAIObject summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignal(QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingRulesSignal(OAIObject summary);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignal(OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignal(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void getNetworkApplianceTrafficShapingSignal(OAIObject summary);
    void getNetworkApplianceVlanSignal(OAIGetNetworkApplianceVlans_200_response_inner summary);
    void getNetworkApplianceVlansSettingsSignal(OAIObject summary);
    void getNetworkApplianceVlansSignal(QList<OAIGetNetworkApplianceVlans_200_response_inner> summary);
    void getNetworkApplianceVpnBgpSignal(OAIObject summary);
    void getNetworkApplianceVpnSiteToSiteVpnSignal(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void getNetworkApplianceWarmSpareSignal(OAIObject summary);
    void getNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void getNetworkCameraQualityRetentionProfilesSignal(QList<OAIObject> summary);
    void getNetworkCameraSchedulesSignal(QList<OAIObject> summary);
    void getNetworkCameraWirelessProfileSignal(OAIObject summary);
    void getNetworkCameraWirelessProfilesSignal(QList<OAIObject> summary);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void getNetworkCellularGatewayDhcpSignal(OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void getNetworkCellularGatewaySubnetPoolSignal(OAIObject summary);
    void getNetworkCellularGatewayUplinkSignal(OAIObject summary);
    void getNetworkClientPolicySignal(OAIObject summary);
    void getNetworkClientSplashAuthorizationStatusSignal(OAIObject summary);
    void getNetworkDevicesSignal(QList<OAIObject> summary);
    void getNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getNetworkFirmwareUpgradesStagedGroupSignal(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary);
    void getNetworkFirmwareUpgradesStagedGroupsSignal(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary);
    void getNetworkFirmwareUpgradesStagedStagesSignal(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void getNetworkFirmwareUpgradesSignal(OAIGetNetworkFirmwareUpgrades_200_response summary);
    void getNetworkFloorPlanSignal(OAIObject summary);
    void getNetworkFloorPlansSignal(QList<OAIObject> summary);
    void getNetworkGroupPoliciesSignal(QList<OAIObject> summary);
    void getNetworkGroupPolicySignal(OAIObject summary);
    void getNetworkHealthAlertsSignal(QList<OAIGetNetworkHealthAlerts_200_response_inner> summary);
    void getNetworkMerakiAuthUserSignal(OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void getNetworkMerakiAuthUsersSignal(QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary);
    void getNetworkMqttBrokerSignal(OAIObject summary);
    void getNetworkMqttBrokersSignal(QList<OAIObject> summary);
    void getNetworkNetflowSignal(OAIObject summary);
    void getNetworkPiiPiiKeysSignal(OAIObject summary);
    void getNetworkPiiRequestSignal(OAIObject summary);
    void getNetworkPiiRequestsSignal(QList<OAIObject> summary);
    void getNetworkPiiSmDevicesForKeySignal(OAIObject summary);
    void getNetworkPiiSmOwnersForKeySignal(OAIObject summary);
    void getNetworkPoliciesByClientSignal(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary);
    void getNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void getNetworkSensorAlertsProfilesSignal(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary);
    void getNetworkSensorRelationshipsSignal(QList<OAIGetNetworkSensorRelationships_200_response_inner> summary);
    void getNetworkSettingsSignal(OAIGetNetworkSettings_200_response summary);
    void getNetworkSmBypassActivationLockAttemptSignal(OAIObject summary);
    void getNetworkSmDeviceCertsSignal(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary);
    void getNetworkSmDeviceDeviceProfilesSignal(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmDeviceNetworkAdaptersSignal(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary);
    void getNetworkSmDeviceRestrictionsSignal(QList<OAIObject> summary);
    void getNetworkSmDeviceSecurityCentersSignal(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary);
    void getNetworkSmDeviceSoftwaresSignal(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmDeviceWlanListsSignal(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary);
    void getNetworkSmDevicesSignal(QList<OAIGetNetworkSmDevices_200_response_inner> summary);
    void getNetworkSmProfilesSignal(QList<OAIGetNetworkSmProfiles_200_response_inner> summary);
    void getNetworkSmTargetGroupSignal(OAIObject summary);
    void getNetworkSmTargetGroupsSignal(QList<OAIObject> summary);
    void getNetworkSmTrustedAccessConfigsSignal(QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary);
    void getNetworkSmUserAccessDevicesSignal(QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary);
    void getNetworkSmUserDeviceProfilesSignal(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmUserSoftwaresSignal(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmUsersSignal(QList<OAIGetNetworkSmUsers_200_response_inner> summary);
    void getNetworkSnmpSignal(OAIObject summary);
    void getNetworkSwitchAccessControlListsSignal(OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void getNetworkSwitchAccessPoliciesSignal(QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary);
    void getNetworkSwitchAccessPolicySignal(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void getNetworkSwitchAlternateManagementInterfaceSignal(OAIObject summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignal(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignal(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary);
    void getNetworkSwitchDhcpServerPolicySignal(OAIObject summary);
    void getNetworkSwitchDhcpV4ServersSeenSignal(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary);
    void getNetworkSwitchDscpToCosMappingsSignal(OAIObject summary);
    void getNetworkSwitchLinkAggregationsSignal(QList<OAIObject> summary);
    void getNetworkSwitchMtuSignal(OAIGetNetworkSwitchMtu_200_response summary);
    void getNetworkSwitchPortSchedulesSignal(QList<OAIObject> summary);
    void getNetworkSwitchQosRuleSignal(OAIObject summary);
    void getNetworkSwitchQosRulesOrderSignal(OAIObject summary);
    void getNetworkSwitchQosRulesSignal(QList<OAIObject> summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignal(QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void getNetworkSwitchRoutingOspfSignal(OAIObject summary);
    void getNetworkSwitchSettingsSignal(OAIGetNetworkSwitchSettings_200_response summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackSignal(OAIGetNetworkSwitchStack_200_response summary);
    void getNetworkSwitchStacksSignal(QList<OAIObject> summary);
    void getNetworkSwitchStormControlSignal(OAIGetNetworkSwitchStormControl_200_response summary);
    void getNetworkSwitchStpSignal(OAIObject summary);
    void getNetworkSyslogServersSignal(OAIGetNetworkSyslogServers_200_response summary);
    void getNetworkTrafficAnalysisSignal(OAIObject summary);
    void getNetworkTrafficShapingApplicationCategoriesSignal(OAIObject summary);
    void getNetworkTrafficShapingDscpTaggingOptionsSignal(QList<OAIObject> summary);
    void getNetworkWebhooksHttpServerSignal(OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void getNetworkWebhooksHttpServersSignal(QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary);
    void getNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void getNetworkWebhooksPayloadTemplatesSignal(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary);
    void getNetworkWebhooksWebhookTestSignal(OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void getNetworkWirelessAlternateManagementInterfaceSignal(OAIObject summary);
    void getNetworkWirelessBillingSignal(OAIObject summary);
    void getNetworkWirelessBluetoothSettingsSignal(OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void getNetworkWirelessRfProfileSignal(OAIObject summary);
    void getNetworkWirelessRfProfilesSignal(QList<OAIObject> summary);
    void getNetworkWirelessSettingsSignal(OAIGetNetworkWirelessSettings_200_response summary);
    void getNetworkWirelessSsidBonjourForwardingSignal(OAIObject summary);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignal(OAIObject summary);
    void getNetworkWirelessSsidEapOverrideSignal(OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidHotspot20Signal(OAIObject summary);
    void getNetworkWirelessSsidIdentityPskSignal(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary);
    void getNetworkWirelessSsidIdentityPsksSignal(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary);
    void getNetworkWirelessSsidSchedulesSignal(OAIObject summary);
    void getNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getNetworkWirelessSsidTrafficShapingRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidVpnSignal(OAIObject summary);
    void getNetworkWirelessSsidSignal(OAIObject summary);
    void getNetworkWirelessSsidsSignal(QList<OAIObject> summary);
    void getNetworkSignal(OAIGetNetwork_200_response summary);
    void getOrganizationActionBatchSignal(OAICreateOrganizationActionBatch_201_response summary);
    void getOrganizationActionBatchesSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyAclsSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPoliciesSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void getOrganizationAdaptivePolicySettingsSignal(OAIObject summary);
    void getOrganizationAdminsSignal(QList<OAIObject> summary);
    void getOrganizationAlertsProfilesSignal(QList<OAIObject> summary);
    void getOrganizationApplianceSecurityIntrusionSignal(OAIObject summary);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignal(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void getOrganizationApplianceVpnVpnFirewallRulesSignal(OAIObject summary);
    void getOrganizationBrandingPoliciesPrioritiesSignal(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void getOrganizationBrandingPoliciesSignal(QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary);
    void getOrganizationBrandingPolicySignal(OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void getOrganizationCameraCustomAnalyticsArtifactSignal(OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactsSignal(QList<OAIObject> summary);
    void getOrganizationCameraOnboardingStatusesSignal(QList<OAIObject> summary);
    void getOrganizationClientsSearchSignal(OAIObject summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignal(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilesSignal(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary);
    void getOrganizationConfigTemplateSignal(OAIObject summary);
    void getOrganizationConfigTemplatesSignal(QList<OAIObject> summary);
    void getOrganizationDevicesSignal(QList<OAIGetOrganizationDevices_200_response_inner> summary);
    void getOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void getOrganizationEarlyAccessFeaturesOptInsSignal(QList<OAIObject> summary);
    void getOrganizationEarlyAccessFeaturesSignal(QList<OAIObject> summary);
    void getOrganizationFirmwareUpgradesByDeviceSignal(QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary);
    void getOrganizationFirmwareUpgradesSignal(QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary);
    void getOrganizationInsightApplicationsSignal(QList<OAIGetOrganizationInsightApplications_200_response_inner> summary);
    void getOrganizationInsightMonitoredMediaServerSignal(OAIObject summary);
    void getOrganizationInsightMonitoredMediaServersSignal(QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary);
    void getOrganizationInventoryDeviceSignal(OAIGetOrganizationInventoryDevices_200_response_inner summary);
    void getOrganizationInventoryDevicesSignal(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignal(QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignal(QList<OAIGetNetwork_200_response> summary);
    void getOrganizationLicenseSignal(OAIGetOrganizationLicenses_200_response_inner summary);
    void getOrganizationLicensesSignal(QList<OAIGetOrganizationLicenses_200_response_inner> summary);
    void getOrganizationLicensingCotermLicensesSignal(QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner> summary);
    void getOrganizationLoginSecuritySignal(OAIGetOrganizationLoginSecurity_200_response summary);
    void getOrganizationNetworksSignal(QList<OAIGetNetwork_200_response> summary);
    void getOrganizationPolicyObjectSignal(OAIObject summary);
    void getOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignal(QList<OAIObject> summary);
    void getOrganizationPolicyObjectsSignal(QList<OAIObject> summary);
    void getOrganizationSamlIdpSignal(OAIGetOrganizationSamlIdps_200_response_inner summary);
    void getOrganizationSamlIdpsSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void getOrganizationSamlRoleSignal(OAIObject summary);
    void getOrganizationSamlRolesSignal(QList<OAIObject> summary);
    void getOrganizationSamlSignal(OAIGetOrganizationSaml_200_response summary);
    void getOrganizationSmApnsCertSignal(OAIGetOrganizationSmApnsCert_200_response summary);
    void getOrganizationSmVppAccountSignal(OAIGetOrganizationSmVppAccounts_200_response_inner summary);
    void getOrganizationSmVppAccountsSignal(QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary);
    void getOrganizationSnmpSignal(OAIObject summary);
    void getOrganizationSwitchPortsBySwitchSignal(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignal(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void getOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void getOrganizationsSignal(QList<OAIGetOrganizations_200_response_inner> summary);
    void lockNetworkSmDevicesSignal(OAICheckinNetworkSmDevices_200_response summary);
    void modifyNetworkSmDevicesTagsSignal(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary);
    void moveNetworkSmDevicesSignal(OAIMoveNetworkSmDevices_200_response summary);
    void moveOrganizationLicensesSeatsSignal(OAIMoveOrganizationLicensesSeats_200_response summary);
    void moveOrganizationLicensesSignal(OAIMoveOrganizationLicenses_200_response summary);
    void moveOrganizationLicensingCotermLicensesSignal(OAIMoveOrganizationLicensingCotermLicenses_200_response summary);
    void provisionNetworkClientsSignal(OAIObject summary);
    void refreshNetworkSmDeviceDetailsSignal();
    void releaseFromOrganizationInventorySignal(OAIObject summary);
    void removeNetworkDevicesSignal();
    void removeNetworkSwitchStackSignal(OAIObject summary);
    void renewOrganizationLicensesSeatsSignal(OAIAssignOrganizationLicensesSeats_200_response summary);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void splitNetworkSignal(OAISplitNetwork_200_response summary);
    void swapNetworkApplianceWarmSpareSignal(OAIObject summary);
    void unbindNetworkSignal(OAIGetNetwork_200_response summary);
    void unenrollNetworkSmDeviceSignal(OAIObject summary);
    void updateDeviceApplianceUplinksSettingsSignal(OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void updateDeviceCameraCustomAnalyticsSignal(OAIObject summary);
    void updateDeviceCameraQualityAndRetentionSignal(OAIObject summary);
    void updateDeviceCameraSenseSignal(OAIObject summary);
    void updateDeviceCameraVideoSettingsSignal(OAIObject summary);
    void updateDeviceCameraWirelessProfilesSignal(OAIObject summary);
    void updateDeviceCellularGatewayLanSignal(OAIObject summary);
    void updateDeviceCellularGatewayPortForwardingRulesSignal(OAIObject summary);
    void updateDeviceCellularSimsSignal(OAIObject summary);
    void updateDeviceManagementInterfaceSignal(OAIObject summary);
    void updateDeviceSensorRelationshipsSignal(OAIGetDeviceSensorRelationships_200_response_inner summary);
    void updateDeviceSwitchPortSignal(OAIGetDeviceSwitchPorts_200_response_inner summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void updateDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void updateDeviceSwitchWarmSpareSignal(OAIObject summary);
    void updateDeviceWirelessBluetoothSettingsSignal(OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void updateDeviceWirelessRadioSettingsSignal(OAIObject summary);
    void updateDeviceSignal(OAIObject summary);
    void updateNetworkAlertsSettingsSignal(OAIObject summary);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void updateNetworkApplianceContentFilteringSignal(OAIObject summary);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallFirewalledServiceSignal(OAIObject summary);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignal(QList<OAIObject> summary);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallPortForwardingRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void updateNetworkAppliancePortSignal(OAIGetNetworkAppliancePorts_200_response_inner summary);
    void updateNetworkAppliancePrefixesDelegatedStaticSignal(OAIObject summary);
    void updateNetworkApplianceSecurityIntrusionSignal(OAIObject summary);
    void updateNetworkApplianceSecurityMalwareSignal(OAIObject summary);
    void updateNetworkApplianceSettingsSignal(OAIGetNetworkApplianceSettings_200_response summary);
    void updateNetworkApplianceSingleLanSignal(OAIGetNetworkApplianceSingleLan_200_response summary);
    void updateNetworkApplianceSsidSignal(OAIGetNetworkApplianceSsids_200_response_inner summary);
    void updateNetworkApplianceStaticRouteSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingRulesSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignal(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void updateNetworkApplianceTrafficShapingSignal(OAIObject summary);
    void updateNetworkApplianceVlanSignal(OAIGetNetworkApplianceVlans_200_response_inner summary);
    void updateNetworkApplianceVlansSettingsSignal(OAIObject summary);
    void updateNetworkApplianceVpnBgpSignal(OAIObject summary);
    void updateNetworkApplianceVpnSiteToSiteVpnSignal(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void updateNetworkApplianceWarmSpareSignal(OAIObject summary);
    void updateNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void updateNetworkCameraWirelessProfileSignal(OAIObject summary);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void updateNetworkCellularGatewayDhcpSignal(OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void updateNetworkCellularGatewaySubnetPoolSignal(OAIObject summary);
    void updateNetworkCellularGatewayUplinkSignal(OAIObject summary);
    void updateNetworkClientPolicySignal(OAIObject summary);
    void updateNetworkClientSplashAuthorizationStatusSignal(OAIObject summary);
    void updateNetworkFirmwareUpgradesStagedEventsSignal(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void updateNetworkFirmwareUpgradesStagedGroupSignal(OAIObject summary);
    void updateNetworkFirmwareUpgradesStagedStagesSignal(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void updateNetworkFirmwareUpgradesSignal(OAIGetNetworkFirmwareUpgrades_200_response summary);
    void updateNetworkFloorPlanSignal(OAIObject summary);
    void updateNetworkGroupPolicySignal(OAIObject summary);
    void updateNetworkMerakiAuthUserSignal(OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void updateNetworkMqttBrokerSignal(OAIObject summary);
    void updateNetworkNetflowSignal(OAIObject summary);
    void updateNetworkSensorAlertsProfileSignal(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void updateNetworkSettingsSignal(OAIGetNetworkSettings_200_response summary);
    void updateNetworkSmDevicesFieldsSignal(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary);
    void updateNetworkSmTargetGroupSignal(OAIObject summary);
    void updateNetworkSnmpSignal(OAIObject summary);
    void updateNetworkSwitchAccessControlListsSignal(OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void updateNetworkSwitchAccessPolicySignal(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void updateNetworkSwitchAlternateManagementInterfaceSignal(OAIObject summary);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignal(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void updateNetworkSwitchDhcpServerPolicySignal(OAIObject summary);
    void updateNetworkSwitchDscpToCosMappingsSignal(OAIObject summary);
    void updateNetworkSwitchLinkAggregationSignal(OAIObject summary);
    void updateNetworkSwitchMtuSignal(OAIObject summary);
    void updateNetworkSwitchPortScheduleSignal(OAIObject summary);
    void updateNetworkSwitchQosRuleSignal(OAIObject summary);
    void updateNetworkSwitchQosRulesOrderSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void updateNetworkSwitchRoutingOspfSignal(OAIObject summary);
    void updateNetworkSwitchSettingsSignal(OAIGetNetworkSwitchSettings_200_response summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void updateNetworkSwitchStormControlSignal(OAIObject summary);
    void updateNetworkSwitchStpSignal(OAIObject summary);
    void updateNetworkSyslogServersSignal(OAIGetNetworkSyslogServers_200_response summary);
    void updateNetworkTrafficAnalysisSignal(OAIObject summary);
    void updateNetworkWebhooksHttpServerSignal(OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void updateNetworkWebhooksPayloadTemplateSignal(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void updateNetworkWirelessAlternateManagementInterfaceSignal(OAIObject summary);
    void updateNetworkWirelessBillingSignal(OAIObject summary);
    void updateNetworkWirelessBluetoothSettingsSignal(OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void updateNetworkWirelessRfProfileSignal(OAICreateNetworkWirelessRfProfile_201_response summary);
    void updateNetworkWirelessSettingsSignal(OAIGetNetworkWirelessSettings_200_response summary);
    void updateNetworkWirelessSsidBonjourForwardingSignal(OAIObject summary);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignal(OAIObject summary);
    void updateNetworkWirelessSsidEapOverrideSignal(OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidHotspot20Signal(OAIObject summary);
    void updateNetworkWirelessSsidIdentityPskSignal(OAIObject summary);
    void updateNetworkWirelessSsidSchedulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateNetworkWirelessSsidTrafficShapingRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidVpnSignal(OAIObject summary);
    void updateNetworkWirelessSsidSignal(OAIObject summary);
    void updateNetworkSignal(OAIGetNetwork_200_response summary);
    void updateOrganizationActionBatchSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void updateOrganizationAdaptivePolicySettingsSignal(OAIObject summary);
    void updateOrganizationAdminSignal(OAIObject summary);
    void updateOrganizationAlertsProfileSignal(OAIObject summary);
    void updateOrganizationApplianceSecurityIntrusionSignal(OAIObject summary);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignal(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignal(OAIObject summary);
    void updateOrganizationBrandingPoliciesPrioritiesSignal(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void updateOrganizationBrandingPolicySignal(OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void updateOrganizationCameraOnboardingStatusesSignal(OAIObject summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void updateOrganizationConfigTemplateSignal(OAIObject summary);
    void updateOrganizationEarlyAccessFeaturesOptInSignal(OAIObject summary);
    void updateOrganizationInsightMonitoredMediaServerSignal(OAIObject summary);
    void updateOrganizationLicenseSignal(OAIGetOrganizationLicenses_200_response_inner summary);
    void updateOrganizationLoginSecuritySignal(OAIGetOrganizationLoginSecurity_200_response summary);
    void updateOrganizationPolicyObjectSignal(OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignal(OAIObject summary);
    void updateOrganizationSamlIdpSignal(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void updateOrganizationSamlRoleSignal(OAIUpdateOrganizationSamlRole_200_response summary);
    void updateOrganizationSamlSignal(OAIGetOrganizationSaml_200_response summary);
    void updateOrganizationSnmpSignal(OAIObject summary);
    void updateOrganizationSignal(OAIGetOrganizations_200_response_inner summary);
    void vmxNetworkDevicesClaimSignal(OAIObject summary);
    void wipeNetworkSmDevicesSignal(OAIWipeNetworkSmDevices_200_response summary);


    void addNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void assignOrganizationLicensesSeatsSignalFull(OAIHttpRequestWorker *worker, OAIAssignOrganizationLicensesSeats_200_response summary);
    void bindNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void checkinNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAICheckinNetworkSmDevices_200_response summary);
    void claimIntoOrganizationInventorySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void claimIntoOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void claimNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void cloneOrganizationSwitchDevicesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloneOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void combineOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, OAICombineOrganizationNetworks_200_response summary);
    void createDeviceApplianceVmxAuthenticationTokenSignalFull(OAIHttpRequestWorker *worker, OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary);
    void createDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void createDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkApplianceVlan_201_response summary);
    void createNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkFirmwareUpgradesRollbackSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkFirmwareUpgradesRollback_200_response summary);
    void createNetworkFirmwareUpgradesStagedEventSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void createNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void createNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void createNetworkSmBypassActivationLockAttemptSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void createNetworkSwitchLinkAggregationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchPortScheduleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void createNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void createNetworkWebhooksWebhookTestSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void createNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWirelessRfProfile_201_response summary);
    void createNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker, OAICreateOrganizationActionBatch_201_response summary);
    void createOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdminSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker, OAICreateOrganizationBrandingPolicy_201_response summary);
    void createOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary);
    void createOrganizationNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void createOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void createOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void deferNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void deleteDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSmUserAccessDeviceSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchLinkAggregationSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchPortScheduleSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdminSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceApplianceUplinksSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void getDeviceCameraCustomAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraQualityAndRetentionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraSenseObjectDetectionModelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceCameraSenseSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraVideoLinkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraVideoSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCellularGatewayLanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCellularGatewayPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceCellularSimsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceSensorRelationshipsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSensorRelationships_200_response_inner> summary);
    void getDeviceSwitchPortSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchPorts_200_response_inner summary);
    void getDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPorts_200_response_inner> summary);
    void getDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void getDeviceSwitchRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary);
    void getDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void getDeviceWirelessRadioSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkAlertsSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceContentFilteringCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceContentFilteringSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkAppliancePortSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePorts_200_response_inner summary);
    void getNetworkAppliancePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAppliancePorts_200_response_inner> summary);
    void getNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary);
    void getNetworkAppliancePrefixesDelegatedStaticsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary);
    void getNetworkApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceSecurityMalwareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSettings_200_response summary);
    void getNetworkApplianceSingleLanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSingleLan_200_response summary);
    void getNetworkApplianceSsidSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSsids_200_response_inner summary);
    void getNetworkApplianceSsidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkApplianceSsids_200_response_inner> summary);
    void getNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void getNetworkApplianceTrafficShapingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVlans_200_response_inner summary);
    void getNetworkApplianceVlansSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceVlansSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkApplianceVlans_200_response_inner> summary);
    void getNetworkApplianceVpnBgpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceVpnSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void getNetworkApplianceWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraQualityRetentionProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkCameraSchedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCellularGatewayDhcpSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void getNetworkCellularGatewaySubnetPoolSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCellularGatewayUplinkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientSplashAuthorizationStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void getNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary);
    void getNetworkFirmwareUpgradesStagedGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary);
    void getNetworkFirmwareUpgradesStagedStagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void getNetworkFirmwareUpgradesSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgrades_200_response summary);
    void getNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkFloorPlansSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkHealthAlertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkHealthAlerts_200_response_inner> summary);
    void getNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void getNetworkMerakiAuthUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary);
    void getNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkMqttBrokersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkNetflowSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiPiiKeysSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkPiiSmDevicesForKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiSmOwnersForKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPoliciesByClientSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary);
    void getNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void getNetworkSensorAlertsProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary);
    void getNetworkSensorRelationshipsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSensorRelationships_200_response_inner> summary);
    void getNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSettings_200_response summary);
    void getNetworkSmBypassActivationLockAttemptSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmDeviceCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary);
    void getNetworkSmDeviceDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmDeviceNetworkAdaptersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary);
    void getNetworkSmDeviceRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDeviceSecurityCentersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary);
    void getNetworkSmDeviceSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmDeviceWlanListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary);
    void getNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDevices_200_response_inner> summary);
    void getNetworkSmProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmProfiles_200_response_inner> summary);
    void getNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmTargetGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmTrustedAccessConfigsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary);
    void getNetworkSmUserAccessDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary);
    void getNetworkSmUserDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary);
    void getNetworkSmUserSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary);
    void getNetworkSmUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSmUsers_200_response_inner> summary);
    void getNetworkSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchAccessControlListsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void getNetworkSwitchAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary);
    void getNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void getNetworkSwitchAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary);
    void getNetworkSwitchDhcpServerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchDhcpV4ServersSeenSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary);
    void getNetworkSwitchDscpToCosMappingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchLinkAggregationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchMtuSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchMtu_200_response summary);
    void getNetworkSwitchPortSchedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchQosRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalFull(OAIHttpRequestWorker *worker, QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingOspfSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchSettings_200_response summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchStack_200_response summary);
    void getNetworkSwitchStacksSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStormControlSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchStormControl_200_response summary);
    void getNetworkSwitchStpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSyslogServersSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSyslogServers_200_response summary);
    void getNetworkTrafficAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficShapingApplicationCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficShapingDscpTaggingOptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void getNetworkWebhooksHttpServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary);
    void getNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void getNetworkWebhooksPayloadTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary);
    void getNetworkWebhooksWebhookTestSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWebhooksWebhookTest_201_response summary);
    void getNetworkWirelessAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessBillingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void getNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessRfProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkWirelessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSettings_200_response summary);
    void getNetworkWirelessSsidBonjourForwardingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidEapOverrideSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidHotspot20SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary);
    void getNetworkWirelessSsidIdentityPsksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary);
    void getNetworkWirelessSsidSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getNetworkWirelessSsidTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void getOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker, OAICreateOrganizationActionBatch_201_response summary);
    void getOrganizationActionBatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyAclsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdminsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAlertsProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationBrandingPoliciesPrioritiesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void getOrganizationBrandingPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary);
    void getOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void getOrganizationCameraCustomAnalyticsArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationCameraOnboardingStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationClientsSearchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary);
    void getOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationConfigTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationDevices_200_response_inner> summary);
    void getOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationEarlyAccessFeaturesOptInsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationEarlyAccessFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationFirmwareUpgradesByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary);
    void getOrganizationFirmwareUpgradesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary);
    void getOrganizationInsightApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInsightApplications_200_response_inner> summary);
    void getOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationInsightMonitoredMediaServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary);
    void getOrganizationInventoryDeviceSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationInventoryDevices_200_response_inner summary);
    void getOrganizationInventoryDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetwork_200_response> summary);
    void getOrganizationLicenseSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLicenses_200_response_inner summary);
    void getOrganizationLicensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationLicenses_200_response_inner> summary);
    void getOrganizationLicensingCotermLicensesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner> summary);
    void getOrganizationLoginSecuritySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLoginSecurity_200_response summary);
    void getOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetwork_200_response> summary);
    void getOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationPolicyObjectsGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationPolicyObjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSamlIdps_200_response_inner summary);
    void getOrganizationSamlIdpsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void getOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSamlRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationSamlSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSaml_200_response summary);
    void getOrganizationSmApnsCertSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSmApnsCert_200_response summary);
    void getOrganizationSmVppAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSmVppAccounts_200_response_inner summary);
    void getOrganizationSmVppAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary);
    void getOrganizationSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSwitchPortsBySwitchSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary);
    void getOrganizationWirelessDevicesEthernetStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary);
    void getOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void getOrganizationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizations_200_response_inner> summary);
    void lockNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAICheckinNetworkSmDevices_200_response summary);
    void modifyNetworkSmDevicesTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary);
    void moveNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIMoveNetworkSmDevices_200_response summary);
    void moveOrganizationLicensesSeatsSignalFull(OAIHttpRequestWorker *worker, OAIMoveOrganizationLicensesSeats_200_response summary);
    void moveOrganizationLicensesSignalFull(OAIHttpRequestWorker *worker, OAIMoveOrganizationLicenses_200_response summary);
    void moveOrganizationLicensingCotermLicensesSignalFull(OAIHttpRequestWorker *worker, OAIMoveOrganizationLicensingCotermLicenses_200_response summary);
    void provisionNetworkClientsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void refreshNetworkSmDeviceDetailsSignalFull(OAIHttpRequestWorker *worker);
    void releaseFromOrganizationInventorySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void removeNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void removeNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void renewOrganizationLicensesSeatsSignalFull(OAIHttpRequestWorker *worker, OAIAssignOrganizationLicensesSeats_200_response summary);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void splitNetworkSignalFull(OAIHttpRequestWorker *worker, OAISplitNetwork_200_response summary);
    void swapNetworkApplianceWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void unbindNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void unenrollNetworkSmDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceApplianceUplinksSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void updateDeviceCameraCustomAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraQualityAndRetentionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraSenseSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraVideoSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCellularGatewayLanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCellularGatewayPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceCellularSimsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSensorRelationshipsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSensorRelationships_200_response_inner summary);
    void updateDeviceSwitchPortSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchPorts_200_response_inner summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void updateDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void updateDeviceWirelessRadioSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkAlertsSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceContentFilteringSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallFirewalledServiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkAppliancePortSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePorts_200_response_inner summary);
    void updateNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSecurityMalwareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSettings_200_response summary);
    void updateNetworkApplianceSingleLanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSingleLan_200_response summary);
    void updateNetworkApplianceSsidSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSsids_200_response_inner summary);
    void updateNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void updateNetworkApplianceTrafficShapingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVlans_200_response_inner summary);
    void updateNetworkApplianceVlansSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVpnBgpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void updateNetworkApplianceWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCellularGatewayDhcpSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkCellularGatewayDhcp_200_response summary);
    void updateNetworkCellularGatewaySubnetPoolSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCellularGatewayUplinkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkClientPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkClientSplashAuthorizationStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkFirmwareUpgradesStagedEventsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary);
    void updateNetworkFirmwareUpgradesStagedGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkFirmwareUpgradesStagedStagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary);
    void updateNetworkFirmwareUpgradesSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkFirmwareUpgrades_200_response summary);
    void updateNetworkFloorPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkMerakiAuthUserSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkMerakiAuthUsers_200_response_inner summary);
    void updateNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkNetflowSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSensorAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSensorAlertsProfiles_200_response_inner summary);
    void updateNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSettings_200_response summary);
    void updateNetworkSmDevicesFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary);
    void updateNetworkSmTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchAccessControlListsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void updateNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void updateNetworkSwitchAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void updateNetworkSwitchDhcpServerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchDscpToCosMappingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchLinkAggregationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchMtuSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchPortScheduleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingOspfSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchSettings_200_response summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStormControlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSyslogServersSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSyslogServers_200_response summary);
    void updateNetworkTrafficAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWebhooksHttpServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksHttpServers_200_response_inner summary);
    void updateNetworkWebhooksPayloadTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary);
    void updateNetworkWirelessAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessBillingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void updateNetworkWirelessRfProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkWirelessRfProfile_201_response summary);
    void updateNetworkWirelessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSettings_200_response summary);
    void updateNetworkWirelessSsidBonjourForwardingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidEapOverrideSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidEapOverride_200_response summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidHotspot20SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidIdentityPskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGetNetwork_200_response summary);
    void updateOrganizationActionBatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdminSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAlertsProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationBrandingPoliciesPrioritiesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPoliciesPriorities_200_response summary);
    void updateOrganizationBrandingPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationBrandingPolicies_200_response_inner summary);
    void updateOrganizationCameraOnboardingStatusesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void updateOrganizationConfigTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationEarlyAccessFeaturesOptInSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationLicenseSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLicenses_200_response_inner summary);
    void updateOrganizationLoginSecuritySignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationLoginSecurity_200_response summary);
    void updateOrganizationPolicyObjectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationPolicyObjectsGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationSamlIdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSamlIdps_200_response_inner> summary);
    void updateOrganizationSamlRoleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrganizationSamlRole_200_response summary);
    void updateOrganizationSamlSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationSaml_200_response summary);
    void updateOrganizationSnmpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizations_200_response_inner summary);
    void vmxNetworkDevicesClaimSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void wipeNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIWipeNetworkSmDevices_200_response summary);

    Q_DECL_DEPRECATED_X("Use addNetworkSwitchStackSignalError() instead")
    void addNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignOrganizationLicensesSeatsSignalError() instead")
    void assignOrganizationLicensesSeatsSignalE(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignOrganizationLicensesSeatsSignalError(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bindNetworkSignalError() instead")
    void bindNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bindNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkinNetworkSmDevicesSignalError() instead")
    void checkinNetworkSmDevicesSignalE(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkinNetworkSmDevicesSignalError(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationInventorySignalError() instead")
    void claimIntoOrganizationInventorySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationInventorySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationSignalError() instead")
    void claimIntoOrganizationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalError() instead")
    void claimNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSwitchDevicesSignalError() instead")
    void cloneOrganizationSwitchDevicesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSwitchDevicesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSignalError() instead")
    void cloneOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalError() instead")
    void combineOrganizationNetworksSignalE(OAICombineOrganizationNetworks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalError(OAICombineOrganizationNetworks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceApplianceVmxAuthenticationTokenSignalError() instead")
    void createDeviceApplianceVmxAuthenticationTokenSignalE(OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceApplianceVmxAuthenticationTokenSignalError(OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingInterfaceSignalError() instead")
    void createDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalError() instead")
    void createDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void createNetworkAppliancePrefixesDelegatedStaticSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkAppliancePrefixesDelegatedStaticSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceStaticRouteSignalError() instead")
    void createNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceVlanSignalError() instead")
    void createNetworkApplianceVlanSignalE(OAICreateNetworkApplianceVlan_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceVlanSignalError(OAICreateNetworkApplianceVlan_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkCameraQualityRetentionProfileSignalError() instead")
    void createNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkCameraWirelessProfileSignalError() instead")
    void createNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesRollbackSignalError() instead")
    void createNetworkFirmwareUpgradesRollbackSignalE(OAICreateNetworkFirmwareUpgradesRollback_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesRollbackSignalError(OAICreateNetworkFirmwareUpgradesRollback_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedEventSignalError() instead")
    void createNetworkFirmwareUpgradesStagedEventSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedEventSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void createNetworkFirmwareUpgradesStagedGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFloorPlanSignalError() instead")
    void createNetworkFloorPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFloorPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupPolicySignalError() instead")
    void createNetworkGroupPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMerakiAuthUserSignalError() instead")
    void createNetworkMerakiAuthUserSignalE(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMerakiAuthUserSignalError(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMqttBrokerSignalError() instead")
    void createNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkPiiRequestSignalError() instead")
    void createNetworkPiiRequestSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkPiiRequestSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSensorAlertsProfileSignalError() instead")
    void createNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmBypassActivationLockAttemptSignalError() instead")
    void createNetworkSmBypassActivationLockAttemptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmBypassActivationLockAttemptSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmTargetGroupSignalError() instead")
    void createNetworkSmTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchAccessPolicySignalError() instead")
    void createNetworkSwitchAccessPolicySignalE(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchAccessPolicySignalError(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError() instead")
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalE(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchLinkAggregationSignalError() instead")
    void createNetworkSwitchLinkAggregationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchLinkAggregationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchPortScheduleSignalError() instead")
    void createNetworkSwitchPortScheduleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchPortScheduleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchQosRuleSignalError() instead")
    void createNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackSignalError() instead")
    void createNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksHttpServerSignalError() instead")
    void createNetworkWebhooksHttpServerSignalE(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksHttpServerSignalError(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksPayloadTemplateSignalError() instead")
    void createNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksWebhookTestSignalError() instead")
    void createNetworkWebhooksWebhookTestSignalE(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksWebhookTestSignalError(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWirelessRfProfileSignalError() instead")
    void createNetworkWirelessRfProfileSignalE(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessRfProfileSignalError(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWirelessSsidIdentityPskSignalError() instead")
    void createNetworkWirelessSsidIdentityPskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessSsidIdentityPskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationActionBatchSignalError() instead")
    void createOrganizationActionBatchSignalE(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationActionBatchSignalError(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyAclSignalError() instead")
    void createOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalError() instead")
    void createOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalError() instead")
    void createOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdminSignalError() instead")
    void createOrganizationAdminSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdminSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAlertsProfileSignalError() instead")
    void createOrganizationAlertsProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAlertsProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationBrandingPolicySignalError() instead")
    void createOrganizationBrandingPolicySignalE(OAICreateOrganizationBrandingPolicy_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationBrandingPolicySignalError(OAICreateOrganizationBrandingPolicy_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void createOrganizationCameraCustomAnalyticsArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationCameraCustomAnalyticsArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationConfigTemplateSignalError() instead")
    void createOrganizationConfigTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationConfigTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void createOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInsightMonitoredMediaServerSignalError() instead")
    void createOrganizationInsightMonitoredMediaServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInsightMonitoredMediaServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalError() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringImportSignalError() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalE(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalError(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringImport_201_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalError() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalE(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalError(QList<OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalError() instead")
    void createOrganizationNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectSignalError() instead")
    void createOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalError() instead")
    void createOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlIdpSignalError() instead")
    void createOrganizationSamlIdpSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlIdpSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlRoleSignalError() instead")
    void createOrganizationSamlRoleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlRoleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSignalError() instead")
    void createOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deferNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void deferNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deferNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingInterfaceSignalError() instead")
    void deleteDeviceSwitchRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalError() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceStaticRouteSignalError() instead")
    void deleteNetworkApplianceStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceVlanSignalError() instead")
    void deleteNetworkApplianceVlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceVlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraQualityRetentionProfileSignalError() instead")
    void deleteNetworkCameraQualityRetentionProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraQualityRetentionProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraWirelessProfileSignalError() instead")
    void deleteNetworkCameraWirelessProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraWirelessProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void deleteNetworkFirmwareUpgradesStagedGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFloorPlanSignalError() instead")
    void deleteNetworkFloorPlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFloorPlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPolicySignalError() instead")
    void deleteNetworkGroupPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMerakiAuthUserSignalError() instead")
    void deleteNetworkMerakiAuthUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMerakiAuthUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMqttBrokerSignalError() instead")
    void deleteNetworkMqttBrokerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMqttBrokerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkPiiRequestSignalError() instead")
    void deleteNetworkPiiRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkPiiRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSensorAlertsProfileSignalError() instead")
    void deleteNetworkSensorAlertsProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSensorAlertsProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmTargetGroupSignalError() instead")
    void deleteNetworkSmTargetGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmTargetGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmUserAccessDeviceSignalError() instead")
    void deleteNetworkSmUserAccessDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmUserAccessDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchAccessPolicySignalError() instead")
    void deleteNetworkSwitchAccessPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchAccessPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError() instead")
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchLinkAggregationSignalError() instead")
    void deleteNetworkSwitchLinkAggregationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchLinkAggregationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchPortScheduleSignalError() instead")
    void deleteNetworkSwitchPortScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchPortScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchQosRuleSignalError() instead")
    void deleteNetworkSwitchQosRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchQosRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackSignalError() instead")
    void deleteNetworkSwitchStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksHttpServerSignalError() instead")
    void deleteNetworkWebhooksHttpServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksHttpServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksPayloadTemplateSignalError() instead")
    void deleteNetworkWebhooksPayloadTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksPayloadTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessRfProfileSignalError() instead")
    void deleteNetworkWirelessRfProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessRfProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessSsidIdentityPskSignalError() instead")
    void deleteNetworkWirelessSsidIdentityPskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessSsidIdentityPskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalError() instead")
    void deleteNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationActionBatchSignalError() instead")
    void deleteOrganizationActionBatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationActionBatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyAclSignalError() instead")
    void deleteOrganizationAdaptivePolicyAclSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyAclSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalError() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalError() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdminSignalError() instead")
    void deleteOrganizationAdminSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdminSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAlertsProfileSignalError() instead")
    void deleteOrganizationAlertsProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAlertsProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationBrandingPolicySignalError() instead")
    void deleteOrganizationBrandingPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationBrandingPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationConfigTemplateSignalError() instead")
    void deleteOrganizationConfigTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationConfigTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void deleteOrganizationEarlyAccessFeaturesOptInSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationInsightMonitoredMediaServerSignalError() instead")
    void deleteOrganizationInsightMonitoredMediaServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationInsightMonitoredMediaServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectSignalError() instead")
    void deleteOrganizationPolicyObjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalError() instead")
    void deleteOrganizationPolicyObjectsGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlIdpSignalError() instead")
    void deleteOrganizationSamlIdpSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlIdpSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlRoleSignalError() instead")
    void deleteOrganizationSamlRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationUserSignalError() instead")
    void deleteOrganizationUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSignalError() instead")
    void deleteOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceUplinksSettingsSignalError() instead")
    void getDeviceApplianceUplinksSettingsSignalE(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceUplinksSettingsSignalError(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraCustomAnalyticsSignalError() instead")
    void getDeviceCameraCustomAnalyticsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraCustomAnalyticsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraQualityAndRetentionSignalError() instead")
    void getDeviceCameraQualityAndRetentionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraQualityAndRetentionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseObjectDetectionModelsSignalError() instead")
    void getDeviceCameraSenseObjectDetectionModelsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseObjectDetectionModelsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseSignalError() instead")
    void getDeviceCameraSenseSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoLinkSignalError() instead")
    void getDeviceCameraVideoLinkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoLinkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoSettingsSignalError() instead")
    void getDeviceCameraVideoSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraWirelessProfilesSignalError() instead")
    void getDeviceCameraWirelessProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraWirelessProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularGatewayLanSignalError() instead")
    void getDeviceCellularGatewayLanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularGatewayLanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularGatewayPortForwardingRulesSignalError() instead")
    void getDeviceCellularGatewayPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularGatewayPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularSimsSignalError() instead")
    void getDeviceCellularSimsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularSimsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceManagementInterfaceSignalError() instead")
    void getDeviceManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSensorRelationshipsSignalError() instead")
    void getDeviceSensorRelationshipsSignalE(QList<OAIGetDeviceSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSensorRelationshipsSignalError(QList<OAIGetDeviceSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortSignalError() instead")
    void getDeviceSwitchPortSignalE(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortSignalError(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsSignalError() instead")
    void getDeviceSwitchPortsSignalE(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsSignalError(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceSignalError() instead")
    void getDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfacesSignalError() instead")
    void getDeviceSwitchRoutingInterfacesSignalE(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfacesSignalError(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalError() instead")
    void getDeviceSwitchRoutingStaticRouteSignalE(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalError(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalError() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchWarmSpareSignalError() instead")
    void getDeviceSwitchWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessBluetoothSettingsSignalError() instead")
    void getDeviceWirelessBluetoothSettingsSignalE(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessBluetoothSettingsSignalError(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessRadioSettingsSignalError() instead")
    void getDeviceWirelessRadioSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessRadioSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSignalError() instead")
    void getDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsSettingsSignalError() instead")
    void getNetworkAlertsSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceConnectivityMonitoringDestinationsSignalError() instead")
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringCategoriesSignalError() instead")
    void getNetworkApplianceContentFilteringCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringSignalError() instead")
    void getNetworkApplianceContentFilteringSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallCellularFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallCellularFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServiceSignalError() instead")
    void getNetworkApplianceFirewallFirewalledServiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServicesSignalError() instead")
    void getNetworkApplianceFirewallFirewalledServicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundCellularFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallInboundFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalError() instead")
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToManyNatRulesSignalError() instead")
    void getNetworkApplianceFirewallOneToManyNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToOneNatRulesSignalError() instead")
    void getNetworkApplianceFirewallOneToOneNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallPortForwardingRulesSignalError() instead")
    void getNetworkApplianceFirewallPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalError() instead")
    void getNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortSignalError() instead")
    void getNetworkAppliancePortSignalE(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortSignalError(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortsSignalError() instead")
    void getNetworkAppliancePortsSignalE(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortsSignalError(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void getNetworkAppliancePrefixesDelegatedStaticSignalE(OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticSignalError(OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticsSignalError() instead")
    void getNetworkAppliancePrefixesDelegatedStaticsSignalE(QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticsSignalError(QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityIntrusionSignalError() instead")
    void getNetworkApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityMalwareSignalError() instead")
    void getNetworkApplianceSecurityMalwareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityMalwareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSettingsSignalError() instead")
    void getNetworkApplianceSettingsSignalE(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSettingsSignalError(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSingleLanSignalError() instead")
    void getNetworkApplianceSingleLanSignalE(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSingleLanSignalError(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidSignalError() instead")
    void getNetworkApplianceSsidSignalE(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidSignalError(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidsSignalError() instead")
    void getNetworkApplianceSsidsSignalE(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidsSignalError(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRouteSignalError() instead")
    void getNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRoutesSignalError() instead")
    void getNetworkApplianceStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalError() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingRulesSignalError() instead")
    void getNetworkApplianceTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkBandwidthSignalError() instead")
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalE(OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalError(OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkSelectionSignalError() instead")
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalE(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalError(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingSignalError() instead")
    void getNetworkApplianceTrafficShapingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlanSignalError() instead")
    void getNetworkApplianceVlanSignalE(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlanSignalError(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSettingsSignalError() instead")
    void getNetworkApplianceVlansSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSignalError() instead")
    void getNetworkApplianceVlansSignalE(QList<OAIGetNetworkApplianceVlans_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSignalError(QList<OAIGetNetworkApplianceVlans_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnBgpSignalError() instead")
    void getNetworkApplianceVpnBgpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnBgpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnSiteToSiteVpnSignalError() instead")
    void getNetworkApplianceVpnSiteToSiteVpnSignalE(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnSiteToSiteVpnSignalError(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceWarmSpareSignalError() instead")
    void getNetworkApplianceWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfileSignalError() instead")
    void getNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfilesSignalError() instead")
    void getNetworkCameraQualityRetentionProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraSchedulesSignalError() instead")
    void getNetworkCameraSchedulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraSchedulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfileSignalError() instead")
    void getNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfilesSignalError() instead")
    void getNetworkCameraWirelessProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError() instead")
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayDhcpSignalError() instead")
    void getNetworkCellularGatewayDhcpSignalE(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayDhcpSignalError(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewaySubnetPoolSignalError() instead")
    void getNetworkCellularGatewaySubnetPoolSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewaySubnetPoolSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayUplinkSignalError() instead")
    void getNetworkCellularGatewayUplinkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayUplinkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientPolicySignalError() instead")
    void getNetworkClientPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSplashAuthorizationStatusSignalError() instead")
    void getNetworkClientSplashAuthorizationStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSplashAuthorizationStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalError() instead")
    void getNetworkDevicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void getNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void getNetworkFirmwareUpgradesStagedGroupSignalE(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupSignalError(OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupsSignalError() instead")
    void getNetworkFirmwareUpgradesStagedGroupsSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupsSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedStagesSignalError() instead")
    void getNetworkFirmwareUpgradesStagedStagesSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedStagesSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesSignalError() instead")
    void getNetworkFirmwareUpgradesSignalE(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesSignalError(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlanSignalError() instead")
    void getNetworkFloorPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlansSignalError() instead")
    void getNetworkFloorPlansSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlansSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPoliciesSignalError() instead")
    void getNetworkGroupPoliciesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPoliciesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPolicySignalError() instead")
    void getNetworkGroupPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkHealthAlertsSignalError() instead")
    void getNetworkHealthAlertsSignalE(QList<OAIGetNetworkHealthAlerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkHealthAlertsSignalError(QList<OAIGetNetworkHealthAlerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUserSignalError() instead")
    void getNetworkMerakiAuthUserSignalE(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUserSignalError(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUsersSignalError() instead")
    void getNetworkMerakiAuthUsersSignalE(QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUsersSignalError(QList<OAIGetNetworkMerakiAuthUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokerSignalError() instead")
    void getNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokersSignalError() instead")
    void getNetworkMqttBrokersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetflowSignalError() instead")
    void getNetworkNetflowSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetflowSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiPiiKeysSignalError() instead")
    void getNetworkPiiPiiKeysSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiPiiKeysSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestSignalError() instead")
    void getNetworkPiiRequestSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestsSignalError() instead")
    void getNetworkPiiRequestsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmDevicesForKeySignalError() instead")
    void getNetworkPiiSmDevicesForKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmDevicesForKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmOwnersForKeySignalError() instead")
    void getNetworkPiiSmOwnersForKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmOwnersForKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPoliciesByClientSignalError() instead")
    void getNetworkPoliciesByClientSignalE(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPoliciesByClientSignalError(QList<OAIGetNetworkPoliciesByClient_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfileSignalError() instead")
    void getNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfilesSignalError() instead")
    void getNetworkSensorAlertsProfilesSignalE(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfilesSignalError(QList<OAIGetNetworkSensorAlertsProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorRelationshipsSignalError() instead")
    void getNetworkSensorRelationshipsSignalE(QList<OAIGetNetworkSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorRelationshipsSignalError(QList<OAIGetNetworkSensorRelationships_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSettingsSignalError() instead")
    void getNetworkSettingsSignalE(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSettingsSignalError(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmBypassActivationLockAttemptSignalError() instead")
    void getNetworkSmBypassActivationLockAttemptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmBypassActivationLockAttemptSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCertsSignalError() instead")
    void getNetworkSmDeviceCertsSignalE(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCertsSignalError(QList<OAIGetNetworkSmDeviceCerts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceProfilesSignalError() instead")
    void getNetworkSmDeviceDeviceProfilesSignalE(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceProfilesSignalError(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceNetworkAdaptersSignalError() instead")
    void getNetworkSmDeviceNetworkAdaptersSignalE(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceNetworkAdaptersSignalError(QList<OAIGetNetworkSmDeviceNetworkAdapters_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceRestrictionsSignalError() instead")
    void getNetworkSmDeviceRestrictionsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceRestrictionsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSecurityCentersSignalError() instead")
    void getNetworkSmDeviceSecurityCentersSignalE(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSecurityCentersSignalError(QList<OAIGetNetworkSmDeviceSecurityCenters_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSoftwaresSignalError() instead")
    void getNetworkSmDeviceSoftwaresSignalE(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSoftwaresSignalError(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceWlanListsSignalError() instead")
    void getNetworkSmDeviceWlanListsSignalE(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceWlanListsSignalError(QList<OAIGetNetworkSmDeviceWlanLists_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalError() instead")
    void getNetworkSmDevicesSignalE(QList<OAIGetNetworkSmDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalError(QList<OAIGetNetworkSmDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalError() instead")
    void getNetworkSmProfilesSignalE(QList<OAIGetNetworkSmProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalError(QList<OAIGetNetworkSmProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupSignalError() instead")
    void getNetworkSmTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupsSignalError() instead")
    void getNetworkSmTargetGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTrustedAccessConfigsSignalError() instead")
    void getNetworkSmTrustedAccessConfigsSignalE(QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTrustedAccessConfigsSignalError(QList<OAIGetNetworkSmTrustedAccessConfigs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserAccessDevicesSignalError() instead")
    void getNetworkSmUserAccessDevicesSignalE(QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserAccessDevicesSignalError(QList<OAIGetNetworkSmUserAccessDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserDeviceProfilesSignalError() instead")
    void getNetworkSmUserDeviceProfilesSignalE(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserDeviceProfilesSignalError(QList<OAIGetNetworkSmDeviceDeviceProfiles_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserSoftwaresSignalError() instead")
    void getNetworkSmUserSoftwaresSignalE(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserSoftwaresSignalError(QList<OAIGetNetworkSmDeviceSoftwares_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUsersSignalError() instead")
    void getNetworkSmUsersSignalE(QList<OAIGetNetworkSmUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUsersSignalError(QList<OAIGetNetworkSmUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSnmpSignalError() instead")
    void getNetworkSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessControlListsSignalError() instead")
    void getNetworkSwitchAccessControlListsSignalE(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessControlListsSignalError(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPoliciesSignalError() instead")
    void getNetworkSwitchAccessPoliciesSignalE(QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPoliciesSignalError(QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPolicySignalError() instead")
    void getNetworkSwitchAccessPolicySignalE(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPolicySignalError(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAlternateManagementInterfaceSignalError() instead")
    void getNetworkSwitchAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalError() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalE(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalError(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalError() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalE(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalError(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicySignalError() instead")
    void getNetworkSwitchDhcpServerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpV4ServersSeenSignalError() instead")
    void getNetworkSwitchDhcpV4ServersSeenSignalE(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpV4ServersSeenSignalError(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDscpToCosMappingsSignalError() instead")
    void getNetworkSwitchDscpToCosMappingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDscpToCosMappingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchLinkAggregationsSignalError() instead")
    void getNetworkSwitchLinkAggregationsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchLinkAggregationsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchMtuSignalError() instead")
    void getNetworkSwitchMtuSignalE(OAIGetNetworkSwitchMtu_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchMtuSignalError(OAIGetNetworkSwitchMtu_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchPortSchedulesSignalError() instead")
    void getNetworkSwitchPortSchedulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchPortSchedulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRuleSignalError() instead")
    void getNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesOrderSignalError() instead")
    void getNetworkSwitchQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesSignalError() instead")
    void getNetworkSwitchQosRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalE(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalError(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalError() instead")
    void getNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingOspfSignalError() instead")
    void getNetworkSwitchRoutingOspfSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingOspfSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalError() instead")
    void getNetworkSwitchSettingsSignalE(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalError(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalError() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackSignalError() instead")
    void getNetworkSwitchStackSignalE(OAIGetNetworkSwitchStack_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackSignalError(OAIGetNetworkSwitchStack_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStacksSignalError() instead")
    void getNetworkSwitchStacksSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStacksSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStormControlSignalError() instead")
    void getNetworkSwitchStormControlSignalE(OAIGetNetworkSwitchStormControl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStormControlSignalError(OAIGetNetworkSwitchStormControl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStpSignalError() instead")
    void getNetworkSwitchStpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSyslogServersSignalError() instead")
    void getNetworkSyslogServersSignalE(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSyslogServersSignalError(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficAnalysisSignalError() instead")
    void getNetworkTrafficAnalysisSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficAnalysisSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingApplicationCategoriesSignalError() instead")
    void getNetworkTrafficShapingApplicationCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingApplicationCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingDscpTaggingOptionsSignalError() instead")
    void getNetworkTrafficShapingDscpTaggingOptionsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingDscpTaggingOptionsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServerSignalError() instead")
    void getNetworkWebhooksHttpServerSignalE(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServerSignalError(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServersSignalError() instead")
    void getNetworkWebhooksHttpServersSignalE(QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServersSignalError(QList<OAIGetNetworkWebhooksHttpServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplateSignalError() instead")
    void getNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplatesSignalError() instead")
    void getNetworkWebhooksPayloadTemplatesSignalE(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplatesSignalError(QList<OAIGetNetworkWebhooksPayloadTemplates_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksWebhookTestSignalError() instead")
    void getNetworkWebhooksWebhookTestSignalE(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksWebhookTestSignalError(OAICreateNetworkWebhooksWebhookTest_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAlternateManagementInterfaceSignalError() instead")
    void getNetworkWirelessAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBillingSignalError() instead")
    void getNetworkWirelessBillingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBillingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBluetoothSettingsSignalError() instead")
    void getNetworkWirelessBluetoothSettingsSignalE(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBluetoothSettingsSignalError(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfileSignalError() instead")
    void getNetworkWirelessRfProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfilesSignalError() instead")
    void getNetworkWirelessRfProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSettingsSignalError() instead")
    void getNetworkWirelessSettingsSignalE(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSettingsSignalError(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidBonjourForwardingSignalError() instead")
    void getNetworkWirelessSsidBonjourForwardingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidBonjourForwardingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError() instead")
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidEapOverrideSignalError() instead")
    void getNetworkWirelessSsidEapOverrideSignalE(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidEapOverrideSignalError(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidHotspot20SignalError() instead")
    void getNetworkWirelessSsidHotspot20SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidHotspot20SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPskSignalError() instead")
    void getNetworkWirelessSsidIdentityPskSignalE(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPskSignalError(OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPsksSignalError() instead")
    void getNetworkWirelessSsidIdentityPsksSignalE(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPsksSignalError(QList<OAIGetNetworkWirelessSsidIdentityPsks_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSchedulesSignalError() instead")
    void getNetworkWirelessSsidSchedulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSchedulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalError() instead")
    void getNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidTrafficShapingRulesSignalError() instead")
    void getNetworkWirelessSsidTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalError() instead")
    void getNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSignalError() instead")
    void getNetworkWirelessSsidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidsSignalError() instead")
    void getNetworkWirelessSsidsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSignalError() instead")
    void getNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchSignalError() instead")
    void getOrganizationActionBatchSignalE(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchSignalError(OAICreateOrganizationActionBatch_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchesSignalError() instead")
    void getOrganizationActionBatchesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclSignalError() instead")
    void getOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclsSignalError() instead")
    void getOrganizationAdaptivePolicyAclsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalError() instead")
    void getOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalError() instead")
    void getOrganizationAdaptivePolicyGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalError() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalError() instead")
    void getOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalError() instead")
    void getOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdminsSignalError() instead")
    void getOrganizationAdminsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdminsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAlertsProfilesSignalError() instead")
    void getOrganizationAlertsProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAlertsProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityIntrusionSignalError() instead")
    void getOrganizationApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnThirdPartyVPNPeersSignalError() instead")
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalE(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalError(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnVpnFirewallRulesSignalError() instead")
    void getOrganizationApplianceVpnVpnFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesPrioritiesSignalError() instead")
    void getOrganizationBrandingPoliciesPrioritiesSignalE(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesPrioritiesSignalError(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesSignalError() instead")
    void getOrganizationBrandingPoliciesSignalE(QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesSignalError(QList<OAIGetOrganizationBrandingPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPolicySignalError() instead")
    void getOrganizationBrandingPolicySignalE(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPolicySignalError(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactSignalError() instead")
    void getOrganizationCameraCustomAnalyticsArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactsSignalError() instead")
    void getOrganizationCameraCustomAnalyticsArtifactsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraOnboardingStatusesSignalError() instead")
    void getOrganizationCameraOnboardingStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraOnboardingStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsSearchSignalError() instead")
    void getOrganizationClientsSearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsSearchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalE(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalError(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilesSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilesSignalE(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilesSignalError(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSignalError() instead")
    void getOrganizationConfigTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplatesSignalError() instead")
    void getOrganizationConfigTemplatesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplatesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalError() instead")
    void getOrganizationDevicesSignalE(QList<OAIGetOrganizationDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalError(QList<OAIGetOrganizationDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void getOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInsSignalError() instead")
    void getOrganizationEarlyAccessFeaturesOptInsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesSignalError() instead")
    void getOrganizationEarlyAccessFeaturesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesByDeviceSignalError() instead")
    void getOrganizationFirmwareUpgradesByDeviceSignalE(QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesByDeviceSignalError(QList<OAIGetOrganizationFirmwareUpgradesByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesSignalError() instead")
    void getOrganizationFirmwareUpgradesSignalE(QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesSignalError(QList<OAIGetOrganizationFirmwareUpgrades_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightApplicationsSignalError() instead")
    void getOrganizationInsightApplicationsSignalE(QList<OAIGetOrganizationInsightApplications_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightApplicationsSignalError(QList<OAIGetOrganizationInsightApplications_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServerSignalError() instead")
    void getOrganizationInsightMonitoredMediaServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServersSignalError() instead")
    void getOrganizationInsightMonitoredMediaServersSignalE(QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServersSignalError(QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDeviceSignalError() instead")
    void getOrganizationInventoryDeviceSignalE(OAIGetOrganizationInventoryDevices_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDeviceSignalError(OAIGetOrganizationInventoryDevices_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDevicesSignalError() instead")
    void getOrganizationInventoryDevicesSignalE(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDevicesSignalError(QList<OAIGetOrganizationInventoryDevices_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringImportsSignalError() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalE(QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalError(QList<OAIGetOrganizationInventoryOnboardingCloudMonitoringImports_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalError() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalE(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalError(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicenseSignalError() instead")
    void getOrganizationLicenseSignalE(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicenseSignalError(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesSignalError() instead")
    void getOrganizationLicensesSignalE(QList<OAIGetOrganizationLicenses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesSignalError(QList<OAIGetOrganizationLicenses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensingCotermLicensesSignalError() instead")
    void getOrganizationLicensingCotermLicensesSignalE(QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensingCotermLicensesSignalError(QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLoginSecuritySignalError() instead")
    void getOrganizationLoginSecuritySignalE(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLoginSecuritySignalError(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalError() instead")
    void getOrganizationNetworksSignalE(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalError(QList<OAIGetNetwork_200_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectSignalError() instead")
    void getOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalError() instead")
    void getOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalError() instead")
    void getOrganizationPolicyObjectsGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsSignalError() instead")
    void getOrganizationPolicyObjectsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpSignalError() instead")
    void getOrganizationSamlIdpSignalE(OAIGetOrganizationSamlIdps_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpSignalError(OAIGetOrganizationSamlIdps_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpsSignalError() instead")
    void getOrganizationSamlIdpsSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpsSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRoleSignalError() instead")
    void getOrganizationSamlRoleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRoleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRolesSignalError() instead")
    void getOrganizationSamlRolesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRolesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlSignalError() instead")
    void getOrganizationSamlSignalE(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlSignalError(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmApnsCertSignalError() instead")
    void getOrganizationSmApnsCertSignalE(OAIGetOrganizationSmApnsCert_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmApnsCertSignalError(OAIGetOrganizationSmApnsCert_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountSignalError() instead")
    void getOrganizationSmVppAccountSignalE(OAIGetOrganizationSmVppAccounts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountSignalError(OAIGetOrganizationSmVppAccounts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountsSignalError() instead")
    void getOrganizationSmVppAccountsSignalE(QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountsSignalError(QList<OAIGetOrganizationSmVppAccounts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSnmpSignalError() instead")
    void getOrganizationSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSwitchPortsBySwitchSignalError() instead")
    void getOrganizationSwitchPortsBySwitchSignalE(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSwitchPortsBySwitchSignalError(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalError() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalE(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalError(QList<OAIGetOrganizationWirelessDevicesEthernetStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSignalError() instead")
    void getOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsSignalError() instead")
    void getOrganizationsSignalE(QList<OAIGetOrganizations_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsSignalError(QList<OAIGetOrganizations_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalError() instead")
    void lockNetworkSmDevicesSignalE(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalError(OAICheckinNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modifyNetworkSmDevicesTagsSignalError() instead")
    void modifyNetworkSmDevicesTagsSignalE(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modifyNetworkSmDevicesTagsSignalError(QList<OAIModifyNetworkSmDevicesTags_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNetworkSmDevicesSignalError() instead")
    void moveNetworkSmDevicesSignalE(OAIMoveNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNetworkSmDevicesSignalError(OAIMoveNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSeatsSignalError() instead")
    void moveOrganizationLicensesSeatsSignalE(OAIMoveOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSeatsSignalError(OAIMoveOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSignalError() instead")
    void moveOrganizationLicensesSignalE(OAIMoveOrganizationLicenses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSignalError(OAIMoveOrganizationLicenses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensingCotermLicensesSignalError() instead")
    void moveOrganizationLicensingCotermLicensesSignalE(OAIMoveOrganizationLicensingCotermLicenses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensingCotermLicensesSignalError(OAIMoveOrganizationLicensingCotermLicenses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionNetworkClientsSignalError() instead")
    void provisionNetworkClientsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionNetworkClientsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalError() instead")
    void refreshNetworkSmDeviceDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseFromOrganizationInventorySignalError() instead")
    void releaseFromOrganizationInventorySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseFromOrganizationInventorySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDevicesSignalError() instead")
    void removeNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkSwitchStackSignalError() instead")
    void removeNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewOrganizationLicensesSeatsSignalError() instead")
    void renewOrganizationLicensesSeatsSignalE(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renewOrganizationLicensesSeatsSignalError(OAIAssignOrganizationLicensesSeats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbacksNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitNetworkSignalError() instead")
    void splitNetworkSignalE(OAISplitNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void splitNetworkSignalError(OAISplitNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swapNetworkApplianceWarmSpareSignalError() instead")
    void swapNetworkApplianceWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void swapNetworkApplianceWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbindNetworkSignalError() instead")
    void unbindNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unbindNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalError() instead")
    void unenrollNetworkSmDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceApplianceUplinksSettingsSignalError() instead")
    void updateDeviceApplianceUplinksSettingsSignalE(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceApplianceUplinksSettingsSignalError(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraCustomAnalyticsSignalError() instead")
    void updateDeviceCameraCustomAnalyticsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraCustomAnalyticsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraQualityAndRetentionSignalError() instead")
    void updateDeviceCameraQualityAndRetentionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraQualityAndRetentionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraSenseSignalError() instead")
    void updateDeviceCameraSenseSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraSenseSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraVideoSettingsSignalError() instead")
    void updateDeviceCameraVideoSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraVideoSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraWirelessProfilesSignalError() instead")
    void updateDeviceCameraWirelessProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraWirelessProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularGatewayLanSignalError() instead")
    void updateDeviceCellularGatewayLanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularGatewayLanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularGatewayPortForwardingRulesSignalError() instead")
    void updateDeviceCellularGatewayPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularGatewayPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularSimsSignalError() instead")
    void updateDeviceCellularSimsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularSimsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceManagementInterfaceSignalError() instead")
    void updateDeviceManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSensorRelationshipsSignalError() instead")
    void updateDeviceSensorRelationshipsSignalE(OAIGetDeviceSensorRelationships_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSensorRelationshipsSignalError(OAIGetDeviceSensorRelationships_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchPortSignalError() instead")
    void updateDeviceSwitchPortSignalE(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchPortSignalError(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalError() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchWarmSpareSignalError() instead")
    void updateDeviceSwitchWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessBluetoothSettingsSignalError() instead")
    void updateDeviceWirelessBluetoothSettingsSignalE(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessBluetoothSettingsSignalError(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessRadioSettingsSignalError() instead")
    void updateDeviceWirelessRadioSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessRadioSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSignalError() instead")
    void updateDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAlertsSettingsSignalError() instead")
    void updateNetworkAlertsSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAlertsSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceConnectivityMonitoringDestinationsSignalError() instead")
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceContentFilteringSignalError() instead")
    void updateNetworkApplianceContentFilteringSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceContentFilteringSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallCellularFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallFirewalledServiceSignalError() instead")
    void updateNetworkApplianceFirewallFirewalledServiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallFirewalledServiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToManyNatRulesSignalError() instead")
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToOneNatRulesSignalError() instead")
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallPortForwardingRulesSignalError() instead")
    void updateNetworkApplianceFirewallPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalError() instead")
    void updateNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePortSignalError() instead")
    void updateNetworkAppliancePortSignalE(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePortSignalError(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void updateNetworkAppliancePrefixesDelegatedStaticSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePrefixesDelegatedStaticSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityIntrusionSignalError() instead")
    void updateNetworkApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityMalwareSignalError() instead")
    void updateNetworkApplianceSecurityMalwareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityMalwareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSettingsSignalError() instead")
    void updateNetworkApplianceSettingsSignalE(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSettingsSignalError(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSingleLanSignalError() instead")
    void updateNetworkApplianceSingleLanSignalE(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSingleLanSignalError(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSsidSignalError() instead")
    void updateNetworkApplianceSsidSignalE(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSsidSignalError(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceStaticRouteSignalError() instead")
    void updateNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingRulesSignalError() instead")
    void updateNetworkApplianceTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkBandwidthSignalError() instead")
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkSelectionSignalError() instead")
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalE(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalError(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingSignalError() instead")
    void updateNetworkApplianceTrafficShapingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlanSignalError() instead")
    void updateNetworkApplianceVlanSignalE(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlanSignalError(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlansSettingsSignalError() instead")
    void updateNetworkApplianceVlansSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlansSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnBgpSignalError() instead")
    void updateNetworkApplianceVpnBgpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnBgpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnSiteToSiteVpnSignalError() instead")
    void updateNetworkApplianceVpnSiteToSiteVpnSignalE(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalError(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceWarmSpareSignalError() instead")
    void updateNetworkApplianceWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraQualityRetentionProfileSignalError() instead")
    void updateNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraWirelessProfileSignalError() instead")
    void updateNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError() instead")
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayDhcpSignalError() instead")
    void updateNetworkCellularGatewayDhcpSignalE(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayDhcpSignalError(OAIGetNetworkCellularGatewayDhcp_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewaySubnetPoolSignalError() instead")
    void updateNetworkCellularGatewaySubnetPoolSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewaySubnetPoolSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayUplinkSignalError() instead")
    void updateNetworkCellularGatewayUplinkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayUplinkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientPolicySignalError() instead")
    void updateNetworkClientPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientSplashAuthorizationStatusSignalError() instead")
    void updateNetworkClientSplashAuthorizationStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientSplashAuthorizationStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedEventsSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedEventsSignalE(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedEventsSignalError(OAIGetNetworkFirmwareUpgradesStagedEvents_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedGroupSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedStagesSignalError() instead")
    void updateNetworkFirmwareUpgradesStagedStagesSignalE(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedStagesSignalError(QList<OAIGetNetworkFirmwareUpgradesStagedStages_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesSignalError() instead")
    void updateNetworkFirmwareUpgradesSignalE(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesSignalError(OAIGetNetworkFirmwareUpgrades_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFloorPlanSignalError() instead")
    void updateNetworkFloorPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFloorPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkGroupPolicySignalError() instead")
    void updateNetworkGroupPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkGroupPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMerakiAuthUserSignalError() instead")
    void updateNetworkMerakiAuthUserSignalE(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMerakiAuthUserSignalError(OAIGetNetworkMerakiAuthUsers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMqttBrokerSignalError() instead")
    void updateNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkNetflowSignalError() instead")
    void updateNetworkNetflowSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkNetflowSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSensorAlertsProfileSignalError() instead")
    void updateNetworkSensorAlertsProfileSignalE(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSensorAlertsProfileSignalError(OAIGetNetworkSensorAlertsProfiles_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSettingsSignalError() instead")
    void updateNetworkSettingsSignalE(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSettingsSignalError(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesFieldsSignalError() instead")
    void updateNetworkSmDevicesFieldsSignalE(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesFieldsSignalError(QList<OAIUpdateNetworkSmDevicesFields_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmTargetGroupSignalError() instead")
    void updateNetworkSmTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSnmpSignalError() instead")
    void updateNetworkSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessControlListsSignalError() instead")
    void updateNetworkSwitchAccessControlListsSignalE(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessControlListsSignalError(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessPolicySignalError() instead")
    void updateNetworkSwitchAccessPolicySignalE(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessPolicySignalError(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAlternateManagementInterfaceSignalError() instead")
    void updateNetworkSwitchAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError() instead")
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalE(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicySignalError() instead")
    void updateNetworkSwitchDhcpServerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDscpToCosMappingsSignalError() instead")
    void updateNetworkSwitchDscpToCosMappingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDscpToCosMappingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchLinkAggregationSignalError() instead")
    void updateNetworkSwitchLinkAggregationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchLinkAggregationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchMtuSignalError() instead")
    void updateNetworkSwitchMtuSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchMtuSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchPortScheduleSignalError() instead")
    void updateNetworkSwitchPortScheduleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchPortScheduleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRuleSignalError() instead")
    void updateNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRulesOrderSignalError() instead")
    void updateNetworkSwitchQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalError() instead")
    void updateNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingOspfSignalError() instead")
    void updateNetworkSwitchRoutingOspfSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingOspfSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalError() instead")
    void updateNetworkSwitchSettingsSignalE(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalError(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStormControlSignalError() instead")
    void updateNetworkSwitchStormControlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStormControlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStpSignalError() instead")
    void updateNetworkSwitchStpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSyslogServersSignalError() instead")
    void updateNetworkSyslogServersSignalE(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSyslogServersSignalError(OAIGetNetworkSyslogServers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkTrafficAnalysisSignalError() instead")
    void updateNetworkTrafficAnalysisSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkTrafficAnalysisSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksHttpServerSignalError() instead")
    void updateNetworkWebhooksHttpServerSignalE(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksHttpServerSignalError(OAIGetNetworkWebhooksHttpServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksPayloadTemplateSignalError() instead")
    void updateNetworkWebhooksPayloadTemplateSignalE(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksPayloadTemplateSignalError(OAIGetNetworkWebhooksPayloadTemplates_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessAlternateManagementInterfaceSignalError() instead")
    void updateNetworkWirelessAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBillingSignalError() instead")
    void updateNetworkWirelessBillingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBillingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBluetoothSettingsSignalError() instead")
    void updateNetworkWirelessBluetoothSettingsSignalE(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBluetoothSettingsSignalError(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessRfProfileSignalError() instead")
    void updateNetworkWirelessRfProfileSignalE(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessRfProfileSignalError(OAICreateNetworkWirelessRfProfile_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSettingsSignalError() instead")
    void updateNetworkWirelessSettingsSignalE(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSettingsSignalError(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidBonjourForwardingSignalError() instead")
    void updateNetworkWirelessSsidBonjourForwardingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidBonjourForwardingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError() instead")
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidEapOverrideSignalError() instead")
    void updateNetworkWirelessSsidEapOverrideSignalE(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidEapOverrideSignalError(OAIGetNetworkWirelessSsidEapOverride_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidHotspot20SignalError() instead")
    void updateNetworkWirelessSsidHotspot20SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidHotspot20SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidIdentityPskSignalError() instead")
    void updateNetworkWirelessSsidIdentityPskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidIdentityPskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSchedulesSignalError() instead")
    void updateNetworkWirelessSsidSchedulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSchedulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalError() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidTrafficShapingRulesSignalError() instead")
    void updateNetworkWirelessSsidTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalError() instead")
    void updateNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSignalError() instead")
    void updateNetworkWirelessSsidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSignalError() instead")
    void updateNetworkSignalE(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSignalError(OAIGetNetwork_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationActionBatchSignalError() instead")
    void updateOrganizationActionBatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationActionBatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyAclSignalError() instead")
    void updateOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalError() instead")
    void updateOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalError() instead")
    void updateOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalError() instead")
    void updateOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdminSignalError() instead")
    void updateOrganizationAdminSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdminSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAlertsProfileSignalError() instead")
    void updateOrganizationAlertsProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAlertsProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceSecurityIntrusionSignalError() instead")
    void updateOrganizationApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnThirdPartyVPNPeersSignalError() instead")
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalE(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalError(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnVpnFirewallRulesSignalError() instead")
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPoliciesPrioritiesSignalError() instead")
    void updateOrganizationBrandingPoliciesPrioritiesSignalE(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPoliciesPrioritiesSignalError(OAIGetOrganizationBrandingPoliciesPriorities_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPolicySignalError() instead")
    void updateOrganizationBrandingPolicySignalE(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPolicySignalError(OAIGetOrganizationBrandingPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationCameraOnboardingStatusesSignalError() instead")
    void updateOrganizationCameraOnboardingStatusesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationCameraOnboardingStatusesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSignalError() instead")
    void updateOrganizationConfigTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationEarlyAccessFeaturesOptInSignalError() instead")
    void updateOrganizationEarlyAccessFeaturesOptInSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationEarlyAccessFeaturesOptInSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationInsightMonitoredMediaServerSignalError() instead")
    void updateOrganizationInsightMonitoredMediaServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationInsightMonitoredMediaServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLicenseSignalError() instead")
    void updateOrganizationLicenseSignalE(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLicenseSignalError(OAIGetOrganizationLicenses_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLoginSecuritySignalError() instead")
    void updateOrganizationLoginSecuritySignalE(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLoginSecuritySignalError(OAIGetOrganizationLoginSecurity_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectSignalError() instead")
    void updateOrganizationPolicyObjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalError() instead")
    void updateOrganizationPolicyObjectsGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlIdpSignalError() instead")
    void updateOrganizationSamlIdpSignalE(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlIdpSignalError(QList<OAIGetOrganizationSamlIdps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlRoleSignalError() instead")
    void updateOrganizationSamlRoleSignalE(OAIUpdateOrganizationSamlRole_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlRoleSignalError(OAIUpdateOrganizationSamlRole_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlSignalError() instead")
    void updateOrganizationSamlSignalE(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlSignalError(OAIGetOrganizationSaml_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSnmpSignalError() instead")
    void updateOrganizationSnmpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSnmpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSignalError() instead")
    void updateOrganizationSignalE(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalError(OAIGetOrganizations_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vmxNetworkDevicesClaimSignalError() instead")
    void vmxNetworkDevicesClaimSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vmxNetworkDevicesClaimSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDevicesSignalError() instead")
    void wipeNetworkSmDevicesSignalE(OAIWipeNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDevicesSignalError(OAIWipeNetworkSmDevices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addNetworkSwitchStackSignalErrorFull() instead")
    void addNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignOrganizationLicensesSeatsSignalErrorFull() instead")
    void assignOrganizationLicensesSeatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignOrganizationLicensesSeatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bindNetworkSignalErrorFull() instead")
    void bindNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bindNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkinNetworkSmDevicesSignalErrorFull() instead")
    void checkinNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkinNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationInventorySignalErrorFull() instead")
    void claimIntoOrganizationInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationSignalErrorFull() instead")
    void claimIntoOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalErrorFull() instead")
    void claimNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSwitchDevicesSignalErrorFull() instead")
    void cloneOrganizationSwitchDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSwitchDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSignalErrorFull() instead")
    void cloneOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalErrorFull() instead")
    void combineOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceApplianceVmxAuthenticationTokenSignalErrorFull() instead")
    void createDeviceApplianceVmxAuthenticationTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceApplianceVmxAuthenticationTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void createDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void createDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void createNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceStaticRouteSignalErrorFull() instead")
    void createNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceVlanSignalErrorFull() instead")
    void createNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void createNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkCameraWirelessProfileSignalErrorFull() instead")
    void createNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesRollbackSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesRollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesRollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedEventSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesStagedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void createNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkFloorPlanSignalErrorFull() instead")
    void createNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupPolicySignalErrorFull() instead")
    void createNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMerakiAuthUserSignalErrorFull() instead")
    void createNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkMqttBrokerSignalErrorFull() instead")
    void createNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkPiiRequestSignalErrorFull() instead")
    void createNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSensorAlertsProfileSignalErrorFull() instead")
    void createNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmBypassActivationLockAttemptSignalErrorFull() instead")
    void createNetworkSmBypassActivationLockAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmBypassActivationLockAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSmTargetGroupSignalErrorFull() instead")
    void createNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchAccessPolicySignalErrorFull() instead")
    void createNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull() instead")
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchLinkAggregationSignalErrorFull() instead")
    void createNetworkSwitchLinkAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchLinkAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchPortScheduleSignalErrorFull() instead")
    void createNetworkSwitchPortScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchPortScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchQosRuleSignalErrorFull() instead")
    void createNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackSignalErrorFull() instead")
    void createNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksHttpServerSignalErrorFull() instead")
    void createNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void createNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWebhooksWebhookTestSignalErrorFull() instead")
    void createNetworkWebhooksWebhookTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWebhooksWebhookTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWirelessRfProfileSignalErrorFull() instead")
    void createNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void createNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationActionBatchSignalErrorFull() instead")
    void createOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void createOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdminSignalErrorFull() instead")
    void createOrganizationAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAlertsProfileSignalErrorFull() instead")
    void createOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationBrandingPolicySignalErrorFull() instead")
    void createOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void createOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationConfigTemplateSignalErrorFull() instead")
    void createOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void createOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void createOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalErrorFull() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringExportEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringImportSignalErrorFull() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalErrorFull() instead")
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInventoryOnboardingCloudMonitoringPrepareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalErrorFull() instead")
    void createOrganizationNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectSignalErrorFull() instead")
    void createOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void createOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlIdpSignalErrorFull() instead")
    void createOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSamlRoleSignalErrorFull() instead")
    void createOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSignalErrorFull() instead")
    void createOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void deferNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deferNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceStaticRouteSignalErrorFull() instead")
    void deleteNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceVlanSignalErrorFull() instead")
    void deleteNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void deleteNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraWirelessProfileSignalErrorFull() instead")
    void deleteNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void deleteNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkFloorPlanSignalErrorFull() instead")
    void deleteNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPolicySignalErrorFull() instead")
    void deleteNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMerakiAuthUserSignalErrorFull() instead")
    void deleteNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMqttBrokerSignalErrorFull() instead")
    void deleteNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkPiiRequestSignalErrorFull() instead")
    void deleteNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSensorAlertsProfileSignalErrorFull() instead")
    void deleteNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmTargetGroupSignalErrorFull() instead")
    void deleteNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSmUserAccessDeviceSignalErrorFull() instead")
    void deleteNetworkSmUserAccessDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSmUserAccessDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchAccessPolicySignalErrorFull() instead")
    void deleteNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull() instead")
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchLinkAggregationSignalErrorFull() instead")
    void deleteNetworkSwitchLinkAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchLinkAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchPortScheduleSignalErrorFull() instead")
    void deleteNetworkSwitchPortScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchPortScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchQosRuleSignalErrorFull() instead")
    void deleteNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackSignalErrorFull() instead")
    void deleteNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksHttpServerSignalErrorFull() instead")
    void deleteNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void deleteNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessRfProfileSignalErrorFull() instead")
    void deleteNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void deleteNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalErrorFull() instead")
    void deleteNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationActionBatchSignalErrorFull() instead")
    void deleteOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdminSignalErrorFull() instead")
    void deleteOrganizationAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAlertsProfileSignalErrorFull() instead")
    void deleteOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationBrandingPolicySignalErrorFull() instead")
    void deleteOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationConfigTemplateSignalErrorFull() instead")
    void deleteOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void deleteOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void deleteOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void deleteOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlIdpSignalErrorFull() instead")
    void deleteOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSamlRoleSignalErrorFull() instead")
    void deleteOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationUserSignalErrorFull() instead")
    void deleteOrganizationUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSignalErrorFull() instead")
    void deleteOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceUplinksSettingsSignalErrorFull() instead")
    void getDeviceApplianceUplinksSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceUplinksSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraCustomAnalyticsSignalErrorFull() instead")
    void getDeviceCameraCustomAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraCustomAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraQualityAndRetentionSignalErrorFull() instead")
    void getDeviceCameraQualityAndRetentionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraQualityAndRetentionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseObjectDetectionModelsSignalErrorFull() instead")
    void getDeviceCameraSenseObjectDetectionModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseObjectDetectionModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraSenseSignalErrorFull() instead")
    void getDeviceCameraSenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraSenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoLinkSignalErrorFull() instead")
    void getDeviceCameraVideoLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoSettingsSignalErrorFull() instead")
    void getDeviceCameraVideoSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraWirelessProfilesSignalErrorFull() instead")
    void getDeviceCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularGatewayLanSignalErrorFull() instead")
    void getDeviceCellularGatewayLanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularGatewayLanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularGatewayPortForwardingRulesSignalErrorFull() instead")
    void getDeviceCellularGatewayPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularGatewayPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCellularSimsSignalErrorFull() instead")
    void getDeviceCellularSimsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCellularSimsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceManagementInterfaceSignalErrorFull() instead")
    void getDeviceManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSensorRelationshipsSignalErrorFull() instead")
    void getDeviceSensorRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSensorRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortSignalErrorFull() instead")
    void getDeviceSwitchPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsSignalErrorFull() instead")
    void getDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfacesSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchWarmSpareSignalErrorFull() instead")
    void getDeviceSwitchWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessBluetoothSettingsSignalErrorFull() instead")
    void getDeviceWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessRadioSettingsSignalErrorFull() instead")
    void getDeviceWirelessRadioSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessRadioSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSignalErrorFull() instead")
    void getDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsSettingsSignalErrorFull() instead")
    void getNetworkAlertsSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringCategoriesSignalErrorFull() instead")
    void getNetworkApplianceContentFilteringCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringSignalErrorFull() instead")
    void getNetworkApplianceContentFilteringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServiceSignalErrorFull() instead")
    void getNetworkApplianceFirewallFirewalledServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServicesSignalErrorFull() instead")
    void getNetworkApplianceFirewallFirewalledServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallInboundFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallOneToManyNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallOneToOneNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallPortForwardingRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void getNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortSignalErrorFull() instead")
    void getNetworkAppliancePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortsSignalErrorFull() instead")
    void getNetworkAppliancePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void getNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticsSignalErrorFull() instead")
    void getNetworkAppliancePrefixesDelegatedStaticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityIntrusionSignalErrorFull() instead")
    void getNetworkApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityMalwareSignalErrorFull() instead")
    void getNetworkApplianceSecurityMalwareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityMalwareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSettingsSignalErrorFull() instead")
    void getNetworkApplianceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSingleLanSignalErrorFull() instead")
    void getNetworkApplianceSingleLanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSingleLanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidSignalErrorFull() instead")
    void getNetworkApplianceSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidsSignalErrorFull() instead")
    void getNetworkApplianceSsidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRouteSignalErrorFull() instead")
    void getNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRoutesSignalErrorFull() instead")
    void getNetworkApplianceStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingRulesSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlanSignalErrorFull() instead")
    void getNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSettingsSignalErrorFull() instead")
    void getNetworkApplianceVlansSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSignalErrorFull() instead")
    void getNetworkApplianceVlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnBgpSignalErrorFull() instead")
    void getNetworkApplianceVpnBgpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnBgpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnSiteToSiteVpnSignalErrorFull() instead")
    void getNetworkApplianceVpnSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceWarmSpareSignalErrorFull() instead")
    void getNetworkApplianceWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void getNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfilesSignalErrorFull() instead")
    void getNetworkCameraQualityRetentionProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraSchedulesSignalErrorFull() instead")
    void getNetworkCameraSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfileSignalErrorFull() instead")
    void getNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfilesSignalErrorFull() instead")
    void getNetworkCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayDhcpSignalErrorFull() instead")
    void getNetworkCellularGatewayDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewaySubnetPoolSignalErrorFull() instead")
    void getNetworkCellularGatewaySubnetPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewaySubnetPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayUplinkSignalErrorFull() instead")
    void getNetworkCellularGatewayUplinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayUplinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientPolicySignalErrorFull() instead")
    void getNetworkClientPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSplashAuthorizationStatusSignalErrorFull() instead")
    void getNetworkClientSplashAuthorizationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSplashAuthorizationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalErrorFull() instead")
    void getNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedGroupsSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesStagedStagesSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesStagedStagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesStagedStagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFirmwareUpgradesSignalErrorFull() instead")
    void getNetworkFirmwareUpgradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFirmwareUpgradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlanSignalErrorFull() instead")
    void getNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkFloorPlansSignalErrorFull() instead")
    void getNetworkFloorPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkFloorPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPoliciesSignalErrorFull() instead")
    void getNetworkGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPolicySignalErrorFull() instead")
    void getNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkHealthAlertsSignalErrorFull() instead")
    void getNetworkHealthAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkHealthAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUserSignalErrorFull() instead")
    void getNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMerakiAuthUsersSignalErrorFull() instead")
    void getNetworkMerakiAuthUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMerakiAuthUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokerSignalErrorFull() instead")
    void getNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokersSignalErrorFull() instead")
    void getNetworkMqttBrokersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkNetflowSignalErrorFull() instead")
    void getNetworkNetflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkNetflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiPiiKeysSignalErrorFull() instead")
    void getNetworkPiiPiiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiPiiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestSignalErrorFull() instead")
    void getNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestsSignalErrorFull() instead")
    void getNetworkPiiRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmDevicesForKeySignalErrorFull() instead")
    void getNetworkPiiSmDevicesForKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmDevicesForKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmOwnersForKeySignalErrorFull() instead")
    void getNetworkPiiSmOwnersForKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmOwnersForKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPoliciesByClientSignalErrorFull() instead")
    void getNetworkPoliciesByClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPoliciesByClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfileSignalErrorFull() instead")
    void getNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorAlertsProfilesSignalErrorFull() instead")
    void getNetworkSensorAlertsProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorAlertsProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSensorRelationshipsSignalErrorFull() instead")
    void getNetworkSensorRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSensorRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSettingsSignalErrorFull() instead")
    void getNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmBypassActivationLockAttemptSignalErrorFull() instead")
    void getNetworkSmBypassActivationLockAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmBypassActivationLockAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCertsSignalErrorFull() instead")
    void getNetworkSmDeviceCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmDeviceDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceNetworkAdaptersSignalErrorFull() instead")
    void getNetworkSmDeviceNetworkAdaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceNetworkAdaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceRestrictionsSignalErrorFull() instead")
    void getNetworkSmDeviceRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSecurityCentersSignalErrorFull() instead")
    void getNetworkSmDeviceSecurityCentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSecurityCentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceSoftwaresSignalErrorFull() instead")
    void getNetworkSmDeviceSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceWlanListsSignalErrorFull() instead")
    void getNetworkSmDeviceWlanListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceWlanListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalErrorFull() instead")
    void getNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalErrorFull() instead")
    void getNetworkSmProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupSignalErrorFull() instead")
    void getNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTargetGroupsSignalErrorFull() instead")
    void getNetworkSmTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmTrustedAccessConfigsSignalErrorFull() instead")
    void getNetworkSmTrustedAccessConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmTrustedAccessConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserAccessDevicesSignalErrorFull() instead")
    void getNetworkSmUserAccessDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserAccessDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmUserDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserSoftwaresSignalErrorFull() instead")
    void getNetworkSmUserSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUsersSignalErrorFull() instead")
    void getNetworkSmUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSnmpSignalErrorFull() instead")
    void getNetworkSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessControlListsSignalErrorFull() instead")
    void getNetworkSwitchAccessControlListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessControlListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPoliciesSignalErrorFull() instead")
    void getNetworkSwitchAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPolicySignalErrorFull() instead")
    void getNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAlternateManagementInterfaceSignalErrorFull() instead")
    void getNetworkSwitchAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalErrorFull() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalErrorFull() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicySignalErrorFull() instead")
    void getNetworkSwitchDhcpServerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpV4ServersSeenSignalErrorFull() instead")
    void getNetworkSwitchDhcpV4ServersSeenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpV4ServersSeenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDscpToCosMappingsSignalErrorFull() instead")
    void getNetworkSwitchDscpToCosMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDscpToCosMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchLinkAggregationsSignalErrorFull() instead")
    void getNetworkSwitchLinkAggregationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchLinkAggregationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchMtuSignalErrorFull() instead")
    void getNetworkSwitchMtuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchMtuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchPortSchedulesSignalErrorFull() instead")
    void getNetworkSwitchPortSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchPortSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRuleSignalErrorFull() instead")
    void getNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesOrderSignalErrorFull() instead")
    void getNetworkSwitchQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesSignalErrorFull() instead")
    void getNetworkSwitchQosRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingOspfSignalErrorFull() instead")
    void getNetworkSwitchRoutingOspfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingOspfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalErrorFull() instead")
    void getNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackSignalErrorFull() instead")
    void getNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStacksSignalErrorFull() instead")
    void getNetworkSwitchStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStormControlSignalErrorFull() instead")
    void getNetworkSwitchStormControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStormControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStpSignalErrorFull() instead")
    void getNetworkSwitchStpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSyslogServersSignalErrorFull() instead")
    void getNetworkSyslogServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSyslogServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficAnalysisSignalErrorFull() instead")
    void getNetworkTrafficAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingApplicationCategoriesSignalErrorFull() instead")
    void getNetworkTrafficShapingApplicationCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingApplicationCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficShapingDscpTaggingOptionsSignalErrorFull() instead")
    void getNetworkTrafficShapingDscpTaggingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficShapingDscpTaggingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServerSignalErrorFull() instead")
    void getNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksHttpServersSignalErrorFull() instead")
    void getNetworkWebhooksHttpServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksHttpServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void getNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksPayloadTemplatesSignalErrorFull() instead")
    void getNetworkWebhooksPayloadTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksPayloadTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWebhooksWebhookTestSignalErrorFull() instead")
    void getNetworkWebhooksWebhookTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWebhooksWebhookTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessAlternateManagementInterfaceSignalErrorFull() instead")
    void getNetworkWirelessAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBillingSignalErrorFull() instead")
    void getNetworkWirelessBillingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBillingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBluetoothSettingsSignalErrorFull() instead")
    void getNetworkWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfileSignalErrorFull() instead")
    void getNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessRfProfilesSignalErrorFull() instead")
    void getNetworkWirelessRfProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessRfProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSettingsSignalErrorFull() instead")
    void getNetworkWirelessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidBonjourForwardingSignalErrorFull() instead")
    void getNetworkWirelessSsidBonjourForwardingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidBonjourForwardingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull() instead")
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidEapOverrideSignalErrorFull() instead")
    void getNetworkWirelessSsidEapOverrideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidEapOverrideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidHotspot20SignalErrorFull() instead")
    void getNetworkWirelessSsidHotspot20SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidHotspot20SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void getNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidIdentityPsksSignalErrorFull() instead")
    void getNetworkWirelessSsidIdentityPsksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidIdentityPsksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSchedulesSignalErrorFull() instead")
    void getNetworkWirelessSsidSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void getNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidTrafficShapingRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalErrorFull() instead")
    void getNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSignalErrorFull() instead")
    void getNetworkWirelessSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidsSignalErrorFull() instead")
    void getNetworkWirelessSsidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSignalErrorFull() instead")
    void getNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchSignalErrorFull() instead")
    void getOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationActionBatchesSignalErrorFull() instead")
    void getOrganizationActionBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationActionBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyAclsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdminsSignalErrorFull() instead")
    void getOrganizationAdminsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdminsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAlertsProfilesSignalErrorFull() instead")
    void getOrganizationAlertsProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAlertsProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityIntrusionSignalErrorFull() instead")
    void getOrganizationApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull() instead")
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull() instead")
    void getOrganizationApplianceVpnVpnFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesPrioritiesSignalErrorFull() instead")
    void getOrganizationBrandingPoliciesPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPoliciesSignalErrorFull() instead")
    void getOrganizationBrandingPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationBrandingPolicySignalErrorFull() instead")
    void getOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactSignalErrorFull() instead")
    void getOrganizationCameraCustomAnalyticsArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraCustomAnalyticsArtifactsSignalErrorFull() instead")
    void getOrganizationCameraCustomAnalyticsArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraCustomAnalyticsArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCameraOnboardingStatusesSignalErrorFull() instead")
    void getOrganizationCameraOnboardingStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCameraOnboardingStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationClientsSearchSignalErrorFull() instead")
    void getOrganizationClientsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationClientsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilesSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSignalErrorFull() instead")
    void getOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplatesSignalErrorFull() instead")
    void getOrganizationConfigTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalErrorFull() instead")
    void getOrganizationDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesOptInsSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesOptInsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesOptInsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationEarlyAccessFeaturesSignalErrorFull() instead")
    void getOrganizationEarlyAccessFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationEarlyAccessFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesByDeviceSignalErrorFull() instead")
    void getOrganizationFirmwareUpgradesByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationFirmwareUpgradesSignalErrorFull() instead")
    void getOrganizationFirmwareUpgradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationFirmwareUpgradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightApplicationsSignalErrorFull() instead")
    void getOrganizationInsightApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void getOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServersSignalErrorFull() instead")
    void getOrganizationInsightMonitoredMediaServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDeviceSignalErrorFull() instead")
    void getOrganizationInventoryDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryDevicesSignalErrorFull() instead")
    void getOrganizationInventoryDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringImportsSignalErrorFull() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringImportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalErrorFull() instead")
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventoryOnboardingCloudMonitoringNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicenseSignalErrorFull() instead")
    void getOrganizationLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensesSignalErrorFull() instead")
    void getOrganizationLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLicensingCotermLicensesSignalErrorFull() instead")
    void getOrganizationLicensingCotermLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLicensingCotermLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationLoginSecuritySignalErrorFull() instead")
    void getOrganizationLoginSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationLoginSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalErrorFull() instead")
    void getOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectSignalErrorFull() instead")
    void getOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsGroupsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPolicyObjectsSignalErrorFull() instead")
    void getOrganizationPolicyObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPolicyObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpSignalErrorFull() instead")
    void getOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlIdpsSignalErrorFull() instead")
    void getOrganizationSamlIdpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlIdpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRoleSignalErrorFull() instead")
    void getOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlRolesSignalErrorFull() instead")
    void getOrganizationSamlRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSamlSignalErrorFull() instead")
    void getOrganizationSamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmApnsCertSignalErrorFull() instead")
    void getOrganizationSmApnsCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmApnsCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountSignalErrorFull() instead")
    void getOrganizationSmVppAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSmVppAccountsSignalErrorFull() instead")
    void getOrganizationSmVppAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSmVppAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSnmpSignalErrorFull() instead")
    void getOrganizationSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSwitchPortsBySwitchSignalErrorFull() instead")
    void getOrganizationSwitchPortsBySwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSwitchPortsBySwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull() instead")
    void getOrganizationWirelessDevicesEthernetStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationWirelessDevicesEthernetStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSignalErrorFull() instead")
    void getOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsSignalErrorFull() instead")
    void getOrganizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalErrorFull() instead")
    void lockNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modifyNetworkSmDevicesTagsSignalErrorFull() instead")
    void modifyNetworkSmDevicesTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modifyNetworkSmDevicesTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNetworkSmDevicesSignalErrorFull() instead")
    void moveNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSeatsSignalErrorFull() instead")
    void moveOrganizationLicensesSeatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSeatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensesSignalErrorFull() instead")
    void moveOrganizationLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveOrganizationLicensingCotermLicensesSignalErrorFull() instead")
    void moveOrganizationLicensingCotermLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveOrganizationLicensingCotermLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionNetworkClientsSignalErrorFull() instead")
    void provisionNetworkClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionNetworkClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalErrorFull() instead")
    void refreshNetworkSmDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseFromOrganizationInventorySignalErrorFull() instead")
    void releaseFromOrganizationInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseFromOrganizationInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDevicesSignalErrorFull() instead")
    void removeNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkSwitchStackSignalErrorFull() instead")
    void removeNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewOrganizationLicensesSeatsSignalErrorFull() instead")
    void renewOrganizationLicensesSeatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renewOrganizationLicensesSeatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbacksNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitNetworkSignalErrorFull() instead")
    void splitNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void splitNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swapNetworkApplianceWarmSpareSignalErrorFull() instead")
    void swapNetworkApplianceWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void swapNetworkApplianceWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbindNetworkSignalErrorFull() instead")
    void unbindNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unbindNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalErrorFull() instead")
    void unenrollNetworkSmDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceApplianceUplinksSettingsSignalErrorFull() instead")
    void updateDeviceApplianceUplinksSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceApplianceUplinksSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraCustomAnalyticsSignalErrorFull() instead")
    void updateDeviceCameraCustomAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraCustomAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraQualityAndRetentionSignalErrorFull() instead")
    void updateDeviceCameraQualityAndRetentionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraQualityAndRetentionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraSenseSignalErrorFull() instead")
    void updateDeviceCameraSenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraSenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraVideoSettingsSignalErrorFull() instead")
    void updateDeviceCameraVideoSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraVideoSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraWirelessProfilesSignalErrorFull() instead")
    void updateDeviceCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularGatewayLanSignalErrorFull() instead")
    void updateDeviceCellularGatewayLanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularGatewayLanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularGatewayPortForwardingRulesSignalErrorFull() instead")
    void updateDeviceCellularGatewayPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularGatewayPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCellularSimsSignalErrorFull() instead")
    void updateDeviceCellularSimsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCellularSimsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceManagementInterfaceSignalErrorFull() instead")
    void updateDeviceManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSensorRelationshipsSignalErrorFull() instead")
    void updateDeviceSensorRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSensorRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchPortSignalErrorFull() instead")
    void updateDeviceSwitchPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchWarmSpareSignalErrorFull() instead")
    void updateDeviceSwitchWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessBluetoothSettingsSignalErrorFull() instead")
    void updateDeviceWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessRadioSettingsSignalErrorFull() instead")
    void updateDeviceWirelessRadioSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessRadioSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSignalErrorFull() instead")
    void updateDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAlertsSettingsSignalErrorFull() instead")
    void updateNetworkAlertsSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAlertsSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceContentFilteringSignalErrorFull() instead")
    void updateNetworkApplianceContentFilteringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceContentFilteringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallFirewalledServiceSignalErrorFull() instead")
    void updateNetworkApplianceFirewallFirewalledServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallFirewalledServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallPortForwardingRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void updateNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePortSignalErrorFull() instead")
    void updateNetworkAppliancePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void updateNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityIntrusionSignalErrorFull() instead")
    void updateNetworkApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityMalwareSignalErrorFull() instead")
    void updateNetworkApplianceSecurityMalwareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityMalwareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSettingsSignalErrorFull() instead")
    void updateNetworkApplianceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSingleLanSignalErrorFull() instead")
    void updateNetworkApplianceSingleLanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSingleLanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSsidSignalErrorFull() instead")
    void updateNetworkApplianceSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceStaticRouteSignalErrorFull() instead")
    void updateNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingRulesSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlanSignalErrorFull() instead")
    void updateNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlansSettingsSignalErrorFull() instead")
    void updateNetworkApplianceVlansSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlansSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnBgpSignalErrorFull() instead")
    void updateNetworkApplianceVpnBgpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnBgpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnSiteToSiteVpnSignalErrorFull() instead")
    void updateNetworkApplianceVpnSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceWarmSpareSignalErrorFull() instead")
    void updateNetworkApplianceWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void updateNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraWirelessProfileSignalErrorFull() instead")
    void updateNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayDhcpSignalErrorFull() instead")
    void updateNetworkCellularGatewayDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewaySubnetPoolSignalErrorFull() instead")
    void updateNetworkCellularGatewaySubnetPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewaySubnetPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayUplinkSignalErrorFull() instead")
    void updateNetworkCellularGatewayUplinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayUplinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientPolicySignalErrorFull() instead")
    void updateNetworkClientPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientSplashAuthorizationStatusSignalErrorFull() instead")
    void updateNetworkClientSplashAuthorizationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientSplashAuthorizationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedGroupSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesStagedStagesSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesStagedStagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesStagedStagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFirmwareUpgradesSignalErrorFull() instead")
    void updateNetworkFirmwareUpgradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFirmwareUpgradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkFloorPlanSignalErrorFull() instead")
    void updateNetworkFloorPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkFloorPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkGroupPolicySignalErrorFull() instead")
    void updateNetworkGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMerakiAuthUserSignalErrorFull() instead")
    void updateNetworkMerakiAuthUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMerakiAuthUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMqttBrokerSignalErrorFull() instead")
    void updateNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkNetflowSignalErrorFull() instead")
    void updateNetworkNetflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkNetflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSensorAlertsProfileSignalErrorFull() instead")
    void updateNetworkSensorAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSensorAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSettingsSignalErrorFull() instead")
    void updateNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesFieldsSignalErrorFull() instead")
    void updateNetworkSmDevicesFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmTargetGroupSignalErrorFull() instead")
    void updateNetworkSmTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSnmpSignalErrorFull() instead")
    void updateNetworkSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessControlListsSignalErrorFull() instead")
    void updateNetworkSwitchAccessControlListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessControlListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessPolicySignalErrorFull() instead")
    void updateNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAlternateManagementInterfaceSignalErrorFull() instead")
    void updateNetworkSwitchAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull() instead")
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicySignalErrorFull() instead")
    void updateNetworkSwitchDhcpServerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDscpToCosMappingsSignalErrorFull() instead")
    void updateNetworkSwitchDscpToCosMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDscpToCosMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchLinkAggregationSignalErrorFull() instead")
    void updateNetworkSwitchLinkAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchLinkAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchMtuSignalErrorFull() instead")
    void updateNetworkSwitchMtuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchMtuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchPortScheduleSignalErrorFull() instead")
    void updateNetworkSwitchPortScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchPortScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRuleSignalErrorFull() instead")
    void updateNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRulesOrderSignalErrorFull() instead")
    void updateNetworkSwitchQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingOspfSignalErrorFull() instead")
    void updateNetworkSwitchRoutingOspfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingOspfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalErrorFull() instead")
    void updateNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStormControlSignalErrorFull() instead")
    void updateNetworkSwitchStormControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStormControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStpSignalErrorFull() instead")
    void updateNetworkSwitchStpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSyslogServersSignalErrorFull() instead")
    void updateNetworkSyslogServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSyslogServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkTrafficAnalysisSignalErrorFull() instead")
    void updateNetworkTrafficAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkTrafficAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksHttpServerSignalErrorFull() instead")
    void updateNetworkWebhooksHttpServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksHttpServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWebhooksPayloadTemplateSignalErrorFull() instead")
    void updateNetworkWebhooksPayloadTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWebhooksPayloadTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessAlternateManagementInterfaceSignalErrorFull() instead")
    void updateNetworkWirelessAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBillingSignalErrorFull() instead")
    void updateNetworkWirelessBillingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBillingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBluetoothSettingsSignalErrorFull() instead")
    void updateNetworkWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessRfProfileSignalErrorFull() instead")
    void updateNetworkWirelessRfProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessRfProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidBonjourForwardingSignalErrorFull() instead")
    void updateNetworkWirelessSsidBonjourForwardingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidBonjourForwardingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull() instead")
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidDeviceTypeGroupPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidEapOverrideSignalErrorFull() instead")
    void updateNetworkWirelessSsidEapOverrideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidEapOverrideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidHotspot20SignalErrorFull() instead")
    void updateNetworkWirelessSsidHotspot20SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidHotspot20SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidIdentityPskSignalErrorFull() instead")
    void updateNetworkWirelessSsidIdentityPskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidIdentityPskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSchedulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidTrafficShapingRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalErrorFull() instead")
    void updateNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSignalErrorFull() instead")
    void updateNetworkWirelessSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSignalErrorFull() instead")
    void updateNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationActionBatchSignalErrorFull() instead")
    void updateOrganizationActionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationActionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdminSignalErrorFull() instead")
    void updateOrganizationAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAlertsProfileSignalErrorFull() instead")
    void updateOrganizationAlertsProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAlertsProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceSecurityIntrusionSignalErrorFull() instead")
    void updateOrganizationApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull() instead")
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull() instead")
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPoliciesPrioritiesSignalErrorFull() instead")
    void updateOrganizationBrandingPoliciesPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPoliciesPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBrandingPolicySignalErrorFull() instead")
    void updateOrganizationBrandingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBrandingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationCameraOnboardingStatusesSignalErrorFull() instead")
    void updateOrganizationCameraOnboardingStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationCameraOnboardingStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSignalErrorFull() instead")
    void updateOrganizationConfigTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationEarlyAccessFeaturesOptInSignalErrorFull() instead")
    void updateOrganizationEarlyAccessFeaturesOptInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationEarlyAccessFeaturesOptInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void updateOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLicenseSignalErrorFull() instead")
    void updateOrganizationLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationLoginSecuritySignalErrorFull() instead")
    void updateOrganizationLoginSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationLoginSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectSignalErrorFull() instead")
    void updateOrganizationPolicyObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationPolicyObjectsGroupSignalErrorFull() instead")
    void updateOrganizationPolicyObjectsGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationPolicyObjectsGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlIdpSignalErrorFull() instead")
    void updateOrganizationSamlIdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlIdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlRoleSignalErrorFull() instead")
    void updateOrganizationSamlRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSamlSignalErrorFull() instead")
    void updateOrganizationSamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSnmpSignalErrorFull() instead")
    void updateOrganizationSnmpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSnmpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSignalErrorFull() instead")
    void updateOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vmxNetworkDevicesClaimSignalErrorFull() instead")
    void vmxNetworkDevicesClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vmxNetworkDevicesClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDevicesSignalErrorFull() instead")
    void wipeNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
