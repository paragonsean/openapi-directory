/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStaticRoutesApi_H
#define OAI_OAIStaticRoutesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAICreateNetworkApplianceStaticRoute_request.h"
#include "OAIGetDeviceSwitchRoutingStaticRoute_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAIUpdateNetworkApplianceStaticRoute_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStaticRoutesApi : public QObject {
    Q_OBJECT

public:
    OAIStaticRoutesApi(const int timeOut = 0);
    ~OAIStaticRoutesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createDeviceSwitchRoutingStaticRoute(const QString &serial, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_static_route_request OAICreateNetworkApplianceStaticRoute_request [required]
    */
    virtual void createNetworkApplianceStaticRoute(const QString &network_id, const OAICreateNetworkApplianceStaticRoute_request &oai_create_network_appliance_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoutes(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceStaticRoutes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoutes(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_network_appliance_static_route_request OAIUpdateNetworkApplianceStaticRoute_request [optional]
    */
    virtual void updateNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceStaticRoute_request> &oai_update_network_appliance_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void createNetworkApplianceStaticRouteSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void deleteDeviceSwitchRoutingStaticRouteSignal();
    void deleteNetworkApplianceStaticRouteSignal();
    void deleteNetworkSwitchStackRoutingStaticRouteSignal();
    void getDeviceSwitchRoutingStaticRouteSignal(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkApplianceStaticRouteSignal(OAIObject summary);
    void getNetworkApplianceStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void updateDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void updateNetworkApplianceStaticRouteSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);


    void createDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalError() instead")
    void createDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceStaticRouteSignalError() instead")
    void createNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalError() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceStaticRouteSignalError() instead")
    void deleteNetworkApplianceStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalError() instead")
    void getDeviceSwitchRoutingStaticRouteSignalE(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalError(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalError() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRouteSignalError() instead")
    void getNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRoutesSignalError() instead")
    void getNetworkApplianceStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalError() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceStaticRouteSignalError() instead")
    void updateNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void createDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceStaticRouteSignalErrorFull() instead")
    void createNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceStaticRouteSignalErrorFull() instead")
    void deleteNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRouteSignalErrorFull() instead")
    void getNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRoutesSignalErrorFull() instead")
    void getNetworkApplianceStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceStaticRouteSignalErrorFull() instead")
    void updateNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
