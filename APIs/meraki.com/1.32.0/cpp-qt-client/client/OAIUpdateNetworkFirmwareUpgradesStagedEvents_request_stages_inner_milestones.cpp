/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones() {
    this->initializeModel();
}

OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::~OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones() {}

void OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::initializeModel() {

    m_scheduled_for_isSet = false;
    m_scheduled_for_isValid = false;
}

void OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::fromJsonObject(QJsonObject json) {

    m_scheduled_for_isValid = ::OpenAPI::fromJsonValue(m_scheduled_for, json[QString("scheduledFor")]);
    m_scheduled_for_isSet = !json[QString("scheduledFor")].isNull() && m_scheduled_for_isValid;
}

QString OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::asJsonObject() const {
    QJsonObject obj;
    if (m_scheduled_for_isSet) {
        obj.insert(QString("scheduledFor"), ::OpenAPI::toJsonValue(m_scheduled_for));
    }
    return obj;
}

QString OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::getScheduledFor() const {
    return m_scheduled_for;
}
void OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::setScheduledFor(const QString &scheduled_for) {
    m_scheduled_for = scheduled_for;
    m_scheduled_for_isSet = true;
}

bool OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::is_scheduled_for_Set() const{
    return m_scheduled_for_isSet;
}

bool OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::is_scheduled_for_Valid() const{
    return m_scheduled_for_isValid;
}

bool OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheduled_for_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkFirmwareUpgradesStagedEvents_request_stages_inner_milestones::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scheduled_for_isValid && true;
}

} // namespace OpenAPI
