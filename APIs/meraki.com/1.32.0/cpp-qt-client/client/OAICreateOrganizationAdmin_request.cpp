/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationAdmin_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationAdmin_request::OAICreateOrganizationAdmin_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationAdmin_request::OAICreateOrganizationAdmin_request() {
    this->initializeModel();
}

OAICreateOrganizationAdmin_request::~OAICreateOrganizationAdmin_request() {}

void OAICreateOrganizationAdmin_request::initializeModel() {

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_org_access_isSet = false;
    m_org_access_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateOrganizationAdmin_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationAdmin_request::fromJsonObject(QJsonObject json) {

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("authenticationMethod")]);
    m_authentication_method_isSet = !json[QString("authenticationMethod")].isNull() && m_authentication_method_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_org_access_isValid = ::OpenAPI::fromJsonValue(m_org_access, json[QString("orgAccess")]);
    m_org_access_isSet = !json[QString("orgAccess")].isNull() && m_org_access_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateOrganizationAdmin_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationAdmin_request::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_method_isSet) {
        obj.insert(QString("authenticationMethod"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_org_access_isSet) {
        obj.insert(QString("orgAccess"), ::OpenAPI::toJsonValue(m_org_access));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateOrganizationAdmin_request::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAICreateOrganizationAdmin_request::setAuthenticationMethod(const QString &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAICreateOrganizationAdmin_request::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAICreateOrganizationAdmin_request::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

QString OAICreateOrganizationAdmin_request::getEmail() const {
    return m_email;
}
void OAICreateOrganizationAdmin_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateOrganizationAdmin_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateOrganizationAdmin_request::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICreateOrganizationAdmin_request::getName() const {
    return m_name;
}
void OAICreateOrganizationAdmin_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateOrganizationAdmin_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateOrganizationAdmin_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICreateOrganizationAdmin_request_networks_inner> OAICreateOrganizationAdmin_request::getNetworks() const {
    return m_networks;
}
void OAICreateOrganizationAdmin_request::setNetworks(const QList<OAICreateOrganizationAdmin_request_networks_inner> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAICreateOrganizationAdmin_request::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAICreateOrganizationAdmin_request::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAICreateOrganizationAdmin_request::getOrgAccess() const {
    return m_org_access;
}
void OAICreateOrganizationAdmin_request::setOrgAccess(const QString &org_access) {
    m_org_access = org_access;
    m_org_access_isSet = true;
}

bool OAICreateOrganizationAdmin_request::is_org_access_Set() const{
    return m_org_access_isSet;
}

bool OAICreateOrganizationAdmin_request::is_org_access_Valid() const{
    return m_org_access_isValid;
}

QList<OAICreateOrganizationAdmin_request_tags_inner> OAICreateOrganizationAdmin_request::getTags() const {
    return m_tags;
}
void OAICreateOrganizationAdmin_request::setTags(const QList<OAICreateOrganizationAdmin_request_tags_inner> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateOrganizationAdmin_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateOrganizationAdmin_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateOrganizationAdmin_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationAdmin_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_name_isValid && m_org_access_isValid && true;
}

} // namespace OpenAPI
