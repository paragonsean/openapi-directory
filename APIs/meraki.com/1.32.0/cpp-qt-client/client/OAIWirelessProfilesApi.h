/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWirelessProfilesApi_H
#define OAI_OAIWirelessProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkCameraWirelessProfile_request.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceCameraWirelessProfiles_request.h"
#include "OAIUpdateNetworkCameraWirelessProfile_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWirelessProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIWirelessProfilesApi(const int timeOut = 0);
    ~OAIWirelessProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_camera_wireless_profile_request OAICreateNetworkCameraWirelessProfile_request [required]
    */
    virtual void createNetworkCameraWirelessProfile(const QString &network_id, const OAICreateNetworkCameraWirelessProfile_request &oai_create_network_camera_wireless_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    */
    virtual void deleteNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraWirelessProfiles(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    */
    virtual void getNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraWirelessProfiles(const QString &network_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_wireless_profiles_request OAIUpdateDeviceCameraWirelessProfiles_request [required]
    */
    virtual void updateDeviceCameraWirelessProfiles(const QString &serial, const OAIUpdateDeviceCameraWirelessProfiles_request &oai_update_device_camera_wireless_profiles_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  wireless_profile_id QString [required]
    * @param[in]  oai_update_network_camera_wireless_profile_request OAIUpdateNetworkCameraWirelessProfile_request [optional]
    */
    virtual void updateNetworkCameraWirelessProfile(const QString &network_id, const QString &wireless_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraWirelessProfile_request> &oai_update_network_camera_wireless_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraWirelessProfile_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraWirelessProfilesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCameraWirelessProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkCameraWirelessProfileSignal(OAIObject summary);
    void deleteNetworkCameraWirelessProfileSignal();
    void getDeviceCameraWirelessProfilesSignal(OAIObject summary);
    void getNetworkCameraWirelessProfileSignal(OAIObject summary);
    void getNetworkCameraWirelessProfilesSignal(QList<OAIObject> summary);
    void updateDeviceCameraWirelessProfilesSignal(OAIObject summary);
    void updateNetworkCameraWirelessProfileSignal(OAIObject summary);


    void createNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateDeviceCameraWirelessProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCameraWirelessProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkCameraWirelessProfileSignalError() instead")
    void createNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraWirelessProfileSignalError() instead")
    void deleteNetworkCameraWirelessProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraWirelessProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraWirelessProfilesSignalError() instead")
    void getDeviceCameraWirelessProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraWirelessProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfileSignalError() instead")
    void getNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfilesSignalError() instead")
    void getNetworkCameraWirelessProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraWirelessProfilesSignalError() instead")
    void updateDeviceCameraWirelessProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraWirelessProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraWirelessProfileSignalError() instead")
    void updateNetworkCameraWirelessProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraWirelessProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkCameraWirelessProfileSignalErrorFull() instead")
    void createNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraWirelessProfileSignalErrorFull() instead")
    void deleteNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraWirelessProfilesSignalErrorFull() instead")
    void getDeviceCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfileSignalErrorFull() instead")
    void getNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraWirelessProfilesSignalErrorFull() instead")
    void getNetworkCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraWirelessProfilesSignalErrorFull() instead")
    void updateDeviceCameraWirelessProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraWirelessProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraWirelessProfileSignalErrorFull() instead")
    void updateNetworkCameraWirelessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraWirelessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
