/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDeviceSwitchRoutingInterfaces200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceSwitchRoutingInterfaces200ResponseInner {
  public static final String SERIALIZED_NAME_DEFAULT_GATEWAY = "defaultGateway";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GATEWAY)
  private String defaultGateway;

  public static final String SERIALIZED_NAME_INTERFACE_ID = "interfaceId";
  @SerializedName(SERIALIZED_NAME_INTERFACE_ID)
  private String interfaceId;

  public static final String SERIALIZED_NAME_INTERFACE_IP = "interfaceIp";
  @SerializedName(SERIALIZED_NAME_INTERFACE_IP)
  private String interfaceIp;

  public static final String SERIALIZED_NAME_IPV6 = "ipv6";
  @SerializedName(SERIALIZED_NAME_IPV6)
  private GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 ipv6;

  public static final String SERIALIZED_NAME_MULTICAST_ROUTING = "multicastRouting";
  @SerializedName(SERIALIZED_NAME_MULTICAST_ROUTING)
  private String multicastRouting;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OSPF_SETTINGS = "ospfSettings";
  @SerializedName(SERIALIZED_NAME_OSPF_SETTINGS)
  private GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings ospfSettings;

  public static final String SERIALIZED_NAME_OSPF_V3 = "ospfV3";
  @SerializedName(SERIALIZED_NAME_OSPF_V3)
  private GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 ospfV3;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  public static final String SERIALIZED_NAME_VLAN_ID = "vlanId";
  @SerializedName(SERIALIZED_NAME_VLAN_ID)
  private Integer vlanId;

  public GetDeviceSwitchRoutingInterfaces200ResponseInner() {
  }

  public GetDeviceSwitchRoutingInterfaces200ResponseInner defaultGateway(String defaultGateway) {
    this.defaultGateway = defaultGateway;
    return this;
  }

  /**
   * IPv4 default gateway
   * @return defaultGateway
   */
  @javax.annotation.Nullable
  public String getDefaultGateway() {
    return defaultGateway;
  }

  public void setDefaultGateway(String defaultGateway) {
    this.defaultGateway = defaultGateway;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

  /**
   * The id
   * @return interfaceId
   */
  @javax.annotation.Nullable
  public String getInterfaceId() {
    return interfaceId;
  }

  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner interfaceIp(String interfaceIp) {
    this.interfaceIp = interfaceIp;
    return this;
  }

  /**
   * IPv4 address
   * @return interfaceIp
   */
  @javax.annotation.Nullable
  public String getInterfaceIp() {
    return interfaceIp;
  }

  public void setInterfaceIp(String interfaceIp) {
    this.interfaceIp = interfaceIp;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner ipv6(GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 ipv6) {
    this.ipv6 = ipv6;
    return this;
  }

  /**
   * Get ipv6
   * @return ipv6
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 getIpv6() {
    return ipv6;
  }

  public void setIpv6(GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 ipv6) {
    this.ipv6 = ipv6;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner multicastRouting(String multicastRouting) {
    this.multicastRouting = multicastRouting;
    return this;
  }

  /**
   * Multicast routing status
   * @return multicastRouting
   */
  @javax.annotation.Nullable
  public String getMulticastRouting() {
    return multicastRouting;
  }

  public void setMulticastRouting(String multicastRouting) {
    this.multicastRouting = multicastRouting;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner ospfSettings(GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings ospfSettings) {
    this.ospfSettings = ospfSettings;
    return this;
  }

  /**
   * Get ospfSettings
   * @return ospfSettings
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings getOspfSettings() {
    return ospfSettings;
  }

  public void setOspfSettings(GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings ospfSettings) {
    this.ospfSettings = ospfSettings;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner ospfV3(GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 ospfV3) {
    this.ospfV3 = ospfV3;
    return this;
  }

  /**
   * Get ospfV3
   * @return ospfV3
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 getOspfV3() {
    return ospfV3;
  }

  public void setOspfV3(GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 ospfV3) {
    this.ospfV3 = ospfV3;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * IPv4 subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  public GetDeviceSwitchRoutingInterfaces200ResponseInner vlanId(Integer vlanId) {
    this.vlanId = vlanId;
    return this;
  }

  /**
   * VLAN id
   * @return vlanId
   */
  @javax.annotation.Nullable
  public Integer getVlanId() {
    return vlanId;
  }

  public void setVlanId(Integer vlanId) {
    this.vlanId = vlanId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceSwitchRoutingInterfaces200ResponseInner getDeviceSwitchRoutingInterfaces200ResponseInner = (GetDeviceSwitchRoutingInterfaces200ResponseInner) o;
    return Objects.equals(this.defaultGateway, getDeviceSwitchRoutingInterfaces200ResponseInner.defaultGateway) &&
        Objects.equals(this.interfaceId, getDeviceSwitchRoutingInterfaces200ResponseInner.interfaceId) &&
        Objects.equals(this.interfaceIp, getDeviceSwitchRoutingInterfaces200ResponseInner.interfaceIp) &&
        Objects.equals(this.ipv6, getDeviceSwitchRoutingInterfaces200ResponseInner.ipv6) &&
        Objects.equals(this.multicastRouting, getDeviceSwitchRoutingInterfaces200ResponseInner.multicastRouting) &&
        Objects.equals(this.name, getDeviceSwitchRoutingInterfaces200ResponseInner.name) &&
        Objects.equals(this.ospfSettings, getDeviceSwitchRoutingInterfaces200ResponseInner.ospfSettings) &&
        Objects.equals(this.ospfV3, getDeviceSwitchRoutingInterfaces200ResponseInner.ospfV3) &&
        Objects.equals(this.subnet, getDeviceSwitchRoutingInterfaces200ResponseInner.subnet) &&
        Objects.equals(this.vlanId, getDeviceSwitchRoutingInterfaces200ResponseInner.vlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultGateway, interfaceId, interfaceIp, ipv6, multicastRouting, name, ospfSettings, ospfV3, subnet, vlanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceSwitchRoutingInterfaces200ResponseInner {\n");
    sb.append("    defaultGateway: ").append(toIndentedString(defaultGateway)).append("\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    interfaceIp: ").append(toIndentedString(interfaceIp)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    multicastRouting: ").append(toIndentedString(multicastRouting)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ospfSettings: ").append(toIndentedString(ospfSettings)).append("\n");
    sb.append("    ospfV3: ").append(toIndentedString(ospfV3)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultGateway");
    openapiFields.add("interfaceId");
    openapiFields.add("interfaceIp");
    openapiFields.add("ipv6");
    openapiFields.add("multicastRouting");
    openapiFields.add("name");
    openapiFields.add("ospfSettings");
    openapiFields.add("ospfV3");
    openapiFields.add("subnet");
    openapiFields.add("vlanId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceSwitchRoutingInterfaces200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceSwitchRoutingInterfaces200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceSwitchRoutingInterfaces200ResponseInner is not found in the empty JSON string", GetDeviceSwitchRoutingInterfaces200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceSwitchRoutingInterfaces200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceSwitchRoutingInterfaces200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultGateway") != null && !jsonObj.get("defaultGateway").isJsonNull()) && !jsonObj.get("defaultGateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultGateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultGateway").toString()));
      }
      if ((jsonObj.get("interfaceId") != null && !jsonObj.get("interfaceId").isJsonNull()) && !jsonObj.get("interfaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceId").toString()));
      }
      if ((jsonObj.get("interfaceIp") != null && !jsonObj.get("interfaceIp").isJsonNull()) && !jsonObj.get("interfaceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceIp").toString()));
      }
      // validate the optional field `ipv6`
      if (jsonObj.get("ipv6") != null && !jsonObj.get("ipv6").isJsonNull()) {
        GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6.validateJsonElement(jsonObj.get("ipv6"));
      }
      if ((jsonObj.get("multicastRouting") != null && !jsonObj.get("multicastRouting").isJsonNull()) && !jsonObj.get("multicastRouting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multicastRouting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multicastRouting").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `ospfSettings`
      if (jsonObj.get("ospfSettings") != null && !jsonObj.get("ospfSettings").isJsonNull()) {
        GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings.validateJsonElement(jsonObj.get("ospfSettings"));
      }
      // validate the optional field `ospfV3`
      if (jsonObj.get("ospfV3") != null && !jsonObj.get("ospfV3").isJsonNull()) {
        GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3.validateJsonElement(jsonObj.get("ospfV3"));
      }
      if ((jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) && !jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceSwitchRoutingInterfaces200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceSwitchRoutingInterfaces200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceSwitchRoutingInterfaces200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceSwitchRoutingInterfaces200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceSwitchRoutingInterfaces200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetDeviceSwitchRoutingInterfaces200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceSwitchRoutingInterfaces200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceSwitchRoutingInterfaces200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceSwitchRoutingInterfaces200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetDeviceSwitchRoutingInterfaces200ResponseInner
   */
  public static GetDeviceSwitchRoutingInterfaces200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceSwitchRoutingInterfaces200ResponseInner.class);
  }

  /**
   * Convert an instance of GetDeviceSwitchRoutingInterfaces200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

