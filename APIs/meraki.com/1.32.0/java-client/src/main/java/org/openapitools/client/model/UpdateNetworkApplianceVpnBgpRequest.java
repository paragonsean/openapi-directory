/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkApplianceVpnBgpRequestNeighborsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkApplianceVpnBgpRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkApplianceVpnBgpRequest {
  public static final String SERIALIZED_NAME_AS_NUMBER = "asNumber";
  @SerializedName(SERIALIZED_NAME_AS_NUMBER)
  private Integer asNumber;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_IBGP_HOLD_TIMER = "ibgpHoldTimer";
  @SerializedName(SERIALIZED_NAME_IBGP_HOLD_TIMER)
  private Integer ibgpHoldTimer;

  public static final String SERIALIZED_NAME_NEIGHBORS = "neighbors";
  @SerializedName(SERIALIZED_NAME_NEIGHBORS)
  private List<UpdateNetworkApplianceVpnBgpRequestNeighborsInner> neighbors = new ArrayList<>();

  public UpdateNetworkApplianceVpnBgpRequest() {
  }

  public UpdateNetworkApplianceVpnBgpRequest asNumber(Integer asNumber) {
    this.asNumber = asNumber;
    return this;
  }

  /**
   * An Autonomous System Number (ASN) is required if you are to run BGP and peer with another BGP Speaker outside of the Auto VPN domain. This ASN will be applied to the entire Auto VPN domain. The entire 4-byte ASN range is supported. So, the ASN must be an integer between 1 and 4294967295. When absent, this field is not updated. If no value exists then it defaults to 64512.
   * @return asNumber
   */
  @javax.annotation.Nullable
  public Integer getAsNumber() {
    return asNumber;
  }

  public void setAsNumber(Integer asNumber) {
    this.asNumber = asNumber;
  }


  public UpdateNetworkApplianceVpnBgpRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Boolean value to enable or disable the BGP configuration. When BGP is enabled, the asNumber (ASN) will be autopopulated with the preconfigured ASN at other Hubs or a default value if there is no ASN configured.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateNetworkApplianceVpnBgpRequest ibgpHoldTimer(Integer ibgpHoldTimer) {
    this.ibgpHoldTimer = ibgpHoldTimer;
    return this;
  }

  /**
   * The IBGP holdtimer in seconds. The IBGP holdtimer must be an integer between 12 and 240. When absent, this field is not updated. If no value exists then it defaults to 240.
   * @return ibgpHoldTimer
   */
  @javax.annotation.Nullable
  public Integer getIbgpHoldTimer() {
    return ibgpHoldTimer;
  }

  public void setIbgpHoldTimer(Integer ibgpHoldTimer) {
    this.ibgpHoldTimer = ibgpHoldTimer;
  }


  public UpdateNetworkApplianceVpnBgpRequest neighbors(List<UpdateNetworkApplianceVpnBgpRequestNeighborsInner> neighbors) {
    this.neighbors = neighbors;
    return this;
  }

  public UpdateNetworkApplianceVpnBgpRequest addNeighborsItem(UpdateNetworkApplianceVpnBgpRequestNeighborsInner neighborsItem) {
    if (this.neighbors == null) {
      this.neighbors = new ArrayList<>();
    }
    this.neighbors.add(neighborsItem);
    return this;
  }

  /**
   * List of BGP neighbors. This list replaces the existing set of neighbors. When absent, this field is not updated.
   * @return neighbors
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkApplianceVpnBgpRequestNeighborsInner> getNeighbors() {
    return neighbors;
  }

  public void setNeighbors(List<UpdateNetworkApplianceVpnBgpRequestNeighborsInner> neighbors) {
    this.neighbors = neighbors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest = (UpdateNetworkApplianceVpnBgpRequest) o;
    return Objects.equals(this.asNumber, updateNetworkApplianceVpnBgpRequest.asNumber) &&
        Objects.equals(this.enabled, updateNetworkApplianceVpnBgpRequest.enabled) &&
        Objects.equals(this.ibgpHoldTimer, updateNetworkApplianceVpnBgpRequest.ibgpHoldTimer) &&
        Objects.equals(this.neighbors, updateNetworkApplianceVpnBgpRequest.neighbors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asNumber, enabled, ibgpHoldTimer, neighbors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkApplianceVpnBgpRequest {\n");
    sb.append("    asNumber: ").append(toIndentedString(asNumber)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ibgpHoldTimer: ").append(toIndentedString(ibgpHoldTimer)).append("\n");
    sb.append("    neighbors: ").append(toIndentedString(neighbors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asNumber");
    openapiFields.add("enabled");
    openapiFields.add("ibgpHoldTimer");
    openapiFields.add("neighbors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkApplianceVpnBgpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkApplianceVpnBgpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkApplianceVpnBgpRequest is not found in the empty JSON string", UpdateNetworkApplianceVpnBgpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkApplianceVpnBgpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkApplianceVpnBgpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkApplianceVpnBgpRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("neighbors") != null && !jsonObj.get("neighbors").isJsonNull()) {
        JsonArray jsonArrayneighbors = jsonObj.getAsJsonArray("neighbors");
        if (jsonArrayneighbors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("neighbors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `neighbors` to be an array in the JSON string but got `%s`", jsonObj.get("neighbors").toString()));
          }

          // validate the optional field `neighbors` (array)
          for (int i = 0; i < jsonArrayneighbors.size(); i++) {
            UpdateNetworkApplianceVpnBgpRequestNeighborsInner.validateJsonElement(jsonArrayneighbors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkApplianceVpnBgpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkApplianceVpnBgpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkApplianceVpnBgpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkApplianceVpnBgpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkApplianceVpnBgpRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkApplianceVpnBgpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkApplianceVpnBgpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkApplianceVpnBgpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkApplianceVpnBgpRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkApplianceVpnBgpRequest
   */
  public static UpdateNetworkApplianceVpnBgpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkApplianceVpnBgpRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkApplianceVpnBgpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

