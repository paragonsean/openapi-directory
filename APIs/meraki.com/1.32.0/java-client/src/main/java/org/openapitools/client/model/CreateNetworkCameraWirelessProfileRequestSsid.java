/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of the SSID config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkCameraWirelessProfileRequestSsid {
  /**
   * The auth mode of the SSID. It can be set to (&#39;psk&#39;, &#39;8021x-radius&#39;).
   */
  @JsonAdapter(AuthModeEnum.Adapter.class)
  public enum AuthModeEnum {
    _8021X_RADIUS("8021x-radius"),
    
    PSK("psk");

    private String value;

    AuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthModeEnum fromValue(String value) {
      for (AuthModeEnum b : AuthModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_MODE = "authMode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  private AuthModeEnum authMode;

  public static final String SERIALIZED_NAME_ENCRYPTION_MODE = "encryptionMode";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_MODE)
  private String encryptionMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PSK = "psk";
  @SerializedName(SERIALIZED_NAME_PSK)
  private String psk;

  public CreateNetworkCameraWirelessProfileRequestSsid() {
  }

  public CreateNetworkCameraWirelessProfileRequestSsid authMode(AuthModeEnum authMode) {
    this.authMode = authMode;
    return this;
  }

  /**
   * The auth mode of the SSID. It can be set to (&#39;psk&#39;, &#39;8021x-radius&#39;).
   * @return authMode
   */
  @javax.annotation.Nullable
  public AuthModeEnum getAuthMode() {
    return authMode;
  }

  public void setAuthMode(AuthModeEnum authMode) {
    this.authMode = authMode;
  }


  public CreateNetworkCameraWirelessProfileRequestSsid encryptionMode(String encryptionMode) {
    this.encryptionMode = encryptionMode;
    return this;
  }

  /**
   * The encryption mode of the SSID. It can be set to (&#39;wpa&#39;, &#39;wpa-eap&#39;). With &#39;wpa&#39; mode, the authMode should be &#39;psk&#39; and with &#39;wpa-eap&#39; the authMode should be &#39;8021x-radius&#39;
   * @return encryptionMode
   */
  @javax.annotation.Nullable
  public String getEncryptionMode() {
    return encryptionMode;
  }

  public void setEncryptionMode(String encryptionMode) {
    this.encryptionMode = encryptionMode;
  }


  public CreateNetworkCameraWirelessProfileRequestSsid name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SSID.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkCameraWirelessProfileRequestSsid psk(String psk) {
    this.psk = psk;
    return this;
  }

  /**
   * The pre-shared key of the SSID.
   * @return psk
   */
  @javax.annotation.Nullable
  public String getPsk() {
    return psk;
  }

  public void setPsk(String psk) {
    this.psk = psk;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkCameraWirelessProfileRequestSsid createNetworkCameraWirelessProfileRequestSsid = (CreateNetworkCameraWirelessProfileRequestSsid) o;
    return Objects.equals(this.authMode, createNetworkCameraWirelessProfileRequestSsid.authMode) &&
        Objects.equals(this.encryptionMode, createNetworkCameraWirelessProfileRequestSsid.encryptionMode) &&
        Objects.equals(this.name, createNetworkCameraWirelessProfileRequestSsid.name) &&
        Objects.equals(this.psk, createNetworkCameraWirelessProfileRequestSsid.psk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMode, encryptionMode, name, psk);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkCameraWirelessProfileRequestSsid {\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    encryptionMode: ").append(toIndentedString(encryptionMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    psk: ").append(toIndentedString(psk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authMode");
    openapiFields.add("encryptionMode");
    openapiFields.add("name");
    openapiFields.add("psk");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkCameraWirelessProfileRequestSsid
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkCameraWirelessProfileRequestSsid.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkCameraWirelessProfileRequestSsid is not found in the empty JSON string", CreateNetworkCameraWirelessProfileRequestSsid.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkCameraWirelessProfileRequestSsid.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkCameraWirelessProfileRequestSsid` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) && !jsonObj.get("authMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authMode").toString()));
      }
      // validate the optional field `authMode`
      if (jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) {
        AuthModeEnum.validateJsonElement(jsonObj.get("authMode"));
      }
      if ((jsonObj.get("encryptionMode") != null && !jsonObj.get("encryptionMode").isJsonNull()) && !jsonObj.get("encryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionMode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("psk") != null && !jsonObj.get("psk").isJsonNull()) && !jsonObj.get("psk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psk").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkCameraWirelessProfileRequestSsid.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkCameraWirelessProfileRequestSsid' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkCameraWirelessProfileRequestSsid> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkCameraWirelessProfileRequestSsid.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkCameraWirelessProfileRequestSsid>() {
           @Override
           public void write(JsonWriter out, CreateNetworkCameraWirelessProfileRequestSsid value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkCameraWirelessProfileRequestSsid read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkCameraWirelessProfileRequestSsid given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkCameraWirelessProfileRequestSsid
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkCameraWirelessProfileRequestSsid
   */
  public static CreateNetworkCameraWirelessProfileRequestSsid fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkCameraWirelessProfileRequestSsid.class);
  }

  /**
   * Convert an instance of CreateNetworkCameraWirelessProfileRequestSsid to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

