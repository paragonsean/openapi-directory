/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetNetworkClient200Response;
import org.openapitools.client.model.GetNetworkClients200Response;
import org.openapitools.client.model.GetOrganizationClientsBandwidthUsageHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationClientsOverview200Response;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDeviceClients_1
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceClients_1Call(String serial, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/clients"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceClients_1ValidateBeforeCall(String serial, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceClients_1(Async)");
        }

        return getDeviceClients_1Call(serial, t0, timespan, _callback);

    }

    /**
     * List the clients of a device, up to a maximum of a month ago
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getDeviceClients_1(String serial, String t0, Float timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getDeviceClients_1WithHttpInfo(serial, t0, timespan);
        return localVarResp.getData();
    }

    /**
     * List the clients of a device, up to a maximum of a month ago
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getDeviceClients_1WithHttpInfo(String serial, String t0, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getDeviceClients_1ValidateBeforeCall(serial, t0, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the clients of a device, up to a maximum of a month ago (asynchronously)
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceClients_1Async(String serial, String t0, Float timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceClients_1ValidateBeforeCall(serial, t0, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceClientSecurityEvents_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceClientSecurityEvents_1Call(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/clients/{clientId}/security/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceClientSecurityEvents_1ValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceClientSecurityEvents_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkApplianceClientSecurityEvents_1(Async)");
        }

        return getNetworkApplianceClientSecurityEvents_1Call(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);

    }

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceClientSecurityEvents_1(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceClientSecurityEvents_1WithHttpInfo(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceClientSecurityEvents_1WithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceClientSecurityEvents_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the security events for a client (asynchronously)
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceClientSecurityEvents_1Async(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceClientSecurityEvents_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientPolicy_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientPolicy_1Call(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/policy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientPolicy_1ValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientPolicy_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientPolicy_1(Async)");
        }

        return getNetworkClientPolicy_1Call(networkId, clientId, _callback);

    }

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientPolicy_1(String networkId, String clientId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientPolicy_1WithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientPolicy_1WithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientPolicy_1ValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the policy assigned to a client on the network (asynchronously)
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientPolicy_1Async(String networkId, String clientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientPolicy_1ValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientSplashAuthorizationStatus_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientSplashAuthorizationStatus_1Call(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientSplashAuthorizationStatus_1ValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus_1(Async)");
        }

        return getNetworkClientSplashAuthorizationStatus_1Call(networkId, clientId, _callback);

    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientSplashAuthorizationStatus_1(String networkId, String clientId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientSplashAuthorizationStatus_1WithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientSplashAuthorizationStatus_1WithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientSplashAuthorizationStatus_1ValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash (asynchronously)
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientSplashAuthorizationStatus_1Async(String networkId, String clientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientSplashAuthorizationStatus_1ValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientTrafficHistory_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientTrafficHistory_1Call(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/trafficHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientTrafficHistory_1ValidateBeforeCall(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientTrafficHistory_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientTrafficHistory_1(Async)");
        }

        return getNetworkClientTrafficHistory_1Call(networkId, clientId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the client&#39;s network traffic data over time
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientTrafficHistory_1(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientTrafficHistory_1WithHttpInfo(networkId, clientId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the client&#39;s network traffic data over time
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientTrafficHistory_1WithHttpInfo(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientTrafficHistory_1ValidateBeforeCall(networkId, clientId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client&#39;s network traffic data over time (asynchronously)
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientTrafficHistory_1Async(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientTrafficHistory_1ValidateBeforeCall(networkId, clientId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientUsageHistory_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientUsageHistory_1Call(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/usageHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientUsageHistory_1ValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientUsageHistory_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientUsageHistory_1(Async)");
        }

        return getNetworkClientUsageHistory_1Call(networkId, clientId, _callback);

    }

    /**
     * Return the client&#39;s daily usage history
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientUsageHistory_1(String networkId, String clientId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientUsageHistory_1WithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the client&#39;s daily usage history
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientUsageHistory_1WithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientUsageHistory_1ValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client&#39;s daily usage history (asynchronously)
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientUsageHistory_1Async(String networkId, String clientId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientUsageHistory_1ValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClient_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClient_1Call(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClient_1ValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClient_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClient_1(Async)");
        }

        return getNetworkClient_1Call(networkId, clientId, _callback);

    }

    /**
     * Return the client associated with the given identifier
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return GetNetworkClient200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkClient200Response getNetworkClient_1(String networkId, String clientId) throws ApiException {
        ApiResponse<GetNetworkClient200Response> localVarResp = getNetworkClient_1WithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the client associated with the given identifier
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;GetNetworkClient200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkClient200Response> getNetworkClient_1WithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClient_1ValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<GetNetworkClient200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client associated with the given identifier (asynchronously)
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClient_1Async(String networkId, String clientId, final ApiCallback<GetNetworkClient200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClient_1ValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkClient200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsApplicationUsage_1
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsApplicationUsage_1Call(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/applicationUsage"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clients", clients));
        }

        if (ssidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssidNumber", ssidNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsApplicationUsage_1ValidateBeforeCall(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsApplicationUsage_1(Async)");
        }

        // verify the required parameter 'clients' is set
        if (clients == null) {
            throw new ApiException("Missing the required parameter 'clients' when calling getNetworkClientsApplicationUsage_1(Async)");
        }

        return getNetworkClientsApplicationUsage_1Call(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);

    }

    /**
     * Return the application usage data for clients
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsApplicationUsage_1(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsApplicationUsage_1WithHttpInfo(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return the application usage data for clients
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsApplicationUsage_1WithHttpInfo(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsApplicationUsage_1ValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the application usage data for clients (asynchronously)
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsApplicationUsage_1Async(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsApplicationUsage_1ValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsBandwidthUsageHistory_1
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsBandwidthUsageHistory_1Call(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/bandwidthUsageHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsBandwidthUsageHistory_1ValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsBandwidthUsageHistory_1(Async)");
        }

        return getNetworkClientsBandwidthUsageHistory_1Call(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsBandwidthUsageHistory_1(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsBandwidthUsageHistory_1WithHttpInfo(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsBandwidthUsageHistory_1WithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsBandwidthUsageHistory_1ValidateBeforeCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second. (asynchronously)
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsBandwidthUsageHistory_1Async(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsBandwidthUsageHistory_1ValidateBeforeCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsOverview_1
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsOverview_1Call(String networkId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/overview"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsOverview_1ValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsOverview_1(Async)");
        }

        return getNetworkClientsOverview_1Call(networkId, t0, t1, timespan, resolution, _callback);

    }

    /**
     * Return overview statistics for network clients
     * Return overview statistics for network clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientsOverview_1(String networkId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientsOverview_1WithHttpInfo(networkId, t0, t1, timespan, resolution);
        return localVarResp.getData();
    }

    /**
     * Return overview statistics for network clients
     * Return overview statistics for network clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientsOverview_1WithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsOverview_1ValidateBeforeCall(networkId, t0, t1, timespan, resolution, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return overview statistics for network clients (asynchronously)
     * Return overview statistics for network clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsOverview_1Async(String networkId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsOverview_1ValidateBeforeCall(networkId, t0, t1, timespan, resolution, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsUsageHistories_1
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsUsageHistories_1Call(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/usageHistories"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clients", clients));
        }

        if (ssidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssidNumber", ssidNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsUsageHistories_1ValidateBeforeCall(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsUsageHistories_1(Async)");
        }

        // verify the required parameter 'clients' is set
        if (clients == null) {
            throw new ApiException("Missing the required parameter 'clients' when calling getNetworkClientsUsageHistories_1(Async)");
        }

        return getNetworkClientsUsageHistories_1Call(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);

    }

    /**
     * Return the usage histories for clients
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsUsageHistories_1(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsUsageHistories_1WithHttpInfo(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return the usage histories for clients
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsUsageHistories_1WithHttpInfo(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsUsageHistories_1ValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the usage histories for clients (asynchronously)
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsUsageHistories_1Async(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsUsageHistories_1ValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClients_1
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClients_1Call(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "statuses", statuses));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (ip6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip6", ip6));
        }

        if (ip6Local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip6Local", ip6Local));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (os != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("os", os));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (recentDeviceConnections != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "recentDeviceConnections", recentDeviceConnections));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClients_1ValidateBeforeCall(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClients_1(Async)");
        }

        return getNetworkClients_1Call(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections, _callback);

    }

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @return GetNetworkClients200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public GetNetworkClients200Response getNetworkClients_1(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections) throws ApiException {
        ApiResponse<GetNetworkClients200Response> localVarResp = getNetworkClients_1WithHttpInfo(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections);
        return localVarResp.getData();
    }

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @return ApiResponse&lt;GetNetworkClients200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkClients200Response> getNetworkClients_1WithHttpInfo(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClients_1ValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections, null);
        Type localVarReturnType = new TypeToken<GetNetworkClients200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the clients that have used this network in the timespan (asynchronously)
     * List the clients that have used this network in the timespan
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClients_1Async(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections, final ApiCallback<GetNetworkClients200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClients_1ValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkClients200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessClientConnectionStats_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientConnectionStats_1Call(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/clients/{clientId}/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessClientConnectionStats_1ValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessClientConnectionStats_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkWirelessClientConnectionStats_1(Async)");
        }

        return getNetworkWirelessClientConnectionStats_1Call(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for a given client on this network
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessClientConnectionStats_1(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessClientConnectionStats_1WithHttpInfo(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for a given client on this network
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessClientConnectionStats_1WithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessClientConnectionStats_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for a given client on this network (asynchronously)
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientConnectionStats_1Async(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessClientConnectionStats_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessClientConnectivityEvents_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param types A list of event types to include. If not specified, events of all types will be returned. Valid types are &#39;assoc&#39;, &#39;disassoc&#39;, &#39;auth&#39;, &#39;deauth&#39;, &#39;dns&#39;, &#39;dhcp&#39;, &#39;roam&#39;, &#39;connection&#39; and/or &#39;sticky&#39;. (optional)
     * @param includedSeverities A list of severities to include. If not specified, events of all severities will be returned. Valid severities are &#39;good&#39;, &#39;info&#39;, &#39;warn&#39; and/or &#39;bad&#39;. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39;, &#39;6&#39;). (optional)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param deviceSerial Filter results by an AP&#39;s serial number. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientConnectivityEvents_1Call(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> types, List<String> includedSeverities, String band, Integer ssidNumber, String deviceSerial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "types", types));
        }

        if (includedSeverities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includedSeverities", includedSeverities));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssidNumber", ssidNumber));
        }

        if (deviceSerial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceSerial", deviceSerial));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessClientConnectivityEvents_1ValidateBeforeCall(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> types, List<String> includedSeverities, String band, Integer ssidNumber, String deviceSerial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessClientConnectivityEvents_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkWirelessClientConnectivityEvents_1(Async)");
        }

        return getNetworkWirelessClientConnectivityEvents_1Call(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial, _callback);

    }

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     * List the wireless connectivity events for a client within a network in the timespan.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param types A list of event types to include. If not specified, events of all types will be returned. Valid types are &#39;assoc&#39;, &#39;disassoc&#39;, &#39;auth&#39;, &#39;deauth&#39;, &#39;dns&#39;, &#39;dhcp&#39;, &#39;roam&#39;, &#39;connection&#39; and/or &#39;sticky&#39;. (optional)
     * @param includedSeverities A list of severities to include. If not specified, events of all severities will be returned. Valid severities are &#39;good&#39;, &#39;info&#39;, &#39;warn&#39; and/or &#39;bad&#39;. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39;, &#39;6&#39;). (optional)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param deviceSerial Filter results by an AP&#39;s serial number. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkWirelessClientConnectivityEvents_1(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> types, List<String> includedSeverities, String band, Integer ssidNumber, String deviceSerial) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkWirelessClientConnectivityEvents_1WithHttpInfo(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial);
        return localVarResp.getData();
    }

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     * List the wireless connectivity events for a client within a network in the timespan.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param types A list of event types to include. If not specified, events of all types will be returned. Valid types are &#39;assoc&#39;, &#39;disassoc&#39;, &#39;auth&#39;, &#39;deauth&#39;, &#39;dns&#39;, &#39;dhcp&#39;, &#39;roam&#39;, &#39;connection&#39; and/or &#39;sticky&#39;. (optional)
     * @param includedSeverities A list of severities to include. If not specified, events of all severities will be returned. Valid severities are &#39;good&#39;, &#39;info&#39;, &#39;warn&#39; and/or &#39;bad&#39;. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39;, &#39;6&#39;). (optional)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param deviceSerial Filter results by an AP&#39;s serial number. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkWirelessClientConnectivityEvents_1WithHttpInfo(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> types, List<String> includedSeverities, String band, Integer ssidNumber, String deviceSerial) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessClientConnectivityEvents_1ValidateBeforeCall(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the wireless connectivity events for a client within a network in the timespan. (asynchronously)
     * List the wireless connectivity events for a client within a network in the timespan.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param types A list of event types to include. If not specified, events of all types will be returned. Valid types are &#39;assoc&#39;, &#39;disassoc&#39;, &#39;auth&#39;, &#39;deauth&#39;, &#39;dns&#39;, &#39;dhcp&#39;, &#39;roam&#39;, &#39;connection&#39; and/or &#39;sticky&#39;. (optional)
     * @param includedSeverities A list of severities to include. If not specified, events of all severities will be returned. Valid severities are &#39;good&#39;, &#39;info&#39;, &#39;warn&#39; and/or &#39;bad&#39;. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39;, &#39;6&#39;). (optional)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param deviceSerial Filter results by an AP&#39;s serial number. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientConnectivityEvents_1Async(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> types, List<String> includedSeverities, String band, Integer ssidNumber, String deviceSerial, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessClientConnectivityEvents_1ValidateBeforeCall(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessClientLatencyHistory_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientLatencyHistory_1Call(String networkId, String clientId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/clients/{clientId}/latencyHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessClientLatencyHistory_1ValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessClientLatencyHistory_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkWirelessClientLatencyHistory_1(Async)");
        }

        return getNetworkWirelessClientLatencyHistory_1Call(networkId, clientId, t0, t1, timespan, resolution, _callback);

    }

    /**
     * Return the latency history for a client
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkWirelessClientLatencyHistory_1(String networkId, String clientId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkWirelessClientLatencyHistory_1WithHttpInfo(networkId, clientId, t0, t1, timespan, resolution);
        return localVarResp.getData();
    }

    /**
     * Return the latency history for a client
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkWirelessClientLatencyHistory_1WithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessClientLatencyHistory_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, resolution, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the latency history for a client (asynchronously)
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientLatencyHistory_1Async(String networkId, String clientId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessClientLatencyHistory_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, resolution, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessClientLatencyStats_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientLatencyStats_1Call(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/clients/{clientId}/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessClientLatencyStats_1ValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessClientLatencyStats_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkWirelessClientLatencyStats_1(Async)");
        }

        return getNetworkWirelessClientLatencyStats_1Call(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for a given client on this network
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessClientLatencyStats_1(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessClientLatencyStats_1WithHttpInfo(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for a given client on this network
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessClientLatencyStats_1WithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessClientLatencyStats_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for a given client on this network (asynchronously)
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientLatencyStats_1Async(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessClientLatencyStats_1ValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessClientsConnectionStats_1
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientsConnectionStats_1Call(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/clients/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessClientsConnectionStats_1ValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessClientsConnectionStats_1(Async)");
        }

        return getNetworkWirelessClientsConnectionStats_1Call(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     * Aggregated connectivity info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkWirelessClientsConnectionStats_1(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkWirelessClientsConnectionStats_1WithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     * Aggregated connectivity info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkWirelessClientsConnectionStats_1WithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessClientsConnectionStats_1ValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients (asynchronously)
     * Aggregated connectivity info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientsConnectionStats_1Async(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessClientsConnectionStats_1ValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessClientsLatencyStats_1
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientsLatencyStats_1Call(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/clients/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessClientsLatencyStats_1ValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessClientsLatencyStats_1(Async)");
        }

        return getNetworkWirelessClientsLatencyStats_1Call(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for this network, grouped by clients
     * Aggregated latency info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkWirelessClientsLatencyStats_1(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkWirelessClientsLatencyStats_1WithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for this network, grouped by clients
     * Aggregated latency info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkWirelessClientsLatencyStats_1WithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessClientsLatencyStats_1ValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for this network, grouped by clients (asynchronously)
     * Aggregated latency info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessClientsLatencyStats_1Async(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessClientsLatencyStats_1ValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationClientsBandwidthUsageHistory_1
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsBandwidthUsageHistory_1Call(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/clients/bandwidthUsageHistory"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationClientsBandwidthUsageHistory_1ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationClientsBandwidthUsageHistory_1(Async)");
        }

        return getOrganizationClientsBandwidthUsageHistory_1Call(organizationId, t0, t1, timespan, _callback);

    }

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;GetOrganizationClientsBandwidthUsageHistory200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner> getOrganizationClientsBandwidthUsageHistory_1(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner>> localVarResp = getOrganizationClientsBandwidthUsageHistory_1WithHttpInfo(organizationId, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationClientsBandwidthUsageHistory200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner>> getOrganizationClientsBandwidthUsageHistory_1WithHttpInfo(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationClientsBandwidthUsageHistory_1ValidateBeforeCall(organizationId, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range. (asynchronously)
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsBandwidthUsageHistory_1Async(String organizationId, String t0, String t1, Float timespan, final ApiCallback<List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationClientsBandwidthUsageHistory_1ValidateBeforeCall(organizationId, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationClientsOverview_1
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsOverview_1Call(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/clients/overview"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationClientsOverview_1ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationClientsOverview_1(Async)");
        }

        return getOrganizationClientsOverview_1Call(organizationId, t0, t1, timespan, _callback);

    }

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     * Return summary information around client data usage (in mb) across the given organization.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return GetOrganizationClientsOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationClientsOverview200Response getOrganizationClientsOverview_1(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<GetOrganizationClientsOverview200Response> localVarResp = getOrganizationClientsOverview_1WithHttpInfo(organizationId, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     * Return summary information around client data usage (in mb) across the given organization.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;GetOrganizationClientsOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationClientsOverview200Response> getOrganizationClientsOverview_1WithHttpInfo(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationClientsOverview_1ValidateBeforeCall(organizationId, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<GetOrganizationClientsOverview200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return summary information around client data usage (in mb) across the given organization. (asynchronously)
     * Return summary information around client data usage (in mb) across the given organization.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsOverview_1Async(String organizationId, String t0, String t1, Float timespan, final ApiCallback<GetOrganizationClientsOverview200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationClientsOverview_1ValidateBeforeCall(organizationId, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationClientsOverview200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationClientsSearch_1
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsSearch_1Call(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/clients/search"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationClientsSearch_1ValidateBeforeCall(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationClientsSearch_1(Async)");
        }

        // verify the required parameter 'mac' is set
        if (mac == null) {
            throw new ApiException("Missing the required parameter 'mac' when calling getOrganizationClientsSearch_1(Async)");
        }

        return getOrganizationClientsSearch_1Call(organizationId, mac, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public Object getOrganizationClientsSearch_1(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationClientsSearch_1WithHttpInfo(organizationId, mac, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationClientsSearch_1WithHttpInfo(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationClientsSearch_1ValidateBeforeCall(organizationId, mac, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client details in an organization (asynchronously)
     * Return the client details in an organization
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsSearch_1Async(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationClientsSearch_1ValidateBeforeCall(organizationId, mac, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSummaryTopClientsByUsage_3
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSummaryTopClientsByUsage_3Call(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/summary/top/clients/byUsage"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSummaryTopClientsByUsage_3ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopClientsByUsage_3(Async)");
        }

        return getOrganizationSummaryTopClientsByUsage_3Call(organizationId, t0, t1, timespan, _callback);

    }

    /**
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;GetOrganizationSummaryTopClientsByUsage200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationSummaryTopClientsByUsage200ResponseInner> getOrganizationSummaryTopClientsByUsage_3(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<GetOrganizationSummaryTopClientsByUsage200ResponseInner>> localVarResp = getOrganizationSummaryTopClientsByUsage_3WithHttpInfo(organizationId, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSummaryTopClientsByUsage200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSummaryTopClientsByUsage200ResponseInner>> getOrganizationSummaryTopClientsByUsage_3WithHttpInfo(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSummaryTopClientsByUsage_3ValidateBeforeCall(organizationId, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSummaryTopClientsByUsage200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range. (asynchronously)
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSummaryTopClientsByUsage_3Async(String organizationId, String t0, String t1, Float timespan, final ApiCallback<List<GetOrganizationSummaryTopClientsByUsage200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSummaryTopClientsByUsage_3ValidateBeforeCall(organizationId, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSummaryTopClientsByUsage200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSummaryTopClientsManufacturersByUsage_3
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSummaryTopClientsManufacturersByUsage_3Call(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSummaryTopClientsManufacturersByUsage_3ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopClientsManufacturersByUsage_3(Async)");
        }

        return getOrganizationSummaryTopClientsManufacturersByUsage_3Call(organizationId, t0, t1, timespan, _callback);

    }

    /**
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner> getOrganizationSummaryTopClientsManufacturersByUsage_3(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>> localVarResp = getOrganizationSummaryTopClientsManufacturersByUsage_3WithHttpInfo(organizationId, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>> getOrganizationSummaryTopClientsManufacturersByUsage_3WithHttpInfo(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSummaryTopClientsManufacturersByUsage_3ValidateBeforeCall(organizationId, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer. (asynchronously)
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSummaryTopClientsManufacturersByUsage_3Async(String organizationId, String t0, String t1, Float timespan, final ApiCallback<List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSummaryTopClientsManufacturersByUsage_3ValidateBeforeCall(organizationId, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionNetworkClients_1
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkClients_1Call(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionNetworkClientsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/provision"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionNetworkClients_1ValidateBeforeCall(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling provisionNetworkClients_1(Async)");
        }

        // verify the required parameter 'provisionNetworkClientsRequest' is set
        if (provisionNetworkClientsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionNetworkClientsRequest' when calling provisionNetworkClients_1(Async)");
        }

        return provisionNetworkClients_1Call(networkId, provisionNetworkClientsRequest, _callback);

    }

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object provisionNetworkClients_1(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = provisionNetworkClients_1WithHttpInfo(networkId, provisionNetworkClientsRequest);
        return localVarResp.getData();
    }

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> provisionNetworkClients_1WithHttpInfo(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionNetworkClients_1ValidateBeforeCall(networkId, provisionNetworkClientsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provisions a client with a name and policy (asynchronously)
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkClients_1Async(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionNetworkClients_1ValidateBeforeCall(networkId, provisionNetworkClientsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkClientPolicy_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientPolicy_1Call(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkClientPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/policy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkClientPolicy_1ValidateBeforeCall(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy_1(Async)");
        }

        // verify the required parameter 'updateNetworkClientPolicyRequest' is set
        if (updateNetworkClientPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkClientPolicyRequest' when calling updateNetworkClientPolicy_1(Async)");
        }

        return updateNetworkClientPolicy_1Call(networkId, clientId, updateNetworkClientPolicyRequest, _callback);

    }

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkClientPolicy_1(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkClientPolicy_1WithHttpInfo(networkId, clientId, updateNetworkClientPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkClientPolicy_1WithHttpInfo(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkClientPolicy_1ValidateBeforeCall(networkId, clientId, updateNetworkClientPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the policy assigned to a client on the network (asynchronously)
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientPolicy_1Async(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkClientPolicy_1ValidateBeforeCall(networkId, clientId, updateNetworkClientPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkClientSplashAuthorizationStatus_1
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientSplashAuthorizationStatus_1Call(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkClientSplashAuthorizationStatusRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkClientSplashAuthorizationStatus_1ValidateBeforeCall(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus_1(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus_1(Async)");
        }

        // verify the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' is set
        if (updateNetworkClientSplashAuthorizationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' when calling updateNetworkClientSplashAuthorizationStatus_1(Async)");
        }

        return updateNetworkClientSplashAuthorizationStatus_1Call(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, _callback);

    }

    /**
     * Update a client&#39;s splash authorization
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkClientSplashAuthorizationStatus_1(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkClientSplashAuthorizationStatus_1WithHttpInfo(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update a client&#39;s splash authorization
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkClientSplashAuthorizationStatus_1WithHttpInfo(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkClientSplashAuthorizationStatus_1ValidateBeforeCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a client&#39;s splash authorization (asynchronously)
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientSplashAuthorizationStatus_1Async(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkClientSplashAuthorizationStatus_1ValidateBeforeCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
