/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20RequestOperator;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20RequestVenue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessSsidHotspot20Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidHotspot20Request {
  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MCC_MNCS = "mccMncs";
  @SerializedName(SERIALIZED_NAME_MCC_MNCS)
  private List<UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner> mccMncs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAI_REALMS = "naiRealms";
  @SerializedName(SERIALIZED_NAME_NAI_REALMS)
  private List<UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner> naiRealms = new ArrayList<>();

  /**
   * The network type of this SSID (&#39;Private network&#39;, &#39;Private network with guest access&#39;, &#39;Chargeable public network&#39;, &#39;Free public network&#39;, &#39;Personal device network&#39;, &#39;Emergency services only network&#39;, &#39;Test or experimental&#39;, &#39;Wildcard&#39;)
   */
  @JsonAdapter(NetworkAccessTypeEnum.Adapter.class)
  public enum NetworkAccessTypeEnum {
    CHARGEABLE_PUBLIC_NETWORK("Chargeable public network"),
    
    EMERGENCY_SERVICES_ONLY_NETWORK("Emergency services only network"),
    
    FREE_PUBLIC_NETWORK("Free public network"),
    
    PERSONAL_DEVICE_NETWORK("Personal device network"),
    
    PRIVATE_NETWORK("Private network"),
    
    PRIVATE_NETWORK_WITH_GUEST_ACCESS("Private network with guest access"),
    
    TEST_OR_EXPERIMENTAL("Test or experimental"),
    
    WILDCARD("Wildcard");

    private String value;

    NetworkAccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkAccessTypeEnum fromValue(String value) {
      for (NetworkAccessTypeEnum b : NetworkAccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkAccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkAccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkAccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkAccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkAccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK_ACCESS_TYPE = "networkAccessType";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACCESS_TYPE)
  private NetworkAccessTypeEnum networkAccessType;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private UpdateNetworkWirelessSsidHotspot20RequestOperator operator;

  public static final String SERIALIZED_NAME_ROAM_CONSORT_OIS = "roamConsortOis";
  @SerializedName(SERIALIZED_NAME_ROAM_CONSORT_OIS)
  private List<String> roamConsortOis = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private UpdateNetworkWirelessSsidHotspot20RequestVenue venue;

  public UpdateNetworkWirelessSsidHotspot20Request() {
  }

  public UpdateNetworkWirelessSsidHotspot20Request domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public UpdateNetworkWirelessSsidHotspot20Request addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

  /**
   * An array of domain names
   * @return domains
   */
  @javax.annotation.Nullable
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }


  public UpdateNetworkWirelessSsidHotspot20Request enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not Hotspot 2.0 for this SSID is enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateNetworkWirelessSsidHotspot20Request mccMncs(List<UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner> mccMncs) {
    this.mccMncs = mccMncs;
    return this;
  }

  public UpdateNetworkWirelessSsidHotspot20Request addMccMncsItem(UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner mccMncsItem) {
    if (this.mccMncs == null) {
      this.mccMncs = new ArrayList<>();
    }
    this.mccMncs.add(mccMncsItem);
    return this;
  }

  /**
   * An array of MCC/MNC pairs
   * @return mccMncs
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner> getMccMncs() {
    return mccMncs;
  }

  public void setMccMncs(List<UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner> mccMncs) {
    this.mccMncs = mccMncs;
  }


  public UpdateNetworkWirelessSsidHotspot20Request naiRealms(List<UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner> naiRealms) {
    this.naiRealms = naiRealms;
    return this;
  }

  public UpdateNetworkWirelessSsidHotspot20Request addNaiRealmsItem(UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner naiRealmsItem) {
    if (this.naiRealms == null) {
      this.naiRealms = new ArrayList<>();
    }
    this.naiRealms.add(naiRealmsItem);
    return this;
  }

  /**
   * An array of NAI realms
   * @return naiRealms
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner> getNaiRealms() {
    return naiRealms;
  }

  public void setNaiRealms(List<UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner> naiRealms) {
    this.naiRealms = naiRealms;
  }


  public UpdateNetworkWirelessSsidHotspot20Request networkAccessType(NetworkAccessTypeEnum networkAccessType) {
    this.networkAccessType = networkAccessType;
    return this;
  }

  /**
   * The network type of this SSID (&#39;Private network&#39;, &#39;Private network with guest access&#39;, &#39;Chargeable public network&#39;, &#39;Free public network&#39;, &#39;Personal device network&#39;, &#39;Emergency services only network&#39;, &#39;Test or experimental&#39;, &#39;Wildcard&#39;)
   * @return networkAccessType
   */
  @javax.annotation.Nullable
  public NetworkAccessTypeEnum getNetworkAccessType() {
    return networkAccessType;
  }

  public void setNetworkAccessType(NetworkAccessTypeEnum networkAccessType) {
    this.networkAccessType = networkAccessType;
  }


  public UpdateNetworkWirelessSsidHotspot20Request operator(UpdateNetworkWirelessSsidHotspot20RequestOperator operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidHotspot20RequestOperator getOperator() {
    return operator;
  }

  public void setOperator(UpdateNetworkWirelessSsidHotspot20RequestOperator operator) {
    this.operator = operator;
  }


  public UpdateNetworkWirelessSsidHotspot20Request roamConsortOis(List<String> roamConsortOis) {
    this.roamConsortOis = roamConsortOis;
    return this;
  }

  public UpdateNetworkWirelessSsidHotspot20Request addRoamConsortOisItem(String roamConsortOisItem) {
    if (this.roamConsortOis == null) {
      this.roamConsortOis = new ArrayList<>();
    }
    this.roamConsortOis.add(roamConsortOisItem);
    return this;
  }

  /**
   * An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
   * @return roamConsortOis
   */
  @javax.annotation.Nullable
  public List<String> getRoamConsortOis() {
    return roamConsortOis;
  }

  public void setRoamConsortOis(List<String> roamConsortOis) {
    this.roamConsortOis = roamConsortOis;
  }


  public UpdateNetworkWirelessSsidHotspot20Request venue(UpdateNetworkWirelessSsidHotspot20RequestVenue venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidHotspot20RequestVenue getVenue() {
    return venue;
  }

  public void setVenue(UpdateNetworkWirelessSsidHotspot20RequestVenue venue) {
    this.venue = venue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request = (UpdateNetworkWirelessSsidHotspot20Request) o;
    return Objects.equals(this.domains, updateNetworkWirelessSsidHotspot20Request.domains) &&
        Objects.equals(this.enabled, updateNetworkWirelessSsidHotspot20Request.enabled) &&
        Objects.equals(this.mccMncs, updateNetworkWirelessSsidHotspot20Request.mccMncs) &&
        Objects.equals(this.naiRealms, updateNetworkWirelessSsidHotspot20Request.naiRealms) &&
        Objects.equals(this.networkAccessType, updateNetworkWirelessSsidHotspot20Request.networkAccessType) &&
        Objects.equals(this.operator, updateNetworkWirelessSsidHotspot20Request.operator) &&
        Objects.equals(this.roamConsortOis, updateNetworkWirelessSsidHotspot20Request.roamConsortOis) &&
        Objects.equals(this.venue, updateNetworkWirelessSsidHotspot20Request.venue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domains, enabled, mccMncs, naiRealms, networkAccessType, operator, roamConsortOis, venue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidHotspot20Request {\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    mccMncs: ").append(toIndentedString(mccMncs)).append("\n");
    sb.append("    naiRealms: ").append(toIndentedString(naiRealms)).append("\n");
    sb.append("    networkAccessType: ").append(toIndentedString(networkAccessType)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    roamConsortOis: ").append(toIndentedString(roamConsortOis)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domains");
    openapiFields.add("enabled");
    openapiFields.add("mccMncs");
    openapiFields.add("naiRealms");
    openapiFields.add("networkAccessType");
    openapiFields.add("operator");
    openapiFields.add("roamConsortOis");
    openapiFields.add("venue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidHotspot20Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidHotspot20Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidHotspot20Request is not found in the empty JSON string", UpdateNetworkWirelessSsidHotspot20Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidHotspot20Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidHotspot20Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull() && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if (jsonObj.get("mccMncs") != null && !jsonObj.get("mccMncs").isJsonNull()) {
        JsonArray jsonArraymccMncs = jsonObj.getAsJsonArray("mccMncs");
        if (jsonArraymccMncs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mccMncs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mccMncs` to be an array in the JSON string but got `%s`", jsonObj.get("mccMncs").toString()));
          }

          // validate the optional field `mccMncs` (array)
          for (int i = 0; i < jsonArraymccMncs.size(); i++) {
            UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner.validateJsonElement(jsonArraymccMncs.get(i));
          };
        }
      }
      if (jsonObj.get("naiRealms") != null && !jsonObj.get("naiRealms").isJsonNull()) {
        JsonArray jsonArraynaiRealms = jsonObj.getAsJsonArray("naiRealms");
        if (jsonArraynaiRealms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("naiRealms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `naiRealms` to be an array in the JSON string but got `%s`", jsonObj.get("naiRealms").toString()));
          }

          // validate the optional field `naiRealms` (array)
          for (int i = 0; i < jsonArraynaiRealms.size(); i++) {
            UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner.validateJsonElement(jsonArraynaiRealms.get(i));
          };
        }
      }
      if ((jsonObj.get("networkAccessType") != null && !jsonObj.get("networkAccessType").isJsonNull()) && !jsonObj.get("networkAccessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkAccessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkAccessType").toString()));
      }
      // validate the optional field `networkAccessType`
      if (jsonObj.get("networkAccessType") != null && !jsonObj.get("networkAccessType").isJsonNull()) {
        NetworkAccessTypeEnum.validateJsonElement(jsonObj.get("networkAccessType"));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        UpdateNetworkWirelessSsidHotspot20RequestOperator.validateJsonElement(jsonObj.get("operator"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roamConsortOis") != null && !jsonObj.get("roamConsortOis").isJsonNull() && !jsonObj.get("roamConsortOis").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roamConsortOis` to be an array in the JSON string but got `%s`", jsonObj.get("roamConsortOis").toString()));
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        UpdateNetworkWirelessSsidHotspot20RequestVenue.validateJsonElement(jsonObj.get("venue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidHotspot20Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidHotspot20Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidHotspot20Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidHotspot20Request.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidHotspot20Request>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidHotspot20Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidHotspot20Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidHotspot20Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidHotspot20Request
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidHotspot20Request
   */
  public static UpdateNetworkWirelessSsidHotspot20Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidHotspot20Request.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidHotspot20Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

