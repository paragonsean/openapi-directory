/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateOrganizationSamlRole200ResponseNetworksInner;
import org.openapitools.client.model.UpdateOrganizationSamlRole200ResponseTagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateOrganizationSamlRole200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateOrganizationSamlRole200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<UpdateOrganizationSamlRole200ResponseNetworksInner> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORG_ACCESS = "orgAccess";
  @SerializedName(SERIALIZED_NAME_ORG_ACCESS)
  private String orgAccess;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<UpdateOrganizationSamlRole200ResponseTagsInner> tags = new ArrayList<>();

  public UpdateOrganizationSamlRole200Response() {
  }

  public UpdateOrganizationSamlRole200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID associated with the SAML role
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateOrganizationSamlRole200Response networks(List<UpdateOrganizationSamlRole200ResponseNetworksInner> networks) {
    this.networks = networks;
    return this;
  }

  public UpdateOrganizationSamlRole200Response addNetworksItem(UpdateOrganizationSamlRole200ResponseNetworksInner networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * The list of networks that the SAML administrator has privileges on
   * @return networks
   */
  @javax.annotation.Nullable
  public List<UpdateOrganizationSamlRole200ResponseNetworksInner> getNetworks() {
    return networks;
  }

  public void setNetworks(List<UpdateOrganizationSamlRole200ResponseNetworksInner> networks) {
    this.networks = networks;
  }


  public UpdateOrganizationSamlRole200Response orgAccess(String orgAccess) {
    this.orgAccess = orgAccess;
    return this;
  }

  /**
   * The privilege of the SAML administrator on the organization
   * @return orgAccess
   */
  @javax.annotation.Nullable
  public String getOrgAccess() {
    return orgAccess;
  }

  public void setOrgAccess(String orgAccess) {
    this.orgAccess = orgAccess;
  }


  public UpdateOrganizationSamlRole200Response role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The role of the SAML administrator
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public UpdateOrganizationSamlRole200Response tags(List<UpdateOrganizationSamlRole200ResponseTagsInner> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateOrganizationSamlRole200Response addTagsItem(UpdateOrganizationSamlRole200ResponseTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The list of tags that the SAML administrator has privleges on
   * @return tags
   */
  @javax.annotation.Nullable
  public List<UpdateOrganizationSamlRole200ResponseTagsInner> getTags() {
    return tags;
  }

  public void setTags(List<UpdateOrganizationSamlRole200ResponseTagsInner> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOrganizationSamlRole200Response updateOrganizationSamlRole200Response = (UpdateOrganizationSamlRole200Response) o;
    return Objects.equals(this.id, updateOrganizationSamlRole200Response.id) &&
        Objects.equals(this.networks, updateOrganizationSamlRole200Response.networks) &&
        Objects.equals(this.orgAccess, updateOrganizationSamlRole200Response.orgAccess) &&
        Objects.equals(this.role, updateOrganizationSamlRole200Response.role) &&
        Objects.equals(this.tags, updateOrganizationSamlRole200Response.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, networks, orgAccess, role, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOrganizationSamlRole200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    orgAccess: ").append(toIndentedString(orgAccess)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("networks");
    openapiFields.add("orgAccess");
    openapiFields.add("role");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOrganizationSamlRole200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOrganizationSamlRole200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOrganizationSamlRole200Response is not found in the empty JSON string", UpdateOrganizationSamlRole200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOrganizationSamlRole200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOrganizationSamlRole200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            UpdateOrganizationSamlRole200ResponseNetworksInner.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("orgAccess") != null && !jsonObj.get("orgAccess").isJsonNull()) && !jsonObj.get("orgAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgAccess").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            UpdateOrganizationSamlRole200ResponseTagsInner.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOrganizationSamlRole200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOrganizationSamlRole200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOrganizationSamlRole200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOrganizationSamlRole200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOrganizationSamlRole200Response>() {
           @Override
           public void write(JsonWriter out, UpdateOrganizationSamlRole200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOrganizationSamlRole200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOrganizationSamlRole200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOrganizationSamlRole200Response
   * @throws IOException if the JSON string is invalid with respect to UpdateOrganizationSamlRole200Response
   */
  public static UpdateOrganizationSamlRole200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOrganizationSamlRole200Response.class);
  }

  /**
   * Convert an instance of UpdateOrganizationSamlRole200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

