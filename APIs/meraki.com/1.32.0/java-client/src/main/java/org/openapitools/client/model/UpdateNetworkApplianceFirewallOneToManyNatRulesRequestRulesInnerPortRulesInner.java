/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner {
  public static final String SERIALIZED_NAME_ALLOWED_IPS = "allowedIps";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IPS)
  private List<String> allowedIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCAL_IP = "localIp";
  @SerializedName(SERIALIZED_NAME_LOCAL_IP)
  private String localIp;

  public static final String SERIALIZED_NAME_LOCAL_PORT = "localPort";
  @SerializedName(SERIALIZED_NAME_LOCAL_PORT)
  private String localPort;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * &#39;tcp&#39; or &#39;udp&#39;
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("tcp"),
    
    UDP("udp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PUBLIC_PORT = "publicPort";
  @SerializedName(SERIALIZED_NAME_PUBLIC_PORT)
  private String publicPort;

  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner() {
  }

  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner allowedIps(List<String> allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner addAllowedIpsItem(String allowedIpsItem) {
    if (this.allowedIps == null) {
      this.allowedIps = new ArrayList<>();
    }
    this.allowedIps.add(allowedIpsItem);
    return this;
  }

  /**
   * Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
   * @return allowedIps
   */
  @javax.annotation.Nullable
  public List<String> getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(List<String> allowedIps) {
    this.allowedIps = allowedIps;
  }


  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner localIp(String localIp) {
    this.localIp = localIp;
    return this;
  }

  /**
   * Local IP address to which traffic will be forwarded
   * @return localIp
   */
  @javax.annotation.Nullable
  public String getLocalIp() {
    return localIp;
  }

  public void setLocalIp(String localIp) {
    this.localIp = localIp;
  }


  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner localPort(String localPort) {
    this.localPort = localPort;
    return this;
  }

  /**
   * Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
   * @return localPort
   */
  @javax.annotation.Nullable
  public String getLocalPort() {
    return localPort;
  }

  public void setLocalPort(String localPort) {
    this.localPort = localPort;
  }


  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A description of the rule
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * &#39;tcp&#39; or &#39;udp&#39;
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner publicPort(String publicPort) {
    this.publicPort = publicPort;
    return this;
  }

  /**
   * Destination port of the traffic that is arriving on the WAN
   * @return publicPort
   */
  @javax.annotation.Nullable
  public String getPublicPort() {
    return publicPort;
  }

  public void setPublicPort(String publicPort) {
    this.publicPort = publicPort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner = (UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner) o;
    return Objects.equals(this.allowedIps, updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.allowedIps) &&
        Objects.equals(this.localIp, updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.localIp) &&
        Objects.equals(this.localPort, updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.localPort) &&
        Objects.equals(this.name, updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.name) &&
        Objects.equals(this.protocol, updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.protocol) &&
        Objects.equals(this.publicPort, updateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.publicPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedIps, localIp, localPort, name, protocol, publicPort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner {\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    localIp: ").append(toIndentedString(localIp)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    publicPort: ").append(toIndentedString(publicPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedIps");
    openapiFields.add("localIp");
    openapiFields.add("localPort");
    openapiFields.add("name");
    openapiFields.add("protocol");
    openapiFields.add("publicPort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner is not found in the empty JSON string", UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedIps") != null && !jsonObj.get("allowedIps").isJsonNull() && !jsonObj.get("allowedIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedIps` to be an array in the JSON string but got `%s`", jsonObj.get("allowedIps").toString()));
      }
      if ((jsonObj.get("localIp") != null && !jsonObj.get("localIp").isJsonNull()) && !jsonObj.get("localIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localIp").toString()));
      }
      if ((jsonObj.get("localPort") != null && !jsonObj.get("localPort").isJsonNull()) && !jsonObj.get("localPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localPort").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("publicPort") != null && !jsonObj.get("publicPort").isJsonNull()) && !jsonObj.get("publicPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicPort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner
   */
  public static UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

