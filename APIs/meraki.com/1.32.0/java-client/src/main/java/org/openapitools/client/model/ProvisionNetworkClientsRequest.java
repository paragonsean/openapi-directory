/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisionNetworkClientsRequestClientsInner;
import org.openapitools.client.model.ProvisionNetworkClientsRequestPoliciesBySecurityAppliance;
import org.openapitools.client.model.ProvisionNetworkClientsRequestPoliciesBySsid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProvisionNetworkClientsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisionNetworkClientsRequest {
  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<ProvisionNetworkClientsRequestClientsInner> clients = new ArrayList<>();

  /**
   * The policy to apply to the specified client. Can be &#39;Group policy&#39;, &#39;Allowed&#39;, &#39;Blocked&#39;, &#39;Per connection&#39; or &#39;Normal&#39;. Required.
   */
  @JsonAdapter(DevicePolicyEnum.Adapter.class)
  public enum DevicePolicyEnum {
    ALLOWED("Allowed"),
    
    BLOCKED("Blocked"),
    
    GROUP_POLICY("Group policy"),
    
    NORMAL("Normal"),
    
    PER_CONNECTION("Per connection");

    private String value;

    DevicePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DevicePolicyEnum fromValue(String value) {
      for (DevicePolicyEnum b : DevicePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DevicePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DevicePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DevicePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DevicePolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DevicePolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_POLICY = "devicePolicy";
  @SerializedName(SERIALIZED_NAME_DEVICE_POLICY)
  private DevicePolicyEnum devicePolicy;

  public static final String SERIALIZED_NAME_GROUP_POLICY_ID = "groupPolicyId";
  @SerializedName(SERIALIZED_NAME_GROUP_POLICY_ID)
  private String groupPolicyId;

  public static final String SERIALIZED_NAME_POLICIES_BY_SECURITY_APPLIANCE = "policiesBySecurityAppliance";
  @SerializedName(SERIALIZED_NAME_POLICIES_BY_SECURITY_APPLIANCE)
  private ProvisionNetworkClientsRequestPoliciesBySecurityAppliance policiesBySecurityAppliance;

  public static final String SERIALIZED_NAME_POLICIES_BY_SSID = "policiesBySsid";
  @SerializedName(SERIALIZED_NAME_POLICIES_BY_SSID)
  private ProvisionNetworkClientsRequestPoliciesBySsid policiesBySsid;

  public ProvisionNetworkClientsRequest() {
  }

  public ProvisionNetworkClientsRequest clients(List<ProvisionNetworkClientsRequestClientsInner> clients) {
    this.clients = clients;
    return this;
  }

  public ProvisionNetworkClientsRequest addClientsItem(ProvisionNetworkClientsRequestClientsInner clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

  /**
   * The array of clients to provision
   * @return clients
   */
  @javax.annotation.Nonnull
  public List<ProvisionNetworkClientsRequestClientsInner> getClients() {
    return clients;
  }

  public void setClients(List<ProvisionNetworkClientsRequestClientsInner> clients) {
    this.clients = clients;
  }


  public ProvisionNetworkClientsRequest devicePolicy(DevicePolicyEnum devicePolicy) {
    this.devicePolicy = devicePolicy;
    return this;
  }

  /**
   * The policy to apply to the specified client. Can be &#39;Group policy&#39;, &#39;Allowed&#39;, &#39;Blocked&#39;, &#39;Per connection&#39; or &#39;Normal&#39;. Required.
   * @return devicePolicy
   */
  @javax.annotation.Nonnull
  public DevicePolicyEnum getDevicePolicy() {
    return devicePolicy;
  }

  public void setDevicePolicy(DevicePolicyEnum devicePolicy) {
    this.devicePolicy = devicePolicy;
  }


  public ProvisionNetworkClientsRequest groupPolicyId(String groupPolicyId) {
    this.groupPolicyId = groupPolicyId;
    return this;
  }

  /**
   * The ID of the desired group policy to apply to the client. Required if &#39;devicePolicy&#39; is set to \&quot;Group policy\&quot;. Otherwise this is ignored.
   * @return groupPolicyId
   */
  @javax.annotation.Nullable
  public String getGroupPolicyId() {
    return groupPolicyId;
  }

  public void setGroupPolicyId(String groupPolicyId) {
    this.groupPolicyId = groupPolicyId;
  }


  public ProvisionNetworkClientsRequest policiesBySecurityAppliance(ProvisionNetworkClientsRequestPoliciesBySecurityAppliance policiesBySecurityAppliance) {
    this.policiesBySecurityAppliance = policiesBySecurityAppliance;
    return this;
  }

  /**
   * Get policiesBySecurityAppliance
   * @return policiesBySecurityAppliance
   */
  @javax.annotation.Nullable
  public ProvisionNetworkClientsRequestPoliciesBySecurityAppliance getPoliciesBySecurityAppliance() {
    return policiesBySecurityAppliance;
  }

  public void setPoliciesBySecurityAppliance(ProvisionNetworkClientsRequestPoliciesBySecurityAppliance policiesBySecurityAppliance) {
    this.policiesBySecurityAppliance = policiesBySecurityAppliance;
  }


  public ProvisionNetworkClientsRequest policiesBySsid(ProvisionNetworkClientsRequestPoliciesBySsid policiesBySsid) {
    this.policiesBySsid = policiesBySsid;
    return this;
  }

  /**
   * Get policiesBySsid
   * @return policiesBySsid
   */
  @javax.annotation.Nullable
  public ProvisionNetworkClientsRequestPoliciesBySsid getPoliciesBySsid() {
    return policiesBySsid;
  }

  public void setPoliciesBySsid(ProvisionNetworkClientsRequestPoliciesBySsid policiesBySsid) {
    this.policiesBySsid = policiesBySsid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionNetworkClientsRequest provisionNetworkClientsRequest = (ProvisionNetworkClientsRequest) o;
    return Objects.equals(this.clients, provisionNetworkClientsRequest.clients) &&
        Objects.equals(this.devicePolicy, provisionNetworkClientsRequest.devicePolicy) &&
        Objects.equals(this.groupPolicyId, provisionNetworkClientsRequest.groupPolicyId) &&
        Objects.equals(this.policiesBySecurityAppliance, provisionNetworkClientsRequest.policiesBySecurityAppliance) &&
        Objects.equals(this.policiesBySsid, provisionNetworkClientsRequest.policiesBySsid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clients, devicePolicy, groupPolicyId, policiesBySecurityAppliance, policiesBySsid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionNetworkClientsRequest {\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    devicePolicy: ").append(toIndentedString(devicePolicy)).append("\n");
    sb.append("    groupPolicyId: ").append(toIndentedString(groupPolicyId)).append("\n");
    sb.append("    policiesBySecurityAppliance: ").append(toIndentedString(policiesBySecurityAppliance)).append("\n");
    sb.append("    policiesBySsid: ").append(toIndentedString(policiesBySsid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clients");
    openapiFields.add("devicePolicy");
    openapiFields.add("groupPolicyId");
    openapiFields.add("policiesBySecurityAppliance");
    openapiFields.add("policiesBySsid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clients");
    openapiRequiredFields.add("devicePolicy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionNetworkClientsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionNetworkClientsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionNetworkClientsRequest is not found in the empty JSON string", ProvisionNetworkClientsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionNetworkClientsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionNetworkClientsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisionNetworkClientsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("clients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
      }

      JsonArray jsonArrayclients = jsonObj.getAsJsonArray("clients");
      // validate the required field `clients` (array)
      for (int i = 0; i < jsonArrayclients.size(); i++) {
        ProvisionNetworkClientsRequestClientsInner.validateJsonElement(jsonArrayclients.get(i));
      };
      if (!jsonObj.get("devicePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicePolicy").toString()));
      }
      // validate the required field `devicePolicy`
      DevicePolicyEnum.validateJsonElement(jsonObj.get("devicePolicy"));
      if ((jsonObj.get("groupPolicyId") != null && !jsonObj.get("groupPolicyId").isJsonNull()) && !jsonObj.get("groupPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupPolicyId").toString()));
      }
      // validate the optional field `policiesBySecurityAppliance`
      if (jsonObj.get("policiesBySecurityAppliance") != null && !jsonObj.get("policiesBySecurityAppliance").isJsonNull()) {
        ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.validateJsonElement(jsonObj.get("policiesBySecurityAppliance"));
      }
      // validate the optional field `policiesBySsid`
      if (jsonObj.get("policiesBySsid") != null && !jsonObj.get("policiesBySsid").isJsonNull()) {
        ProvisionNetworkClientsRequestPoliciesBySsid.validateJsonElement(jsonObj.get("policiesBySsid"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionNetworkClientsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionNetworkClientsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionNetworkClientsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionNetworkClientsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionNetworkClientsRequest>() {
           @Override
           public void write(JsonWriter out, ProvisionNetworkClientsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionNetworkClientsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionNetworkClientsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionNetworkClientsRequest
   * @throws IOException if the JSON string is invalid with respect to ProvisionNetworkClientsRequest
   */
  public static ProvisionNetworkClientsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionNetworkClientsRequest.class);
  }

  /**
   * Convert an instance of ProvisionNetworkClientsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

