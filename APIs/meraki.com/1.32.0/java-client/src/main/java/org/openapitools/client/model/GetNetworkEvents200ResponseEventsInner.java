/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkEvents200ResponseEventsInnerEventData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkEvents200ResponseEventsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkEvents200ResponseEventsInner {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CLIENT_DESCRIPTION = "clientDescription";
  @SerializedName(SERIALIZED_NAME_CLIENT_DESCRIPTION)
  private String clientDescription;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_MAC = "clientMac";
  @SerializedName(SERIALIZED_NAME_CLIENT_MAC)
  private String clientMac;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_SERIAL = "deviceSerial";
  @SerializedName(SERIALIZED_NAME_DEVICE_SERIAL)
  private String deviceSerial;

  public static final String SERIALIZED_NAME_EVENT_DATA = "eventData";
  @SerializedName(SERIALIZED_NAME_EVENT_DATA)
  private GetNetworkEvents200ResponseEventsInnerEventData eventData;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private String occurredAt;

  public static final String SERIALIZED_NAME_SSID_NUMBER = "ssidNumber";
  @SerializedName(SERIALIZED_NAME_SSID_NUMBER)
  private Integer ssidNumber;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GetNetworkEvents200ResponseEventsInner() {
  }

  public GetNetworkEvents200ResponseEventsInner category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The category that the event type belongs to
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public GetNetworkEvents200ResponseEventsInner clientDescription(String clientDescription) {
    this.clientDescription = clientDescription;
    return this;
  }

  /**
   * A description of the client. This is usually the client&#39;s device name.
   * @return clientDescription
   */
  @javax.annotation.Nullable
  public String getClientDescription() {
    return clientDescription;
  }

  public void setClientDescription(String clientDescription) {
    this.clientDescription = clientDescription;
  }


  public GetNetworkEvents200ResponseEventsInner clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * A string identifying the client. This could be a client&#39;s MAC or IP address
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public GetNetworkEvents200ResponseEventsInner clientMac(String clientMac) {
    this.clientMac = clientMac;
    return this;
  }

  /**
   * The client&#39;s MAC address.
   * @return clientMac
   */
  @javax.annotation.Nullable
  public String getClientMac() {
    return clientMac;
  }

  public void setClientMac(String clientMac) {
    this.clientMac = clientMac;
  }


  public GetNetworkEvents200ResponseEventsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the event the happened.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetNetworkEvents200ResponseEventsInner deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * The name of the device. Only shown if the device is an access point.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public GetNetworkEvents200ResponseEventsInner deviceSerial(String deviceSerial) {
    this.deviceSerial = deviceSerial;
    return this;
  }

  /**
   * The serial number of the device. Only shown if the device is an access point.
   * @return deviceSerial
   */
  @javax.annotation.Nullable
  public String getDeviceSerial() {
    return deviceSerial;
  }

  public void setDeviceSerial(String deviceSerial) {
    this.deviceSerial = deviceSerial;
  }


  public GetNetworkEvents200ResponseEventsInner eventData(GetNetworkEvents200ResponseEventsInnerEventData eventData) {
    this.eventData = eventData;
    return this;
  }

  /**
   * Get eventData
   * @return eventData
   */
  @javax.annotation.Nullable
  public GetNetworkEvents200ResponseEventsInnerEventData getEventData() {
    return eventData;
  }

  public void setEventData(GetNetworkEvents200ResponseEventsInnerEventData eventData) {
    this.eventData = eventData;
  }


  public GetNetworkEvents200ResponseEventsInner networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * The ID of the network.
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public GetNetworkEvents200ResponseEventsInner occurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * An UTC ISO8601 string of the time the event occurred at.
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public String getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
  }


  public GetNetworkEvents200ResponseEventsInner ssidNumber(Integer ssidNumber) {
    this.ssidNumber = ssidNumber;
    return this;
  }

  /**
   * The SSID number of the device.
   * @return ssidNumber
   */
  @javax.annotation.Nullable
  public Integer getSsidNumber() {
    return ssidNumber;
  }

  public void setSsidNumber(Integer ssidNumber) {
    this.ssidNumber = ssidNumber;
  }


  public GetNetworkEvents200ResponseEventsInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of event being listed.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkEvents200ResponseEventsInner getNetworkEvents200ResponseEventsInner = (GetNetworkEvents200ResponseEventsInner) o;
    return Objects.equals(this.category, getNetworkEvents200ResponseEventsInner.category) &&
        Objects.equals(this.clientDescription, getNetworkEvents200ResponseEventsInner.clientDescription) &&
        Objects.equals(this.clientId, getNetworkEvents200ResponseEventsInner.clientId) &&
        Objects.equals(this.clientMac, getNetworkEvents200ResponseEventsInner.clientMac) &&
        Objects.equals(this.description, getNetworkEvents200ResponseEventsInner.description) &&
        Objects.equals(this.deviceName, getNetworkEvents200ResponseEventsInner.deviceName) &&
        Objects.equals(this.deviceSerial, getNetworkEvents200ResponseEventsInner.deviceSerial) &&
        Objects.equals(this.eventData, getNetworkEvents200ResponseEventsInner.eventData) &&
        Objects.equals(this.networkId, getNetworkEvents200ResponseEventsInner.networkId) &&
        Objects.equals(this.occurredAt, getNetworkEvents200ResponseEventsInner.occurredAt) &&
        Objects.equals(this.ssidNumber, getNetworkEvents200ResponseEventsInner.ssidNumber) &&
        Objects.equals(this.type, getNetworkEvents200ResponseEventsInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, clientDescription, clientId, clientMac, description, deviceName, deviceSerial, eventData, networkId, occurredAt, ssidNumber, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkEvents200ResponseEventsInner {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    clientDescription: ").append(toIndentedString(clientDescription)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientMac: ").append(toIndentedString(clientMac)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceSerial: ").append(toIndentedString(deviceSerial)).append("\n");
    sb.append("    eventData: ").append(toIndentedString(eventData)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    ssidNumber: ").append(toIndentedString(ssidNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("clientDescription");
    openapiFields.add("clientId");
    openapiFields.add("clientMac");
    openapiFields.add("description");
    openapiFields.add("deviceName");
    openapiFields.add("deviceSerial");
    openapiFields.add("eventData");
    openapiFields.add("networkId");
    openapiFields.add("occurredAt");
    openapiFields.add("ssidNumber");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkEvents200ResponseEventsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkEvents200ResponseEventsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkEvents200ResponseEventsInner is not found in the empty JSON string", GetNetworkEvents200ResponseEventsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkEvents200ResponseEventsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkEvents200ResponseEventsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("clientDescription") != null && !jsonObj.get("clientDescription").isJsonNull()) && !jsonObj.get("clientDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientDescription").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientMac") != null && !jsonObj.get("clientMac").isJsonNull()) && !jsonObj.get("clientMac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientMac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientMac").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if ((jsonObj.get("deviceSerial") != null && !jsonObj.get("deviceSerial").isJsonNull()) && !jsonObj.get("deviceSerial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSerial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSerial").toString()));
      }
      // validate the optional field `eventData`
      if (jsonObj.get("eventData") != null && !jsonObj.get("eventData").isJsonNull()) {
        GetNetworkEvents200ResponseEventsInnerEventData.validateJsonElement(jsonObj.get("eventData"));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("occurredAt") != null && !jsonObj.get("occurredAt").isJsonNull()) && !jsonObj.get("occurredAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occurredAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occurredAt").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkEvents200ResponseEventsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkEvents200ResponseEventsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkEvents200ResponseEventsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkEvents200ResponseEventsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkEvents200ResponseEventsInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkEvents200ResponseEventsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkEvents200ResponseEventsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkEvents200ResponseEventsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkEvents200ResponseEventsInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkEvents200ResponseEventsInner
   */
  public static GetNetworkEvents200ResponseEventsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkEvents200ResponseEventsInner.class);
  }

  /**
   * Convert an instance of GetNetworkEvents200ResponseEventsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

