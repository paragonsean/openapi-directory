/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSmDeviceCerts200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSmDeviceCerts200ResponseInner {
  public static final String SERIALIZED_NAME_CERT_PEM = "certPem";
  @SerializedName(SERIALIZED_NAME_CERT_PEM)
  private String certPem;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOT_VALID_AFTER = "notValidAfter";
  @SerializedName(SERIALIZED_NAME_NOT_VALID_AFTER)
  private String notValidAfter;

  public static final String SERIALIZED_NAME_NOT_VALID_BEFORE = "notValidBefore";
  @SerializedName(SERIALIZED_NAME_NOT_VALID_BEFORE)
  private String notValidBefore;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public GetNetworkSmDeviceCerts200ResponseInner() {
  }

  public GetNetworkSmDeviceCerts200ResponseInner certPem(String certPem) {
    this.certPem = certPem;
    return this;
  }

  /**
   * The PEM of the certificate.
   * @return certPem
   */
  @javax.annotation.Nullable
  public String getCertPem() {
    return certPem;
  }

  public void setCertPem(String certPem) {
    this.certPem = certPem;
  }


  public GetNetworkSmDeviceCerts200ResponseInner deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The Meraki managed device Id.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public GetNetworkSmDeviceCerts200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Meraki Id of the certificate record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetworkSmDeviceCerts200ResponseInner issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The certificate issuer.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public GetNetworkSmDeviceCerts200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the certificate.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetworkSmDeviceCerts200ResponseInner notValidAfter(String notValidAfter) {
    this.notValidAfter = notValidAfter;
    return this;
  }

  /**
   * The date after which the certificate is no longer valid.
   * @return notValidAfter
   */
  @javax.annotation.Nullable
  public String getNotValidAfter() {
    return notValidAfter;
  }

  public void setNotValidAfter(String notValidAfter) {
    this.notValidAfter = notValidAfter;
  }


  public GetNetworkSmDeviceCerts200ResponseInner notValidBefore(String notValidBefore) {
    this.notValidBefore = notValidBefore;
    return this;
  }

  /**
   * The date before which the certificate is not valid.
   * @return notValidBefore
   */
  @javax.annotation.Nullable
  public String getNotValidBefore() {
    return notValidBefore;
  }

  public void setNotValidBefore(String notValidBefore) {
    this.notValidBefore = notValidBefore;
  }


  public GetNetworkSmDeviceCerts200ResponseInner subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the certificate.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSmDeviceCerts200ResponseInner getNetworkSmDeviceCerts200ResponseInner = (GetNetworkSmDeviceCerts200ResponseInner) o;
    return Objects.equals(this.certPem, getNetworkSmDeviceCerts200ResponseInner.certPem) &&
        Objects.equals(this.deviceId, getNetworkSmDeviceCerts200ResponseInner.deviceId) &&
        Objects.equals(this.id, getNetworkSmDeviceCerts200ResponseInner.id) &&
        Objects.equals(this.issuer, getNetworkSmDeviceCerts200ResponseInner.issuer) &&
        Objects.equals(this.name, getNetworkSmDeviceCerts200ResponseInner.name) &&
        Objects.equals(this.notValidAfter, getNetworkSmDeviceCerts200ResponseInner.notValidAfter) &&
        Objects.equals(this.notValidBefore, getNetworkSmDeviceCerts200ResponseInner.notValidBefore) &&
        Objects.equals(this.subject, getNetworkSmDeviceCerts200ResponseInner.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certPem, deviceId, id, issuer, name, notValidAfter, notValidBefore, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSmDeviceCerts200ResponseInner {\n");
    sb.append("    certPem: ").append(toIndentedString(certPem)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notValidAfter: ").append(toIndentedString(notValidAfter)).append("\n");
    sb.append("    notValidBefore: ").append(toIndentedString(notValidBefore)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certPem");
    openapiFields.add("deviceId");
    openapiFields.add("id");
    openapiFields.add("issuer");
    openapiFields.add("name");
    openapiFields.add("notValidAfter");
    openapiFields.add("notValidBefore");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSmDeviceCerts200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSmDeviceCerts200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSmDeviceCerts200ResponseInner is not found in the empty JSON string", GetNetworkSmDeviceCerts200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSmDeviceCerts200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSmDeviceCerts200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certPem") != null && !jsonObj.get("certPem").isJsonNull()) && !jsonObj.get("certPem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certPem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certPem").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notValidAfter") != null && !jsonObj.get("notValidAfter").isJsonNull()) && !jsonObj.get("notValidAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notValidAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notValidAfter").toString()));
      }
      if ((jsonObj.get("notValidBefore") != null && !jsonObj.get("notValidBefore").isJsonNull()) && !jsonObj.get("notValidBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notValidBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notValidBefore").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSmDeviceCerts200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSmDeviceCerts200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSmDeviceCerts200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSmDeviceCerts200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSmDeviceCerts200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSmDeviceCerts200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSmDeviceCerts200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSmDeviceCerts200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSmDeviceCerts200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSmDeviceCerts200ResponseInner
   */
  public static GetNetworkSmDeviceCerts200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSmDeviceCerts200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSmDeviceCerts200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

