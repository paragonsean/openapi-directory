/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDeviceSwitchPorts200ResponseInnerProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeviceSwitchPortRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceSwitchPortRequest {
  public static final String SERIALIZED_NAME_ACCESS_POLICY_NUMBER = "accessPolicyNumber";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_NUMBER)
  private Integer accessPolicyNumber;

  /**
   * The type of the access policy of the switch port. Only applicable to access ports. Can be one of &#39;Open&#39;, &#39;Custom access policy&#39;, &#39;MAC allow list&#39; or &#39;Sticky MAC allow list&#39;.
   */
  @JsonAdapter(AccessPolicyTypeEnum.Adapter.class)
  public enum AccessPolicyTypeEnum {
    CUSTOM_ACCESS_POLICY("Custom access policy"),
    
    MAC_ALLOW_LIST("MAC allow list"),
    
    OPEN("Open"),
    
    STICKY_MAC_ALLOW_LIST("Sticky MAC allow list");

    private String value;

    AccessPolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessPolicyTypeEnum fromValue(String value) {
      for (AccessPolicyTypeEnum b : AccessPolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessPolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessPolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessPolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessPolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessPolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_POLICY_TYPE = "accessPolicyType";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_TYPE)
  private AccessPolicyTypeEnum accessPolicyType;

  public static final String SERIALIZED_NAME_ADAPTIVE_POLICY_GROUP_ID = "adaptivePolicyGroupId";
  @SerializedName(SERIALIZED_NAME_ADAPTIVE_POLICY_GROUP_ID)
  private String adaptivePolicyGroupId;

  public static final String SERIALIZED_NAME_ALLOWED_VLANS = "allowedVlans";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VLANS)
  private String allowedVlans;

  public static final String SERIALIZED_NAME_DAI_TRUSTED = "daiTrusted";
  @SerializedName(SERIALIZED_NAME_DAI_TRUSTED)
  private Boolean daiTrusted;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FLEXIBLE_STACKING_ENABLED = "flexibleStackingEnabled";
  @SerializedName(SERIALIZED_NAME_FLEXIBLE_STACKING_ENABLED)
  private Boolean flexibleStackingEnabled;

  public static final String SERIALIZED_NAME_ISOLATION_ENABLED = "isolationEnabled";
  @SerializedName(SERIALIZED_NAME_ISOLATION_ENABLED)
  private Boolean isolationEnabled;

  public static final String SERIALIZED_NAME_LINK_NEGOTIATION = "linkNegotiation";
  @SerializedName(SERIALIZED_NAME_LINK_NEGOTIATION)
  private String linkNegotiation;

  public static final String SERIALIZED_NAME_MAC_ALLOW_LIST = "macAllowList";
  @SerializedName(SERIALIZED_NAME_MAC_ALLOW_LIST)
  private List<String> macAllowList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEER_SGT_CAPABLE = "peerSgtCapable";
  @SerializedName(SERIALIZED_NAME_PEER_SGT_CAPABLE)
  private Boolean peerSgtCapable;

  public static final String SERIALIZED_NAME_POE_ENABLED = "poeEnabled";
  @SerializedName(SERIALIZED_NAME_POE_ENABLED)
  private Boolean poeEnabled;

  public static final String SERIALIZED_NAME_PORT_SCHEDULE_ID = "portScheduleId";
  @SerializedName(SERIALIZED_NAME_PORT_SCHEDULE_ID)
  private String portScheduleId;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private GetDeviceSwitchPorts200ResponseInnerProfile profile;

  public static final String SERIALIZED_NAME_RSTP_ENABLED = "rstpEnabled";
  @SerializedName(SERIALIZED_NAME_RSTP_ENABLED)
  private Boolean rstpEnabled;

  public static final String SERIALIZED_NAME_STICKY_MAC_ALLOW_LIST = "stickyMacAllowList";
  @SerializedName(SERIALIZED_NAME_STICKY_MAC_ALLOW_LIST)
  private List<String> stickyMacAllowList = new ArrayList<>();

  public static final String SERIALIZED_NAME_STICKY_MAC_ALLOW_LIST_LIMIT = "stickyMacAllowListLimit";
  @SerializedName(SERIALIZED_NAME_STICKY_MAC_ALLOW_LIST_LIMIT)
  private Integer stickyMacAllowListLimit;

  public static final String SERIALIZED_NAME_STORM_CONTROL_ENABLED = "stormControlEnabled";
  @SerializedName(SERIALIZED_NAME_STORM_CONTROL_ENABLED)
  private Boolean stormControlEnabled;

  /**
   * The state of the STP guard (&#39;disabled&#39;, &#39;root guard&#39;, &#39;bpdu guard&#39; or &#39;loop guard&#39;).
   */
  @JsonAdapter(StpGuardEnum.Adapter.class)
  public enum StpGuardEnum {
    BPDU_GUARD("bpdu guard"),
    
    DISABLED("disabled"),
    
    LOOP_GUARD("loop guard"),
    
    ROOT_GUARD("root guard");

    private String value;

    StpGuardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StpGuardEnum fromValue(String value) {
      for (StpGuardEnum b : StpGuardEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StpGuardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StpGuardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StpGuardEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StpGuardEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StpGuardEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STP_GUARD = "stpGuard";
  @SerializedName(SERIALIZED_NAME_STP_GUARD)
  private StpGuardEnum stpGuard;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  /**
   * The type of the switch port (&#39;trunk&#39; or &#39;access&#39;).
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCESS("access"),
    
    TRUNK("trunk");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
   */
  @JsonAdapter(UdldEnum.Adapter.class)
  public enum UdldEnum {
    ALERT_ONLY("Alert only"),
    
    ENFORCE("Enforce");

    private String value;

    UdldEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UdldEnum fromValue(String value) {
      for (UdldEnum b : UdldEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UdldEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UdldEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UdldEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UdldEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UdldEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UDLD = "udld";
  @SerializedName(SERIALIZED_NAME_UDLD)
  private UdldEnum udld;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private Integer vlan;

  public static final String SERIALIZED_NAME_VOICE_VLAN = "voiceVlan";
  @SerializedName(SERIALIZED_NAME_VOICE_VLAN)
  private Integer voiceVlan;

  public UpdateDeviceSwitchPortRequest() {
  }

  public UpdateDeviceSwitchPortRequest accessPolicyNumber(Integer accessPolicyNumber) {
    this.accessPolicyNumber = accessPolicyNumber;
    return this;
  }

  /**
   * The number of a custom access policy to configure on the switch port. Only applicable when &#39;accessPolicyType&#39; is &#39;Custom access policy&#39;.
   * @return accessPolicyNumber
   */
  @javax.annotation.Nullable
  public Integer getAccessPolicyNumber() {
    return accessPolicyNumber;
  }

  public void setAccessPolicyNumber(Integer accessPolicyNumber) {
    this.accessPolicyNumber = accessPolicyNumber;
  }


  public UpdateDeviceSwitchPortRequest accessPolicyType(AccessPolicyTypeEnum accessPolicyType) {
    this.accessPolicyType = accessPolicyType;
    return this;
  }

  /**
   * The type of the access policy of the switch port. Only applicable to access ports. Can be one of &#39;Open&#39;, &#39;Custom access policy&#39;, &#39;MAC allow list&#39; or &#39;Sticky MAC allow list&#39;.
   * @return accessPolicyType
   */
  @javax.annotation.Nullable
  public AccessPolicyTypeEnum getAccessPolicyType() {
    return accessPolicyType;
  }

  public void setAccessPolicyType(AccessPolicyTypeEnum accessPolicyType) {
    this.accessPolicyType = accessPolicyType;
  }


  public UpdateDeviceSwitchPortRequest adaptivePolicyGroupId(String adaptivePolicyGroupId) {
    this.adaptivePolicyGroupId = adaptivePolicyGroupId;
    return this;
  }

  /**
   * The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
   * @return adaptivePolicyGroupId
   */
  @javax.annotation.Nullable
  public String getAdaptivePolicyGroupId() {
    return adaptivePolicyGroupId;
  }

  public void setAdaptivePolicyGroupId(String adaptivePolicyGroupId) {
    this.adaptivePolicyGroupId = adaptivePolicyGroupId;
  }


  public UpdateDeviceSwitchPortRequest allowedVlans(String allowedVlans) {
    this.allowedVlans = allowedVlans;
    return this;
  }

  /**
   * The VLANs allowed on the switch port. Only applicable to trunk ports.
   * @return allowedVlans
   */
  @javax.annotation.Nullable
  public String getAllowedVlans() {
    return allowedVlans;
  }

  public void setAllowedVlans(String allowedVlans) {
    this.allowedVlans = allowedVlans;
  }


  public UpdateDeviceSwitchPortRequest daiTrusted(Boolean daiTrusted) {
    this.daiTrusted = daiTrusted;
    return this;
  }

  /**
   * If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
   * @return daiTrusted
   */
  @javax.annotation.Nullable
  public Boolean getDaiTrusted() {
    return daiTrusted;
  }

  public void setDaiTrusted(Boolean daiTrusted) {
    this.daiTrusted = daiTrusted;
  }


  public UpdateDeviceSwitchPortRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * The status of the switch port.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateDeviceSwitchPortRequest flexibleStackingEnabled(Boolean flexibleStackingEnabled) {
    this.flexibleStackingEnabled = flexibleStackingEnabled;
    return this;
  }

  /**
   * For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
   * @return flexibleStackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFlexibleStackingEnabled() {
    return flexibleStackingEnabled;
  }

  public void setFlexibleStackingEnabled(Boolean flexibleStackingEnabled) {
    this.flexibleStackingEnabled = flexibleStackingEnabled;
  }


  public UpdateDeviceSwitchPortRequest isolationEnabled(Boolean isolationEnabled) {
    this.isolationEnabled = isolationEnabled;
    return this;
  }

  /**
   * The isolation status of the switch port.
   * @return isolationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsolationEnabled() {
    return isolationEnabled;
  }

  public void setIsolationEnabled(Boolean isolationEnabled) {
    this.isolationEnabled = isolationEnabled;
  }


  public UpdateDeviceSwitchPortRequest linkNegotiation(String linkNegotiation) {
    this.linkNegotiation = linkNegotiation;
    return this;
  }

  /**
   * The link speed for the switch port.
   * @return linkNegotiation
   */
  @javax.annotation.Nullable
  public String getLinkNegotiation() {
    return linkNegotiation;
  }

  public void setLinkNegotiation(String linkNegotiation) {
    this.linkNegotiation = linkNegotiation;
  }


  public UpdateDeviceSwitchPortRequest macAllowList(List<String> macAllowList) {
    this.macAllowList = macAllowList;
    return this;
  }

  public UpdateDeviceSwitchPortRequest addMacAllowListItem(String macAllowListItem) {
    if (this.macAllowList == null) {
      this.macAllowList = new ArrayList<>();
    }
    this.macAllowList.add(macAllowListItem);
    return this;
  }

  /**
   * Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when &#39;accessPolicyType&#39; is &#39;MAC allow list&#39;.
   * @return macAllowList
   */
  @javax.annotation.Nullable
  public List<String> getMacAllowList() {
    return macAllowList;
  }

  public void setMacAllowList(List<String> macAllowList) {
    this.macAllowList = macAllowList;
  }


  public UpdateDeviceSwitchPortRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the switch port.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateDeviceSwitchPortRequest peerSgtCapable(Boolean peerSgtCapable) {
    this.peerSgtCapable = peerSgtCapable;
    return this;
  }

  /**
   * If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
   * @return peerSgtCapable
   */
  @javax.annotation.Nullable
  public Boolean getPeerSgtCapable() {
    return peerSgtCapable;
  }

  public void setPeerSgtCapable(Boolean peerSgtCapable) {
    this.peerSgtCapable = peerSgtCapable;
  }


  public UpdateDeviceSwitchPortRequest poeEnabled(Boolean poeEnabled) {
    this.poeEnabled = poeEnabled;
    return this;
  }

  /**
   * The PoE status of the switch port.
   * @return poeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPoeEnabled() {
    return poeEnabled;
  }

  public void setPoeEnabled(Boolean poeEnabled) {
    this.poeEnabled = poeEnabled;
  }


  public UpdateDeviceSwitchPortRequest portScheduleId(String portScheduleId) {
    this.portScheduleId = portScheduleId;
    return this;
  }

  /**
   * The ID of the port schedule. A value of null will clear the port schedule.
   * @return portScheduleId
   */
  @javax.annotation.Nullable
  public String getPortScheduleId() {
    return portScheduleId;
  }

  public void setPortScheduleId(String portScheduleId) {
    this.portScheduleId = portScheduleId;
  }


  public UpdateDeviceSwitchPortRequest profile(GetDeviceSwitchPorts200ResponseInnerProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPorts200ResponseInnerProfile getProfile() {
    return profile;
  }

  public void setProfile(GetDeviceSwitchPorts200ResponseInnerProfile profile) {
    this.profile = profile;
  }


  public UpdateDeviceSwitchPortRequest rstpEnabled(Boolean rstpEnabled) {
    this.rstpEnabled = rstpEnabled;
    return this;
  }

  /**
   * The rapid spanning tree protocol status.
   * @return rstpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRstpEnabled() {
    return rstpEnabled;
  }

  public void setRstpEnabled(Boolean rstpEnabled) {
    this.rstpEnabled = rstpEnabled;
  }


  public UpdateDeviceSwitchPortRequest stickyMacAllowList(List<String> stickyMacAllowList) {
    this.stickyMacAllowList = stickyMacAllowList;
    return this;
  }

  public UpdateDeviceSwitchPortRequest addStickyMacAllowListItem(String stickyMacAllowListItem) {
    if (this.stickyMacAllowList == null) {
      this.stickyMacAllowList = new ArrayList<>();
    }
    this.stickyMacAllowList.add(stickyMacAllowListItem);
    return this;
  }

  /**
   * The initial list of MAC addresses for sticky Mac allow list. Only applicable when &#39;accessPolicyType&#39; is &#39;Sticky MAC allow list&#39;.
   * @return stickyMacAllowList
   */
  @javax.annotation.Nullable
  public List<String> getStickyMacAllowList() {
    return stickyMacAllowList;
  }

  public void setStickyMacAllowList(List<String> stickyMacAllowList) {
    this.stickyMacAllowList = stickyMacAllowList;
  }


  public UpdateDeviceSwitchPortRequest stickyMacAllowListLimit(Integer stickyMacAllowListLimit) {
    this.stickyMacAllowListLimit = stickyMacAllowListLimit;
    return this;
  }

  /**
   * The maximum number of MAC addresses for sticky MAC allow list. Only applicable when &#39;accessPolicyType&#39; is &#39;Sticky MAC allow list&#39;.
   * @return stickyMacAllowListLimit
   */
  @javax.annotation.Nullable
  public Integer getStickyMacAllowListLimit() {
    return stickyMacAllowListLimit;
  }

  public void setStickyMacAllowListLimit(Integer stickyMacAllowListLimit) {
    this.stickyMacAllowListLimit = stickyMacAllowListLimit;
  }


  public UpdateDeviceSwitchPortRequest stormControlEnabled(Boolean stormControlEnabled) {
    this.stormControlEnabled = stormControlEnabled;
    return this;
  }

  /**
   * The storm control status of the switch port.
   * @return stormControlEnabled
   */
  @javax.annotation.Nullable
  public Boolean getStormControlEnabled() {
    return stormControlEnabled;
  }

  public void setStormControlEnabled(Boolean stormControlEnabled) {
    this.stormControlEnabled = stormControlEnabled;
  }


  public UpdateDeviceSwitchPortRequest stpGuard(StpGuardEnum stpGuard) {
    this.stpGuard = stpGuard;
    return this;
  }

  /**
   * The state of the STP guard (&#39;disabled&#39;, &#39;root guard&#39;, &#39;bpdu guard&#39; or &#39;loop guard&#39;).
   * @return stpGuard
   */
  @javax.annotation.Nullable
  public StpGuardEnum getStpGuard() {
    return stpGuard;
  }

  public void setStpGuard(StpGuardEnum stpGuard) {
    this.stpGuard = stpGuard;
  }


  public UpdateDeviceSwitchPortRequest tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateDeviceSwitchPortRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The list of tags of the switch port.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public UpdateDeviceSwitchPortRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the switch port (&#39;trunk&#39; or &#39;access&#39;).
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UpdateDeviceSwitchPortRequest udld(UdldEnum udld) {
    this.udld = udld;
    return this;
  }

  /**
   * The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
   * @return udld
   */
  @javax.annotation.Nullable
  public UdldEnum getUdld() {
    return udld;
  }

  public void setUdld(UdldEnum udld) {
    this.udld = udld;
  }


  public UpdateDeviceSwitchPortRequest vlan(Integer vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * The VLAN of the switch port. A null value will clear the value set for trunk ports.
   * @return vlan
   */
  @javax.annotation.Nullable
  public Integer getVlan() {
    return vlan;
  }

  public void setVlan(Integer vlan) {
    this.vlan = vlan;
  }


  public UpdateDeviceSwitchPortRequest voiceVlan(Integer voiceVlan) {
    this.voiceVlan = voiceVlan;
    return this;
  }

  /**
   * The voice VLAN of the switch port. Only applicable to access ports.
   * @return voiceVlan
   */
  @javax.annotation.Nullable
  public Integer getVoiceVlan() {
    return voiceVlan;
  }

  public void setVoiceVlan(Integer voiceVlan) {
    this.voiceVlan = voiceVlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = (UpdateDeviceSwitchPortRequest) o;
    return Objects.equals(this.accessPolicyNumber, updateDeviceSwitchPortRequest.accessPolicyNumber) &&
        Objects.equals(this.accessPolicyType, updateDeviceSwitchPortRequest.accessPolicyType) &&
        Objects.equals(this.adaptivePolicyGroupId, updateDeviceSwitchPortRequest.adaptivePolicyGroupId) &&
        Objects.equals(this.allowedVlans, updateDeviceSwitchPortRequest.allowedVlans) &&
        Objects.equals(this.daiTrusted, updateDeviceSwitchPortRequest.daiTrusted) &&
        Objects.equals(this.enabled, updateDeviceSwitchPortRequest.enabled) &&
        Objects.equals(this.flexibleStackingEnabled, updateDeviceSwitchPortRequest.flexibleStackingEnabled) &&
        Objects.equals(this.isolationEnabled, updateDeviceSwitchPortRequest.isolationEnabled) &&
        Objects.equals(this.linkNegotiation, updateDeviceSwitchPortRequest.linkNegotiation) &&
        Objects.equals(this.macAllowList, updateDeviceSwitchPortRequest.macAllowList) &&
        Objects.equals(this.name, updateDeviceSwitchPortRequest.name) &&
        Objects.equals(this.peerSgtCapable, updateDeviceSwitchPortRequest.peerSgtCapable) &&
        Objects.equals(this.poeEnabled, updateDeviceSwitchPortRequest.poeEnabled) &&
        Objects.equals(this.portScheduleId, updateDeviceSwitchPortRequest.portScheduleId) &&
        Objects.equals(this.profile, updateDeviceSwitchPortRequest.profile) &&
        Objects.equals(this.rstpEnabled, updateDeviceSwitchPortRequest.rstpEnabled) &&
        Objects.equals(this.stickyMacAllowList, updateDeviceSwitchPortRequest.stickyMacAllowList) &&
        Objects.equals(this.stickyMacAllowListLimit, updateDeviceSwitchPortRequest.stickyMacAllowListLimit) &&
        Objects.equals(this.stormControlEnabled, updateDeviceSwitchPortRequest.stormControlEnabled) &&
        Objects.equals(this.stpGuard, updateDeviceSwitchPortRequest.stpGuard) &&
        Objects.equals(this.tags, updateDeviceSwitchPortRequest.tags) &&
        Objects.equals(this.type, updateDeviceSwitchPortRequest.type) &&
        Objects.equals(this.udld, updateDeviceSwitchPortRequest.udld) &&
        Objects.equals(this.vlan, updateDeviceSwitchPortRequest.vlan) &&
        Objects.equals(this.voiceVlan, updateDeviceSwitchPortRequest.voiceVlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPolicyNumber, accessPolicyType, adaptivePolicyGroupId, allowedVlans, daiTrusted, enabled, flexibleStackingEnabled, isolationEnabled, linkNegotiation, macAllowList, name, peerSgtCapable, poeEnabled, portScheduleId, profile, rstpEnabled, stickyMacAllowList, stickyMacAllowListLimit, stormControlEnabled, stpGuard, tags, type, udld, vlan, voiceVlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceSwitchPortRequest {\n");
    sb.append("    accessPolicyNumber: ").append(toIndentedString(accessPolicyNumber)).append("\n");
    sb.append("    accessPolicyType: ").append(toIndentedString(accessPolicyType)).append("\n");
    sb.append("    adaptivePolicyGroupId: ").append(toIndentedString(adaptivePolicyGroupId)).append("\n");
    sb.append("    allowedVlans: ").append(toIndentedString(allowedVlans)).append("\n");
    sb.append("    daiTrusted: ").append(toIndentedString(daiTrusted)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    flexibleStackingEnabled: ").append(toIndentedString(flexibleStackingEnabled)).append("\n");
    sb.append("    isolationEnabled: ").append(toIndentedString(isolationEnabled)).append("\n");
    sb.append("    linkNegotiation: ").append(toIndentedString(linkNegotiation)).append("\n");
    sb.append("    macAllowList: ").append(toIndentedString(macAllowList)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peerSgtCapable: ").append(toIndentedString(peerSgtCapable)).append("\n");
    sb.append("    poeEnabled: ").append(toIndentedString(poeEnabled)).append("\n");
    sb.append("    portScheduleId: ").append(toIndentedString(portScheduleId)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    rstpEnabled: ").append(toIndentedString(rstpEnabled)).append("\n");
    sb.append("    stickyMacAllowList: ").append(toIndentedString(stickyMacAllowList)).append("\n");
    sb.append("    stickyMacAllowListLimit: ").append(toIndentedString(stickyMacAllowListLimit)).append("\n");
    sb.append("    stormControlEnabled: ").append(toIndentedString(stormControlEnabled)).append("\n");
    sb.append("    stpGuard: ").append(toIndentedString(stpGuard)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    udld: ").append(toIndentedString(udld)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("    voiceVlan: ").append(toIndentedString(voiceVlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPolicyNumber");
    openapiFields.add("accessPolicyType");
    openapiFields.add("adaptivePolicyGroupId");
    openapiFields.add("allowedVlans");
    openapiFields.add("daiTrusted");
    openapiFields.add("enabled");
    openapiFields.add("flexibleStackingEnabled");
    openapiFields.add("isolationEnabled");
    openapiFields.add("linkNegotiation");
    openapiFields.add("macAllowList");
    openapiFields.add("name");
    openapiFields.add("peerSgtCapable");
    openapiFields.add("poeEnabled");
    openapiFields.add("portScheduleId");
    openapiFields.add("profile");
    openapiFields.add("rstpEnabled");
    openapiFields.add("stickyMacAllowList");
    openapiFields.add("stickyMacAllowListLimit");
    openapiFields.add("stormControlEnabled");
    openapiFields.add("stpGuard");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("udld");
    openapiFields.add("vlan");
    openapiFields.add("voiceVlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceSwitchPortRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceSwitchPortRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceSwitchPortRequest is not found in the empty JSON string", UpdateDeviceSwitchPortRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceSwitchPortRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceSwitchPortRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessPolicyType") != null && !jsonObj.get("accessPolicyType").isJsonNull()) && !jsonObj.get("accessPolicyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessPolicyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessPolicyType").toString()));
      }
      // validate the optional field `accessPolicyType`
      if (jsonObj.get("accessPolicyType") != null && !jsonObj.get("accessPolicyType").isJsonNull()) {
        AccessPolicyTypeEnum.validateJsonElement(jsonObj.get("accessPolicyType"));
      }
      if ((jsonObj.get("adaptivePolicyGroupId") != null && !jsonObj.get("adaptivePolicyGroupId").isJsonNull()) && !jsonObj.get("adaptivePolicyGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adaptivePolicyGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adaptivePolicyGroupId").toString()));
      }
      if ((jsonObj.get("allowedVlans") != null && !jsonObj.get("allowedVlans").isJsonNull()) && !jsonObj.get("allowedVlans").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedVlans` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedVlans").toString()));
      }
      if ((jsonObj.get("linkNegotiation") != null && !jsonObj.get("linkNegotiation").isJsonNull()) && !jsonObj.get("linkNegotiation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkNegotiation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkNegotiation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("macAllowList") != null && !jsonObj.get("macAllowList").isJsonNull() && !jsonObj.get("macAllowList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `macAllowList` to be an array in the JSON string but got `%s`", jsonObj.get("macAllowList").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("portScheduleId") != null && !jsonObj.get("portScheduleId").isJsonNull()) && !jsonObj.get("portScheduleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portScheduleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portScheduleId").toString()));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        GetDeviceSwitchPorts200ResponseInnerProfile.validateJsonElement(jsonObj.get("profile"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stickyMacAllowList") != null && !jsonObj.get("stickyMacAllowList").isJsonNull() && !jsonObj.get("stickyMacAllowList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stickyMacAllowList` to be an array in the JSON string but got `%s`", jsonObj.get("stickyMacAllowList").toString()));
      }
      if ((jsonObj.get("stpGuard") != null && !jsonObj.get("stpGuard").isJsonNull()) && !jsonObj.get("stpGuard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stpGuard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stpGuard").toString()));
      }
      // validate the optional field `stpGuard`
      if (jsonObj.get("stpGuard") != null && !jsonObj.get("stpGuard").isJsonNull()) {
        StpGuardEnum.validateJsonElement(jsonObj.get("stpGuard"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("udld") != null && !jsonObj.get("udld").isJsonNull()) && !jsonObj.get("udld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `udld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("udld").toString()));
      }
      // validate the optional field `udld`
      if (jsonObj.get("udld") != null && !jsonObj.get("udld").isJsonNull()) {
        UdldEnum.validateJsonElement(jsonObj.get("udld"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceSwitchPortRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceSwitchPortRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceSwitchPortRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceSwitchPortRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceSwitchPortRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceSwitchPortRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceSwitchPortRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceSwitchPortRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceSwitchPortRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceSwitchPortRequest
   */
  public static UpdateDeviceSwitchPortRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceSwitchPortRequest.class);
  }

  /**
   * Convert an instance of UpdateDeviceSwitchPortRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

