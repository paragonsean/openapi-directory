/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.GetNetworkMerakiAuthUsers200ResponseInner;
import org.openapitools.client.model.UpdateNetworkMerakiAuthUserRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerakiAuthUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerakiAuthUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerakiAuthUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkMerakiAuthUser_1
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMerakiAuthUser_1Call(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkMerakiAuthUserRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkMerakiAuthUser_1ValidateBeforeCall(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkMerakiAuthUser_1(Async)");
        }

        // verify the required parameter 'createNetworkMerakiAuthUserRequest' is set
        if (createNetworkMerakiAuthUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkMerakiAuthUserRequest' when calling createNetworkMerakiAuthUser_1(Async)");
        }

        return createNetworkMerakiAuthUser_1Call(networkId, createNetworkMerakiAuthUserRequest, _callback);

    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner createNetworkMerakiAuthUser_1(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = createNetworkMerakiAuthUser_1WithHttpInfo(networkId, createNetworkMerakiAuthUserRequest);
        return localVarResp.getData();
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> createNetworkMerakiAuthUser_1WithHttpInfo(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, createNetworkMerakiAuthUserRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap) (asynchronously)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMerakiAuthUser_1Async(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, createNetworkMerakiAuthUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkMerakiAuthUser_1
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMerakiAuthUser_1Call(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkMerakiAuthUser_1ValidateBeforeCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkMerakiAuthUser_1(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling deleteNetworkMerakiAuthUser_1(Async)");
        }

        return deleteNetworkMerakiAuthUser_1Call(networkId, merakiAuthUserId, _callback);

    }

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkMerakiAuthUser_1(String networkId, String merakiAuthUserId) throws ApiException {
        deleteNetworkMerakiAuthUser_1WithHttpInfo(networkId, merakiAuthUserId);
    }

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkMerakiAuthUser_1WithHttpInfo(String networkId, String merakiAuthUserId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, merakiAuthUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deauthorize a user (asynchronously)
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMerakiAuthUser_1Async(String networkId, String merakiAuthUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, merakiAuthUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMerakiAuthUser_1
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUser_1Call(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMerakiAuthUser_1ValidateBeforeCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUser_1(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling getNetworkMerakiAuthUser_1(Async)");
        }

        return getNetworkMerakiAuthUser_1Call(networkId, merakiAuthUserId, _callback);

    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner getNetworkMerakiAuthUser_1(String networkId, String merakiAuthUserId) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = getNetworkMerakiAuthUser_1WithHttpInfo(networkId, merakiAuthUserId);
        return localVarResp.getData();
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> getNetworkMerakiAuthUser_1WithHttpInfo(String networkId, String merakiAuthUserId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, merakiAuthUserId, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user (asynchronously)
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUser_1Async(String networkId, String merakiAuthUserId, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, merakiAuthUserId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMerakiAuthUsers_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUsers_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMerakiAuthUsers_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUsers_1(Async)");
        }

        return getNetworkMerakiAuthUsers_1Call(networkId, _callback);

    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @return List&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkMerakiAuthUsers200ResponseInner> getNetworkMerakiAuthUsers_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkMerakiAuthUsers200ResponseInner>> localVarResp = getNetworkMerakiAuthUsers_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkMerakiAuthUsers200ResponseInner>> getNetworkMerakiAuthUsers_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMerakiAuthUsers_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkMerakiAuthUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network) (asynchronously)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUsers_1Async(String networkId, final ApiCallback<List<GetNetworkMerakiAuthUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMerakiAuthUsers_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkMerakiAuthUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkMerakiAuthUser_1
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMerakiAuthUser_1Call(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkMerakiAuthUserRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkMerakiAuthUser_1ValidateBeforeCall(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkMerakiAuthUser_1(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling updateNetworkMerakiAuthUser_1(Async)");
        }

        return updateNetworkMerakiAuthUser_1Call(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, _callback);

    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner updateNetworkMerakiAuthUser_1(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = updateNetworkMerakiAuthUser_1WithHttpInfo(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> updateNetworkMerakiAuthUser_1WithHttpInfo(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated) (asynchronously)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMerakiAuthUser_1Async(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkMerakiAuthUser_1ValidateBeforeCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
