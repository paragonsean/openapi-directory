/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSwitchDhcpV4ServersSeen200ResponseInner {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice device;

  public static final String SERIALIZED_NAME_IPV4 = "ipv4";
  @SerializedName(SERIALIZED_NAME_IPV4)
  private GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4 ipv4;

  public static final String SERIALIZED_NAME_IS_ALLOWED = "isAllowed";
  @SerializedName(SERIALIZED_NAME_IS_ALLOWED)
  private Boolean isAllowed;

  public static final String SERIALIZED_NAME_IS_CONFIGURED = "isConfigured";
  @SerializedName(SERIALIZED_NAME_IS_CONFIGURED)
  private Boolean isConfigured;

  public static final String SERIALIZED_NAME_LAST_ACK = "lastAck";
  @SerializedName(SERIALIZED_NAME_LAST_ACK)
  private GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck lastAck;

  public static final String SERIALIZED_NAME_LAST_PACKET = "lastPacket";
  @SerializedName(SERIALIZED_NAME_LAST_PACKET)
  private GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket lastPacket;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "lastSeenAt";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private OffsetDateTime lastSeenAt;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_SEEN_BY = "seenBy";
  @SerializedName(SERIALIZED_NAME_SEEN_BY)
  private List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner> seenBy = new ArrayList<>();

  /**
   * server type. Can be a &#39;device&#39;, &#39;stack&#39;, or &#39;discovered&#39; (i.e client).
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DEVICE("device"),
    
    DISCOVERED("discovered"),
    
    STACK("stack");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private Integer vlan;

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner() {
  }

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client id of the server if available.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner device(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice getDevice() {
    return device;
  }

  public void setDevice(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice device) {
    this.device = device;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner ipv4(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4 ipv4) {
    this.ipv4 = ipv4;
    return this;
  }

  /**
   * Get ipv4
   * @return ipv4
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4 getIpv4() {
    return ipv4;
  }

  public void setIpv4(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4 ipv4) {
    this.ipv4 = ipv4;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner isAllowed(Boolean isAllowed) {
    this.isAllowed = isAllowed;
    return this;
  }

  /**
   * Whether the server is allowed or blocked. Always true for configured servers.
   * @return isAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsAllowed() {
    return isAllowed;
  }

  public void setIsAllowed(Boolean isAllowed) {
    this.isAllowed = isAllowed;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner isConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
    return this;
  }

  /**
   * Whether the server is configured.
   * @return isConfigured
   */
  @javax.annotation.Nullable
  public Boolean getIsConfigured() {
    return isConfigured;
  }

  public void setIsConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner lastAck(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck lastAck) {
    this.lastAck = lastAck;
    return this;
  }

  /**
   * Get lastAck
   * @return lastAck
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck getLastAck() {
    return lastAck;
  }

  public void setLastAck(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck lastAck) {
    this.lastAck = lastAck;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner lastPacket(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket lastPacket) {
    this.lastPacket = lastPacket;
    return this;
  }

  /**
   * Get lastPacket
   * @return lastPacket
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket getLastPacket() {
    return lastPacket;
  }

  public void setLastPacket(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket lastPacket) {
    this.lastPacket = lastPacket;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner lastSeenAt(OffsetDateTime lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
    return this;
  }

  /**
   * Last time the server was seen.
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeenAt() {
    return lastSeenAt;
  }

  public void setLastSeenAt(OffsetDateTime lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner mac(String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * Mac address of the server.
   * @return mac
   */
  @javax.annotation.Nullable
  public String getMac() {
    return mac;
  }

  public void setMac(String mac) {
    this.mac = mac;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner seenBy(List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner> seenBy) {
    this.seenBy = seenBy;
    return this;
  }

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner addSeenByItem(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner seenByItem) {
    if (this.seenBy == null) {
      this.seenBy = new ArrayList<>();
    }
    this.seenBy.add(seenByItem);
    return this;
  }

  /**
   * Devices that saw the server.
   * @return seenBy
   */
  @javax.annotation.Nullable
  public List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner> getSeenBy() {
    return seenBy;
  }

  public void setSeenBy(List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner> seenBy) {
    this.seenBy = seenBy;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * server type. Can be a &#39;device&#39;, &#39;stack&#39;, or &#39;discovered&#39; (i.e client).
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner vlan(Integer vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * Vlan id of the server.
   * @return vlan
   */
  @javax.annotation.Nullable
  public Integer getVlan() {
    return vlan;
  }

  public void setVlan(Integer vlan) {
    this.vlan = vlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSwitchDhcpV4ServersSeen200ResponseInner getNetworkSwitchDhcpV4ServersSeen200ResponseInner = (GetNetworkSwitchDhcpV4ServersSeen200ResponseInner) o;
    return Objects.equals(this.clientId, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.clientId) &&
        Objects.equals(this.device, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.device) &&
        Objects.equals(this.ipv4, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.ipv4) &&
        Objects.equals(this.isAllowed, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.isAllowed) &&
        Objects.equals(this.isConfigured, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.isConfigured) &&
        Objects.equals(this.lastAck, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.lastAck) &&
        Objects.equals(this.lastPacket, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.lastPacket) &&
        Objects.equals(this.lastSeenAt, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.lastSeenAt) &&
        Objects.equals(this.mac, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.mac) &&
        Objects.equals(this.seenBy, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.seenBy) &&
        Objects.equals(this.type, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.type) &&
        Objects.equals(this.vlan, getNetworkSwitchDhcpV4ServersSeen200ResponseInner.vlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, device, ipv4, isAllowed, isConfigured, lastAck, lastPacket, lastSeenAt, mac, seenBy, type, vlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSwitchDhcpV4ServersSeen200ResponseInner {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
    sb.append("    isAllowed: ").append(toIndentedString(isAllowed)).append("\n");
    sb.append("    isConfigured: ").append(toIndentedString(isConfigured)).append("\n");
    sb.append("    lastAck: ").append(toIndentedString(lastAck)).append("\n");
    sb.append("    lastPacket: ").append(toIndentedString(lastPacket)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    seenBy: ").append(toIndentedString(seenBy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("device");
    openapiFields.add("ipv4");
    openapiFields.add("isAllowed");
    openapiFields.add("isConfigured");
    openapiFields.add("lastAck");
    openapiFields.add("lastPacket");
    openapiFields.add("lastSeenAt");
    openapiFields.add("mac");
    openapiFields.add("seenBy");
    openapiFields.add("type");
    openapiFields.add("vlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSwitchDhcpV4ServersSeen200ResponseInner is not found in the empty JSON string", GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSwitchDhcpV4ServersSeen200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice.validateJsonElement(jsonObj.get("device"));
      }
      // validate the optional field `ipv4`
      if (jsonObj.get("ipv4") != null && !jsonObj.get("ipv4").isJsonNull()) {
        GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4.validateJsonElement(jsonObj.get("ipv4"));
      }
      // validate the optional field `lastAck`
      if (jsonObj.get("lastAck") != null && !jsonObj.get("lastAck").isJsonNull()) {
        GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck.validateJsonElement(jsonObj.get("lastAck"));
      }
      // validate the optional field `lastPacket`
      if (jsonObj.get("lastPacket") != null && !jsonObj.get("lastPacket").isJsonNull()) {
        GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket.validateJsonElement(jsonObj.get("lastPacket"));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if (jsonObj.get("seenBy") != null && !jsonObj.get("seenBy").isJsonNull()) {
        JsonArray jsonArrayseenBy = jsonObj.getAsJsonArray("seenBy");
        if (jsonArrayseenBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seenBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seenBy` to be an array in the JSON string but got `%s`", jsonObj.get("seenBy").toString()));
          }

          // validate the optional field `seenBy` (array)
          for (int i = 0; i < jsonArrayseenBy.size(); i++) {
            GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner.validateJsonElement(jsonArrayseenBy.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSwitchDhcpV4ServersSeen200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSwitchDhcpV4ServersSeen200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSwitchDhcpV4ServersSeen200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
   */
  public static GetNetworkSwitchDhcpV4ServersSeen200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

