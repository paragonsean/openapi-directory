/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrganizationDevicesUplinksLossAndLatency200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationDevicesUplinksLossAndLatency200ResponseInner {
  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner> timeSeries = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPLINK = "uplink";
  @SerializedName(SERIALIZED_NAME_UPLINK)
  private String uplink;

  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner() {
  }

  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * IP address of uplink
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * Network ID
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Serial of MX device
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner timeSeries(List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner> timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner addTimeSeriesItem(GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner timeSeriesItem) {
    if (this.timeSeries == null) {
      this.timeSeries = new ArrayList<>();
    }
    this.timeSeries.add(timeSeriesItem);
    return this;
  }

  /**
   * Loss and latency timeseries data
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner> getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner> timeSeries) {
    this.timeSeries = timeSeries;
  }


  public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner uplink(String uplink) {
    this.uplink = uplink;
    return this;
  }

  /**
   * Uplink interface (wan1, wan2, or cellular)
   * @return uplink
   */
  @javax.annotation.Nullable
  public String getUplink() {
    return uplink;
  }

  public void setUplink(String uplink) {
    this.uplink = uplink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationDevicesUplinksLossAndLatency200ResponseInner getOrganizationDevicesUplinksLossAndLatency200ResponseInner = (GetOrganizationDevicesUplinksLossAndLatency200ResponseInner) o;
    return Objects.equals(this.ip, getOrganizationDevicesUplinksLossAndLatency200ResponseInner.ip) &&
        Objects.equals(this.networkId, getOrganizationDevicesUplinksLossAndLatency200ResponseInner.networkId) &&
        Objects.equals(this.serial, getOrganizationDevicesUplinksLossAndLatency200ResponseInner.serial) &&
        Objects.equals(this.timeSeries, getOrganizationDevicesUplinksLossAndLatency200ResponseInner.timeSeries) &&
        Objects.equals(this.uplink, getOrganizationDevicesUplinksLossAndLatency200ResponseInner.uplink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ip, networkId, serial, timeSeries, uplink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationDevicesUplinksLossAndLatency200ResponseInner {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("    uplink: ").append(toIndentedString(uplink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ip");
    openapiFields.add("networkId");
    openapiFields.add("serial");
    openapiFields.add("timeSeries");
    openapiFields.add("uplink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationDevicesUplinksLossAndLatency200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationDevicesUplinksLossAndLatency200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationDevicesUplinksLossAndLatency200ResponseInner is not found in the empty JSON string", GetOrganizationDevicesUplinksLossAndLatency200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationDevicesUplinksLossAndLatency200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationDevicesUplinksLossAndLatency200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      if (jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) {
        JsonArray jsonArraytimeSeries = jsonObj.getAsJsonArray("timeSeries");
        if (jsonArraytimeSeries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeSeries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeSeries` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeries").toString()));
          }

          // validate the optional field `timeSeries` (array)
          for (int i = 0; i < jsonArraytimeSeries.size(); i++) {
            GetOrganizationDevicesUplinksLossAndLatency200ResponseInnerTimeSeriesInner.validateJsonElement(jsonArraytimeSeries.get(i));
          };
        }
      }
      if ((jsonObj.get("uplink") != null && !jsonObj.get("uplink").isJsonNull()) && !jsonObj.get("uplink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uplink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uplink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationDevicesUplinksLossAndLatency200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationDevicesUplinksLossAndLatency200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationDevicesUplinksLossAndLatency200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetOrganizationDevicesUplinksLossAndLatency200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationDevicesUplinksLossAndLatency200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationDevicesUplinksLossAndLatency200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationDevicesUplinksLossAndLatency200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationDevicesUplinksLossAndLatency200ResponseInner
   */
  public static GetOrganizationDevicesUplinksLossAndLatency200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationDevicesUplinksLossAndLatency200ResponseInner.class);
  }

  /**
   * Convert an instance of GetOrganizationDevicesUplinksLossAndLatency200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

