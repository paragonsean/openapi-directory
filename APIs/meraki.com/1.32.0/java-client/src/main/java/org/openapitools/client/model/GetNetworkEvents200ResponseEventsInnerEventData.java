/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing more data related to the event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkEvents200ResponseEventsInnerEventData {
  public static final String SERIALIZED_NAME_AID = "aid";
  @SerializedName(SERIALIZED_NAME_AID)
  private String aid;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_CLIENT_MAC = "client_mac";
  @SerializedName(SERIALIZED_NAME_CLIENT_MAC)
  private String clientMac;

  public static final String SERIALIZED_NAME_RADIO = "radio";
  @SerializedName(SERIALIZED_NAME_RADIO)
  private String radio;

  public static final String SERIALIZED_NAME_RSSI = "rssi";
  @SerializedName(SERIALIZED_NAME_RSSI)
  private String rssi;

  public static final String SERIALIZED_NAME_VAP = "vap";
  @SerializedName(SERIALIZED_NAME_VAP)
  private String vap;

  public GetNetworkEvents200ResponseEventsInnerEventData() {
  }

  public GetNetworkEvents200ResponseEventsInnerEventData aid(String aid) {
    this.aid = aid;
    return this;
  }

  /**
   * The association ID of the client.
   * @return aid
   */
  @javax.annotation.Nullable
  public String getAid() {
    return aid;
  }

  public void setAid(String aid) {
    this.aid = aid;
  }


  public GetNetworkEvents200ResponseEventsInnerEventData channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The radio channel the client is connecting to.
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public GetNetworkEvents200ResponseEventsInnerEventData clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * The client&#39;s IP address
   * @return clientIp
   */
  @javax.annotation.Nullable
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }


  public GetNetworkEvents200ResponseEventsInnerEventData clientMac(String clientMac) {
    this.clientMac = clientMac;
    return this;
  }

  /**
   * The client&#39;s MAC address
   * @return clientMac
   */
  @javax.annotation.Nullable
  public String getClientMac() {
    return clientMac;
  }

  public void setClientMac(String clientMac) {
    this.clientMac = clientMac;
  }


  public GetNetworkEvents200ResponseEventsInnerEventData radio(String radio) {
    this.radio = radio;
    return this;
  }

  /**
   * The radio band number the client is trying to connect to.
   * @return radio
   */
  @javax.annotation.Nullable
  public String getRadio() {
    return radio;
  }

  public void setRadio(String radio) {
    this.radio = radio;
  }


  public GetNetworkEvents200ResponseEventsInnerEventData rssi(String rssi) {
    this.rssi = rssi;
    return this;
  }

  /**
   * The current received signal strength indication (RSSI) of the client connected to an AP.
   * @return rssi
   */
  @javax.annotation.Nullable
  public String getRssi() {
    return rssi;
  }

  public void setRssi(String rssi) {
    this.rssi = rssi;
  }


  public GetNetworkEvents200ResponseEventsInnerEventData vap(String vap) {
    this.vap = vap;
    return this;
  }

  /**
   * The virtual access point (VAP) number the client is connecting to.
   * @return vap
   */
  @javax.annotation.Nullable
  public String getVap() {
    return vap;
  }

  public void setVap(String vap) {
    this.vap = vap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkEvents200ResponseEventsInnerEventData getNetworkEvents200ResponseEventsInnerEventData = (GetNetworkEvents200ResponseEventsInnerEventData) o;
    return Objects.equals(this.aid, getNetworkEvents200ResponseEventsInnerEventData.aid) &&
        Objects.equals(this.channel, getNetworkEvents200ResponseEventsInnerEventData.channel) &&
        Objects.equals(this.clientIp, getNetworkEvents200ResponseEventsInnerEventData.clientIp) &&
        Objects.equals(this.clientMac, getNetworkEvents200ResponseEventsInnerEventData.clientMac) &&
        Objects.equals(this.radio, getNetworkEvents200ResponseEventsInnerEventData.radio) &&
        Objects.equals(this.rssi, getNetworkEvents200ResponseEventsInnerEventData.rssi) &&
        Objects.equals(this.vap, getNetworkEvents200ResponseEventsInnerEventData.vap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aid, channel, clientIp, clientMac, radio, rssi, vap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkEvents200ResponseEventsInnerEventData {\n");
    sb.append("    aid: ").append(toIndentedString(aid)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    clientMac: ").append(toIndentedString(clientMac)).append("\n");
    sb.append("    radio: ").append(toIndentedString(radio)).append("\n");
    sb.append("    rssi: ").append(toIndentedString(rssi)).append("\n");
    sb.append("    vap: ").append(toIndentedString(vap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aid");
    openapiFields.add("channel");
    openapiFields.add("client_ip");
    openapiFields.add("client_mac");
    openapiFields.add("radio");
    openapiFields.add("rssi");
    openapiFields.add("vap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkEvents200ResponseEventsInnerEventData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkEvents200ResponseEventsInnerEventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkEvents200ResponseEventsInnerEventData is not found in the empty JSON string", GetNetworkEvents200ResponseEventsInnerEventData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkEvents200ResponseEventsInnerEventData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkEvents200ResponseEventsInnerEventData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aid") != null && !jsonObj.get("aid").isJsonNull()) && !jsonObj.get("aid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aid").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      if ((jsonObj.get("client_mac") != null && !jsonObj.get("client_mac").isJsonNull()) && !jsonObj.get("client_mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_mac").toString()));
      }
      if ((jsonObj.get("radio") != null && !jsonObj.get("radio").isJsonNull()) && !jsonObj.get("radio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radio").toString()));
      }
      if ((jsonObj.get("rssi") != null && !jsonObj.get("rssi").isJsonNull()) && !jsonObj.get("rssi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rssi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rssi").toString()));
      }
      if ((jsonObj.get("vap") != null && !jsonObj.get("vap").isJsonNull()) && !jsonObj.get("vap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vap").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkEvents200ResponseEventsInnerEventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkEvents200ResponseEventsInnerEventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkEvents200ResponseEventsInnerEventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkEvents200ResponseEventsInnerEventData.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkEvents200ResponseEventsInnerEventData>() {
           @Override
           public void write(JsonWriter out, GetNetworkEvents200ResponseEventsInnerEventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkEvents200ResponseEventsInnerEventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkEvents200ResponseEventsInnerEventData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkEvents200ResponseEventsInnerEventData
   * @throws IOException if the JSON string is invalid with respect to GetNetworkEvents200ResponseEventsInnerEventData
   */
  public static GetNetworkEvents200ResponseEventsInnerEventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkEvents200ResponseEventsInnerEventData.class);
  }

  /**
   * Convert an instance of GetNetworkEvents200ResponseEventsInnerEventData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

