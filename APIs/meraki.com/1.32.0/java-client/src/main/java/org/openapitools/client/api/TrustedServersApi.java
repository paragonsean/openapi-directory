/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrustedServersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrustedServersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrustedServersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Call(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(Async)");
        }

        // verify the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' is set
        if (createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(Async)");
        }

        return createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Call(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);

    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @return GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> localVarResp = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3WithHttpInfo(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @return ApiResponse&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3WithHttpInfo(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Async(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Call(String networkId, String trustedServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "trustedServerId" + "}", localVarApiClient.escapeString(trustedServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(String networkId, String trustedServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(Async)");
        }

        // verify the required parameter 'trustedServerId' is set
        if (trustedServerId == null) {
            throw new ApiException("Missing the required parameter 'trustedServerId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(Async)");
        }

        return deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Call(networkId, trustedServerId, _callback);

    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(String networkId, String trustedServerId) throws ApiException {
        deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3WithHttpInfo(networkId, trustedServerId);
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3WithHttpInfo(String networkId, String trustedServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(networkId, trustedServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Async(String networkId, String trustedServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(networkId, trustedServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3Call(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3(Async)");
        }

        return getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3Call(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>> localVarResp = getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3WithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>> getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3Async(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Call(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "trustedServerId" + "}", localVarApiClient.escapeString(trustedServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(Async)");
        }

        // verify the required parameter 'trustedServerId' is set
        if (trustedServerId == null) {
            throw new ApiException("Missing the required parameter 'trustedServerId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(Async)");
        }

        return updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Call(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);

    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @return GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> localVarResp = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3WithHttpInfo(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3WithHttpInfo(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Async(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3ValidateBeforeCall(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
