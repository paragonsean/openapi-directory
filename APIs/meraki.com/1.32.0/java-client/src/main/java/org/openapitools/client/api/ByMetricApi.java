/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ByMetricApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ByMetricApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ByMetricApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNetworkSensorAlertsCurrentOverviewByMetric_4
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsCurrentOverviewByMetric_4Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/current/overview/byMetric"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsCurrentOverviewByMetric_4ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsCurrentOverviewByMetric_4(Async)");
        }

        return getNetworkSensorAlertsCurrentOverviewByMetric_4Call(networkId, _callback);

    }

    /**
     * Return an overview of currently alerting sensors by metric
     * Return an overview of currently alerting sensors by metric
     * @param networkId  (required)
     * @return GetNetworkSensorAlertsCurrentOverviewByMetric200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsCurrentOverviewByMetric200Response getNetworkSensorAlertsCurrentOverviewByMetric_4(String networkId) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> localVarResp = getNetworkSensorAlertsCurrentOverviewByMetric_4WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return an overview of currently alerting sensors by metric
     * Return an overview of currently alerting sensors by metric
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsCurrentOverviewByMetric200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> getNetworkSensorAlertsCurrentOverviewByMetric_4WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsCurrentOverviewByMetric_4ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsCurrentOverviewByMetric200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an overview of currently alerting sensors by metric (asynchronously)
     * Return an overview of currently alerting sensors by metric
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsCurrentOverviewByMetric_4Async(String networkId, final ApiCallback<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsCurrentOverviewByMetric_4ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsCurrentOverviewByMetric200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsOverviewByMetric_3
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsOverviewByMetric_3Call(String networkId, String t0, String t1, Float timespan, Integer interval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/overview/byMetric"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsOverviewByMetric_3ValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer interval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsOverviewByMetric_3(Async)");
        }

        return getNetworkSensorAlertsOverviewByMetric_3Call(networkId, t0, t1, timespan, interval, _callback);

    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * Return an overview of alert occurrences over a timespan, by metric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @return List&lt;GetNetworkSensorAlertsOverviewByMetric200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner> getNetworkSensorAlertsOverviewByMetric_3(String networkId, String t0, String t1, Float timespan, Integer interval) throws ApiException {
        ApiResponse<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>> localVarResp = getNetworkSensorAlertsOverviewByMetric_3WithHttpInfo(networkId, t0, t1, timespan, interval);
        return localVarResp.getData();
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * Return an overview of alert occurrences over a timespan, by metric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorAlertsOverviewByMetric200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>> getNetworkSensorAlertsOverviewByMetric_3WithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer interval) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsOverviewByMetric_3ValidateBeforeCall(networkId, t0, t1, timespan, interval, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric (asynchronously)
     * Return an overview of alert occurrences over a timespan, by metric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsOverviewByMetric_3Async(String networkId, String t0, String t1, Float timespan, Integer interval, final ApiCallback<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsOverviewByMetric_3ValidateBeforeCall(networkId, t0, t1, timespan, interval, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
