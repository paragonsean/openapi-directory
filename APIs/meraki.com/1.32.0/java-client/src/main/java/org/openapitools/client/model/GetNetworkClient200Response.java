/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkClient200ResponseClientVpnConnectionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkClient200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkClient200Response {
  public static final String SERIALIZED_NAME_CDP = "cdp";
  @SerializedName(SERIALIZED_NAME_CDP)
  private List<List<String>> cdp = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_VPN_CONNECTIONS = "clientVpnConnections";
  @SerializedName(SERIALIZED_NAME_CLIENT_VPN_CONNECTIONS)
  private List<GetNetworkClient200ResponseClientVpnConnectionsInner> clientVpnConnections = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "firstSeen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private Integer firstSeen;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IP6 = "ip6";
  @SerializedName(SERIALIZED_NAME_IP6)
  private String ip6;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Integer lastSeen;

  public static final String SERIALIZED_NAME_LLDP = "lldp";
  @SerializedName(SERIALIZED_NAME_LLDP)
  private List<List<String>> lldp = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_RECENT_DEVICE_MAC = "recentDeviceMac";
  @SerializedName(SERIALIZED_NAME_RECENT_DEVICE_MAC)
  private String recentDeviceMac;

  public static final String SERIALIZED_NAME_SM_INSTALLED = "smInstalled";
  @SerializedName(SERIALIZED_NAME_SM_INSTALLED)
  private Boolean smInstalled;

  public static final String SERIALIZED_NAME_SSID = "ssid";
  @SerializedName(SERIALIZED_NAME_SSID)
  private String ssid;

  /**
   * The connection status of the client
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OFFLINE("Offline"),
    
    ONLINE("Online");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SWITCHPORT = "switchport";
  @SerializedName(SERIALIZED_NAME_SWITCHPORT)
  private String switchport;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private String vlan;

  public static final String SERIALIZED_NAME_WIRELESS_CAPABILITIES = "wirelessCapabilities";
  @SerializedName(SERIALIZED_NAME_WIRELESS_CAPABILITIES)
  private String wirelessCapabilities;

  public GetNetworkClient200Response() {
  }

  public GetNetworkClient200Response cdp(List<List<String>> cdp) {
    this.cdp = cdp;
    return this;
  }

  public GetNetworkClient200Response addCdpItem(List<String> cdpItem) {
    if (this.cdp == null) {
      this.cdp = new ArrayList<>();
    }
    this.cdp.add(cdpItem);
    return this;
  }

  /**
   * The Cisco discover protocol settings for the client
   * @return cdp
   */
  @javax.annotation.Nullable
  public List<List<String>> getCdp() {
    return cdp;
  }

  public void setCdp(List<List<String>> cdp) {
    this.cdp = cdp;
  }


  public GetNetworkClient200Response clientVpnConnections(List<GetNetworkClient200ResponseClientVpnConnectionsInner> clientVpnConnections) {
    this.clientVpnConnections = clientVpnConnections;
    return this;
  }

  public GetNetworkClient200Response addClientVpnConnectionsItem(GetNetworkClient200ResponseClientVpnConnectionsInner clientVpnConnectionsItem) {
    if (this.clientVpnConnections == null) {
      this.clientVpnConnections = new ArrayList<>();
    }
    this.clientVpnConnections.add(clientVpnConnectionsItem);
    return this;
  }

  /**
   * VPN connections associated with the client
   * @return clientVpnConnections
   */
  @javax.annotation.Nullable
  public List<GetNetworkClient200ResponseClientVpnConnectionsInner> getClientVpnConnections() {
    return clientVpnConnections;
  }

  public void setClientVpnConnections(List<GetNetworkClient200ResponseClientVpnConnectionsInner> clientVpnConnections) {
    this.clientVpnConnections = clientVpnConnections;
  }


  public GetNetworkClient200Response description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Short description of the client
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetNetworkClient200Response firstSeen(Integer firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

  /**
   * Timestamp client was first seen in the network
   * @return firstSeen
   */
  @javax.annotation.Nullable
  public Integer getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(Integer firstSeen) {
    this.firstSeen = firstSeen;
  }


  public GetNetworkClient200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the client
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetworkClient200Response ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address of the client
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public GetNetworkClient200Response ip6(String ip6) {
    this.ip6 = ip6;
    return this;
  }

  /**
   * The IPv6 address of the client
   * @return ip6
   */
  @javax.annotation.Nullable
  public String getIp6() {
    return ip6;
  }

  public void setIp6(String ip6) {
    this.ip6 = ip6;
  }


  public GetNetworkClient200Response lastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * Timestamp client was last seen in the network
   * @return lastSeen
   */
  @javax.annotation.Nullable
  public Integer getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
  }


  public GetNetworkClient200Response lldp(List<List<String>> lldp) {
    this.lldp = lldp;
    return this;
  }

  public GetNetworkClient200Response addLldpItem(List<String> lldpItem) {
    if (this.lldp == null) {
      this.lldp = new ArrayList<>();
    }
    this.lldp.add(lldpItem);
    return this;
  }

  /**
   * The link layer discover protocol settings for the client
   * @return lldp
   */
  @javax.annotation.Nullable
  public List<List<String>> getLldp() {
    return lldp;
  }

  public void setLldp(List<List<String>> lldp) {
    this.lldp = lldp;
  }


  public GetNetworkClient200Response mac(String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * The MAC address of the client
   * @return mac
   */
  @javax.annotation.Nullable
  public String getMac() {
    return mac;
  }

  public void setMac(String mac) {
    this.mac = mac;
  }


  public GetNetworkClient200Response manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Manufacturer of the client
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public GetNetworkClient200Response os(String os) {
    this.os = os;
    return this;
  }

  /**
   * The operating system of the client
   * @return os
   */
  @javax.annotation.Nullable
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public GetNetworkClient200Response recentDeviceMac(String recentDeviceMac) {
    this.recentDeviceMac = recentDeviceMac;
    return this;
  }

  /**
   * The MAC address of the node that the device was last connected to
   * @return recentDeviceMac
   */
  @javax.annotation.Nullable
  public String getRecentDeviceMac() {
    return recentDeviceMac;
  }

  public void setRecentDeviceMac(String recentDeviceMac) {
    this.recentDeviceMac = recentDeviceMac;
  }


  public GetNetworkClient200Response smInstalled(Boolean smInstalled) {
    this.smInstalled = smInstalled;
    return this;
  }

  /**
   * Status of SM for the client
   * @return smInstalled
   */
  @javax.annotation.Nullable
  public Boolean getSmInstalled() {
    return smInstalled;
  }

  public void setSmInstalled(Boolean smInstalled) {
    this.smInstalled = smInstalled;
  }


  public GetNetworkClient200Response ssid(String ssid) {
    this.ssid = ssid;
    return this;
  }

  /**
   * The name of the SSID that the client is connected to
   * @return ssid
   */
  @javax.annotation.Nullable
  public String getSsid() {
    return ssid;
  }

  public void setSsid(String ssid) {
    this.ssid = ssid;
  }


  public GetNetworkClient200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The connection status of the client
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetNetworkClient200Response switchport(String switchport) {
    this.switchport = switchport;
    return this;
  }

  /**
   * The switch port that the client is connected to
   * @return switchport
   */
  @javax.annotation.Nullable
  public String getSwitchport() {
    return switchport;
  }

  public void setSwitchport(String switchport) {
    this.switchport = switchport;
  }


  public GetNetworkClient200Response user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The username of the user of the client
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public GetNetworkClient200Response vlan(String vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * The name of the VLAN that the client is connected to
   * @return vlan
   */
  @javax.annotation.Nullable
  public String getVlan() {
    return vlan;
  }

  public void setVlan(String vlan) {
    this.vlan = vlan;
  }


  public GetNetworkClient200Response wirelessCapabilities(String wirelessCapabilities) {
    this.wirelessCapabilities = wirelessCapabilities;
    return this;
  }

  /**
   * Wireless capabilities of the client
   * @return wirelessCapabilities
   */
  @javax.annotation.Nullable
  public String getWirelessCapabilities() {
    return wirelessCapabilities;
  }

  public void setWirelessCapabilities(String wirelessCapabilities) {
    this.wirelessCapabilities = wirelessCapabilities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkClient200Response getNetworkClient200Response = (GetNetworkClient200Response) o;
    return Objects.equals(this.cdp, getNetworkClient200Response.cdp) &&
        Objects.equals(this.clientVpnConnections, getNetworkClient200Response.clientVpnConnections) &&
        Objects.equals(this.description, getNetworkClient200Response.description) &&
        Objects.equals(this.firstSeen, getNetworkClient200Response.firstSeen) &&
        Objects.equals(this.id, getNetworkClient200Response.id) &&
        Objects.equals(this.ip, getNetworkClient200Response.ip) &&
        Objects.equals(this.ip6, getNetworkClient200Response.ip6) &&
        Objects.equals(this.lastSeen, getNetworkClient200Response.lastSeen) &&
        Objects.equals(this.lldp, getNetworkClient200Response.lldp) &&
        Objects.equals(this.mac, getNetworkClient200Response.mac) &&
        Objects.equals(this.manufacturer, getNetworkClient200Response.manufacturer) &&
        Objects.equals(this.os, getNetworkClient200Response.os) &&
        Objects.equals(this.recentDeviceMac, getNetworkClient200Response.recentDeviceMac) &&
        Objects.equals(this.smInstalled, getNetworkClient200Response.smInstalled) &&
        Objects.equals(this.ssid, getNetworkClient200Response.ssid) &&
        Objects.equals(this.status, getNetworkClient200Response.status) &&
        Objects.equals(this.switchport, getNetworkClient200Response.switchport) &&
        Objects.equals(this.user, getNetworkClient200Response.user) &&
        Objects.equals(this.vlan, getNetworkClient200Response.vlan) &&
        Objects.equals(this.wirelessCapabilities, getNetworkClient200Response.wirelessCapabilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdp, clientVpnConnections, description, firstSeen, id, ip, ip6, lastSeen, lldp, mac, manufacturer, os, recentDeviceMac, smInstalled, ssid, status, switchport, user, vlan, wirelessCapabilities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkClient200Response {\n");
    sb.append("    cdp: ").append(toIndentedString(cdp)).append("\n");
    sb.append("    clientVpnConnections: ").append(toIndentedString(clientVpnConnections)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ip6: ").append(toIndentedString(ip6)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    lldp: ").append(toIndentedString(lldp)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    recentDeviceMac: ").append(toIndentedString(recentDeviceMac)).append("\n");
    sb.append("    smInstalled: ").append(toIndentedString(smInstalled)).append("\n");
    sb.append("    ssid: ").append(toIndentedString(ssid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    switchport: ").append(toIndentedString(switchport)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("    wirelessCapabilities: ").append(toIndentedString(wirelessCapabilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdp");
    openapiFields.add("clientVpnConnections");
    openapiFields.add("description");
    openapiFields.add("firstSeen");
    openapiFields.add("id");
    openapiFields.add("ip");
    openapiFields.add("ip6");
    openapiFields.add("lastSeen");
    openapiFields.add("lldp");
    openapiFields.add("mac");
    openapiFields.add("manufacturer");
    openapiFields.add("os");
    openapiFields.add("recentDeviceMac");
    openapiFields.add("smInstalled");
    openapiFields.add("ssid");
    openapiFields.add("status");
    openapiFields.add("switchport");
    openapiFields.add("user");
    openapiFields.add("vlan");
    openapiFields.add("wirelessCapabilities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkClient200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkClient200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkClient200Response is not found in the empty JSON string", GetNetworkClient200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkClient200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkClient200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cdp") != null && !jsonObj.get("cdp").isJsonNull() && !jsonObj.get("cdp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdp` to be an array in the JSON string but got `%s`", jsonObj.get("cdp").toString()));
      }
      if (jsonObj.get("clientVpnConnections") != null && !jsonObj.get("clientVpnConnections").isJsonNull()) {
        JsonArray jsonArrayclientVpnConnections = jsonObj.getAsJsonArray("clientVpnConnections");
        if (jsonArrayclientVpnConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientVpnConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientVpnConnections` to be an array in the JSON string but got `%s`", jsonObj.get("clientVpnConnections").toString()));
          }

          // validate the optional field `clientVpnConnections` (array)
          for (int i = 0; i < jsonArrayclientVpnConnections.size(); i++) {
            GetNetworkClient200ResponseClientVpnConnectionsInner.validateJsonElement(jsonArrayclientVpnConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("ip6") != null && !jsonObj.get("ip6").isJsonNull()) && !jsonObj.get("ip6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip6").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lldp") != null && !jsonObj.get("lldp").isJsonNull() && !jsonObj.get("lldp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lldp` to be an array in the JSON string but got `%s`", jsonObj.get("lldp").toString()));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull()) && !jsonObj.get("os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      if ((jsonObj.get("recentDeviceMac") != null && !jsonObj.get("recentDeviceMac").isJsonNull()) && !jsonObj.get("recentDeviceMac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recentDeviceMac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recentDeviceMac").toString()));
      }
      if ((jsonObj.get("ssid") != null && !jsonObj.get("ssid").isJsonNull()) && !jsonObj.get("ssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("switchport") != null && !jsonObj.get("switchport").isJsonNull()) && !jsonObj.get("switchport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchport").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("vlan") != null && !jsonObj.get("vlan").isJsonNull()) && !jsonObj.get("vlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vlan").toString()));
      }
      if ((jsonObj.get("wirelessCapabilities") != null && !jsonObj.get("wirelessCapabilities").isJsonNull()) && !jsonObj.get("wirelessCapabilities").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wirelessCapabilities` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wirelessCapabilities").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkClient200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkClient200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkClient200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkClient200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkClient200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkClient200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkClient200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkClient200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkClient200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkClient200Response
   */
  public static GetNetworkClient200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkClient200Response.class);
  }

  /**
   * Convert an instance of GetNetworkClient200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

