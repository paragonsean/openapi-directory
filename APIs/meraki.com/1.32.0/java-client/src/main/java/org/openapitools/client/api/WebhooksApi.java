/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.CreateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTest201Response;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTestRequest;
import org.openapitools.client.model.GetNetworkWebhooksHttpServers200ResponseInner;
import org.openapitools.client.model.GetNetworkWebhooksPayloadTemplates200ResponseInner;
import org.openapitools.client.model.GetOrganizationWebhooksLogs200ResponseInner;
import org.openapitools.client.model.UpdateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksPayloadTemplateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkWebhooksHttpServer_1
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksHttpServer_1Call(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksHttpServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksHttpServer_1ValidateBeforeCall(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksHttpServer_1(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksHttpServerRequest' is set
        if (createNetworkWebhooksHttpServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksHttpServerRequest' when calling createNetworkWebhooksHttpServer_1(Async)");
        }

        return createNetworkWebhooksHttpServer_1Call(networkId, createNetworkWebhooksHttpServerRequest, _callback);

    }

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner createNetworkWebhooksHttpServer_1(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = createNetworkWebhooksHttpServer_1WithHttpInfo(networkId, createNetworkWebhooksHttpServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> createNetworkWebhooksHttpServer_1WithHttpInfo(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, createNetworkWebhooksHttpServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an HTTP server to a network (asynchronously)
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksHttpServer_1Async(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, createNetworkWebhooksHttpServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksPayloadTemplate_1
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksPayloadTemplate_1Call(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksPayloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksPayloadTemplate_1(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksPayloadTemplateRequest' is set
        if (createNetworkWebhooksPayloadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksPayloadTemplateRequest' when calling createNetworkWebhooksPayloadTemplate_1(Async)");
        }

        return createNetworkWebhooksPayloadTemplate_1Call(networkId, createNetworkWebhooksPayloadTemplateRequest, _callback);

    }

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner createNetworkWebhooksPayloadTemplate_1(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = createNetworkWebhooksPayloadTemplate_1WithHttpInfo(networkId, createNetworkWebhooksPayloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> createNetworkWebhooksPayloadTemplate_1WithHttpInfo(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, createNetworkWebhooksPayloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a webhook payload template for a network (asynchronously)
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksPayloadTemplate_1Async(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, createNetworkWebhooksPayloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksWebhookTest_1
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksWebhookTest_1Call(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksWebhookTestRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/webhookTests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksWebhookTest_1ValidateBeforeCall(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksWebhookTest_1(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksWebhookTestRequest' is set
        if (createNetworkWebhooksWebhookTestRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksWebhookTestRequest' when calling createNetworkWebhooksWebhookTest_1(Async)");
        }

        return createNetworkWebhooksWebhookTest_1Call(networkId, createNetworkWebhooksWebhookTestRequest, _callback);

    }

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @return CreateNetworkWebhooksWebhookTest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWebhooksWebhookTest201Response createNetworkWebhooksWebhookTest_1(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest) throws ApiException {
        ApiResponse<CreateNetworkWebhooksWebhookTest201Response> localVarResp = createNetworkWebhooksWebhookTest_1WithHttpInfo(networkId, createNetworkWebhooksWebhookTestRequest);
        return localVarResp.getData();
    }

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @return ApiResponse&lt;CreateNetworkWebhooksWebhookTest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWebhooksWebhookTest201Response> createNetworkWebhooksWebhookTest_1WithHttpInfo(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksWebhookTest_1ValidateBeforeCall(networkId, createNetworkWebhooksWebhookTestRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a test webhook for a network (asynchronously)
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksWebhookTest_1Async(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback<CreateNetworkWebhooksWebhookTest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksWebhookTest_1ValidateBeforeCall(networkId, createNetworkWebhooksWebhookTestRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWebhooksHttpServer_1
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksHttpServer_1Call(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWebhooksHttpServer_1ValidateBeforeCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksHttpServer_1(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling deleteNetworkWebhooksHttpServer_1(Async)");
        }

        return deleteNetworkWebhooksHttpServer_1Call(networkId, httpServerId, _callback);

    }

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWebhooksHttpServer_1(String networkId, String httpServerId) throws ApiException {
        deleteNetworkWebhooksHttpServer_1WithHttpInfo(networkId, httpServerId);
    }

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWebhooksHttpServer_1WithHttpInfo(String networkId, String httpServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, httpServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an HTTP server from a network (asynchronously)
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksHttpServer_1Async(String networkId, String httpServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, httpServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWebhooksPayloadTemplate_1
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksPayloadTemplate_1Call(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksPayloadTemplate_1(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling deleteNetworkWebhooksPayloadTemplate_1(Async)");
        }

        return deleteNetworkWebhooksPayloadTemplate_1Call(networkId, payloadTemplateId, _callback);

    }

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWebhooksPayloadTemplate_1(String networkId, String payloadTemplateId) throws ApiException {
        deleteNetworkWebhooksPayloadTemplate_1WithHttpInfo(networkId, payloadTemplateId);
    }

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWebhooksPayloadTemplate_1WithHttpInfo(String networkId, String payloadTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, payloadTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroy a webhook payload template for a network (asynchronously)
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksPayloadTemplate_1Async(String networkId, String payloadTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, payloadTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksHttpServer_1
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServer_1Call(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksHttpServer_1ValidateBeforeCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServer_1(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling getNetworkWebhooksHttpServer_1(Async)");
        }

        return getNetworkWebhooksHttpServer_1Call(networkId, httpServerId, _callback);

    }

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner getNetworkWebhooksHttpServer_1(String networkId, String httpServerId) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = getNetworkWebhooksHttpServer_1WithHttpInfo(networkId, httpServerId);
        return localVarResp.getData();
    }

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> getNetworkWebhooksHttpServer_1WithHttpInfo(String networkId, String httpServerId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, httpServerId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an HTTP server for a network (asynchronously)
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServer_1Async(String networkId, String httpServerId, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, httpServerId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksHttpServers_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServers_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksHttpServers_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServers_1(Async)");
        }

        return getNetworkWebhooksHttpServers_1Call(networkId, _callback);

    }

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWebhooksHttpServers200ResponseInner> getNetworkWebhooksHttpServers_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkWebhooksHttpServers200ResponseInner>> localVarResp = getNetworkWebhooksHttpServers_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWebhooksHttpServers200ResponseInner>> getNetworkWebhooksHttpServers_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksHttpServers_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksHttpServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the HTTP servers for a network (asynchronously)
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServers_1Async(String networkId, final ApiCallback<List<GetNetworkWebhooksHttpServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksHttpServers_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksHttpServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksPayloadTemplate_1
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplate_1Call(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplate_1(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling getNetworkWebhooksPayloadTemplate_1(Async)");
        }

        return getNetworkWebhooksPayloadTemplate_1Call(networkId, payloadTemplateId, _callback);

    }

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner getNetworkWebhooksPayloadTemplate_1(String networkId, String payloadTemplateId) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = getNetworkWebhooksPayloadTemplate_1WithHttpInfo(networkId, payloadTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> getNetworkWebhooksPayloadTemplate_1WithHttpInfo(String networkId, String payloadTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, payloadTemplateId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the webhook payload template for a network (asynchronously)
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplate_1Async(String networkId, String payloadTemplateId, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, payloadTemplateId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksPayloadTemplates_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplates_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksPayloadTemplates_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplates_1(Async)");
        }

        return getNetworkWebhooksPayloadTemplates_1Call(networkId, _callback);

    }

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWebhooksPayloadTemplates200ResponseInner> getNetworkWebhooksPayloadTemplates_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> localVarResp = getNetworkWebhooksPayloadTemplates_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> getNetworkWebhooksPayloadTemplates_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplates_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the webhook payload templates for a network (asynchronously)
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplates_1Async(String networkId, final ApiCallback<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplates_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksWebhookTest_1
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksWebhookTest_1Call(String networkId, String webhookTestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/webhookTests/{webhookTestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "webhookTestId" + "}", localVarApiClient.escapeString(webhookTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksWebhookTest_1ValidateBeforeCall(String networkId, String webhookTestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksWebhookTest_1(Async)");
        }

        // verify the required parameter 'webhookTestId' is set
        if (webhookTestId == null) {
            throw new ApiException("Missing the required parameter 'webhookTestId' when calling getNetworkWebhooksWebhookTest_1(Async)");
        }

        return getNetworkWebhooksWebhookTest_1Call(networkId, webhookTestId, _callback);

    }

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @return CreateNetworkWebhooksWebhookTest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWebhooksWebhookTest201Response getNetworkWebhooksWebhookTest_1(String networkId, String webhookTestId) throws ApiException {
        ApiResponse<CreateNetworkWebhooksWebhookTest201Response> localVarResp = getNetworkWebhooksWebhookTest_1WithHttpInfo(networkId, webhookTestId);
        return localVarResp.getData();
    }

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @return ApiResponse&lt;CreateNetworkWebhooksWebhookTest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWebhooksWebhookTest201Response> getNetworkWebhooksWebhookTest_1WithHttpInfo(String networkId, String webhookTestId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksWebhookTest_1ValidateBeforeCall(networkId, webhookTestId, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the status of a webhook test for a network (asynchronously)
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksWebhookTest_1Async(String networkId, String webhookTestId, final ApiCallback<CreateNetworkWebhooksWebhookTest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksWebhookTest_1ValidateBeforeCall(networkId, webhookTestId, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationWebhooksAlertTypes_1
     * @param organizationId  (required)
     * @param productType Filter sample alerts to a specific product type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationWebhooksAlertTypes_1Call(String organizationId, String productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/webhooks/alertTypes"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationWebhooksAlertTypes_1ValidateBeforeCall(String organizationId, String productType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationWebhooksAlertTypes_1(Async)");
        }

        return getOrganizationWebhooksAlertTypes_1Call(organizationId, productType, _callback);

    }

    /**
     * Return a list of alert types to be used with managing webhook alerts
     * Return a list of alert types to be used with managing webhook alerts
     * @param organizationId  (required)
     * @param productType Filter sample alerts to a specific product type (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationWebhooksAlertTypes_1(String organizationId, String productType) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationWebhooksAlertTypes_1WithHttpInfo(organizationId, productType);
        return localVarResp.getData();
    }

    /**
     * Return a list of alert types to be used with managing webhook alerts
     * Return a list of alert types to be used with managing webhook alerts
     * @param organizationId  (required)
     * @param productType Filter sample alerts to a specific product type (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationWebhooksAlertTypes_1WithHttpInfo(String organizationId, String productType) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationWebhooksAlertTypes_1ValidateBeforeCall(organizationId, productType, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of alert types to be used with managing webhook alerts (asynchronously)
     * Return a list of alert types to be used with managing webhook alerts
     * @param organizationId  (required)
     * @param productType Filter sample alerts to a specific product type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationWebhooksAlertTypes_1Async(String organizationId, String productType, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationWebhooksAlertTypes_1ValidateBeforeCall(organizationId, productType, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationWebhooksLogs_1
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 90 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param url The URL the webhook was sent to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationWebhooksLogs_1Call(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/webhooks/logs"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationWebhooksLogs_1ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationWebhooksLogs_1(Async)");
        }

        return getOrganizationWebhooksLogs_1Call(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url, _callback);

    }

    /**
     * Return the log of webhook POSTs sent
     * Return the log of webhook POSTs sent
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 90 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param url The URL the webhook was sent to (optional)
     * @return List&lt;GetOrganizationWebhooksLogs200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationWebhooksLogs200ResponseInner> getOrganizationWebhooksLogs_1(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String url) throws ApiException {
        ApiResponse<List<GetOrganizationWebhooksLogs200ResponseInner>> localVarResp = getOrganizationWebhooksLogs_1WithHttpInfo(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url);
        return localVarResp.getData();
    }

    /**
     * Return the log of webhook POSTs sent
     * Return the log of webhook POSTs sent
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 90 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param url The URL the webhook was sent to (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationWebhooksLogs200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationWebhooksLogs200ResponseInner>> getOrganizationWebhooksLogs_1WithHttpInfo(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String url) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationWebhooksLogs_1ValidateBeforeCall(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationWebhooksLogs200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the log of webhook POSTs sent (asynchronously)
     * Return the log of webhook POSTs sent
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 90 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param url The URL the webhook was sent to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationWebhooksLogs_1Async(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String url, final ApiCallback<List<GetOrganizationWebhooksLogs200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationWebhooksLogs_1ValidateBeforeCall(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationWebhooksLogs200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWebhooksHttpServer_1
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksHttpServer_1Call(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWebhooksHttpServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWebhooksHttpServer_1ValidateBeforeCall(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWebhooksHttpServer_1(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling updateNetworkWebhooksHttpServer_1(Async)");
        }

        return updateNetworkWebhooksHttpServer_1Call(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, _callback);

    }

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner updateNetworkWebhooksHttpServer_1(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = updateNetworkWebhooksHttpServer_1WithHttpInfo(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> updateNetworkWebhooksHttpServer_1WithHttpInfo(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an HTTP server (asynchronously)
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksHttpServer_1Async(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWebhooksHttpServer_1ValidateBeforeCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWebhooksPayloadTemplate_1
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksPayloadTemplate_1Call(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWebhooksPayloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWebhooksPayloadTemplate_1(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling updateNetworkWebhooksPayloadTemplate_1(Async)");
        }

        return updateNetworkWebhooksPayloadTemplate_1Call(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, _callback);

    }

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner updateNetworkWebhooksPayloadTemplate_1(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = updateNetworkWebhooksPayloadTemplate_1WithHttpInfo(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> updateNetworkWebhooksPayloadTemplate_1WithHttpInfo(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a webhook payload template for a network (asynchronously)
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksPayloadTemplate_1Async(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWebhooksPayloadTemplate_1ValidateBeforeCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
