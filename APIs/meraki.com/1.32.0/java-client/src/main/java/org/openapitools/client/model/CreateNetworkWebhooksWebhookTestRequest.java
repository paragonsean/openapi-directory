/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkWebhooksWebhookTestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkWebhooksWebhookTestRequest {
  public static final String SERIALIZED_NAME_ALERT_TYPE_ID = "alertTypeId";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE_ID)
  private String alertTypeId = "power_supply_down";

  public static final String SERIALIZED_NAME_PAYLOAD_TEMPLATE_ID = "payloadTemplateId";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_TEMPLATE_ID)
  private String payloadTemplateId;

  public static final String SERIALIZED_NAME_PAYLOAD_TEMPLATE_NAME = "payloadTemplateName";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_TEMPLATE_NAME)
  private String payloadTemplateName;

  public static final String SERIALIZED_NAME_SHARED_SECRET = "sharedSecret";
  @SerializedName(SERIALIZED_NAME_SHARED_SECRET)
  private String sharedSecret = "";

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CreateNetworkWebhooksWebhookTestRequest() {
  }

  public CreateNetworkWebhooksWebhookTestRequest alertTypeId(String alertTypeId) {
    this.alertTypeId = alertTypeId;
    return this;
  }

  /**
   * The type of alert which the test webhook will send. Optional. Defaults to power_supply_down.
   * @return alertTypeId
   */
  @javax.annotation.Nullable
  public String getAlertTypeId() {
    return alertTypeId;
  }

  public void setAlertTypeId(String alertTypeId) {
    this.alertTypeId = alertTypeId;
  }


  public CreateNetworkWebhooksWebhookTestRequest payloadTemplateId(String payloadTemplateId) {
    this.payloadTemplateId = payloadTemplateId;
    return this;
  }

  /**
   * The ID of the payload template of the test webhook. Defaults to the HTTP server&#39;s template ID if one exists for the given URL, or Generic template ID otherwise
   * @return payloadTemplateId
   */
  @javax.annotation.Nullable
  public String getPayloadTemplateId() {
    return payloadTemplateId;
  }

  public void setPayloadTemplateId(String payloadTemplateId) {
    this.payloadTemplateId = payloadTemplateId;
  }


  public CreateNetworkWebhooksWebhookTestRequest payloadTemplateName(String payloadTemplateName) {
    this.payloadTemplateName = payloadTemplateName;
    return this;
  }

  /**
   * The name of the payload template.
   * @return payloadTemplateName
   */
  @javax.annotation.Nullable
  public String getPayloadTemplateName() {
    return payloadTemplateName;
  }

  public void setPayloadTemplateName(String payloadTemplateName) {
    this.payloadTemplateName = payloadTemplateName;
  }


  public CreateNetworkWebhooksWebhookTestRequest sharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
    return this;
  }

  /**
   * The shared secret the test webhook will send. Optional. Defaults to an empty string.
   * @return sharedSecret
   */
  @javax.annotation.Nullable
  public String getSharedSecret() {
    return sharedSecret;
  }

  public void setSharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
  }


  public CreateNetworkWebhooksWebhookTestRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL where the test webhook will be sent
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest = (CreateNetworkWebhooksWebhookTestRequest) o;
    return Objects.equals(this.alertTypeId, createNetworkWebhooksWebhookTestRequest.alertTypeId) &&
        Objects.equals(this.payloadTemplateId, createNetworkWebhooksWebhookTestRequest.payloadTemplateId) &&
        Objects.equals(this.payloadTemplateName, createNetworkWebhooksWebhookTestRequest.payloadTemplateName) &&
        Objects.equals(this.sharedSecret, createNetworkWebhooksWebhookTestRequest.sharedSecret) &&
        Objects.equals(this.url, createNetworkWebhooksWebhookTestRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertTypeId, payloadTemplateId, payloadTemplateName, sharedSecret, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkWebhooksWebhookTestRequest {\n");
    sb.append("    alertTypeId: ").append(toIndentedString(alertTypeId)).append("\n");
    sb.append("    payloadTemplateId: ").append(toIndentedString(payloadTemplateId)).append("\n");
    sb.append("    payloadTemplateName: ").append(toIndentedString(payloadTemplateName)).append("\n");
    sb.append("    sharedSecret: ").append(toIndentedString(sharedSecret)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertTypeId");
    openapiFields.add("payloadTemplateId");
    openapiFields.add("payloadTemplateName");
    openapiFields.add("sharedSecret");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkWebhooksWebhookTestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkWebhooksWebhookTestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkWebhooksWebhookTestRequest is not found in the empty JSON string", CreateNetworkWebhooksWebhookTestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkWebhooksWebhookTestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkWebhooksWebhookTestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNetworkWebhooksWebhookTestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alertTypeId") != null && !jsonObj.get("alertTypeId").isJsonNull()) && !jsonObj.get("alertTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertTypeId").toString()));
      }
      if ((jsonObj.get("payloadTemplateId") != null && !jsonObj.get("payloadTemplateId").isJsonNull()) && !jsonObj.get("payloadTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payloadTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payloadTemplateId").toString()));
      }
      if ((jsonObj.get("payloadTemplateName") != null && !jsonObj.get("payloadTemplateName").isJsonNull()) && !jsonObj.get("payloadTemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payloadTemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payloadTemplateName").toString()));
      }
      if ((jsonObj.get("sharedSecret") != null && !jsonObj.get("sharedSecret").isJsonNull()) && !jsonObj.get("sharedSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedSecret").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkWebhooksWebhookTestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkWebhooksWebhookTestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkWebhooksWebhookTestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkWebhooksWebhookTestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkWebhooksWebhookTestRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkWebhooksWebhookTestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkWebhooksWebhookTestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkWebhooksWebhookTestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkWebhooksWebhookTestRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkWebhooksWebhookTestRequest
   */
  public static CreateNetworkWebhooksWebhookTestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkWebhooksWebhookTestRequest.class);
  }

  /**
   * Convert an instance of CreateNetworkWebhooksWebhookTestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

