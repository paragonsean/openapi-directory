/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200Response;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollbackRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedEventRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedGroupRequest;
import org.openapitools.client.model.GetNetworkFirmwareUpgrades200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedEvents200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedStages200ResponseInner;
import org.openapitools.client.model.RollbacksNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedStagesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirmwareUpgradesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirmwareUpgradesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirmwareUpgradesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkFirmwareUpgradesRollback_1
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesRollback_1Call(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesRollbackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesRollback_1ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesRollback_1(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' is set
        if (createNetworkFirmwareUpgradesRollbackRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' when calling createNetworkFirmwareUpgradesRollback_1(Async)");
        }

        return createNetworkFirmwareUpgradesRollback_1Call(networkId, createNetworkFirmwareUpgradesRollbackRequest, _callback);

    }

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @return CreateNetworkFirmwareUpgradesRollback200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkFirmwareUpgradesRollback200Response createNetworkFirmwareUpgradesRollback_1(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest) throws ApiException {
        ApiResponse<CreateNetworkFirmwareUpgradesRollback200Response> localVarResp = createNetworkFirmwareUpgradesRollback_1WithHttpInfo(networkId, createNetworkFirmwareUpgradesRollbackRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @return ApiResponse&lt;CreateNetworkFirmwareUpgradesRollback200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkFirmwareUpgradesRollback200Response> createNetworkFirmwareUpgradesRollback_1WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesRollback_1ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkFirmwareUpgradesRollback200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Firmware Upgrade For A Network (asynchronously)
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesRollback_1Async(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback<CreateNetworkFirmwareUpgradesRollback200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesRollback_1ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkFirmwareUpgradesRollback200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesStagedEvent_1
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_1Call(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedEventRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_1ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent_1(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
        if (createNetworkFirmwareUpgradesStagedEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent_1(Async)");
        }

        return createNetworkFirmwareUpgradesStagedEvent_1Call(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response createNetworkFirmwareUpgradesStagedEvent_1(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = createNetworkFirmwareUpgradesStagedEvent_1WithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedEventRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> createNetworkFirmwareUpgradesStagedEvent_1WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEvent_1ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Event for a network (asynchronously)
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_1Async(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEvent_1ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesStagedGroup_1
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedGroup_1Call(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
        if (createNetworkFirmwareUpgradesStagedGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling createNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        return createNetworkFirmwareUpgradesStagedGroup_1Call(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkFirmwareUpgradesStagedGroup_1(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Group for a network (asynchronously)
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedGroup_1Async(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deferNetworkFirmwareUpgradesStagedEvents_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/defer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents_1(Async)");
        }

        return deferNetworkFirmwareUpgradesStagedEvents_1Call(networkId, _callback);

    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response deferNetworkFirmwareUpgradesStagedEvents_1(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = deferNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> deferNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network (asynchronously)
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_1Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkFirmwareUpgradesStagedGroup_1
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroup_1Call(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        return deleteNetworkFirmwareUpgradesStagedGroup_1Call(networkId, groupId, _callback);

    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkFirmwareUpgradesStagedGroup_1(String networkId, String groupId) throws ApiException {
        deleteNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(networkId, groupId);
    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(String networkId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Staged Upgrade Group (asynchronously)
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroup_1Async(String networkId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedEvents_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents_1(Async)");
        }

        return getNetworkFirmwareUpgradesStagedEvents_1Call(networkId, _callback);

    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response getNetworkFirmwareUpgradesStagedEvents_1(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = getNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> getNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Staged Upgrade Event from a network (asynchronously)
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_1Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedGroup_1
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroup_1Call(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        return getNetworkFirmwareUpgradesStagedGroup_1Call(networkId, groupId, _callback);

    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @return GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedGroups200ResponseInner getNetworkFirmwareUpgradesStagedGroup_1(String networkId, String groupId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> localVarResp = getNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(networkId, groupId);
        return localVarResp.getData();
    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> getNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(String networkId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, groupId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Staged Upgrade Group from a network (asynchronously)
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroup_1Async(String networkId, String groupId, final ApiCallback<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, groupId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedGroups_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroups_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedGroups_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroups_1(Async)");
        }

        return getNetworkFirmwareUpgradesStagedGroups_1Call(networkId, _callback);

    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> getNetworkFirmwareUpgradesStagedGroups_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> localVarResp = getNetworkFirmwareUpgradesStagedGroups_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> getNetworkFirmwareUpgradesStagedGroups_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroups_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Staged Upgrade Groups in a network (asynchronously)
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroups_1Async(String networkId, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroups_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedStages_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedStages_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/stages"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedStages_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedStages_1(Async)");
        }

        return getNetworkFirmwareUpgradesStagedStages_1Call(networkId, _callback);

    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> getNetworkFirmwareUpgradesStagedStages_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> localVarResp = getNetworkFirmwareUpgradesStagedStages_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> getNetworkFirmwareUpgradesStagedStages_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedStages_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order of Staged Upgrade Groups in a network (asynchronously)
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedStages_1Async(String networkId, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedStages_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgrades_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgrades_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgrades_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgrades_1(Async)");
        }

        return getNetworkFirmwareUpgrades_1Call(networkId, _callback);

    }

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgrades200Response getNetworkFirmwareUpgrades_1(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgrades200Response> localVarResp = getNetworkFirmwareUpgrades_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgrades200Response> getNetworkFirmwareUpgrades_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgrades_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade information for a network (asynchronously)
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgrades_1Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgrades_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbacksNetworkFirmwareUpgradesStagedEvents_1
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_1Call(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_1(Async)");
        }

        // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_1(Async)");
        }

        return rollbacksNetworkFirmwareUpgradesStagedEvents_1Call(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response rollbacksNetworkFirmwareUpgradesStagedEvents_1(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = rollbacksNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> rollbacksNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Staged Upgrade Event for a network (asynchronously)
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_1Async(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedEvents_1
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_1Call(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents_1(Async)");
        }

        // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (updateNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents_1(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedEvents_1Call(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response updateNetworkFirmwareUpgradesStagedEvents_1(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = updateNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> updateNetworkFirmwareUpgradesStagedEvents_1WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Staged Upgrade Event for a network (asynchronously)
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_1Async(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEvents_1ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedGroup_1
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedGroup_1Call(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
        if (createNetworkFirmwareUpgradesStagedGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling updateNetworkFirmwareUpgradesStagedGroup_1(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedGroup_1Call(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);

    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkFirmwareUpgradesStagedGroup_1(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkFirmwareUpgradesStagedGroup_1WithHttpInfo(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Staged Upgrade Group for a network (asynchronously)
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedGroup_1Async(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedGroup_1ValidateBeforeCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedStages_1
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedStages_1Call(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedStagesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/stages"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedStages_1ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedStages_1(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedStages_1Call(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, _callback);

    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> updateNetworkFirmwareUpgradesStagedStages_1(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> localVarResp = updateNetworkFirmwareUpgradesStagedStages_1WithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest);
        return localVarResp.getData();
    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> updateNetworkFirmwareUpgradesStagedStages_1WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedStages_1ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Staged Upgrade Group order in the sequence. (asynchronously)
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedStages_1Async(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedStages_1ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgrades_1
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgrades_1Call(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgrades_1ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgrades_1(Async)");
        }

        return updateNetworkFirmwareUpgrades_1Call(networkId, updateNetworkFirmwareUpgradesRequest, _callback);

    }

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @return GetNetworkFirmwareUpgrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgrades200Response updateNetworkFirmwareUpgrades_1(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgrades200Response> localVarResp = updateNetworkFirmwareUpgrades_1WithHttpInfo(networkId, updateNetworkFirmwareUpgradesRequest);
        return localVarResp.getData();
    }

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgrades200Response> updateNetworkFirmwareUpgrades_1WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgrades_1ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update firmware upgrade information for a network (asynchronously)
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgrades_1Async(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback<GetNetworkFirmwareUpgrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgrades_1ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
