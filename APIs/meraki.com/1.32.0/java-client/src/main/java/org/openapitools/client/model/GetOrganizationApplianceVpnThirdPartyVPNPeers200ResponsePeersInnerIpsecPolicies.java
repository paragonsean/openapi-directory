/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies {
  /**
   * Gets or Sets childAuthAlgo
   */
  @JsonAdapter(ChildAuthAlgoEnum.Adapter.class)
  public enum ChildAuthAlgoEnum {
    MD5("md5"),
    
    SHA1("sha1"),
    
    SHA256("sha256");

    private String value;

    ChildAuthAlgoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChildAuthAlgoEnum fromValue(String value) {
      for (ChildAuthAlgoEnum b : ChildAuthAlgoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChildAuthAlgoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChildAuthAlgoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChildAuthAlgoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChildAuthAlgoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChildAuthAlgoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHILD_AUTH_ALGO = "childAuthAlgo";
  @SerializedName(SERIALIZED_NAME_CHILD_AUTH_ALGO)
  private List<ChildAuthAlgoEnum> childAuthAlgo = new ArrayList<>();

  /**
   * Gets or Sets childCipherAlgo
   */
  @JsonAdapter(ChildCipherAlgoEnum.Adapter.class)
  public enum ChildCipherAlgoEnum {
    AES128("aes128"),
    
    AES192("aes192"),
    
    AES256("aes256"),
    
    DES("des"),
    
    NULL("null"),
    
    TRIPLEDES("tripledes");

    private String value;

    ChildCipherAlgoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChildCipherAlgoEnum fromValue(String value) {
      for (ChildCipherAlgoEnum b : ChildCipherAlgoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChildCipherAlgoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChildCipherAlgoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChildCipherAlgoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChildCipherAlgoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChildCipherAlgoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHILD_CIPHER_ALGO = "childCipherAlgo";
  @SerializedName(SERIALIZED_NAME_CHILD_CIPHER_ALGO)
  private List<ChildCipherAlgoEnum> childCipherAlgo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHILD_LIFETIME = "childLifetime";
  @SerializedName(SERIALIZED_NAME_CHILD_LIFETIME)
  private Integer childLifetime;

  public static final String SERIALIZED_NAME_CHILD_PFS_GROUP = "childPfsGroup";
  @SerializedName(SERIALIZED_NAME_CHILD_PFS_GROUP)
  private List<String> childPfsGroup = new ArrayList<>();

  /**
   * Gets or Sets ikeAuthAlgo
   */
  @JsonAdapter(IkeAuthAlgoEnum.Adapter.class)
  public enum IkeAuthAlgoEnum {
    MD5("md5"),
    
    SHA1("sha1"),
    
    SHA256("sha256");

    private String value;

    IkeAuthAlgoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IkeAuthAlgoEnum fromValue(String value) {
      for (IkeAuthAlgoEnum b : IkeAuthAlgoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IkeAuthAlgoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IkeAuthAlgoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IkeAuthAlgoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IkeAuthAlgoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IkeAuthAlgoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IKE_AUTH_ALGO = "ikeAuthAlgo";
  @SerializedName(SERIALIZED_NAME_IKE_AUTH_ALGO)
  private List<IkeAuthAlgoEnum> ikeAuthAlgo = new ArrayList<>();

  /**
   * Gets or Sets ikeCipherAlgo
   */
  @JsonAdapter(IkeCipherAlgoEnum.Adapter.class)
  public enum IkeCipherAlgoEnum {
    AES128("aes128"),
    
    AES192("aes192"),
    
    AES256("aes256"),
    
    DES("des"),
    
    TRIPLEDES("tripledes");

    private String value;

    IkeCipherAlgoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IkeCipherAlgoEnum fromValue(String value) {
      for (IkeCipherAlgoEnum b : IkeCipherAlgoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IkeCipherAlgoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IkeCipherAlgoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IkeCipherAlgoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IkeCipherAlgoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IkeCipherAlgoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IKE_CIPHER_ALGO = "ikeCipherAlgo";
  @SerializedName(SERIALIZED_NAME_IKE_CIPHER_ALGO)
  private List<IkeCipherAlgoEnum> ikeCipherAlgo = new ArrayList<>();

  public static final String SERIALIZED_NAME_IKE_DIFFIE_HELLMAN_GROUP = "ikeDiffieHellmanGroup";
  @SerializedName(SERIALIZED_NAME_IKE_DIFFIE_HELLMAN_GROUP)
  private List<String> ikeDiffieHellmanGroup = new ArrayList<>();

  public static final String SERIALIZED_NAME_IKE_LIFETIME = "ikeLifetime";
  @SerializedName(SERIALIZED_NAME_IKE_LIFETIME)
  private Integer ikeLifetime;

  /**
   * Gets or Sets ikePrfAlgo
   */
  @JsonAdapter(IkePrfAlgoEnum.Adapter.class)
  public enum IkePrfAlgoEnum {
    DEFAULT("default"),
    
    PRFMD5("prfmd5"),
    
    PRFSHA1("prfsha1"),
    
    PRFSHA256("prfsha256");

    private String value;

    IkePrfAlgoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IkePrfAlgoEnum fromValue(String value) {
      for (IkePrfAlgoEnum b : IkePrfAlgoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IkePrfAlgoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IkePrfAlgoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IkePrfAlgoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IkePrfAlgoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IkePrfAlgoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IKE_PRF_ALGO = "ikePrfAlgo";
  @SerializedName(SERIALIZED_NAME_IKE_PRF_ALGO)
  private List<IkePrfAlgoEnum> ikePrfAlgo = new ArrayList<>();

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies() {
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies childAuthAlgo(List<ChildAuthAlgoEnum> childAuthAlgo) {
    this.childAuthAlgo = childAuthAlgo;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addChildAuthAlgoItem(ChildAuthAlgoEnum childAuthAlgoItem) {
    if (this.childAuthAlgo == null) {
      this.childAuthAlgo = new ArrayList<>();
    }
    this.childAuthAlgo.add(childAuthAlgoItem);
    return this;
  }

  /**
   * This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
   * @return childAuthAlgo
   */
  @javax.annotation.Nullable
  public List<ChildAuthAlgoEnum> getChildAuthAlgo() {
    return childAuthAlgo;
  }

  public void setChildAuthAlgo(List<ChildAuthAlgoEnum> childAuthAlgo) {
    this.childAuthAlgo = childAuthAlgo;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies childCipherAlgo(List<ChildCipherAlgoEnum> childCipherAlgo) {
    this.childCipherAlgo = childCipherAlgo;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addChildCipherAlgoItem(ChildCipherAlgoEnum childCipherAlgoItem) {
    if (this.childCipherAlgo == null) {
      this.childCipherAlgo = new ArrayList<>();
    }
    this.childCipherAlgo.add(childCipherAlgoItem);
    return this;
  }

  /**
   * This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
   * @return childCipherAlgo
   */
  @javax.annotation.Nullable
  public List<ChildCipherAlgoEnum> getChildCipherAlgo() {
    return childCipherAlgo;
  }

  public void setChildCipherAlgo(List<ChildCipherAlgoEnum> childCipherAlgo) {
    this.childCipherAlgo = childCipherAlgo;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies childLifetime(Integer childLifetime) {
    this.childLifetime = childLifetime;
    return this;
  }

  /**
   * The lifetime of the Phase 2 SA in seconds.
   * @return childLifetime
   */
  @javax.annotation.Nullable
  public Integer getChildLifetime() {
    return childLifetime;
  }

  public void setChildLifetime(Integer childLifetime) {
    this.childLifetime = childLifetime;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies childPfsGroup(List<String> childPfsGroup) {
    this.childPfsGroup = childPfsGroup;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addChildPfsGroupItem(String childPfsGroupItem) {
    if (this.childPfsGroup == null) {
      this.childPfsGroup = new ArrayList<>();
    }
    this.childPfsGroup.add(childPfsGroupItem);
    return this;
  }

  /**
   * This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
   * @return childPfsGroup
   */
  @javax.annotation.Nullable
  public List<String> getChildPfsGroup() {
    return childPfsGroup;
  }

  public void setChildPfsGroup(List<String> childPfsGroup) {
    this.childPfsGroup = childPfsGroup;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies ikeAuthAlgo(List<IkeAuthAlgoEnum> ikeAuthAlgo) {
    this.ikeAuthAlgo = ikeAuthAlgo;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addIkeAuthAlgoItem(IkeAuthAlgoEnum ikeAuthAlgoItem) {
    if (this.ikeAuthAlgo == null) {
      this.ikeAuthAlgo = new ArrayList<>();
    }
    this.ikeAuthAlgo.add(ikeAuthAlgoItem);
    return this;
  }

  /**
   * This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
   * @return ikeAuthAlgo
   */
  @javax.annotation.Nullable
  public List<IkeAuthAlgoEnum> getIkeAuthAlgo() {
    return ikeAuthAlgo;
  }

  public void setIkeAuthAlgo(List<IkeAuthAlgoEnum> ikeAuthAlgo) {
    this.ikeAuthAlgo = ikeAuthAlgo;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies ikeCipherAlgo(List<IkeCipherAlgoEnum> ikeCipherAlgo) {
    this.ikeCipherAlgo = ikeCipherAlgo;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addIkeCipherAlgoItem(IkeCipherAlgoEnum ikeCipherAlgoItem) {
    if (this.ikeCipherAlgo == null) {
      this.ikeCipherAlgo = new ArrayList<>();
    }
    this.ikeCipherAlgo.add(ikeCipherAlgoItem);
    return this;
  }

  /**
   * This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
   * @return ikeCipherAlgo
   */
  @javax.annotation.Nullable
  public List<IkeCipherAlgoEnum> getIkeCipherAlgo() {
    return ikeCipherAlgo;
  }

  public void setIkeCipherAlgo(List<IkeCipherAlgoEnum> ikeCipherAlgo) {
    this.ikeCipherAlgo = ikeCipherAlgo;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies ikeDiffieHellmanGroup(List<String> ikeDiffieHellmanGroup) {
    this.ikeDiffieHellmanGroup = ikeDiffieHellmanGroup;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addIkeDiffieHellmanGroupItem(String ikeDiffieHellmanGroupItem) {
    if (this.ikeDiffieHellmanGroup == null) {
      this.ikeDiffieHellmanGroup = new ArrayList<>();
    }
    this.ikeDiffieHellmanGroup.add(ikeDiffieHellmanGroupItem);
    return this;
  }

  /**
   * This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
   * @return ikeDiffieHellmanGroup
   */
  @javax.annotation.Nullable
  public List<String> getIkeDiffieHellmanGroup() {
    return ikeDiffieHellmanGroup;
  }

  public void setIkeDiffieHellmanGroup(List<String> ikeDiffieHellmanGroup) {
    this.ikeDiffieHellmanGroup = ikeDiffieHellmanGroup;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies ikeLifetime(Integer ikeLifetime) {
    this.ikeLifetime = ikeLifetime;
    return this;
  }

  /**
   * The lifetime of the Phase 1 SA in seconds.
   * @return ikeLifetime
   */
  @javax.annotation.Nullable
  public Integer getIkeLifetime() {
    return ikeLifetime;
  }

  public void setIkeLifetime(Integer ikeLifetime) {
    this.ikeLifetime = ikeLifetime;
  }


  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies ikePrfAlgo(List<IkePrfAlgoEnum> ikePrfAlgo) {
    this.ikePrfAlgo = ikePrfAlgo;
    return this;
  }

  public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies addIkePrfAlgoItem(IkePrfAlgoEnum ikePrfAlgoItem) {
    if (this.ikePrfAlgo == null) {
      this.ikePrfAlgo = new ArrayList<>();
    }
    this.ikePrfAlgo.add(ikePrfAlgoItem);
    return this;
  }

  /**
   * [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
   * @return ikePrfAlgo
   */
  @javax.annotation.Nullable
  public List<IkePrfAlgoEnum> getIkePrfAlgo() {
    return ikePrfAlgo;
  }

  public void setIkePrfAlgo(List<IkePrfAlgoEnum> ikePrfAlgo) {
    this.ikePrfAlgo = ikePrfAlgo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies = (GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies) o;
    return Objects.equals(this.childAuthAlgo, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.childAuthAlgo) &&
        Objects.equals(this.childCipherAlgo, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.childCipherAlgo) &&
        Objects.equals(this.childLifetime, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.childLifetime) &&
        Objects.equals(this.childPfsGroup, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.childPfsGroup) &&
        Objects.equals(this.ikeAuthAlgo, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.ikeAuthAlgo) &&
        Objects.equals(this.ikeCipherAlgo, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.ikeCipherAlgo) &&
        Objects.equals(this.ikeDiffieHellmanGroup, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.ikeDiffieHellmanGroup) &&
        Objects.equals(this.ikeLifetime, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.ikeLifetime) &&
        Objects.equals(this.ikePrfAlgo, getOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.ikePrfAlgo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childAuthAlgo, childCipherAlgo, childLifetime, childPfsGroup, ikeAuthAlgo, ikeCipherAlgo, ikeDiffieHellmanGroup, ikeLifetime, ikePrfAlgo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies {\n");
    sb.append("    childAuthAlgo: ").append(toIndentedString(childAuthAlgo)).append("\n");
    sb.append("    childCipherAlgo: ").append(toIndentedString(childCipherAlgo)).append("\n");
    sb.append("    childLifetime: ").append(toIndentedString(childLifetime)).append("\n");
    sb.append("    childPfsGroup: ").append(toIndentedString(childPfsGroup)).append("\n");
    sb.append("    ikeAuthAlgo: ").append(toIndentedString(ikeAuthAlgo)).append("\n");
    sb.append("    ikeCipherAlgo: ").append(toIndentedString(ikeCipherAlgo)).append("\n");
    sb.append("    ikeDiffieHellmanGroup: ").append(toIndentedString(ikeDiffieHellmanGroup)).append("\n");
    sb.append("    ikeLifetime: ").append(toIndentedString(ikeLifetime)).append("\n");
    sb.append("    ikePrfAlgo: ").append(toIndentedString(ikePrfAlgo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childAuthAlgo");
    openapiFields.add("childCipherAlgo");
    openapiFields.add("childLifetime");
    openapiFields.add("childPfsGroup");
    openapiFields.add("ikeAuthAlgo");
    openapiFields.add("ikeCipherAlgo");
    openapiFields.add("ikeDiffieHellmanGroup");
    openapiFields.add("ikeLifetime");
    openapiFields.add("ikePrfAlgo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies is not found in the empty JSON string", GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("childAuthAlgo") != null && !jsonObj.get("childAuthAlgo").isJsonNull() && !jsonObj.get("childAuthAlgo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childAuthAlgo` to be an array in the JSON string but got `%s`", jsonObj.get("childAuthAlgo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("childCipherAlgo") != null && !jsonObj.get("childCipherAlgo").isJsonNull() && !jsonObj.get("childCipherAlgo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childCipherAlgo` to be an array in the JSON string but got `%s`", jsonObj.get("childCipherAlgo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("childPfsGroup") != null && !jsonObj.get("childPfsGroup").isJsonNull() && !jsonObj.get("childPfsGroup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childPfsGroup` to be an array in the JSON string but got `%s`", jsonObj.get("childPfsGroup").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ikeAuthAlgo") != null && !jsonObj.get("ikeAuthAlgo").isJsonNull() && !jsonObj.get("ikeAuthAlgo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ikeAuthAlgo` to be an array in the JSON string but got `%s`", jsonObj.get("ikeAuthAlgo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ikeCipherAlgo") != null && !jsonObj.get("ikeCipherAlgo").isJsonNull() && !jsonObj.get("ikeCipherAlgo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ikeCipherAlgo` to be an array in the JSON string but got `%s`", jsonObj.get("ikeCipherAlgo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ikeDiffieHellmanGroup") != null && !jsonObj.get("ikeDiffieHellmanGroup").isJsonNull() && !jsonObj.get("ikeDiffieHellmanGroup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ikeDiffieHellmanGroup` to be an array in the JSON string but got `%s`", jsonObj.get("ikeDiffieHellmanGroup").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ikePrfAlgo") != null && !jsonObj.get("ikePrfAlgo").isJsonNull() && !jsonObj.get("ikePrfAlgo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ikePrfAlgo` to be an array in the JSON string but got `%s`", jsonObj.get("ikePrfAlgo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies>() {
           @Override
           public void write(JsonWriter out, GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies
   */
  public static GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.class);
  }

  /**
   * Convert an instance of GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

