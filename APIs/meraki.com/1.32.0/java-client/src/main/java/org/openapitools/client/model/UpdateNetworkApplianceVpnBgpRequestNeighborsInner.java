/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkApplianceVpnBgpRequestNeighborsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkApplianceVpnBgpRequestNeighborsInner {
  public static final String SERIALIZED_NAME_ALLOW_TRANSIT = "allowTransit";
  @SerializedName(SERIALIZED_NAME_ALLOW_TRANSIT)
  private Boolean allowTransit;

  public static final String SERIALIZED_NAME_EBGP_HOLD_TIMER = "ebgpHoldTimer";
  @SerializedName(SERIALIZED_NAME_EBGP_HOLD_TIMER)
  private Integer ebgpHoldTimer;

  public static final String SERIALIZED_NAME_EBGP_MULTIHOP = "ebgpMultihop";
  @SerializedName(SERIALIZED_NAME_EBGP_MULTIHOP)
  private Integer ebgpMultihop;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IPV6 = "ipv6";
  @SerializedName(SERIALIZED_NAME_IPV6)
  private UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6 ipv6;

  public static final String SERIALIZED_NAME_RECEIVE_LIMIT = "receiveLimit";
  @SerializedName(SERIALIZED_NAME_RECEIVE_LIMIT)
  private Integer receiveLimit;

  public static final String SERIALIZED_NAME_REMOTE_AS_NUMBER = "remoteAsNumber";
  @SerializedName(SERIALIZED_NAME_REMOTE_AS_NUMBER)
  private Integer remoteAsNumber;

  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner() {
  }

  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner allowTransit(Boolean allowTransit) {
    this.allowTransit = allowTransit;
    return this;
  }

  /**
   * When this feature is on, the Meraki device will advertise routes learned from other Autonomous Systems, thereby allowing traffic between Autonomous Systems to transit this AS. When absent, it defaults to false.
   * @return allowTransit
   */
  @javax.annotation.Nullable
  public Boolean getAllowTransit() {
    return allowTransit;
  }

  public void setAllowTransit(Boolean allowTransit) {
    this.allowTransit = allowTransit;
  }


  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner ebgpHoldTimer(Integer ebgpHoldTimer) {
    this.ebgpHoldTimer = ebgpHoldTimer;
    return this;
  }

  /**
   * The EBGP hold timer in seconds for each neighbor. The EBGP hold timer must be an integer between 12 and 240.
   * @return ebgpHoldTimer
   */
  @javax.annotation.Nonnull
  public Integer getEbgpHoldTimer() {
    return ebgpHoldTimer;
  }

  public void setEbgpHoldTimer(Integer ebgpHoldTimer) {
    this.ebgpHoldTimer = ebgpHoldTimer;
  }


  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner ebgpMultihop(Integer ebgpMultihop) {
    this.ebgpMultihop = ebgpMultihop;
    return this;
  }

  /**
   * Configure this if the neighbor is not adjacent. The EBGP multi-hop must be an integer between 1 and 255.
   * @return ebgpMultihop
   */
  @javax.annotation.Nonnull
  public Integer getEbgpMultihop() {
    return ebgpMultihop;
  }

  public void setEbgpMultihop(Integer ebgpMultihop) {
    this.ebgpMultihop = ebgpMultihop;
  }


  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IPv4 address of the neighbor
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner ipv6(UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6 ipv6) {
    this.ipv6 = ipv6;
    return this;
  }

  /**
   * Get ipv6
   * @return ipv6
   */
  @javax.annotation.Nullable
  public UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6 getIpv6() {
    return ipv6;
  }

  public void setIpv6(UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6 ipv6) {
    this.ipv6 = ipv6;
  }


  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner receiveLimit(Integer receiveLimit) {
    this.receiveLimit = receiveLimit;
    return this;
  }

  /**
   * The receive limit is the maximum number of routes that can be received from any BGP peer. The receive limit must be an integer between 0 and 4294967295. When absent, it defaults to 0.
   * @return receiveLimit
   */
  @javax.annotation.Nullable
  public Integer getReceiveLimit() {
    return receiveLimit;
  }

  public void setReceiveLimit(Integer receiveLimit) {
    this.receiveLimit = receiveLimit;
  }


  public UpdateNetworkApplianceVpnBgpRequestNeighborsInner remoteAsNumber(Integer remoteAsNumber) {
    this.remoteAsNumber = remoteAsNumber;
    return this;
  }

  /**
   * Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.
   * @return remoteAsNumber
   */
  @javax.annotation.Nonnull
  public Integer getRemoteAsNumber() {
    return remoteAsNumber;
  }

  public void setRemoteAsNumber(Integer remoteAsNumber) {
    this.remoteAsNumber = remoteAsNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkApplianceVpnBgpRequestNeighborsInner updateNetworkApplianceVpnBgpRequestNeighborsInner = (UpdateNetworkApplianceVpnBgpRequestNeighborsInner) o;
    return Objects.equals(this.allowTransit, updateNetworkApplianceVpnBgpRequestNeighborsInner.allowTransit) &&
        Objects.equals(this.ebgpHoldTimer, updateNetworkApplianceVpnBgpRequestNeighborsInner.ebgpHoldTimer) &&
        Objects.equals(this.ebgpMultihop, updateNetworkApplianceVpnBgpRequestNeighborsInner.ebgpMultihop) &&
        Objects.equals(this.ip, updateNetworkApplianceVpnBgpRequestNeighborsInner.ip) &&
        Objects.equals(this.ipv6, updateNetworkApplianceVpnBgpRequestNeighborsInner.ipv6) &&
        Objects.equals(this.receiveLimit, updateNetworkApplianceVpnBgpRequestNeighborsInner.receiveLimit) &&
        Objects.equals(this.remoteAsNumber, updateNetworkApplianceVpnBgpRequestNeighborsInner.remoteAsNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowTransit, ebgpHoldTimer, ebgpMultihop, ip, ipv6, receiveLimit, remoteAsNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkApplianceVpnBgpRequestNeighborsInner {\n");
    sb.append("    allowTransit: ").append(toIndentedString(allowTransit)).append("\n");
    sb.append("    ebgpHoldTimer: ").append(toIndentedString(ebgpHoldTimer)).append("\n");
    sb.append("    ebgpMultihop: ").append(toIndentedString(ebgpMultihop)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    receiveLimit: ").append(toIndentedString(receiveLimit)).append("\n");
    sb.append("    remoteAsNumber: ").append(toIndentedString(remoteAsNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowTransit");
    openapiFields.add("ebgpHoldTimer");
    openapiFields.add("ebgpMultihop");
    openapiFields.add("ip");
    openapiFields.add("ipv6");
    openapiFields.add("receiveLimit");
    openapiFields.add("remoteAsNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ebgpHoldTimer");
    openapiRequiredFields.add("ebgpMultihop");
    openapiRequiredFields.add("remoteAsNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkApplianceVpnBgpRequestNeighborsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkApplianceVpnBgpRequestNeighborsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkApplianceVpnBgpRequestNeighborsInner is not found in the empty JSON string", UpdateNetworkApplianceVpnBgpRequestNeighborsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkApplianceVpnBgpRequestNeighborsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkApplianceVpnBgpRequestNeighborsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkApplianceVpnBgpRequestNeighborsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      // validate the optional field `ipv6`
      if (jsonObj.get("ipv6") != null && !jsonObj.get("ipv6").isJsonNull()) {
        UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6.validateJsonElement(jsonObj.get("ipv6"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkApplianceVpnBgpRequestNeighborsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkApplianceVpnBgpRequestNeighborsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkApplianceVpnBgpRequestNeighborsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkApplianceVpnBgpRequestNeighborsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkApplianceVpnBgpRequestNeighborsInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkApplianceVpnBgpRequestNeighborsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkApplianceVpnBgpRequestNeighborsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkApplianceVpnBgpRequestNeighborsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkApplianceVpnBgpRequestNeighborsInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkApplianceVpnBgpRequestNeighborsInner
   */
  public static UpdateNetworkApplianceVpnBgpRequestNeighborsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkApplianceVpnBgpRequestNeighborsInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkApplianceVpnBgpRequestNeighborsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

