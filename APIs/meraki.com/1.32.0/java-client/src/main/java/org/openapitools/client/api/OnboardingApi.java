/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner;
import org.openapitools.client.model.UpdateOrganizationCameraOnboardingStatusesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnboardingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnboardingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnboardingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, _callback);

    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest);
        return localVarResp.getData();
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch (asynchronously)
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringImport_2
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_2Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringImportRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_2ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_2(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringImportRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_2(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringImport_2Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, _callback);

    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @return List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner> createOrganizationInventoryOnboardingCloudMonitoringImport_2(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest) throws ApiException {
        ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringImport_2WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest);
        return localVarResp.getData();
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @return ApiResponse&lt;List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> createOrganizationInventoryOnboardingCloudMonitoringImport_2WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringImport_2ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, null);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring. (asynchronously)
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_2Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringImport_2ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringPrepare_2
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_2Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_2ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_2(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_2(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringPrepare_2Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, _callback);

    }

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @return List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner> createOrganizationInventoryOnboardingCloudMonitoringPrepare_2(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) throws ApiException {
        ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringPrepare_2WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest);
        return localVarResp.getData();
    }

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @return ApiResponse&lt;List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> createOrganizationInventoryOnboardingCloudMonitoringPrepare_2WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringPrepare_2ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, null);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiates or updates an import session (asynchronously)
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_2Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringPrepare_2ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationCameraOnboardingStatuses_1
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraOnboardingStatuses_1Call(String organizationId, List<String> serials, List<String> networkIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/onboarding/statuses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationCameraOnboardingStatuses_1ValidateBeforeCall(String organizationId, List<String> serials, List<String> networkIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationCameraOnboardingStatuses_1(Async)");
        }

        return getOrganizationCameraOnboardingStatuses_1Call(organizationId, serials, networkIds, _callback);

    }

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationCameraOnboardingStatuses_1(String organizationId, List<String> serials, List<String> networkIds) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationCameraOnboardingStatuses_1WithHttpInfo(organizationId, serials, networkIds);
        return localVarResp.getData();
    }

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationCameraOnboardingStatuses_1WithHttpInfo(String organizationId, List<String> serials, List<String> networkIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationCameraOnboardingStatuses_1ValidateBeforeCall(organizationId, serials, networkIds, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch onboarding status of cameras (asynchronously)
     * Fetch onboarding status of cameras
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraOnboardingStatuses_1Async(String organizationId, List<String> serials, List<String> networkIds, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationCameraOnboardingStatuses_1ValidateBeforeCall(organizationId, serials, networkIds, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringImports_2
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_2Call(String organizationId, List<String> importIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (importIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "importIds", importIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_2ValidateBeforeCall(String organizationId, List<String> importIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_2(Async)");
        }

        // verify the required parameter 'importIds' is set
        if (importIds == null) {
            throw new ApiException("Missing the required parameter 'importIds' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_2(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringImports_2Call(organizationId, importIds, _callback);

    }

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @return List&lt;GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner> getOrganizationInventoryOnboardingCloudMonitoringImports_2(String organizationId, List<String> importIds) throws ApiException {
        ApiResponse<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringImports_2WithHttpInfo(organizationId, importIds);
        return localVarResp.getData();
    }

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> getOrganizationInventoryOnboardingCloudMonitoringImports_2WithHttpInfo(String organizationId, List<String> importIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringImports_2ValidateBeforeCall(organizationId, importIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check the status of a committed Import operation (asynchronously)
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_2Async(String organizationId, List<String> importIds, final ApiCallback<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringImports_2ValidateBeforeCall(organizationId, importIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringNetworks_2
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_2Call(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceType", deviceType));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_2ValidateBeforeCall(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_2(Async)");
        }

        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_2(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringNetworks_2Call(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetwork200Response> getOrganizationInventoryOnboardingCloudMonitoringNetworks_2(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetwork200Response>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringNetworks_2WithHttpInfo(organizationId, deviceType, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetwork200Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetwork200Response>> getOrganizationInventoryOnboardingCloudMonitoringNetworks_2WithHttpInfo(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_2ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device (asynchronously)
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_2Async(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetwork200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_2ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationCameraOnboardingStatuses_1
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationCameraOnboardingStatuses_1Call(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationCameraOnboardingStatusesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/onboarding/statuses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationCameraOnboardingStatuses_1ValidateBeforeCall(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationCameraOnboardingStatuses_1(Async)");
        }

        return updateOrganizationCameraOnboardingStatuses_1Call(organizationId, updateOrganizationCameraOnboardingStatusesRequest, _callback);

    }

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationCameraOnboardingStatuses_1(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationCameraOnboardingStatuses_1WithHttpInfo(organizationId, updateOrganizationCameraOnboardingStatusesRequest);
        return localVarResp.getData();
    }

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationCameraOnboardingStatuses_1WithHttpInfo(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationCameraOnboardingStatuses_1ValidateBeforeCall(organizationId, updateOrganizationCameraOnboardingStatusesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Notify that credential handoff to camera has completed (asynchronously)
     * Notify that credential handoff to camera has completed
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationCameraOnboardingStatuses_1Async(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationCameraOnboardingStatuses_1ValidateBeforeCall(organizationId, updateOrganizationCameraOnboardingStatusesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
