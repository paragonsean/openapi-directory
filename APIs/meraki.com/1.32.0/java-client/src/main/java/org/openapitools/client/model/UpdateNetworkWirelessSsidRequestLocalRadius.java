/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestLocalRadiusPasswordAuthentication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is &#39;8021x-localradius&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidRequestLocalRadius {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cacheTimeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHENTICATION = "certificateAuthentication";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHENTICATION)
  private UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication certificateAuthentication;

  public static final String SERIALIZED_NAME_PASSWORD_AUTHENTICATION = "passwordAuthentication";
  @SerializedName(SERIALIZED_NAME_PASSWORD_AUTHENTICATION)
  private UpdateNetworkWirelessSsidRequestLocalRadiusPasswordAuthentication passwordAuthentication;

  public UpdateNetworkWirelessSsidRequestLocalRadius() {
  }

  public UpdateNetworkWirelessSsidRequestLocalRadius cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * The duration (in seconds) for which LDAP and OCSP lookups are cached.
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public UpdateNetworkWirelessSsidRequestLocalRadius certificateAuthentication(UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication certificateAuthentication) {
    this.certificateAuthentication = certificateAuthentication;
    return this;
  }

  /**
   * Get certificateAuthentication
   * @return certificateAuthentication
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication getCertificateAuthentication() {
    return certificateAuthentication;
  }

  public void setCertificateAuthentication(UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication certificateAuthentication) {
    this.certificateAuthentication = certificateAuthentication;
  }


  public UpdateNetworkWirelessSsidRequestLocalRadius passwordAuthentication(UpdateNetworkWirelessSsidRequestLocalRadiusPasswordAuthentication passwordAuthentication) {
    this.passwordAuthentication = passwordAuthentication;
    return this;
  }

  /**
   * Get passwordAuthentication
   * @return passwordAuthentication
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestLocalRadiusPasswordAuthentication getPasswordAuthentication() {
    return passwordAuthentication;
  }

  public void setPasswordAuthentication(UpdateNetworkWirelessSsidRequestLocalRadiusPasswordAuthentication passwordAuthentication) {
    this.passwordAuthentication = passwordAuthentication;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidRequestLocalRadius updateNetworkWirelessSsidRequestLocalRadius = (UpdateNetworkWirelessSsidRequestLocalRadius) o;
    return Objects.equals(this.cacheTimeout, updateNetworkWirelessSsidRequestLocalRadius.cacheTimeout) &&
        Objects.equals(this.certificateAuthentication, updateNetworkWirelessSsidRequestLocalRadius.certificateAuthentication) &&
        Objects.equals(this.passwordAuthentication, updateNetworkWirelessSsidRequestLocalRadius.passwordAuthentication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, certificateAuthentication, passwordAuthentication);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidRequestLocalRadius {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    certificateAuthentication: ").append(toIndentedString(certificateAuthentication)).append("\n");
    sb.append("    passwordAuthentication: ").append(toIndentedString(passwordAuthentication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheTimeout");
    openapiFields.add("certificateAuthentication");
    openapiFields.add("passwordAuthentication");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidRequestLocalRadius
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidRequestLocalRadius.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidRequestLocalRadius is not found in the empty JSON string", UpdateNetworkWirelessSsidRequestLocalRadius.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidRequestLocalRadius.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidRequestLocalRadius` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificateAuthentication`
      if (jsonObj.get("certificateAuthentication") != null && !jsonObj.get("certificateAuthentication").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.validateJsonElement(jsonObj.get("certificateAuthentication"));
      }
      // validate the optional field `passwordAuthentication`
      if (jsonObj.get("passwordAuthentication") != null && !jsonObj.get("passwordAuthentication").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestLocalRadiusPasswordAuthentication.validateJsonElement(jsonObj.get("passwordAuthentication"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidRequestLocalRadius.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidRequestLocalRadius' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidRequestLocalRadius> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidRequestLocalRadius.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidRequestLocalRadius>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidRequestLocalRadius value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidRequestLocalRadius read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidRequestLocalRadius given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidRequestLocalRadius
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidRequestLocalRadius
   */
  public static UpdateNetworkWirelessSsidRequestLocalRadius fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidRequestLocalRadius.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidRequestLocalRadius to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

