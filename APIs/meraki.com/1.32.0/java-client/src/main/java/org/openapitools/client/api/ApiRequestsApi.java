/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetOrganizationApiRequests200ResponseInner;
import org.openapitools.client.model.GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiRequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiRequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiRequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrganizationApiRequestsOverviewResponseCodesByInterval_1
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. If interval is provided, the timespan will be autocalculated. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 120, 3600, 14400, 21600. The default is 21600. Interval is calculated if time params are provided. (optional)
     * @param version Filter by API version of the endpoint. Allowable values are: [0, 1] (optional)
     * @param operationIds Filter by operation ID of the endpoint (optional)
     * @param sourceIps Filter by source IP that made the API request (optional)
     * @param adminIds Filter by admin ID of user that made the API request (optional)
     * @param userAgent Filter by user agent string for API request. This will filter by a complete or partial match. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApiRequestsOverviewResponseCodesByInterval_1Call(String organizationId, String t0, String t1, Float timespan, Integer interval, Integer version, List<String> operationIds, List<String> sourceIps, List<String> adminIds, String userAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/apiRequests/overview/responseCodes/byInterval"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (operationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "operationIds", operationIds));
        }

        if (sourceIps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sourceIps", sourceIps));
        }

        if (adminIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "adminIds", adminIds));
        }

        if (userAgent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAgent", userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApiRequestsOverviewResponseCodesByInterval_1ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, Integer interval, Integer version, List<String> operationIds, List<String> sourceIps, List<String> adminIds, String userAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApiRequestsOverviewResponseCodesByInterval_1(Async)");
        }

        return getOrganizationApiRequestsOverviewResponseCodesByInterval_1Call(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent, _callback);

    }

    /**
     * Tracks organizations&#39; API requests by response code across a given time period
     * Tracks organizations&#39; API requests by response code across a given time period
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. If interval is provided, the timespan will be autocalculated. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 120, 3600, 14400, 21600. The default is 21600. Interval is calculated if time params are provided. (optional)
     * @param version Filter by API version of the endpoint. Allowable values are: [0, 1] (optional)
     * @param operationIds Filter by operation ID of the endpoint (optional)
     * @param sourceIps Filter by source IP that made the API request (optional)
     * @param adminIds Filter by admin ID of user that made the API request (optional)
     * @param userAgent Filter by user agent string for API request. This will filter by a complete or partial match. (optional)
     * @return List&lt;GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner> getOrganizationApiRequestsOverviewResponseCodesByInterval_1(String organizationId, String t0, String t1, Float timespan, Integer interval, Integer version, List<String> operationIds, List<String> sourceIps, List<String> adminIds, String userAgent) throws ApiException {
        ApiResponse<List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>> localVarResp = getOrganizationApiRequestsOverviewResponseCodesByInterval_1WithHttpInfo(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent);
        return localVarResp.getData();
    }

    /**
     * Tracks organizations&#39; API requests by response code across a given time period
     * Tracks organizations&#39; API requests by response code across a given time period
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. If interval is provided, the timespan will be autocalculated. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 120, 3600, 14400, 21600. The default is 21600. Interval is calculated if time params are provided. (optional)
     * @param version Filter by API version of the endpoint. Allowable values are: [0, 1] (optional)
     * @param operationIds Filter by operation ID of the endpoint (optional)
     * @param sourceIps Filter by source IP that made the API request (optional)
     * @param adminIds Filter by admin ID of user that made the API request (optional)
     * @param userAgent Filter by user agent string for API request. This will filter by a complete or partial match. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>> getOrganizationApiRequestsOverviewResponseCodesByInterval_1WithHttpInfo(String organizationId, String t0, String t1, Float timespan, Integer interval, Integer version, List<String> operationIds, List<String> sourceIps, List<String> adminIds, String userAgent) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApiRequestsOverviewResponseCodesByInterval_1ValidateBeforeCall(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tracks organizations&#39; API requests by response code across a given time period (asynchronously)
     * Tracks organizations&#39; API requests by response code across a given time period
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. If interval is provided, the timespan will be autocalculated. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 120, 3600, 14400, 21600. The default is 21600. Interval is calculated if time params are provided. (optional)
     * @param version Filter by API version of the endpoint. Allowable values are: [0, 1] (optional)
     * @param operationIds Filter by operation ID of the endpoint (optional)
     * @param sourceIps Filter by source IP that made the API request (optional)
     * @param adminIds Filter by admin ID of user that made the API request (optional)
     * @param userAgent Filter by user agent string for API request. This will filter by a complete or partial match. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApiRequestsOverviewResponseCodesByInterval_1Async(String organizationId, String t0, String t1, Float timespan, Integer interval, Integer version, List<String> operationIds, List<String> sourceIps, List<String> adminIds, String userAgent, final ApiCallback<List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApiRequestsOverviewResponseCodesByInterval_1ValidateBeforeCall(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationApiRequestsOverview_1
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApiRequestsOverview_1Call(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/apiRequests/overview"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApiRequestsOverview_1ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApiRequestsOverview_1(Async)");
        }

        return getOrganizationApiRequestsOverview_1Call(organizationId, t0, t1, timespan, _callback);

    }

    /**
     * Return an aggregated overview of API requests data
     * Return an aggregated overview of API requests data
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationApiRequestsOverview_1(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationApiRequestsOverview_1WithHttpInfo(organizationId, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return an aggregated overview of API requests data
     * Return an aggregated overview of API requests data
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationApiRequestsOverview_1WithHttpInfo(String organizationId, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApiRequestsOverview_1ValidateBeforeCall(organizationId, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an aggregated overview of API requests data (asynchronously)
     * Return an aggregated overview of API requests data
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApiRequestsOverview_1Async(String organizationId, String t0, String t1, Float timespan, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApiRequestsOverview_1ValidateBeforeCall(organizationId, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationApiRequests_1
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param adminId Filter the results by the ID of the admin who made the API requests (optional)
     * @param path Filter the results by the path of the API requests (optional)
     * @param method Filter the results by the method of the API requests (must be &#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39; or &#39;DELETE&#39;) (optional)
     * @param responseCode Filter the results by the response code of the API requests (optional)
     * @param sourceIp Filter the results by the IP address of the originating API request (optional)
     * @param userAgent Filter the results by the user agent string of the API request (optional)
     * @param version Filter the results by the API version of the API request (optional)
     * @param operationIds Filter the results by one or more operation IDs for the API request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApiRequests_1Call(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String adminId, String path, String method, Integer responseCode, String sourceIp, String userAgent, Integer version, List<String> operationIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/apiRequests"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (adminId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adminId", adminId));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        if (responseCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseCode", responseCode));
        }

        if (sourceIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceIp", sourceIp));
        }

        if (userAgent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAgent", userAgent));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (operationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "operationIds", operationIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApiRequests_1ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String adminId, String path, String method, Integer responseCode, String sourceIp, String userAgent, Integer version, List<String> operationIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApiRequests_1(Async)");
        }

        return getOrganizationApiRequests_1Call(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, adminId, path, method, responseCode, sourceIp, userAgent, version, operationIds, _callback);

    }

    /**
     * List the API requests made by an organization
     * List the API requests made by an organization
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param adminId Filter the results by the ID of the admin who made the API requests (optional)
     * @param path Filter the results by the path of the API requests (optional)
     * @param method Filter the results by the method of the API requests (must be &#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39; or &#39;DELETE&#39;) (optional)
     * @param responseCode Filter the results by the response code of the API requests (optional)
     * @param sourceIp Filter the results by the IP address of the originating API request (optional)
     * @param userAgent Filter the results by the user agent string of the API request (optional)
     * @param version Filter the results by the API version of the API request (optional)
     * @param operationIds Filter the results by one or more operation IDs for the API request (optional)
     * @return List&lt;GetOrganizationApiRequests200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationApiRequests200ResponseInner> getOrganizationApiRequests_1(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String adminId, String path, String method, Integer responseCode, String sourceIp, String userAgent, Integer version, List<String> operationIds) throws ApiException {
        ApiResponse<List<GetOrganizationApiRequests200ResponseInner>> localVarResp = getOrganizationApiRequests_1WithHttpInfo(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, adminId, path, method, responseCode, sourceIp, userAgent, version, operationIds);
        return localVarResp.getData();
    }

    /**
     * List the API requests made by an organization
     * List the API requests made by an organization
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param adminId Filter the results by the ID of the admin who made the API requests (optional)
     * @param path Filter the results by the path of the API requests (optional)
     * @param method Filter the results by the method of the API requests (must be &#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39; or &#39;DELETE&#39;) (optional)
     * @param responseCode Filter the results by the response code of the API requests (optional)
     * @param sourceIp Filter the results by the IP address of the originating API request (optional)
     * @param userAgent Filter the results by the user agent string of the API request (optional)
     * @param version Filter the results by the API version of the API request (optional)
     * @param operationIds Filter the results by one or more operation IDs for the API request (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationApiRequests200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationApiRequests200ResponseInner>> getOrganizationApiRequests_1WithHttpInfo(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String adminId, String path, String method, Integer responseCode, String sourceIp, String userAgent, Integer version, List<String> operationIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApiRequests_1ValidateBeforeCall(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, adminId, path, method, responseCode, sourceIp, userAgent, version, operationIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationApiRequests200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the API requests made by an organization (asynchronously)
     * List the API requests made by an organization
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param adminId Filter the results by the ID of the admin who made the API requests (optional)
     * @param path Filter the results by the path of the API requests (optional)
     * @param method Filter the results by the method of the API requests (must be &#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39; or &#39;DELETE&#39;) (optional)
     * @param responseCode Filter the results by the response code of the API requests (optional)
     * @param sourceIp Filter the results by the IP address of the originating API request (optional)
     * @param userAgent Filter the results by the user agent string of the API request (optional)
     * @param version Filter the results by the API version of the API request (optional)
     * @param operationIds Filter the results by one or more operation IDs for the API request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApiRequests_1Async(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String adminId, String path, String method, Integer responseCode, String sourceIp, String userAgent, Integer version, List<String> operationIds, final ApiCallback<List<GetOrganizationApiRequests200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApiRequests_1ValidateBeforeCall(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, adminId, path, method, responseCode, sourceIp, userAgent, version, operationIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationApiRequests200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
