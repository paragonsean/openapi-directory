/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequestAclsInner;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateOrganizationAdaptivePolicyPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOrganizationAdaptivePolicyPolicyRequest {
  public static final String SERIALIZED_NAME_ACLS = "acls";
  @SerializedName(SERIALIZED_NAME_ACLS)
  private List<CreateOrganizationAdaptivePolicyPolicyRequestAclsInner> acls = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_GROUP = "destinationGroup";
  @SerializedName(SERIALIZED_NAME_DESTINATION_GROUP)
  private CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup destinationGroup;

  /**
   * The rule to apply if there is no matching ACL (default: \&quot;default\&quot;)
   */
  @JsonAdapter(LastEntryRuleEnum.Adapter.class)
  public enum LastEntryRuleEnum {
    ALLOW("allow"),
    
    DEFAULT("default"),
    
    DENY("deny");

    private String value;

    LastEntryRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastEntryRuleEnum fromValue(String value) {
      for (LastEntryRuleEnum b : LastEntryRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastEntryRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastEntryRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastEntryRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastEntryRuleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LastEntryRuleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAST_ENTRY_RULE = "lastEntryRule";
  @SerializedName(SERIALIZED_NAME_LAST_ENTRY_RULE)
  private LastEntryRuleEnum lastEntryRule;

  public static final String SERIALIZED_NAME_SOURCE_GROUP = "sourceGroup";
  @SerializedName(SERIALIZED_NAME_SOURCE_GROUP)
  private CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup sourceGroup;

  public CreateOrganizationAdaptivePolicyPolicyRequest() {
  }

  public CreateOrganizationAdaptivePolicyPolicyRequest acls(List<CreateOrganizationAdaptivePolicyPolicyRequestAclsInner> acls) {
    this.acls = acls;
    return this;
  }

  public CreateOrganizationAdaptivePolicyPolicyRequest addAclsItem(CreateOrganizationAdaptivePolicyPolicyRequestAclsInner aclsItem) {
    if (this.acls == null) {
      this.acls = new ArrayList<>();
    }
    this.acls.add(aclsItem);
    return this;
  }

  /**
   * An ordered array of adaptive policy ACLs (each requires one unique attribute) that apply to this policy (default: [])
   * @return acls
   */
  @javax.annotation.Nullable
  public List<CreateOrganizationAdaptivePolicyPolicyRequestAclsInner> getAcls() {
    return acls;
  }

  public void setAcls(List<CreateOrganizationAdaptivePolicyPolicyRequestAclsInner> acls) {
    this.acls = acls;
  }


  public CreateOrganizationAdaptivePolicyPolicyRequest destinationGroup(CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup destinationGroup) {
    this.destinationGroup = destinationGroup;
    return this;
  }

  /**
   * Get destinationGroup
   * @return destinationGroup
   */
  @javax.annotation.Nonnull
  public CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup getDestinationGroup() {
    return destinationGroup;
  }

  public void setDestinationGroup(CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup destinationGroup) {
    this.destinationGroup = destinationGroup;
  }


  public CreateOrganizationAdaptivePolicyPolicyRequest lastEntryRule(LastEntryRuleEnum lastEntryRule) {
    this.lastEntryRule = lastEntryRule;
    return this;
  }

  /**
   * The rule to apply if there is no matching ACL (default: \&quot;default\&quot;)
   * @return lastEntryRule
   */
  @javax.annotation.Nullable
  public LastEntryRuleEnum getLastEntryRule() {
    return lastEntryRule;
  }

  public void setLastEntryRule(LastEntryRuleEnum lastEntryRule) {
    this.lastEntryRule = lastEntryRule;
  }


  public CreateOrganizationAdaptivePolicyPolicyRequest sourceGroup(CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup sourceGroup) {
    this.sourceGroup = sourceGroup;
    return this;
  }

  /**
   * Get sourceGroup
   * @return sourceGroup
   */
  @javax.annotation.Nonnull
  public CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup getSourceGroup() {
    return sourceGroup;
  }

  public void setSourceGroup(CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup sourceGroup) {
    this.sourceGroup = sourceGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest = (CreateOrganizationAdaptivePolicyPolicyRequest) o;
    return Objects.equals(this.acls, createOrganizationAdaptivePolicyPolicyRequest.acls) &&
        Objects.equals(this.destinationGroup, createOrganizationAdaptivePolicyPolicyRequest.destinationGroup) &&
        Objects.equals(this.lastEntryRule, createOrganizationAdaptivePolicyPolicyRequest.lastEntryRule) &&
        Objects.equals(this.sourceGroup, createOrganizationAdaptivePolicyPolicyRequest.sourceGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acls, destinationGroup, lastEntryRule, sourceGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOrganizationAdaptivePolicyPolicyRequest {\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("    destinationGroup: ").append(toIndentedString(destinationGroup)).append("\n");
    sb.append("    lastEntryRule: ").append(toIndentedString(lastEntryRule)).append("\n");
    sb.append("    sourceGroup: ").append(toIndentedString(sourceGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acls");
    openapiFields.add("destinationGroup");
    openapiFields.add("lastEntryRule");
    openapiFields.add("sourceGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationGroup");
    openapiRequiredFields.add("sourceGroup");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOrganizationAdaptivePolicyPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOrganizationAdaptivePolicyPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOrganizationAdaptivePolicyPolicyRequest is not found in the empty JSON string", CreateOrganizationAdaptivePolicyPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOrganizationAdaptivePolicyPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOrganizationAdaptivePolicyPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOrganizationAdaptivePolicyPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acls") != null && !jsonObj.get("acls").isJsonNull()) {
        JsonArray jsonArrayacls = jsonObj.getAsJsonArray("acls");
        if (jsonArrayacls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acls` to be an array in the JSON string but got `%s`", jsonObj.get("acls").toString()));
          }

          // validate the optional field `acls` (array)
          for (int i = 0; i < jsonArrayacls.size(); i++) {
            CreateOrganizationAdaptivePolicyPolicyRequestAclsInner.validateJsonElement(jsonArrayacls.get(i));
          };
        }
      }
      // validate the required field `destinationGroup`
      CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup.validateJsonElement(jsonObj.get("destinationGroup"));
      if ((jsonObj.get("lastEntryRule") != null && !jsonObj.get("lastEntryRule").isJsonNull()) && !jsonObj.get("lastEntryRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastEntryRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastEntryRule").toString()));
      }
      // validate the optional field `lastEntryRule`
      if (jsonObj.get("lastEntryRule") != null && !jsonObj.get("lastEntryRule").isJsonNull()) {
        LastEntryRuleEnum.validateJsonElement(jsonObj.get("lastEntryRule"));
      }
      // validate the required field `sourceGroup`
      CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup.validateJsonElement(jsonObj.get("sourceGroup"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOrganizationAdaptivePolicyPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOrganizationAdaptivePolicyPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOrganizationAdaptivePolicyPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOrganizationAdaptivePolicyPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOrganizationAdaptivePolicyPolicyRequest>() {
           @Override
           public void write(JsonWriter out, CreateOrganizationAdaptivePolicyPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOrganizationAdaptivePolicyPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOrganizationAdaptivePolicyPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOrganizationAdaptivePolicyPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOrganizationAdaptivePolicyPolicyRequest
   */
  public static CreateOrganizationAdaptivePolicyPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOrganizationAdaptivePolicyPolicyRequest.class);
  }

  /**
   * Convert an instance of CreateOrganizationAdaptivePolicyPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

