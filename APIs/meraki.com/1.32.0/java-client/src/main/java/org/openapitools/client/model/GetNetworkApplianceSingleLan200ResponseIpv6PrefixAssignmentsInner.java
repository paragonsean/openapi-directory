/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNetworkAppliancePrefixesDelegatedStaticRequestOrigin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner {
  public static final String SERIALIZED_NAME_AUTONOMOUS = "autonomous";
  @SerializedName(SERIALIZED_NAME_AUTONOMOUS)
  private Boolean autonomous;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private CreateNetworkAppliancePrefixesDelegatedStaticRequestOrigin origin;

  public static final String SERIALIZED_NAME_STATIC_APPLIANCE_IP6 = "staticApplianceIp6";
  @SerializedName(SERIALIZED_NAME_STATIC_APPLIANCE_IP6)
  private String staticApplianceIp6;

  public static final String SERIALIZED_NAME_STATIC_PREFIX = "staticPrefix";
  @SerializedName(SERIALIZED_NAME_STATIC_PREFIX)
  private String staticPrefix;

  public GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner() {
  }

  public GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner autonomous(Boolean autonomous) {
    this.autonomous = autonomous;
    return this;
  }

  /**
   * Auto assign a /64 prefix from the origin to the single LAN
   * @return autonomous
   */
  @javax.annotation.Nullable
  public Boolean getAutonomous() {
    return autonomous;
  }

  public void setAutonomous(Boolean autonomous) {
    this.autonomous = autonomous;
  }


  public GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner origin(CreateNetworkAppliancePrefixesDelegatedStaticRequestOrigin origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public CreateNetworkAppliancePrefixesDelegatedStaticRequestOrigin getOrigin() {
    return origin;
  }

  public void setOrigin(CreateNetworkAppliancePrefixesDelegatedStaticRequestOrigin origin) {
    this.origin = origin;
  }


  public GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner staticApplianceIp6(String staticApplianceIp6) {
    this.staticApplianceIp6 = staticApplianceIp6;
    return this;
  }

  /**
   * Manual configuration of the IPv6 Appliance IP
   * @return staticApplianceIp6
   */
  @javax.annotation.Nullable
  public String getStaticApplianceIp6() {
    return staticApplianceIp6;
  }

  public void setStaticApplianceIp6(String staticApplianceIp6) {
    this.staticApplianceIp6 = staticApplianceIp6;
  }


  public GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner staticPrefix(String staticPrefix) {
    this.staticPrefix = staticPrefix;
    return this;
  }

  /**
   * Manual configuration of a /64 prefix on the single LAN
   * @return staticPrefix
   */
  @javax.annotation.Nullable
  public String getStaticPrefix() {
    return staticPrefix;
  }

  public void setStaticPrefix(String staticPrefix) {
    this.staticPrefix = staticPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner getNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner = (GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner) o;
    return Objects.equals(this.autonomous, getNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.autonomous) &&
        Objects.equals(this.origin, getNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.origin) &&
        Objects.equals(this.staticApplianceIp6, getNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.staticApplianceIp6) &&
        Objects.equals(this.staticPrefix, getNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.staticPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autonomous, origin, staticApplianceIp6, staticPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner {\n");
    sb.append("    autonomous: ").append(toIndentedString(autonomous)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    staticApplianceIp6: ").append(toIndentedString(staticApplianceIp6)).append("\n");
    sb.append("    staticPrefix: ").append(toIndentedString(staticPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autonomous");
    openapiFields.add("origin");
    openapiFields.add("staticApplianceIp6");
    openapiFields.add("staticPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner is not found in the empty JSON string", GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        CreateNetworkAppliancePrefixesDelegatedStaticRequestOrigin.validateJsonElement(jsonObj.get("origin"));
      }
      if ((jsonObj.get("staticApplianceIp6") != null && !jsonObj.get("staticApplianceIp6").isJsonNull()) && !jsonObj.get("staticApplianceIp6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticApplianceIp6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticApplianceIp6").toString()));
      }
      if ((jsonObj.get("staticPrefix") != null && !jsonObj.get("staticPrefix").isJsonNull()) && !jsonObj.get("staticPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticPrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner
   */
  public static GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner.class);
  }

  /**
   * Convert an instance of GetNetworkApplianceSingleLan200ResponseIpv6PrefixAssignmentsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

