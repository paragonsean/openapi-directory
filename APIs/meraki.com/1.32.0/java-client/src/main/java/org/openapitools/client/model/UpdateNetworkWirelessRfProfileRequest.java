/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequestPerSsidSettings;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequestTransmission;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequestApBandSettings;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequestFiveGhzSettings;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessRfProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessRfProfileRequest {
  public static final String SERIALIZED_NAME_AP_BAND_SETTINGS = "apBandSettings";
  @SerializedName(SERIALIZED_NAME_AP_BAND_SETTINGS)
  private UpdateNetworkWirelessRfProfileRequestApBandSettings apBandSettings;

  /**
   * Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;.
   */
  @JsonAdapter(BandSelectionTypeEnum.Adapter.class)
  public enum BandSelectionTypeEnum {
    AP("ap"),
    
    SSID("ssid");

    private String value;

    BandSelectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BandSelectionTypeEnum fromValue(String value) {
      for (BandSelectionTypeEnum b : BandSelectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BandSelectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BandSelectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BandSelectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BandSelectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BandSelectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BAND_SELECTION_TYPE = "bandSelectionType";
  @SerializedName(SERIALIZED_NAME_BAND_SELECTION_TYPE)
  private BandSelectionTypeEnum bandSelectionType;

  public static final String SERIALIZED_NAME_CLIENT_BALANCING_ENABLED = "clientBalancingEnabled";
  @SerializedName(SERIALIZED_NAME_CLIENT_BALANCING_ENABLED)
  private Boolean clientBalancingEnabled;

  public static final String SERIALIZED_NAME_FIVE_GHZ_SETTINGS = "fiveGhzSettings";
  @SerializedName(SERIALIZED_NAME_FIVE_GHZ_SETTINGS)
  private UpdateNetworkWirelessRfProfileRequestFiveGhzSettings fiveGhzSettings;

  /**
   * Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;.
   */
  @JsonAdapter(MinBitrateTypeEnum.Adapter.class)
  public enum MinBitrateTypeEnum {
    BAND("band"),
    
    SSID("ssid");

    private String value;

    MinBitrateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinBitrateTypeEnum fromValue(String value) {
      for (MinBitrateTypeEnum b : MinBitrateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinBitrateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinBitrateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinBitrateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinBitrateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinBitrateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIN_BITRATE_TYPE = "minBitrateType";
  @SerializedName(SERIALIZED_NAME_MIN_BITRATE_TYPE)
  private MinBitrateTypeEnum minBitrateType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PER_SSID_SETTINGS = "perSsidSettings";
  @SerializedName(SERIALIZED_NAME_PER_SSID_SETTINGS)
  private CreateNetworkWirelessRfProfileRequestPerSsidSettings perSsidSettings;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private CreateNetworkWirelessRfProfileRequestTransmission transmission;

  public static final String SERIALIZED_NAME_TWO_FOUR_GHZ_SETTINGS = "twoFourGhzSettings";
  @SerializedName(SERIALIZED_NAME_TWO_FOUR_GHZ_SETTINGS)
  private UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings twoFourGhzSettings;

  public UpdateNetworkWirelessRfProfileRequest() {
  }

  public UpdateNetworkWirelessRfProfileRequest apBandSettings(UpdateNetworkWirelessRfProfileRequestApBandSettings apBandSettings) {
    this.apBandSettings = apBandSettings;
    return this;
  }

  /**
   * Get apBandSettings
   * @return apBandSettings
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessRfProfileRequestApBandSettings getApBandSettings() {
    return apBandSettings;
  }

  public void setApBandSettings(UpdateNetworkWirelessRfProfileRequestApBandSettings apBandSettings) {
    this.apBandSettings = apBandSettings;
  }


  public UpdateNetworkWirelessRfProfileRequest bandSelectionType(BandSelectionTypeEnum bandSelectionType) {
    this.bandSelectionType = bandSelectionType;
    return this;
  }

  /**
   * Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;.
   * @return bandSelectionType
   */
  @javax.annotation.Nullable
  public BandSelectionTypeEnum getBandSelectionType() {
    return bandSelectionType;
  }

  public void setBandSelectionType(BandSelectionTypeEnum bandSelectionType) {
    this.bandSelectionType = bandSelectionType;
  }


  public UpdateNetworkWirelessRfProfileRequest clientBalancingEnabled(Boolean clientBalancingEnabled) {
    this.clientBalancingEnabled = clientBalancingEnabled;
    return this;
  }

  /**
   * Steers client to best available access point. Can be either true or false.
   * @return clientBalancingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClientBalancingEnabled() {
    return clientBalancingEnabled;
  }

  public void setClientBalancingEnabled(Boolean clientBalancingEnabled) {
    this.clientBalancingEnabled = clientBalancingEnabled;
  }


  public UpdateNetworkWirelessRfProfileRequest fiveGhzSettings(UpdateNetworkWirelessRfProfileRequestFiveGhzSettings fiveGhzSettings) {
    this.fiveGhzSettings = fiveGhzSettings;
    return this;
  }

  /**
   * Get fiveGhzSettings
   * @return fiveGhzSettings
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessRfProfileRequestFiveGhzSettings getFiveGhzSettings() {
    return fiveGhzSettings;
  }

  public void setFiveGhzSettings(UpdateNetworkWirelessRfProfileRequestFiveGhzSettings fiveGhzSettings) {
    this.fiveGhzSettings = fiveGhzSettings;
  }


  public UpdateNetworkWirelessRfProfileRequest minBitrateType(MinBitrateTypeEnum minBitrateType) {
    this.minBitrateType = minBitrateType;
    return this;
  }

  /**
   * Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;.
   * @return minBitrateType
   */
  @javax.annotation.Nullable
  public MinBitrateTypeEnum getMinBitrateType() {
    return minBitrateType;
  }

  public void setMinBitrateType(MinBitrateTypeEnum minBitrateType) {
    this.minBitrateType = minBitrateType;
  }


  public UpdateNetworkWirelessRfProfileRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the new profile. Must be unique.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNetworkWirelessRfProfileRequest perSsidSettings(CreateNetworkWirelessRfProfileRequestPerSsidSettings perSsidSettings) {
    this.perSsidSettings = perSsidSettings;
    return this;
  }

  /**
   * Get perSsidSettings
   * @return perSsidSettings
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfileRequestPerSsidSettings getPerSsidSettings() {
    return perSsidSettings;
  }

  public void setPerSsidSettings(CreateNetworkWirelessRfProfileRequestPerSsidSettings perSsidSettings) {
    this.perSsidSettings = perSsidSettings;
  }


  public UpdateNetworkWirelessRfProfileRequest transmission(CreateNetworkWirelessRfProfileRequestTransmission transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfileRequestTransmission getTransmission() {
    return transmission;
  }

  public void setTransmission(CreateNetworkWirelessRfProfileRequestTransmission transmission) {
    this.transmission = transmission;
  }


  public UpdateNetworkWirelessRfProfileRequest twoFourGhzSettings(UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings twoFourGhzSettings) {
    this.twoFourGhzSettings = twoFourGhzSettings;
    return this;
  }

  /**
   * Get twoFourGhzSettings
   * @return twoFourGhzSettings
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings getTwoFourGhzSettings() {
    return twoFourGhzSettings;
  }

  public void setTwoFourGhzSettings(UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings twoFourGhzSettings) {
    this.twoFourGhzSettings = twoFourGhzSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest = (UpdateNetworkWirelessRfProfileRequest) o;
    return Objects.equals(this.apBandSettings, updateNetworkWirelessRfProfileRequest.apBandSettings) &&
        Objects.equals(this.bandSelectionType, updateNetworkWirelessRfProfileRequest.bandSelectionType) &&
        Objects.equals(this.clientBalancingEnabled, updateNetworkWirelessRfProfileRequest.clientBalancingEnabled) &&
        Objects.equals(this.fiveGhzSettings, updateNetworkWirelessRfProfileRequest.fiveGhzSettings) &&
        Objects.equals(this.minBitrateType, updateNetworkWirelessRfProfileRequest.minBitrateType) &&
        Objects.equals(this.name, updateNetworkWirelessRfProfileRequest.name) &&
        Objects.equals(this.perSsidSettings, updateNetworkWirelessRfProfileRequest.perSsidSettings) &&
        Objects.equals(this.transmission, updateNetworkWirelessRfProfileRequest.transmission) &&
        Objects.equals(this.twoFourGhzSettings, updateNetworkWirelessRfProfileRequest.twoFourGhzSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apBandSettings, bandSelectionType, clientBalancingEnabled, fiveGhzSettings, minBitrateType, name, perSsidSettings, transmission, twoFourGhzSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessRfProfileRequest {\n");
    sb.append("    apBandSettings: ").append(toIndentedString(apBandSettings)).append("\n");
    sb.append("    bandSelectionType: ").append(toIndentedString(bandSelectionType)).append("\n");
    sb.append("    clientBalancingEnabled: ").append(toIndentedString(clientBalancingEnabled)).append("\n");
    sb.append("    fiveGhzSettings: ").append(toIndentedString(fiveGhzSettings)).append("\n");
    sb.append("    minBitrateType: ").append(toIndentedString(minBitrateType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    perSsidSettings: ").append(toIndentedString(perSsidSettings)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    twoFourGhzSettings: ").append(toIndentedString(twoFourGhzSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apBandSettings");
    openapiFields.add("bandSelectionType");
    openapiFields.add("clientBalancingEnabled");
    openapiFields.add("fiveGhzSettings");
    openapiFields.add("minBitrateType");
    openapiFields.add("name");
    openapiFields.add("perSsidSettings");
    openapiFields.add("transmission");
    openapiFields.add("twoFourGhzSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessRfProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessRfProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessRfProfileRequest is not found in the empty JSON string", UpdateNetworkWirelessRfProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessRfProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessRfProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apBandSettings`
      if (jsonObj.get("apBandSettings") != null && !jsonObj.get("apBandSettings").isJsonNull()) {
        UpdateNetworkWirelessRfProfileRequestApBandSettings.validateJsonElement(jsonObj.get("apBandSettings"));
      }
      if ((jsonObj.get("bandSelectionType") != null && !jsonObj.get("bandSelectionType").isJsonNull()) && !jsonObj.get("bandSelectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandSelectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandSelectionType").toString()));
      }
      // validate the optional field `bandSelectionType`
      if (jsonObj.get("bandSelectionType") != null && !jsonObj.get("bandSelectionType").isJsonNull()) {
        BandSelectionTypeEnum.validateJsonElement(jsonObj.get("bandSelectionType"));
      }
      // validate the optional field `fiveGhzSettings`
      if (jsonObj.get("fiveGhzSettings") != null && !jsonObj.get("fiveGhzSettings").isJsonNull()) {
        UpdateNetworkWirelessRfProfileRequestFiveGhzSettings.validateJsonElement(jsonObj.get("fiveGhzSettings"));
      }
      if ((jsonObj.get("minBitrateType") != null && !jsonObj.get("minBitrateType").isJsonNull()) && !jsonObj.get("minBitrateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minBitrateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minBitrateType").toString()));
      }
      // validate the optional field `minBitrateType`
      if (jsonObj.get("minBitrateType") != null && !jsonObj.get("minBitrateType").isJsonNull()) {
        MinBitrateTypeEnum.validateJsonElement(jsonObj.get("minBitrateType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `perSsidSettings`
      if (jsonObj.get("perSsidSettings") != null && !jsonObj.get("perSsidSettings").isJsonNull()) {
        CreateNetworkWirelessRfProfileRequestPerSsidSettings.validateJsonElement(jsonObj.get("perSsidSettings"));
      }
      // validate the optional field `transmission`
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        CreateNetworkWirelessRfProfileRequestTransmission.validateJsonElement(jsonObj.get("transmission"));
      }
      // validate the optional field `twoFourGhzSettings`
      if (jsonObj.get("twoFourGhzSettings") != null && !jsonObj.get("twoFourGhzSettings").isJsonNull()) {
        UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.validateJsonElement(jsonObj.get("twoFourGhzSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessRfProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessRfProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessRfProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessRfProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessRfProfileRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessRfProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessRfProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessRfProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessRfProfileRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessRfProfileRequest
   */
  public static UpdateNetworkWirelessRfProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessRfProfileRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessRfProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

