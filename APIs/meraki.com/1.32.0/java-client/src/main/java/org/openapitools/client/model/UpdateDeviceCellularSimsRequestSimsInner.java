/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateDeviceCellularSimsRequestSimsInnerApnsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeviceCellularSimsRequestSimsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceCellularSimsRequestSimsInner {
  public static final String SERIALIZED_NAME_APNS = "apns";
  @SerializedName(SERIALIZED_NAME_APNS)
  private List<UpdateDeviceCellularSimsRequestSimsInnerApnsInner> apns = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PRIMARY = "isPrimary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary = false;

  /**
   * SIM slot being configured. Must be &#39;sim1&#39; on single-sim devices.
   */
  @JsonAdapter(SlotEnum.Adapter.class)
  public enum SlotEnum {
    SIM1("sim1"),
    
    SIM2("sim2");

    private String value;

    SlotEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SlotEnum fromValue(String value) {
      for (SlotEnum b : SlotEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SlotEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SlotEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SlotEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SlotEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SlotEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SLOT = "slot";
  @SerializedName(SERIALIZED_NAME_SLOT)
  private SlotEnum slot;

  public UpdateDeviceCellularSimsRequestSimsInner() {
  }

  public UpdateDeviceCellularSimsRequestSimsInner apns(List<UpdateDeviceCellularSimsRequestSimsInnerApnsInner> apns) {
    this.apns = apns;
    return this;
  }

  public UpdateDeviceCellularSimsRequestSimsInner addApnsItem(UpdateDeviceCellularSimsRequestSimsInnerApnsInner apnsItem) {
    if (this.apns == null) {
      this.apns = new ArrayList<>();
    }
    this.apns.add(apnsItem);
    return this;
  }

  /**
   * APN configurations. If empty, the default APN will be used.
   * @return apns
   */
  @javax.annotation.Nullable
  public List<UpdateDeviceCellularSimsRequestSimsInnerApnsInner> getApns() {
    return apns;
  }

  public void setApns(List<UpdateDeviceCellularSimsRequestSimsInnerApnsInner> apns) {
    this.apns = apns;
  }


  public UpdateDeviceCellularSimsRequestSimsInner isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

  /**
   * If true, this SIM is used for boot. Must be true on single-sim devices.
   * @return isPrimary
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public UpdateDeviceCellularSimsRequestSimsInner slot(SlotEnum slot) {
    this.slot = slot;
    return this;
  }

  /**
   * SIM slot being configured. Must be &#39;sim1&#39; on single-sim devices.
   * @return slot
   */
  @javax.annotation.Nullable
  public SlotEnum getSlot() {
    return slot;
  }

  public void setSlot(SlotEnum slot) {
    this.slot = slot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceCellularSimsRequestSimsInner updateDeviceCellularSimsRequestSimsInner = (UpdateDeviceCellularSimsRequestSimsInner) o;
    return Objects.equals(this.apns, updateDeviceCellularSimsRequestSimsInner.apns) &&
        Objects.equals(this.isPrimary, updateDeviceCellularSimsRequestSimsInner.isPrimary) &&
        Objects.equals(this.slot, updateDeviceCellularSimsRequestSimsInner.slot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apns, isPrimary, slot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceCellularSimsRequestSimsInner {\n");
    sb.append("    apns: ").append(toIndentedString(apns)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apns");
    openapiFields.add("isPrimary");
    openapiFields.add("slot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceCellularSimsRequestSimsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceCellularSimsRequestSimsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceCellularSimsRequestSimsInner is not found in the empty JSON string", UpdateDeviceCellularSimsRequestSimsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceCellularSimsRequestSimsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceCellularSimsRequestSimsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("apns") != null && !jsonObj.get("apns").isJsonNull()) {
        JsonArray jsonArrayapns = jsonObj.getAsJsonArray("apns");
        if (jsonArrayapns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apns` to be an array in the JSON string but got `%s`", jsonObj.get("apns").toString()));
          }

          // validate the optional field `apns` (array)
          for (int i = 0; i < jsonArrayapns.size(); i++) {
            UpdateDeviceCellularSimsRequestSimsInnerApnsInner.validateJsonElement(jsonArrayapns.get(i));
          };
        }
      }
      if ((jsonObj.get("slot") != null && !jsonObj.get("slot").isJsonNull()) && !jsonObj.get("slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slot").toString()));
      }
      // validate the optional field `slot`
      if (jsonObj.get("slot") != null && !jsonObj.get("slot").isJsonNull()) {
        SlotEnum.validateJsonElement(jsonObj.get("slot"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceCellularSimsRequestSimsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceCellularSimsRequestSimsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceCellularSimsRequestSimsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceCellularSimsRequestSimsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceCellularSimsRequestSimsInner>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceCellularSimsRequestSimsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceCellularSimsRequestSimsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceCellularSimsRequestSimsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceCellularSimsRequestSimsInner
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceCellularSimsRequestSimsInner
   */
  public static UpdateDeviceCellularSimsRequestSimsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceCellularSimsRequestSimsInner.class);
  }

  /**
   * Convert an instance of UpdateDeviceCellularSimsRequestSimsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

