/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner {
  public static final String SERIALIZED_NAME_DURATION_IN_DAYS = "durationInDays";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_DAYS)
  private Integer durationInDays;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LICENSE_KEY = "licenseKey";
  @SerializedName(SERIALIZED_NAME_LICENSE_KEY)
  private String licenseKey;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private String licenseType;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner() {
  }

  public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner durationInDays(Integer durationInDays) {
    this.durationInDays = durationInDays;
    return this;
  }

  /**
   * The duration of the individual license
   * @return durationInDays
   */
  @javax.annotation.Nullable
  public Integer getDurationInDays() {
    return durationInDays;
  }

  public void setDurationInDays(Integer durationInDays) {
    this.durationInDays = durationInDays;
  }


  public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Permanently queued license ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner licenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

  /**
   * License key
   * @return licenseKey
   */
  @javax.annotation.Nullable
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
  }


  public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner licenseType(String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * License type
   * @return licenseType
   */
  @javax.annotation.Nullable
  public String getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(String licenseType) {
    this.licenseType = licenseType;
  }


  public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * Order number
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner getOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner = (GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner) o;
    return Objects.equals(this.durationInDays, getOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.durationInDays) &&
        Objects.equals(this.id, getOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.id) &&
        Objects.equals(this.licenseKey, getOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.licenseKey) &&
        Objects.equals(this.licenseType, getOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.licenseType) &&
        Objects.equals(this.orderNumber, getOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.orderNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(durationInDays, id, licenseKey, licenseType, orderNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner {\n");
    sb.append("    durationInDays: ").append(toIndentedString(durationInDays)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("durationInDays");
    openapiFields.add("id");
    openapiFields.add("licenseKey");
    openapiFields.add("licenseType");
    openapiFields.add("orderNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner is not found in the empty JSON string", GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("licenseKey") != null && !jsonObj.get("licenseKey").isJsonNull()) && !jsonObj.get("licenseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseKey").toString()));
      }
      if ((jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) && !jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner>() {
           @Override
           public void write(JsonWriter out, GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner
   */
  public static GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.class);
  }

  /**
   * Convert an instance of GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

