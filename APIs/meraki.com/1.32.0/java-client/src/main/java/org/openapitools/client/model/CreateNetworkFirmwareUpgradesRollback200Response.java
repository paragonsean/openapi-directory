/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200ResponseToVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkFirmwareUpgradesRollback200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkFirmwareUpgradesRollback200Response {
  /**
   * Product type to rollback (if the network is a combined network)
   */
  @JsonAdapter(ProductEnum.Adapter.class)
  public enum ProductEnum {
    APPLIANCE("appliance"),
    
    CAMERA("camera"),
    
    CELLULAR_GATEWAY("cellularGateway"),
    
    SWITCH("switch"),
    
    WIRELESS("wireless");

    private String value;

    ProductEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductEnum fromValue(String value) {
      for (ProductEnum b : ProductEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProductEnum product;

  public static final String SERIALIZED_NAME_REASONS = "reasons";
  @SerializedName(SERIALIZED_NAME_REASONS)
  private List<CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner> reasons = new ArrayList<>();

  /**
   * Status of the rollback
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CANCELED("canceled"),
    
    COMPLETED("completed"),
    
    IN_PROGRESS("in_progress"),
    
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_TO_VERSION = "toVersion";
  @SerializedName(SERIALIZED_NAME_TO_VERSION)
  private CreateNetworkFirmwareUpgradesRollback200ResponseToVersion toVersion;

  public static final String SERIALIZED_NAME_UPGRADE_BATCH_ID = "upgradeBatchId";
  @SerializedName(SERIALIZED_NAME_UPGRADE_BATCH_ID)
  private String upgradeBatchId;

  public CreateNetworkFirmwareUpgradesRollback200Response() {
  }

  public CreateNetworkFirmwareUpgradesRollback200Response product(ProductEnum product) {
    this.product = product;
    return this;
  }

  /**
   * Product type to rollback (if the network is a combined network)
   * @return product
   */
  @javax.annotation.Nullable
  public ProductEnum getProduct() {
    return product;
  }

  public void setProduct(ProductEnum product) {
    this.product = product;
  }


  public CreateNetworkFirmwareUpgradesRollback200Response reasons(List<CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner> reasons) {
    this.reasons = reasons;
    return this;
  }

  public CreateNetworkFirmwareUpgradesRollback200Response addReasonsItem(CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner reasonsItem) {
    if (this.reasons == null) {
      this.reasons = new ArrayList<>();
    }
    this.reasons.add(reasonsItem);
    return this;
  }

  /**
   * Reasons for the rollback
   * @return reasons
   */
  @javax.annotation.Nullable
  public List<CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner> getReasons() {
    return reasons;
  }

  public void setReasons(List<CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner> reasons) {
    this.reasons = reasons;
  }


  public CreateNetworkFirmwareUpgradesRollback200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the rollback
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CreateNetworkFirmwareUpgradesRollback200Response time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Scheduled time for the rollback
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }


  public CreateNetworkFirmwareUpgradesRollback200Response toVersion(CreateNetworkFirmwareUpgradesRollback200ResponseToVersion toVersion) {
    this.toVersion = toVersion;
    return this;
  }

  /**
   * Get toVersion
   * @return toVersion
   */
  @javax.annotation.Nullable
  public CreateNetworkFirmwareUpgradesRollback200ResponseToVersion getToVersion() {
    return toVersion;
  }

  public void setToVersion(CreateNetworkFirmwareUpgradesRollback200ResponseToVersion toVersion) {
    this.toVersion = toVersion;
  }


  public CreateNetworkFirmwareUpgradesRollback200Response upgradeBatchId(String upgradeBatchId) {
    this.upgradeBatchId = upgradeBatchId;
    return this;
  }

  /**
   * Batch ID of the firmware rollback
   * @return upgradeBatchId
   */
  @javax.annotation.Nullable
  public String getUpgradeBatchId() {
    return upgradeBatchId;
  }

  public void setUpgradeBatchId(String upgradeBatchId) {
    this.upgradeBatchId = upgradeBatchId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkFirmwareUpgradesRollback200Response createNetworkFirmwareUpgradesRollback200Response = (CreateNetworkFirmwareUpgradesRollback200Response) o;
    return Objects.equals(this.product, createNetworkFirmwareUpgradesRollback200Response.product) &&
        Objects.equals(this.reasons, createNetworkFirmwareUpgradesRollback200Response.reasons) &&
        Objects.equals(this.status, createNetworkFirmwareUpgradesRollback200Response.status) &&
        Objects.equals(this.time, createNetworkFirmwareUpgradesRollback200Response.time) &&
        Objects.equals(this.toVersion, createNetworkFirmwareUpgradesRollback200Response.toVersion) &&
        Objects.equals(this.upgradeBatchId, createNetworkFirmwareUpgradesRollback200Response.upgradeBatchId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(product, reasons, status, time, toVersion, upgradeBatchId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkFirmwareUpgradesRollback200Response {\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    toVersion: ").append(toIndentedString(toVersion)).append("\n");
    sb.append("    upgradeBatchId: ").append(toIndentedString(upgradeBatchId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product");
    openapiFields.add("reasons");
    openapiFields.add("status");
    openapiFields.add("time");
    openapiFields.add("toVersion");
    openapiFields.add("upgradeBatchId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkFirmwareUpgradesRollback200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkFirmwareUpgradesRollback200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkFirmwareUpgradesRollback200Response is not found in the empty JSON string", CreateNetworkFirmwareUpgradesRollback200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkFirmwareUpgradesRollback200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkFirmwareUpgradesRollback200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ProductEnum.validateJsonElement(jsonObj.get("product"));
      }
      if (jsonObj.get("reasons") != null && !jsonObj.get("reasons").isJsonNull()) {
        JsonArray jsonArrayreasons = jsonObj.getAsJsonArray("reasons");
        if (jsonArrayreasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reasons` to be an array in the JSON string but got `%s`", jsonObj.get("reasons").toString()));
          }

          // validate the optional field `reasons` (array)
          for (int i = 0; i < jsonArrayreasons.size(); i++) {
            CreateNetworkFirmwareUpgradesRollback200ResponseReasonsInner.validateJsonElement(jsonArrayreasons.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `toVersion`
      if (jsonObj.get("toVersion") != null && !jsonObj.get("toVersion").isJsonNull()) {
        CreateNetworkFirmwareUpgradesRollback200ResponseToVersion.validateJsonElement(jsonObj.get("toVersion"));
      }
      if ((jsonObj.get("upgradeBatchId") != null && !jsonObj.get("upgradeBatchId").isJsonNull()) && !jsonObj.get("upgradeBatchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeBatchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeBatchId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkFirmwareUpgradesRollback200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkFirmwareUpgradesRollback200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkFirmwareUpgradesRollback200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkFirmwareUpgradesRollback200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkFirmwareUpgradesRollback200Response>() {
           @Override
           public void write(JsonWriter out, CreateNetworkFirmwareUpgradesRollback200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkFirmwareUpgradesRollback200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkFirmwareUpgradesRollback200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkFirmwareUpgradesRollback200Response
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkFirmwareUpgradesRollback200Response
   */
  public static CreateNetworkFirmwareUpgradesRollback200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkFirmwareUpgradesRollback200Response.class);
  }

  /**
   * Convert an instance of CreateNetworkFirmwareUpgradesRollback200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

