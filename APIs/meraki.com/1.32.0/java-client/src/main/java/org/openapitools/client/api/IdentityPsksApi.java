/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.GetNetworkWirelessSsidIdentityPsks200ResponseInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidIdentityPskRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentityPsksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentityPsksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityPsksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkWirelessSsidIdentityPsk_2
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWirelessSsidIdentityPsk_2Call(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWirelessSsidIdentityPskRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling createNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'createNetworkWirelessSsidIdentityPskRequest' is set
        if (createNetworkWirelessSsidIdentityPskRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWirelessSsidIdentityPskRequest' when calling createNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        return createNetworkWirelessSsidIdentityPsk_2Call(networkId, number, createNetworkWirelessSsidIdentityPskRequest, _callback);

    }

    /**
     * Create an Identity PSK
     * Create an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkWirelessSsidIdentityPsk_2(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkWirelessSsidIdentityPsk_2WithHttpInfo(networkId, number, createNetworkWirelessSsidIdentityPskRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Identity PSK
     * Create an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkWirelessSsidIdentityPsk_2WithHttpInfo(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, createNetworkWirelessSsidIdentityPskRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Identity PSK (asynchronously)
     * Create an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWirelessSsidIdentityPsk_2Async(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, createNetworkWirelessSsidIdentityPskRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWirelessSsidIdentityPsk_2
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWirelessSsidIdentityPsk_2Call(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()))
            .replace("{" + "identityPskId" + "}", localVarApiClient.escapeString(identityPskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling deleteNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'identityPskId' is set
        if (identityPskId == null) {
            throw new ApiException("Missing the required parameter 'identityPskId' when calling deleteNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        return deleteNetworkWirelessSsidIdentityPsk_2Call(networkId, number, identityPskId, _callback);

    }

    /**
     * Delete an Identity PSK
     * Delete an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWirelessSsidIdentityPsk_2(String networkId, String number, String identityPskId) throws ApiException {
        deleteNetworkWirelessSsidIdentityPsk_2WithHttpInfo(networkId, number, identityPskId);
    }

    /**
     * Delete an Identity PSK
     * Delete an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWirelessSsidIdentityPsk_2WithHttpInfo(String networkId, String number, String identityPskId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, identityPskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Identity PSK (asynchronously)
     * Delete an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWirelessSsidIdentityPsk_2Async(String networkId, String number, String identityPskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, identityPskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidIdentityPsk_2
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsk_2Call(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()))
            .replace("{" + "identityPskId" + "}", localVarApiClient.escapeString(identityPskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'identityPskId' is set
        if (identityPskId == null) {
            throw new ApiException("Missing the required parameter 'identityPskId' when calling getNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        return getNetworkWirelessSsidIdentityPsk_2Call(networkId, number, identityPskId, _callback);

    }

    /**
     * Return an Identity PSK
     * Return an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @return GetNetworkWirelessSsidIdentityPsks200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSsidIdentityPsks200ResponseInner getNetworkWirelessSsidIdentityPsk_2(String networkId, String number, String identityPskId) throws ApiException {
        ApiResponse<GetNetworkWirelessSsidIdentityPsks200ResponseInner> localVarResp = getNetworkWirelessSsidIdentityPsk_2WithHttpInfo(networkId, number, identityPskId);
        return localVarResp.getData();
    }

    /**
     * Return an Identity PSK
     * Return an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @return ApiResponse&lt;GetNetworkWirelessSsidIdentityPsks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSsidIdentityPsks200ResponseInner> getNetworkWirelessSsidIdentityPsk_2WithHttpInfo(String networkId, String number, String identityPskId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, identityPskId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidIdentityPsks200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an Identity PSK (asynchronously)
     * Return an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsk_2Async(String networkId, String number, String identityPskId, final ApiCallback<GetNetworkWirelessSsidIdentityPsks200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, identityPskId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidIdentityPsks200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidIdentityPsks_2
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsks_2Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidIdentityPsks_2ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsks_2(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsks_2(Async)");
        }

        return getNetworkWirelessSsidIdentityPsks_2Call(networkId, number, _callback);

    }

    /**
     * List all Identity PSKs in a wireless network
     * List all Identity PSKs in a wireless network
     * @param networkId  (required)
     * @param number  (required)
     * @return List&lt;GetNetworkWirelessSsidIdentityPsks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWirelessSsidIdentityPsks200ResponseInner> getNetworkWirelessSsidIdentityPsks_2(String networkId, String number) throws ApiException {
        ApiResponse<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>> localVarResp = getNetworkWirelessSsidIdentityPsks_2WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * List all Identity PSKs in a wireless network
     * List all Identity PSKs in a wireless network
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWirelessSsidIdentityPsks200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>> getNetworkWirelessSsidIdentityPsks_2WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsks_2ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Identity PSKs in a wireless network (asynchronously)
     * List all Identity PSKs in a wireless network
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsks_2Async(String networkId, String number, final ApiCallback<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsks_2ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidIdentityPsk_2
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidIdentityPsk_2Call(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidIdentityPskRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()))
            .replace("{" + "identityPskId" + "}", localVarApiClient.escapeString(identityPskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        // verify the required parameter 'identityPskId' is set
        if (identityPskId == null) {
            throw new ApiException("Missing the required parameter 'identityPskId' when calling updateNetworkWirelessSsidIdentityPsk_2(Async)");
        }

        return updateNetworkWirelessSsidIdentityPsk_2Call(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest, _callback);

    }

    /**
     * Update an Identity PSK
     * Update an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidIdentityPsk_2(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidIdentityPsk_2WithHttpInfo(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Identity PSK
     * Update an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidIdentityPsk_2WithHttpInfo(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Identity PSK (asynchronously)
     * Update an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidIdentityPsk_2Async(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidIdentityPsk_2ValidateBeforeCall(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
