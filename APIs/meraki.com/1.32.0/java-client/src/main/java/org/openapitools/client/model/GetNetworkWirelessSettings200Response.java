/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkWirelessSettings200ResponseNamedVlans;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkWirelessSettings200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessSettings200Response {
  public static final String SERIALIZED_NAME_IPV6_BRIDGE_ENABLED = "ipv6BridgeEnabled";
  @SerializedName(SERIALIZED_NAME_IPV6_BRIDGE_ENABLED)
  private Boolean ipv6BridgeEnabled;

  public static final String SERIALIZED_NAME_LED_LIGHTS_ON = "ledLightsOn";
  @SerializedName(SERIALIZED_NAME_LED_LIGHTS_ON)
  private Boolean ledLightsOn;

  public static final String SERIALIZED_NAME_LOCATION_ANALYTICS_ENABLED = "locationAnalyticsEnabled";
  @SerializedName(SERIALIZED_NAME_LOCATION_ANALYTICS_ENABLED)
  private Boolean locationAnalyticsEnabled;

  public static final String SERIALIZED_NAME_MESHING_ENABLED = "meshingEnabled";
  @SerializedName(SERIALIZED_NAME_MESHING_ENABLED)
  private Boolean meshingEnabled;

  public static final String SERIALIZED_NAME_NAMED_VLANS = "namedVlans";
  @SerializedName(SERIALIZED_NAME_NAMED_VLANS)
  private GetNetworkWirelessSettings200ResponseNamedVlans namedVlans;

  /**
   * The upgrade strategy to apply to the network. Must be one of &#39;minimizeUpgradeTime&#39; or &#39;minimizeClientDowntime&#39;. Requires firmware version MR 26.8 or higher&#39;
   */
  @JsonAdapter(UpgradeStrategyEnum.Adapter.class)
  public enum UpgradeStrategyEnum {
    MINIMIZE_CLIENT_DOWNTIME("minimizeClientDowntime"),
    
    MINIMIZE_UPGRADE_TIME("minimizeUpgradeTime");

    private String value;

    UpgradeStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpgradeStrategyEnum fromValue(String value) {
      for (UpgradeStrategyEnum b : UpgradeStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpgradeStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpgradeStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpgradeStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpgradeStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpgradeStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPGRADE_STRATEGY = "upgradeStrategy";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STRATEGY)
  private UpgradeStrategyEnum upgradeStrategy;

  public GetNetworkWirelessSettings200Response() {
  }

  public GetNetworkWirelessSettings200Response ipv6BridgeEnabled(Boolean ipv6BridgeEnabled) {
    this.ipv6BridgeEnabled = ipv6BridgeEnabled;
    return this;
  }

  /**
   * Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
   * @return ipv6BridgeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIpv6BridgeEnabled() {
    return ipv6BridgeEnabled;
  }

  public void setIpv6BridgeEnabled(Boolean ipv6BridgeEnabled) {
    this.ipv6BridgeEnabled = ipv6BridgeEnabled;
  }


  public GetNetworkWirelessSettings200Response ledLightsOn(Boolean ledLightsOn) {
    this.ledLightsOn = ledLightsOn;
    return this;
  }

  /**
   * Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
   * @return ledLightsOn
   */
  @javax.annotation.Nullable
  public Boolean getLedLightsOn() {
    return ledLightsOn;
  }

  public void setLedLightsOn(Boolean ledLightsOn) {
    this.ledLightsOn = ledLightsOn;
  }


  public GetNetworkWirelessSettings200Response locationAnalyticsEnabled(Boolean locationAnalyticsEnabled) {
    this.locationAnalyticsEnabled = locationAnalyticsEnabled;
    return this;
  }

  /**
   * Toggle for enabling or disabling location analytics for your network
   * @return locationAnalyticsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLocationAnalyticsEnabled() {
    return locationAnalyticsEnabled;
  }

  public void setLocationAnalyticsEnabled(Boolean locationAnalyticsEnabled) {
    this.locationAnalyticsEnabled = locationAnalyticsEnabled;
  }


  public GetNetworkWirelessSettings200Response meshingEnabled(Boolean meshingEnabled) {
    this.meshingEnabled = meshingEnabled;
    return this;
  }

  /**
   * Toggle for enabling or disabling meshing in a network
   * @return meshingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMeshingEnabled() {
    return meshingEnabled;
  }

  public void setMeshingEnabled(Boolean meshingEnabled) {
    this.meshingEnabled = meshingEnabled;
  }


  public GetNetworkWirelessSettings200Response namedVlans(GetNetworkWirelessSettings200ResponseNamedVlans namedVlans) {
    this.namedVlans = namedVlans;
    return this;
  }

  /**
   * Get namedVlans
   * @return namedVlans
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSettings200ResponseNamedVlans getNamedVlans() {
    return namedVlans;
  }

  public void setNamedVlans(GetNetworkWirelessSettings200ResponseNamedVlans namedVlans) {
    this.namedVlans = namedVlans;
  }


  public GetNetworkWirelessSettings200Response upgradeStrategy(UpgradeStrategyEnum upgradeStrategy) {
    this.upgradeStrategy = upgradeStrategy;
    return this;
  }

  /**
   * The upgrade strategy to apply to the network. Must be one of &#39;minimizeUpgradeTime&#39; or &#39;minimizeClientDowntime&#39;. Requires firmware version MR 26.8 or higher&#39;
   * @return upgradeStrategy
   */
  @javax.annotation.Nullable
  public UpgradeStrategyEnum getUpgradeStrategy() {
    return upgradeStrategy;
  }

  public void setUpgradeStrategy(UpgradeStrategyEnum upgradeStrategy) {
    this.upgradeStrategy = upgradeStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessSettings200Response getNetworkWirelessSettings200Response = (GetNetworkWirelessSettings200Response) o;
    return Objects.equals(this.ipv6BridgeEnabled, getNetworkWirelessSettings200Response.ipv6BridgeEnabled) &&
        Objects.equals(this.ledLightsOn, getNetworkWirelessSettings200Response.ledLightsOn) &&
        Objects.equals(this.locationAnalyticsEnabled, getNetworkWirelessSettings200Response.locationAnalyticsEnabled) &&
        Objects.equals(this.meshingEnabled, getNetworkWirelessSettings200Response.meshingEnabled) &&
        Objects.equals(this.namedVlans, getNetworkWirelessSettings200Response.namedVlans) &&
        Objects.equals(this.upgradeStrategy, getNetworkWirelessSettings200Response.upgradeStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipv6BridgeEnabled, ledLightsOn, locationAnalyticsEnabled, meshingEnabled, namedVlans, upgradeStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessSettings200Response {\n");
    sb.append("    ipv6BridgeEnabled: ").append(toIndentedString(ipv6BridgeEnabled)).append("\n");
    sb.append("    ledLightsOn: ").append(toIndentedString(ledLightsOn)).append("\n");
    sb.append("    locationAnalyticsEnabled: ").append(toIndentedString(locationAnalyticsEnabled)).append("\n");
    sb.append("    meshingEnabled: ").append(toIndentedString(meshingEnabled)).append("\n");
    sb.append("    namedVlans: ").append(toIndentedString(namedVlans)).append("\n");
    sb.append("    upgradeStrategy: ").append(toIndentedString(upgradeStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipv6BridgeEnabled");
    openapiFields.add("ledLightsOn");
    openapiFields.add("locationAnalyticsEnabled");
    openapiFields.add("meshingEnabled");
    openapiFields.add("namedVlans");
    openapiFields.add("upgradeStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessSettings200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessSettings200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessSettings200Response is not found in the empty JSON string", GetNetworkWirelessSettings200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessSettings200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessSettings200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `namedVlans`
      if (jsonObj.get("namedVlans") != null && !jsonObj.get("namedVlans").isJsonNull()) {
        GetNetworkWirelessSettings200ResponseNamedVlans.validateJsonElement(jsonObj.get("namedVlans"));
      }
      if ((jsonObj.get("upgradeStrategy") != null && !jsonObj.get("upgradeStrategy").isJsonNull()) && !jsonObj.get("upgradeStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeStrategy").toString()));
      }
      // validate the optional field `upgradeStrategy`
      if (jsonObj.get("upgradeStrategy") != null && !jsonObj.get("upgradeStrategy").isJsonNull()) {
        UpgradeStrategyEnum.validateJsonElement(jsonObj.get("upgradeStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessSettings200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessSettings200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessSettings200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessSettings200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessSettings200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessSettings200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessSettings200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessSettings200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessSettings200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessSettings200Response
   */
  public static GetNetworkWirelessSettings200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessSettings200Response.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessSettings200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

