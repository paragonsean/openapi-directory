/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthenticationClientRootCaCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current setting for certificate verification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication {
  public static final String SERIALIZED_NAME_CLIENT_ROOT_CA_CERTIFICATE = "clientRootCaCertificate";
  @SerializedName(SERIALIZED_NAME_CLIENT_ROOT_CA_CERTIFICATE)
  private UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthenticationClientRootCaCertificate clientRootCaCertificate;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_OCSP_RESPONDER_URL = "ocspResponderUrl";
  @SerializedName(SERIALIZED_NAME_OCSP_RESPONDER_URL)
  private String ocspResponderUrl;

  public static final String SERIALIZED_NAME_USE_LDAP = "useLdap";
  @SerializedName(SERIALIZED_NAME_USE_LDAP)
  private Boolean useLdap;

  public static final String SERIALIZED_NAME_USE_OCSP = "useOcsp";
  @SerializedName(SERIALIZED_NAME_USE_OCSP)
  private Boolean useOcsp;

  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication() {
  }

  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication clientRootCaCertificate(UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthenticationClientRootCaCertificate clientRootCaCertificate) {
    this.clientRootCaCertificate = clientRootCaCertificate;
    return this;
  }

  /**
   * Get clientRootCaCertificate
   * @return clientRootCaCertificate
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthenticationClientRootCaCertificate getClientRootCaCertificate() {
    return clientRootCaCertificate;
  }

  public void setClientRootCaCertificate(UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthenticationClientRootCaCertificate clientRootCaCertificate) {
    this.clientRootCaCertificate = clientRootCaCertificate;
  }


  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication ocspResponderUrl(String ocspResponderUrl) {
    this.ocspResponderUrl = ocspResponderUrl;
    return this;
  }

  /**
   * (Optional) The URL of the OCSP responder to verify client certificate status.
   * @return ocspResponderUrl
   */
  @javax.annotation.Nullable
  public String getOcspResponderUrl() {
    return ocspResponderUrl;
  }

  public void setOcspResponderUrl(String ocspResponderUrl) {
    this.ocspResponderUrl = ocspResponderUrl;
  }


  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication useLdap(Boolean useLdap) {
    this.useLdap = useLdap;
    return this;
  }

  /**
   * Whether or not to verify the certificate with LDAP.
   * @return useLdap
   */
  @javax.annotation.Nullable
  public Boolean getUseLdap() {
    return useLdap;
  }

  public void setUseLdap(Boolean useLdap) {
    this.useLdap = useLdap;
  }


  public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication useOcsp(Boolean useOcsp) {
    this.useOcsp = useOcsp;
    return this;
  }

  /**
   * Whether or not to verify the certificate with OCSP.
   * @return useOcsp
   */
  @javax.annotation.Nullable
  public Boolean getUseOcsp() {
    return useOcsp;
  }

  public void setUseOcsp(Boolean useOcsp) {
    this.useOcsp = useOcsp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication updateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication = (UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication) o;
    return Objects.equals(this.clientRootCaCertificate, updateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.clientRootCaCertificate) &&
        Objects.equals(this.enabled, updateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.enabled) &&
        Objects.equals(this.ocspResponderUrl, updateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.ocspResponderUrl) &&
        Objects.equals(this.useLdap, updateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.useLdap) &&
        Objects.equals(this.useOcsp, updateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.useOcsp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRootCaCertificate, enabled, ocspResponderUrl, useLdap, useOcsp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication {\n");
    sb.append("    clientRootCaCertificate: ").append(toIndentedString(clientRootCaCertificate)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ocspResponderUrl: ").append(toIndentedString(ocspResponderUrl)).append("\n");
    sb.append("    useLdap: ").append(toIndentedString(useLdap)).append("\n");
    sb.append("    useOcsp: ").append(toIndentedString(useOcsp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientRootCaCertificate");
    openapiFields.add("enabled");
    openapiFields.add("ocspResponderUrl");
    openapiFields.add("useLdap");
    openapiFields.add("useOcsp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication is not found in the empty JSON string", UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientRootCaCertificate`
      if (jsonObj.get("clientRootCaCertificate") != null && !jsonObj.get("clientRootCaCertificate").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthenticationClientRootCaCertificate.validateJsonElement(jsonObj.get("clientRootCaCertificate"));
      }
      if ((jsonObj.get("ocspResponderUrl") != null && !jsonObj.get("ocspResponderUrl").isJsonNull()) && !jsonObj.get("ocspResponderUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ocspResponderUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ocspResponderUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication
   */
  public static UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidRequestLocalRadiusCertificateAuthentication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

