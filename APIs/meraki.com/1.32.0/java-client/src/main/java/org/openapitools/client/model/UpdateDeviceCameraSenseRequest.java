/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateDeviceCameraSenseRequestAudioDetection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeviceCameraSenseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceCameraSenseRequest {
  public static final String SERIALIZED_NAME_AUDIO_DETECTION = "audioDetection";
  @SerializedName(SERIALIZED_NAME_AUDIO_DETECTION)
  private UpdateDeviceCameraSenseRequestAudioDetection audioDetection;

  public static final String SERIALIZED_NAME_DETECTION_MODEL_ID = "detectionModelId";
  @SerializedName(SERIALIZED_NAME_DETECTION_MODEL_ID)
  private String detectionModelId;

  public static final String SERIALIZED_NAME_MQTT_BROKER_ID = "mqttBrokerId";
  @SerializedName(SERIALIZED_NAME_MQTT_BROKER_ID)
  private String mqttBrokerId;

  public static final String SERIALIZED_NAME_SENSE_ENABLED = "senseEnabled";
  @SerializedName(SERIALIZED_NAME_SENSE_ENABLED)
  private Boolean senseEnabled;

  public UpdateDeviceCameraSenseRequest() {
  }

  public UpdateDeviceCameraSenseRequest audioDetection(UpdateDeviceCameraSenseRequestAudioDetection audioDetection) {
    this.audioDetection = audioDetection;
    return this;
  }

  /**
   * Get audioDetection
   * @return audioDetection
   */
  @javax.annotation.Nullable
  public UpdateDeviceCameraSenseRequestAudioDetection getAudioDetection() {
    return audioDetection;
  }

  public void setAudioDetection(UpdateDeviceCameraSenseRequestAudioDetection audioDetection) {
    this.audioDetection = audioDetection;
  }


  public UpdateDeviceCameraSenseRequest detectionModelId(String detectionModelId) {
    this.detectionModelId = detectionModelId;
    return this;
  }

  /**
   * The ID of the object detection model
   * @return detectionModelId
   */
  @javax.annotation.Nullable
  public String getDetectionModelId() {
    return detectionModelId;
  }

  public void setDetectionModelId(String detectionModelId) {
    this.detectionModelId = detectionModelId;
  }


  public UpdateDeviceCameraSenseRequest mqttBrokerId(String mqttBrokerId) {
    this.mqttBrokerId = mqttBrokerId;
    return this;
  }

  /**
   * The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
   * @return mqttBrokerId
   */
  @javax.annotation.Nullable
  public String getMqttBrokerId() {
    return mqttBrokerId;
  }

  public void setMqttBrokerId(String mqttBrokerId) {
    this.mqttBrokerId = mqttBrokerId;
  }


  public UpdateDeviceCameraSenseRequest senseEnabled(Boolean senseEnabled) {
    this.senseEnabled = senseEnabled;
    return this;
  }

  /**
   * Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
   * @return senseEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSenseEnabled() {
    return senseEnabled;
  }

  public void setSenseEnabled(Boolean senseEnabled) {
    this.senseEnabled = senseEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest = (UpdateDeviceCameraSenseRequest) o;
    return Objects.equals(this.audioDetection, updateDeviceCameraSenseRequest.audioDetection) &&
        Objects.equals(this.detectionModelId, updateDeviceCameraSenseRequest.detectionModelId) &&
        Objects.equals(this.mqttBrokerId, updateDeviceCameraSenseRequest.mqttBrokerId) &&
        Objects.equals(this.senseEnabled, updateDeviceCameraSenseRequest.senseEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioDetection, detectionModelId, mqttBrokerId, senseEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceCameraSenseRequest {\n");
    sb.append("    audioDetection: ").append(toIndentedString(audioDetection)).append("\n");
    sb.append("    detectionModelId: ").append(toIndentedString(detectionModelId)).append("\n");
    sb.append("    mqttBrokerId: ").append(toIndentedString(mqttBrokerId)).append("\n");
    sb.append("    senseEnabled: ").append(toIndentedString(senseEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioDetection");
    openapiFields.add("detectionModelId");
    openapiFields.add("mqttBrokerId");
    openapiFields.add("senseEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceCameraSenseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceCameraSenseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceCameraSenseRequest is not found in the empty JSON string", UpdateDeviceCameraSenseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceCameraSenseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceCameraSenseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audioDetection`
      if (jsonObj.get("audioDetection") != null && !jsonObj.get("audioDetection").isJsonNull()) {
        UpdateDeviceCameraSenseRequestAudioDetection.validateJsonElement(jsonObj.get("audioDetection"));
      }
      if ((jsonObj.get("detectionModelId") != null && !jsonObj.get("detectionModelId").isJsonNull()) && !jsonObj.get("detectionModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectionModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectionModelId").toString()));
      }
      if ((jsonObj.get("mqttBrokerId") != null && !jsonObj.get("mqttBrokerId").isJsonNull()) && !jsonObj.get("mqttBrokerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mqttBrokerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mqttBrokerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceCameraSenseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceCameraSenseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceCameraSenseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceCameraSenseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceCameraSenseRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceCameraSenseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceCameraSenseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceCameraSenseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceCameraSenseRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceCameraSenseRequest
   */
  public static UpdateDeviceCameraSenseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceCameraSenseRequest.class);
  }

  /**
   * Convert an instance of UpdateDeviceCameraSenseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

