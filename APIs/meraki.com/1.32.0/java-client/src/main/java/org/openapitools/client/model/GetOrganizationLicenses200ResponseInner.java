/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrganizationLicenses200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationLicenses200ResponseInner {
  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "activationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private String activationDate;

  public static final String SERIALIZED_NAME_CLAIM_DATE = "claimDate";
  @SerializedName(SERIALIZED_NAME_CLAIM_DATE)
  private String claimDate;

  public static final String SERIALIZED_NAME_DEVICE_SERIAL = "deviceSerial";
  @SerializedName(SERIALIZED_NAME_DEVICE_SERIAL)
  private String deviceSerial;

  public static final String SERIALIZED_NAME_DURATION_IN_DAYS = "durationInDays";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_DAYS)
  private Integer durationInDays;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_HEAD_LICENSE_ID = "headLicenseId";
  @SerializedName(SERIALIZED_NAME_HEAD_LICENSE_ID)
  private String headLicenseId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LICENSE_KEY = "licenseKey";
  @SerializedName(SERIALIZED_NAME_LICENSE_KEY)
  private String licenseKey;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private String licenseType;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_PERMANENTLY_QUEUED_LICENSES = "permanentlyQueuedLicenses";
  @SerializedName(SERIALIZED_NAME_PERMANENTLY_QUEUED_LICENSES)
  private List<GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner> permanentlyQueuedLicenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEAT_COUNT = "seatCount";
  @SerializedName(SERIALIZED_NAME_SEAT_COUNT)
  private Integer seatCount;

  /**
   * The state of the license. All queued licenses have a status of &#x60;recentlyQueued&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("active"),
    
    EXPIRED("expired"),
    
    EXPIRING("expiring"),
    
    RECENTLY_QUEUED("recentlyQueued"),
    
    UNUSED("unused"),
    
    UNUSED_ACTIVE("unusedActive");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TOTAL_DURATION_IN_DAYS = "totalDurationInDays";
  @SerializedName(SERIALIZED_NAME_TOTAL_DURATION_IN_DAYS)
  private Integer totalDurationInDays;

  public GetOrganizationLicenses200ResponseInner() {
  }

  public GetOrganizationLicenses200ResponseInner activationDate(String activationDate) {
    this.activationDate = activationDate;
    return this;
  }

  /**
   * The date the license started burning
   * @return activationDate
   */
  @javax.annotation.Nullable
  public String getActivationDate() {
    return activationDate;
  }

  public void setActivationDate(String activationDate) {
    this.activationDate = activationDate;
  }


  public GetOrganizationLicenses200ResponseInner claimDate(String claimDate) {
    this.claimDate = claimDate;
    return this;
  }

  /**
   * The date the license was claimed into the organization
   * @return claimDate
   */
  @javax.annotation.Nullable
  public String getClaimDate() {
    return claimDate;
  }

  public void setClaimDate(String claimDate) {
    this.claimDate = claimDate;
  }


  public GetOrganizationLicenses200ResponseInner deviceSerial(String deviceSerial) {
    this.deviceSerial = deviceSerial;
    return this;
  }

  /**
   * Serial number of the device the license is assigned to
   * @return deviceSerial
   */
  @javax.annotation.Nullable
  public String getDeviceSerial() {
    return deviceSerial;
  }

  public void setDeviceSerial(String deviceSerial) {
    this.deviceSerial = deviceSerial;
  }


  public GetOrganizationLicenses200ResponseInner durationInDays(Integer durationInDays) {
    this.durationInDays = durationInDays;
    return this;
  }

  /**
   * The duration of the individual license
   * @return durationInDays
   */
  @javax.annotation.Nullable
  public Integer getDurationInDays() {
    return durationInDays;
  }

  public void setDurationInDays(Integer durationInDays) {
    this.durationInDays = durationInDays;
  }


  public GetOrganizationLicenses200ResponseInner expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The date the license will expire
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public GetOrganizationLicenses200ResponseInner headLicenseId(String headLicenseId) {
    this.headLicenseId = headLicenseId;
    return this;
  }

  /**
   * The id of the head license this license is queued behind. If there is no head license, it returns nil.
   * @return headLicenseId
   */
  @javax.annotation.Nullable
  public String getHeadLicenseId() {
    return headLicenseId;
  }

  public void setHeadLicenseId(String headLicenseId) {
    this.headLicenseId = headLicenseId;
  }


  public GetOrganizationLicenses200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * License ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetOrganizationLicenses200ResponseInner licenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

  /**
   * License key
   * @return licenseKey
   */
  @javax.annotation.Nullable
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
  }


  public GetOrganizationLicenses200ResponseInner licenseType(String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * License type
   * @return licenseType
   */
  @javax.annotation.Nullable
  public String getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(String licenseType) {
    this.licenseType = licenseType;
  }


  public GetOrganizationLicenses200ResponseInner networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * ID of the network the license is assigned to
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public GetOrganizationLicenses200ResponseInner orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * Order number
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }


  public GetOrganizationLicenses200ResponseInner permanentlyQueuedLicenses(List<GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner> permanentlyQueuedLicenses) {
    this.permanentlyQueuedLicenses = permanentlyQueuedLicenses;
    return this;
  }

  public GetOrganizationLicenses200ResponseInner addPermanentlyQueuedLicensesItem(GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner permanentlyQueuedLicensesItem) {
    if (this.permanentlyQueuedLicenses == null) {
      this.permanentlyQueuedLicenses = new ArrayList<>();
    }
    this.permanentlyQueuedLicenses.add(permanentlyQueuedLicensesItem);
    return this;
  }

  /**
   * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial&#x3D; to retrieved queued licenses for a given device.
   * @return permanentlyQueuedLicenses
   */
  @javax.annotation.Nullable
  public List<GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner> getPermanentlyQueuedLicenses() {
    return permanentlyQueuedLicenses;
  }

  public void setPermanentlyQueuedLicenses(List<GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner> permanentlyQueuedLicenses) {
    this.permanentlyQueuedLicenses = permanentlyQueuedLicenses;
  }


  public GetOrganizationLicenses200ResponseInner seatCount(Integer seatCount) {
    this.seatCount = seatCount;
    return this;
  }

  /**
   * The number of seats of the license. Only applicable to SM licenses.
   * @return seatCount
   */
  @javax.annotation.Nullable
  public Integer getSeatCount() {
    return seatCount;
  }

  public void setSeatCount(Integer seatCount) {
    this.seatCount = seatCount;
  }


  public GetOrganizationLicenses200ResponseInner state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the license. All queued licenses have a status of &#x60;recentlyQueued&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GetOrganizationLicenses200ResponseInner totalDurationInDays(Integer totalDurationInDays) {
    this.totalDurationInDays = totalDurationInDays;
    return this;
  }

  /**
   * The duration of the license plus all permanently queued licenses associated with it
   * @return totalDurationInDays
   */
  @javax.annotation.Nullable
  public Integer getTotalDurationInDays() {
    return totalDurationInDays;
  }

  public void setTotalDurationInDays(Integer totalDurationInDays) {
    this.totalDurationInDays = totalDurationInDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationLicenses200ResponseInner getOrganizationLicenses200ResponseInner = (GetOrganizationLicenses200ResponseInner) o;
    return Objects.equals(this.activationDate, getOrganizationLicenses200ResponseInner.activationDate) &&
        Objects.equals(this.claimDate, getOrganizationLicenses200ResponseInner.claimDate) &&
        Objects.equals(this.deviceSerial, getOrganizationLicenses200ResponseInner.deviceSerial) &&
        Objects.equals(this.durationInDays, getOrganizationLicenses200ResponseInner.durationInDays) &&
        Objects.equals(this.expirationDate, getOrganizationLicenses200ResponseInner.expirationDate) &&
        Objects.equals(this.headLicenseId, getOrganizationLicenses200ResponseInner.headLicenseId) &&
        Objects.equals(this.id, getOrganizationLicenses200ResponseInner.id) &&
        Objects.equals(this.licenseKey, getOrganizationLicenses200ResponseInner.licenseKey) &&
        Objects.equals(this.licenseType, getOrganizationLicenses200ResponseInner.licenseType) &&
        Objects.equals(this.networkId, getOrganizationLicenses200ResponseInner.networkId) &&
        Objects.equals(this.orderNumber, getOrganizationLicenses200ResponseInner.orderNumber) &&
        Objects.equals(this.permanentlyQueuedLicenses, getOrganizationLicenses200ResponseInner.permanentlyQueuedLicenses) &&
        Objects.equals(this.seatCount, getOrganizationLicenses200ResponseInner.seatCount) &&
        Objects.equals(this.state, getOrganizationLicenses200ResponseInner.state) &&
        Objects.equals(this.totalDurationInDays, getOrganizationLicenses200ResponseInner.totalDurationInDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationDate, claimDate, deviceSerial, durationInDays, expirationDate, headLicenseId, id, licenseKey, licenseType, networkId, orderNumber, permanentlyQueuedLicenses, seatCount, state, totalDurationInDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationLicenses200ResponseInner {\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    claimDate: ").append(toIndentedString(claimDate)).append("\n");
    sb.append("    deviceSerial: ").append(toIndentedString(deviceSerial)).append("\n");
    sb.append("    durationInDays: ").append(toIndentedString(durationInDays)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    headLicenseId: ").append(toIndentedString(headLicenseId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    permanentlyQueuedLicenses: ").append(toIndentedString(permanentlyQueuedLicenses)).append("\n");
    sb.append("    seatCount: ").append(toIndentedString(seatCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    totalDurationInDays: ").append(toIndentedString(totalDurationInDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationDate");
    openapiFields.add("claimDate");
    openapiFields.add("deviceSerial");
    openapiFields.add("durationInDays");
    openapiFields.add("expirationDate");
    openapiFields.add("headLicenseId");
    openapiFields.add("id");
    openapiFields.add("licenseKey");
    openapiFields.add("licenseType");
    openapiFields.add("networkId");
    openapiFields.add("orderNumber");
    openapiFields.add("permanentlyQueuedLicenses");
    openapiFields.add("seatCount");
    openapiFields.add("state");
    openapiFields.add("totalDurationInDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationLicenses200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationLicenses200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationLicenses200ResponseInner is not found in the empty JSON string", GetOrganizationLicenses200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationLicenses200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationLicenses200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activationDate") != null && !jsonObj.get("activationDate").isJsonNull()) && !jsonObj.get("activationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationDate").toString()));
      }
      if ((jsonObj.get("claimDate") != null && !jsonObj.get("claimDate").isJsonNull()) && !jsonObj.get("claimDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimDate").toString()));
      }
      if ((jsonObj.get("deviceSerial") != null && !jsonObj.get("deviceSerial").isJsonNull()) && !jsonObj.get("deviceSerial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSerial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSerial").toString()));
      }
      if ((jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) && !jsonObj.get("expirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDate").toString()));
      }
      if ((jsonObj.get("headLicenseId") != null && !jsonObj.get("headLicenseId").isJsonNull()) && !jsonObj.get("headLicenseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headLicenseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headLicenseId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("licenseKey") != null && !jsonObj.get("licenseKey").isJsonNull()) && !jsonObj.get("licenseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseKey").toString()));
      }
      if ((jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) && !jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
      if (jsonObj.get("permanentlyQueuedLicenses") != null && !jsonObj.get("permanentlyQueuedLicenses").isJsonNull()) {
        JsonArray jsonArraypermanentlyQueuedLicenses = jsonObj.getAsJsonArray("permanentlyQueuedLicenses");
        if (jsonArraypermanentlyQueuedLicenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permanentlyQueuedLicenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permanentlyQueuedLicenses` to be an array in the JSON string but got `%s`", jsonObj.get("permanentlyQueuedLicenses").toString()));
          }

          // validate the optional field `permanentlyQueuedLicenses` (array)
          for (int i = 0; i < jsonArraypermanentlyQueuedLicenses.size(); i++) {
            GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.validateJsonElement(jsonArraypermanentlyQueuedLicenses.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationLicenses200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationLicenses200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationLicenses200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationLicenses200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationLicenses200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetOrganizationLicenses200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationLicenses200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationLicenses200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationLicenses200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationLicenses200ResponseInner
   */
  public static GetOrganizationLicenses200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationLicenses200ResponseInner.class);
  }

  /**
   * Convert an instance of GetOrganizationLicenses200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

