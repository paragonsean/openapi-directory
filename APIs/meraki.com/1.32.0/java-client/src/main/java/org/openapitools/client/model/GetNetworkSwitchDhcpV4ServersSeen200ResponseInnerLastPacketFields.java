/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DHCP-specific fields of the packet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields {
  public static final String SERIALIZED_NAME_CHADDR = "chaddr";
  @SerializedName(SERIALIZED_NAME_CHADDR)
  private String chaddr;

  public static final String SERIALIZED_NAME_CIADDR = "ciaddr";
  @SerializedName(SERIALIZED_NAME_CIADDR)
  private String ciaddr;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_GIADDR = "giaddr";
  @SerializedName(SERIALIZED_NAME_GIADDR)
  private String giaddr;

  public static final String SERIALIZED_NAME_HLEN = "hlen";
  @SerializedName(SERIALIZED_NAME_HLEN)
  private Integer hlen;

  public static final String SERIALIZED_NAME_HOPS = "hops";
  @SerializedName(SERIALIZED_NAME_HOPS)
  private Integer hops;

  public static final String SERIALIZED_NAME_HTYPE = "htype";
  @SerializedName(SERIALIZED_NAME_HTYPE)
  private Integer htype;

  public static final String SERIALIZED_NAME_MAGIC_COOKIE = "magicCookie";
  @SerializedName(SERIALIZED_NAME_MAGIC_COOKIE)
  private String magicCookie;

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private Integer op;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECS = "secs";
  @SerializedName(SERIALIZED_NAME_SECS)
  private Integer secs;

  public static final String SERIALIZED_NAME_SIADDR = "siaddr";
  @SerializedName(SERIALIZED_NAME_SIADDR)
  private String siaddr;

  public static final String SERIALIZED_NAME_SNAME = "sname";
  @SerializedName(SERIALIZED_NAME_SNAME)
  private String sname;

  public static final String SERIALIZED_NAME_XID = "xid";
  @SerializedName(SERIALIZED_NAME_XID)
  private String xid;

  public static final String SERIALIZED_NAME_YIADDR = "yiaddr";
  @SerializedName(SERIALIZED_NAME_YIADDR)
  private String yiaddr;

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields() {
  }

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields chaddr(String chaddr) {
    this.chaddr = chaddr;
    return this;
  }

  /**
   * Client hardware address of the packet.
   * @return chaddr
   */
  @javax.annotation.Nullable
  public String getChaddr() {
    return chaddr;
  }

  public void setChaddr(String chaddr) {
    this.chaddr = chaddr;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields ciaddr(String ciaddr) {
    this.ciaddr = ciaddr;
    return this;
  }

  /**
   * Client IP address of the packet.
   * @return ciaddr
   */
  @javax.annotation.Nullable
  public String getCiaddr() {
    return ciaddr;
  }

  public void setCiaddr(String ciaddr) {
    this.ciaddr = ciaddr;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields flags(String flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Packet flags.
   * @return flags
   */
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }

  public void setFlags(String flags) {
    this.flags = flags;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields giaddr(String giaddr) {
    this.giaddr = giaddr;
    return this;
  }

  /**
   * Gateway IP address of the packet.
   * @return giaddr
   */
  @javax.annotation.Nullable
  public String getGiaddr() {
    return giaddr;
  }

  public void setGiaddr(String giaddr) {
    this.giaddr = giaddr;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields hlen(Integer hlen) {
    this.hlen = hlen;
    return this;
  }

  /**
   * Hardware length of the packet.
   * @return hlen
   */
  @javax.annotation.Nullable
  public Integer getHlen() {
    return hlen;
  }

  public void setHlen(Integer hlen) {
    this.hlen = hlen;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields hops(Integer hops) {
    this.hops = hops;
    return this;
  }

  /**
   * Number of hops the packet took.
   * @return hops
   */
  @javax.annotation.Nullable
  public Integer getHops() {
    return hops;
  }

  public void setHops(Integer hops) {
    this.hops = hops;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields htype(Integer htype) {
    this.htype = htype;
    return this;
  }

  /**
   * Hardware type code of the packet.
   * @return htype
   */
  @javax.annotation.Nullable
  public Integer getHtype() {
    return htype;
  }

  public void setHtype(Integer htype) {
    this.htype = htype;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields magicCookie(String magicCookie) {
    this.magicCookie = magicCookie;
    return this;
  }

  /**
   * Magic cookie of the packet.
   * @return magicCookie
   */
  @javax.annotation.Nullable
  public String getMagicCookie() {
    return magicCookie;
  }

  public void setMagicCookie(String magicCookie) {
    this.magicCookie = magicCookie;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields op(Integer op) {
    this.op = op;
    return this;
  }

  /**
   * Operation code of the packet.
   * @return op
   */
  @javax.annotation.Nullable
  public Integer getOp() {
    return op;
  }

  public void setOp(Integer op) {
    this.op = op;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields options(List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner> options) {
    this.options = options;
    return this;
  }

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields addOptionsItem(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Additional DHCP options of the packet.
   * @return options
   */
  @javax.annotation.Nullable
  public List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner> getOptions() {
    return options;
  }

  public void setOptions(List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner> options) {
    this.options = options;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields secs(Integer secs) {
    this.secs = secs;
    return this;
  }

  /**
   * Number of seconds since receiving the packet.
   * @return secs
   */
  @javax.annotation.Nullable
  public Integer getSecs() {
    return secs;
  }

  public void setSecs(Integer secs) {
    this.secs = secs;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields siaddr(String siaddr) {
    this.siaddr = siaddr;
    return this;
  }

  /**
   * Server IP address of the packet.
   * @return siaddr
   */
  @javax.annotation.Nullable
  public String getSiaddr() {
    return siaddr;
  }

  public void setSiaddr(String siaddr) {
    this.siaddr = siaddr;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields sname(String sname) {
    this.sname = sname;
    return this;
  }

  /**
   * Server identifier address of the packet.
   * @return sname
   */
  @javax.annotation.Nullable
  public String getSname() {
    return sname;
  }

  public void setSname(String sname) {
    this.sname = sname;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields xid(String xid) {
    this.xid = xid;
    return this;
  }

  /**
   * Transaction id of the packet.
   * @return xid
   */
  @javax.annotation.Nullable
  public String getXid() {
    return xid;
  }

  public void setXid(String xid) {
    this.xid = xid;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields yiaddr(String yiaddr) {
    this.yiaddr = yiaddr;
    return this;
  }

  /**
   * Assigned IP address of the packet.
   * @return yiaddr
   */
  @javax.annotation.Nullable
  public String getYiaddr() {
    return yiaddr;
  }

  public void setYiaddr(String yiaddr) {
    this.yiaddr = yiaddr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields = (GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields) o;
    return Objects.equals(this.chaddr, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.chaddr) &&
        Objects.equals(this.ciaddr, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.ciaddr) &&
        Objects.equals(this.flags, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.flags) &&
        Objects.equals(this.giaddr, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.giaddr) &&
        Objects.equals(this.hlen, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.hlen) &&
        Objects.equals(this.hops, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.hops) &&
        Objects.equals(this.htype, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.htype) &&
        Objects.equals(this.magicCookie, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.magicCookie) &&
        Objects.equals(this.op, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.op) &&
        Objects.equals(this.options, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.options) &&
        Objects.equals(this.secs, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.secs) &&
        Objects.equals(this.siaddr, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.siaddr) &&
        Objects.equals(this.sname, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.sname) &&
        Objects.equals(this.xid, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.xid) &&
        Objects.equals(this.yiaddr, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.yiaddr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaddr, ciaddr, flags, giaddr, hlen, hops, htype, magicCookie, op, options, secs, siaddr, sname, xid, yiaddr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields {\n");
    sb.append("    chaddr: ").append(toIndentedString(chaddr)).append("\n");
    sb.append("    ciaddr: ").append(toIndentedString(ciaddr)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    giaddr: ").append(toIndentedString(giaddr)).append("\n");
    sb.append("    hlen: ").append(toIndentedString(hlen)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    htype: ").append(toIndentedString(htype)).append("\n");
    sb.append("    magicCookie: ").append(toIndentedString(magicCookie)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    secs: ").append(toIndentedString(secs)).append("\n");
    sb.append("    siaddr: ").append(toIndentedString(siaddr)).append("\n");
    sb.append("    sname: ").append(toIndentedString(sname)).append("\n");
    sb.append("    xid: ").append(toIndentedString(xid)).append("\n");
    sb.append("    yiaddr: ").append(toIndentedString(yiaddr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chaddr");
    openapiFields.add("ciaddr");
    openapiFields.add("flags");
    openapiFields.add("giaddr");
    openapiFields.add("hlen");
    openapiFields.add("hops");
    openapiFields.add("htype");
    openapiFields.add("magicCookie");
    openapiFields.add("op");
    openapiFields.add("options");
    openapiFields.add("secs");
    openapiFields.add("siaddr");
    openapiFields.add("sname");
    openapiFields.add("xid");
    openapiFields.add("yiaddr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields is not found in the empty JSON string", GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chaddr") != null && !jsonObj.get("chaddr").isJsonNull()) && !jsonObj.get("chaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chaddr").toString()));
      }
      if ((jsonObj.get("ciaddr") != null && !jsonObj.get("ciaddr").isJsonNull()) && !jsonObj.get("ciaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciaddr").toString()));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("giaddr") != null && !jsonObj.get("giaddr").isJsonNull()) && !jsonObj.get("giaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giaddr").toString()));
      }
      if ((jsonObj.get("magicCookie") != null && !jsonObj.get("magicCookie").isJsonNull()) && !jsonObj.get("magicCookie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `magicCookie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("magicCookie").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if ((jsonObj.get("siaddr") != null && !jsonObj.get("siaddr").isJsonNull()) && !jsonObj.get("siaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siaddr").toString()));
      }
      if ((jsonObj.get("sname") != null && !jsonObj.get("sname").isJsonNull()) && !jsonObj.get("sname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sname").toString()));
      }
      if ((jsonObj.get("xid") != null && !jsonObj.get("xid").isJsonNull()) && !jsonObj.get("xid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xid").toString()));
      }
      if ((jsonObj.get("yiaddr") != null && !jsonObj.get("yiaddr").isJsonNull()) && !jsonObj.get("yiaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yiaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yiaddr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields>() {
           @Override
           public void write(JsonWriter out, GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields
   */
  public static GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields.class);
  }

  /**
   * Convert an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

