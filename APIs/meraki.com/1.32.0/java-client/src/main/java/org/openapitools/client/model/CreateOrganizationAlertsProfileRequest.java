/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequestAlertCondition;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequestRecipients;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateOrganizationAlertsProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOrganizationAlertsProfileRequest {
  public static final String SERIALIZED_NAME_ALERT_CONDITION = "alertCondition";
  @SerializedName(SERIALIZED_NAME_ALERT_CONDITION)
  private CreateOrganizationAlertsProfileRequestAlertCondition alertCondition;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NETWORK_TAGS = "networkTags";
  @SerializedName(SERIALIZED_NAME_NETWORK_TAGS)
  private List<String> networkTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private CreateOrganizationAlertsProfileRequestRecipients recipients;

  /**
   * The alert type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    APP_OUTAGE("appOutage"),
    
    VOIP_JITTER("voipJitter"),
    
    VOIP_MOS("voipMos"),
    
    VOIP_PACKET_LOSS("voipPacketLoss"),
    
    WAN_LATENCY("wanLatency"),
    
    WAN_PACKET_LOSS("wanPacketLoss"),
    
    WAN_STATUS("wanStatus"),
    
    WAN_UTILIZATION("wanUtilization");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CreateOrganizationAlertsProfileRequest() {
  }

  public CreateOrganizationAlertsProfileRequest alertCondition(CreateOrganizationAlertsProfileRequestAlertCondition alertCondition) {
    this.alertCondition = alertCondition;
    return this;
  }

  /**
   * Get alertCondition
   * @return alertCondition
   */
  @javax.annotation.Nonnull
  public CreateOrganizationAlertsProfileRequestAlertCondition getAlertCondition() {
    return alertCondition;
  }

  public void setAlertCondition(CreateOrganizationAlertsProfileRequestAlertCondition alertCondition) {
    this.alertCondition = alertCondition;
  }


  public CreateOrganizationAlertsProfileRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User supplied description of the alert
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateOrganizationAlertsProfileRequest networkTags(List<String> networkTags) {
    this.networkTags = networkTags;
    return this;
  }

  public CreateOrganizationAlertsProfileRequest addNetworkTagsItem(String networkTagsItem) {
    if (this.networkTags == null) {
      this.networkTags = new ArrayList<>();
    }
    this.networkTags.add(networkTagsItem);
    return this;
  }

  /**
   * Networks with these tags will be monitored for the alert
   * @return networkTags
   */
  @javax.annotation.Nonnull
  public List<String> getNetworkTags() {
    return networkTags;
  }

  public void setNetworkTags(List<String> networkTags) {
    this.networkTags = networkTags;
  }


  public CreateOrganizationAlertsProfileRequest recipients(CreateOrganizationAlertsProfileRequestRecipients recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nonnull
  public CreateOrganizationAlertsProfileRequestRecipients getRecipients() {
    return recipients;
  }

  public void setRecipients(CreateOrganizationAlertsProfileRequestRecipients recipients) {
    this.recipients = recipients;
  }


  public CreateOrganizationAlertsProfileRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The alert type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest = (CreateOrganizationAlertsProfileRequest) o;
    return Objects.equals(this.alertCondition, createOrganizationAlertsProfileRequest.alertCondition) &&
        Objects.equals(this.description, createOrganizationAlertsProfileRequest.description) &&
        Objects.equals(this.networkTags, createOrganizationAlertsProfileRequest.networkTags) &&
        Objects.equals(this.recipients, createOrganizationAlertsProfileRequest.recipients) &&
        Objects.equals(this.type, createOrganizationAlertsProfileRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertCondition, description, networkTags, recipients, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOrganizationAlertsProfileRequest {\n");
    sb.append("    alertCondition: ").append(toIndentedString(alertCondition)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    networkTags: ").append(toIndentedString(networkTags)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertCondition");
    openapiFields.add("description");
    openapiFields.add("networkTags");
    openapiFields.add("recipients");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alertCondition");
    openapiRequiredFields.add("networkTags");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOrganizationAlertsProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOrganizationAlertsProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOrganizationAlertsProfileRequest is not found in the empty JSON string", CreateOrganizationAlertsProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOrganizationAlertsProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOrganizationAlertsProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOrganizationAlertsProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `alertCondition`
      CreateOrganizationAlertsProfileRequestAlertCondition.validateJsonElement(jsonObj.get("alertCondition"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("networkTags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("networkTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkTags` to be an array in the JSON string but got `%s`", jsonObj.get("networkTags").toString()));
      }
      // validate the required field `recipients`
      CreateOrganizationAlertsProfileRequestRecipients.validateJsonElement(jsonObj.get("recipients"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOrganizationAlertsProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOrganizationAlertsProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOrganizationAlertsProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOrganizationAlertsProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOrganizationAlertsProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateOrganizationAlertsProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOrganizationAlertsProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOrganizationAlertsProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOrganizationAlertsProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOrganizationAlertsProfileRequest
   */
  public static CreateOrganizationAlertsProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOrganizationAlertsProfileRequest.class);
  }

  /**
   * Convert an instance of CreateOrganizationAlertsProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

