/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkApplianceVlans200ResponseInnerIpv6;
import org.openapitools.client.model.GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkApplianceVlan201Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkApplianceVlan201Response {
  public static final String SERIALIZED_NAME_APPLIANCE_IP = "applianceIp";
  @SerializedName(SERIALIZED_NAME_APPLIANCE_IP)
  private String applianceIp;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_GROUP_POLICY_ID = "groupPolicyId";
  @SerializedName(SERIALIZED_NAME_GROUP_POLICY_ID)
  private String groupPolicyId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERFACE_ID = "interfaceId";
  @SerializedName(SERIALIZED_NAME_INTERFACE_ID)
  private String interfaceId;

  public static final String SERIALIZED_NAME_IPV6 = "ipv6";
  @SerializedName(SERIALIZED_NAME_IPV6)
  private GetNetworkApplianceVlans200ResponseInnerIpv6 ipv6;

  public static final String SERIALIZED_NAME_MANDATORY_DHCP = "mandatoryDhcp";
  @SerializedName(SERIALIZED_NAME_MANDATORY_DHCP)
  private GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp mandatoryDhcp;

  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private Integer mask;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  /**
   * Type of subnetting of the VLAN. Applicable only for template network.
   */
  @JsonAdapter(TemplateVlanTypeEnum.Adapter.class)
  public enum TemplateVlanTypeEnum {
    SAME("same"),
    
    UNIQUE("unique");

    private String value;

    TemplateVlanTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateVlanTypeEnum fromValue(String value) {
      for (TemplateVlanTypeEnum b : TemplateVlanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateVlanTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateVlanTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateVlanTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateVlanTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemplateVlanTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE_VLAN_TYPE = "templateVlanType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VLAN_TYPE)
  private TemplateVlanTypeEnum templateVlanType = TemplateVlanTypeEnum.SAME;

  public CreateNetworkApplianceVlan201Response() {
  }

  public CreateNetworkApplianceVlan201Response applianceIp(String applianceIp) {
    this.applianceIp = applianceIp;
    return this;
  }

  /**
   * The local IP of the appliance on the VLAN
   * @return applianceIp
   */
  @javax.annotation.Nullable
  public String getApplianceIp() {
    return applianceIp;
  }

  public void setApplianceIp(String applianceIp) {
    this.applianceIp = applianceIp;
  }


  public CreateNetworkApplianceVlan201Response cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

  /**
   * CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
   * @return cidr
   */
  @javax.annotation.Nullable
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


  public CreateNetworkApplianceVlan201Response groupPolicyId(String groupPolicyId) {
    this.groupPolicyId = groupPolicyId;
    return this;
  }

  /**
   * The id of the desired group policy to apply to the VLAN
   * @return groupPolicyId
   */
  @javax.annotation.Nullable
  public String getGroupPolicyId() {
    return groupPolicyId;
  }

  public void setGroupPolicyId(String groupPolicyId) {
    this.groupPolicyId = groupPolicyId;
  }


  public CreateNetworkApplianceVlan201Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The VLAN ID of the VLAN
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateNetworkApplianceVlan201Response interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

  /**
   * The interface ID of the VLAN
   * @return interfaceId
   */
  @javax.annotation.Nullable
  public String getInterfaceId() {
    return interfaceId;
  }

  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }


  public CreateNetworkApplianceVlan201Response ipv6(GetNetworkApplianceVlans200ResponseInnerIpv6 ipv6) {
    this.ipv6 = ipv6;
    return this;
  }

  /**
   * Get ipv6
   * @return ipv6
   */
  @javax.annotation.Nullable
  public GetNetworkApplianceVlans200ResponseInnerIpv6 getIpv6() {
    return ipv6;
  }

  public void setIpv6(GetNetworkApplianceVlans200ResponseInnerIpv6 ipv6) {
    this.ipv6 = ipv6;
  }


  public CreateNetworkApplianceVlan201Response mandatoryDhcp(GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp mandatoryDhcp) {
    this.mandatoryDhcp = mandatoryDhcp;
    return this;
  }

  /**
   * Get mandatoryDhcp
   * @return mandatoryDhcp
   */
  @javax.annotation.Nullable
  public GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp getMandatoryDhcp() {
    return mandatoryDhcp;
  }

  public void setMandatoryDhcp(GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp mandatoryDhcp) {
    this.mandatoryDhcp = mandatoryDhcp;
  }


  public CreateNetworkApplianceVlan201Response mask(Integer mask) {
    this.mask = mask;
    return this;
  }

  /**
   * Mask used for the subnet of all bound to the template networks. Applicable only for template network.
   * @return mask
   */
  @javax.annotation.Nullable
  public Integer getMask() {
    return mask;
  }

  public void setMask(Integer mask) {
    this.mask = mask;
  }


  public CreateNetworkApplianceVlan201Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the VLAN
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkApplianceVlan201Response subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * The subnet of the VLAN
   * @return subnet
   */
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  public CreateNetworkApplianceVlan201Response templateVlanType(TemplateVlanTypeEnum templateVlanType) {
    this.templateVlanType = templateVlanType;
    return this;
  }

  /**
   * Type of subnetting of the VLAN. Applicable only for template network.
   * @return templateVlanType
   */
  @javax.annotation.Nullable
  public TemplateVlanTypeEnum getTemplateVlanType() {
    return templateVlanType;
  }

  public void setTemplateVlanType(TemplateVlanTypeEnum templateVlanType) {
    this.templateVlanType = templateVlanType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkApplianceVlan201Response createNetworkApplianceVlan201Response = (CreateNetworkApplianceVlan201Response) o;
    return Objects.equals(this.applianceIp, createNetworkApplianceVlan201Response.applianceIp) &&
        Objects.equals(this.cidr, createNetworkApplianceVlan201Response.cidr) &&
        Objects.equals(this.groupPolicyId, createNetworkApplianceVlan201Response.groupPolicyId) &&
        Objects.equals(this.id, createNetworkApplianceVlan201Response.id) &&
        Objects.equals(this.interfaceId, createNetworkApplianceVlan201Response.interfaceId) &&
        Objects.equals(this.ipv6, createNetworkApplianceVlan201Response.ipv6) &&
        Objects.equals(this.mandatoryDhcp, createNetworkApplianceVlan201Response.mandatoryDhcp) &&
        Objects.equals(this.mask, createNetworkApplianceVlan201Response.mask) &&
        Objects.equals(this.name, createNetworkApplianceVlan201Response.name) &&
        Objects.equals(this.subnet, createNetworkApplianceVlan201Response.subnet) &&
        Objects.equals(this.templateVlanType, createNetworkApplianceVlan201Response.templateVlanType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applianceIp, cidr, groupPolicyId, id, interfaceId, ipv6, mandatoryDhcp, mask, name, subnet, templateVlanType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkApplianceVlan201Response {\n");
    sb.append("    applianceIp: ").append(toIndentedString(applianceIp)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    groupPolicyId: ").append(toIndentedString(groupPolicyId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    mandatoryDhcp: ").append(toIndentedString(mandatoryDhcp)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    templateVlanType: ").append(toIndentedString(templateVlanType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applianceIp");
    openapiFields.add("cidr");
    openapiFields.add("groupPolicyId");
    openapiFields.add("id");
    openapiFields.add("interfaceId");
    openapiFields.add("ipv6");
    openapiFields.add("mandatoryDhcp");
    openapiFields.add("mask");
    openapiFields.add("name");
    openapiFields.add("subnet");
    openapiFields.add("templateVlanType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkApplianceVlan201Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkApplianceVlan201Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkApplianceVlan201Response is not found in the empty JSON string", CreateNetworkApplianceVlan201Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkApplianceVlan201Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkApplianceVlan201Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applianceIp") != null && !jsonObj.get("applianceIp").isJsonNull()) && !jsonObj.get("applianceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applianceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applianceIp").toString()));
      }
      if ((jsonObj.get("cidr") != null && !jsonObj.get("cidr").isJsonNull()) && !jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if ((jsonObj.get("groupPolicyId") != null && !jsonObj.get("groupPolicyId").isJsonNull()) && !jsonObj.get("groupPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupPolicyId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interfaceId") != null && !jsonObj.get("interfaceId").isJsonNull()) && !jsonObj.get("interfaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceId").toString()));
      }
      // validate the optional field `ipv6`
      if (jsonObj.get("ipv6") != null && !jsonObj.get("ipv6").isJsonNull()) {
        GetNetworkApplianceVlans200ResponseInnerIpv6.validateJsonElement(jsonObj.get("ipv6"));
      }
      // validate the optional field `mandatoryDhcp`
      if (jsonObj.get("mandatoryDhcp") != null && !jsonObj.get("mandatoryDhcp").isJsonNull()) {
        GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp.validateJsonElement(jsonObj.get("mandatoryDhcp"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) && !jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
      if ((jsonObj.get("templateVlanType") != null && !jsonObj.get("templateVlanType").isJsonNull()) && !jsonObj.get("templateVlanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateVlanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateVlanType").toString()));
      }
      // validate the optional field `templateVlanType`
      if (jsonObj.get("templateVlanType") != null && !jsonObj.get("templateVlanType").isJsonNull()) {
        TemplateVlanTypeEnum.validateJsonElement(jsonObj.get("templateVlanType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkApplianceVlan201Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkApplianceVlan201Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkApplianceVlan201Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkApplianceVlan201Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkApplianceVlan201Response>() {
           @Override
           public void write(JsonWriter out, CreateNetworkApplianceVlan201Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkApplianceVlan201Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkApplianceVlan201Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkApplianceVlan201Response
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkApplianceVlan201Response
   */
  public static CreateNetworkApplianceVlan201Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkApplianceVlan201Response.class);
  }

  /**
   * Convert an instance of CreateNetworkApplianceVlan201Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

