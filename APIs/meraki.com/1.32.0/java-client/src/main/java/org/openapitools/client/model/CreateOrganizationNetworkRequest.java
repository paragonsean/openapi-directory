/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateOrganizationNetworkRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOrganizationNetworkRequest {
  public static final String SERIALIZED_NAME_COPY_FROM_NETWORK_ID = "copyFromNetworkId";
  @SerializedName(SERIALIZED_NAME_COPY_FROM_NETWORK_ID)
  private String copyFromNetworkId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  /**
   * Gets or Sets productTypes
   */
  @JsonAdapter(ProductTypesEnum.Adapter.class)
  public enum ProductTypesEnum {
    APPLIANCE("appliance"),
    
    CAMERA("camera"),
    
    CELLULAR_GATEWAY("cellularGateway"),
    
    SENSOR("sensor"),
    
    SWITCH("switch"),
    
    SYSTEMS_MANAGER("systemsManager"),
    
    WIRELESS("wireless");

    private String value;

    ProductTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypesEnum fromValue(String value) {
      for (ProductTypesEnum b : ProductTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPES = "productTypes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPES)
  private List<ProductTypesEnum> productTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public CreateOrganizationNetworkRequest() {
  }

  public CreateOrganizationNetworkRequest copyFromNetworkId(String copyFromNetworkId) {
    this.copyFromNetworkId = copyFromNetworkId;
    return this;
  }

  /**
   * The ID of the network to copy configuration from. Other provided parameters will override the copied configuration, except type which must match this network&#39;s type exactly.
   * @return copyFromNetworkId
   */
  @javax.annotation.Nullable
  public String getCopyFromNetworkId() {
    return copyFromNetworkId;
  }

  public void setCopyFromNetworkId(String copyFromNetworkId) {
    this.copyFromNetworkId = copyFromNetworkId;
  }


  public CreateOrganizationNetworkRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the new network
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateOrganizationNetworkRequest notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Add any notes or additional information about this network here.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CreateOrganizationNetworkRequest productTypes(List<ProductTypesEnum> productTypes) {
    this.productTypes = productTypes;
    return this;
  }

  public CreateOrganizationNetworkRequest addProductTypesItem(ProductTypesEnum productTypesItem) {
    if (this.productTypes == null) {
      this.productTypes = new ArrayList<>();
    }
    this.productTypes.add(productTypesItem);
    return this;
  }

  /**
   * The product type(s) of the new network. If more than one type is included, the network will be a combined network.
   * @return productTypes
   */
  @javax.annotation.Nonnull
  public List<ProductTypesEnum> getProductTypes() {
    return productTypes;
  }

  public void setProductTypes(List<ProductTypesEnum> productTypes) {
    this.productTypes = productTypes;
  }


  public CreateOrganizationNetworkRequest tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateOrganizationNetworkRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags to be applied to the network
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public CreateOrganizationNetworkRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The timezone of the network. For a list of allowed timezones, please see the &#39;TZ&#39; column in the table in &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#39;&gt;this article.&lt;/a&gt;
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOrganizationNetworkRequest createOrganizationNetworkRequest = (CreateOrganizationNetworkRequest) o;
    return Objects.equals(this.copyFromNetworkId, createOrganizationNetworkRequest.copyFromNetworkId) &&
        Objects.equals(this.name, createOrganizationNetworkRequest.name) &&
        Objects.equals(this.notes, createOrganizationNetworkRequest.notes) &&
        Objects.equals(this.productTypes, createOrganizationNetworkRequest.productTypes) &&
        Objects.equals(this.tags, createOrganizationNetworkRequest.tags) &&
        Objects.equals(this.timeZone, createOrganizationNetworkRequest.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyFromNetworkId, name, notes, productTypes, tags, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOrganizationNetworkRequest {\n");
    sb.append("    copyFromNetworkId: ").append(toIndentedString(copyFromNetworkId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    productTypes: ").append(toIndentedString(productTypes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyFromNetworkId");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("productTypes");
    openapiFields.add("tags");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("productTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOrganizationNetworkRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOrganizationNetworkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOrganizationNetworkRequest is not found in the empty JSON string", CreateOrganizationNetworkRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOrganizationNetworkRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOrganizationNetworkRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOrganizationNetworkRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("copyFromNetworkId") != null && !jsonObj.get("copyFromNetworkId").isJsonNull()) && !jsonObj.get("copyFromNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyFromNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyFromNetworkId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("productTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("productTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypes` to be an array in the JSON string but got `%s`", jsonObj.get("productTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOrganizationNetworkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOrganizationNetworkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOrganizationNetworkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOrganizationNetworkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOrganizationNetworkRequest>() {
           @Override
           public void write(JsonWriter out, CreateOrganizationNetworkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOrganizationNetworkRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOrganizationNetworkRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOrganizationNetworkRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOrganizationNetworkRequest
   */
  public static CreateOrganizationNetworkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOrganizationNetworkRequest.class);
  }

  /**
   * Convert an instance of CreateOrganizationNetworkRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

