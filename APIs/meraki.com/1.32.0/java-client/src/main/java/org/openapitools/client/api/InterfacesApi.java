/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateDeviceSwitchRoutingInterfaceRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInner;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InterfacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InterfacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InterfacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDeviceSwitchRoutingInterface_2
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSwitchRoutingInterface_2Call(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceSwitchRoutingInterface_2ValidateBeforeCall(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingInterface_2(Async)");
        }

        return createDeviceSwitchRoutingInterface_2Call(serial, createDeviceSwitchRoutingInterfaceRequest, _callback);

    }

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return GetDeviceSwitchRoutingInterfaces200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingInterfaces200ResponseInner createDeviceSwitchRoutingInterface_2(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> localVarResp = createDeviceSwitchRoutingInterface_2WithHttpInfo(serial, createDeviceSwitchRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> createDeviceSwitchRoutingInterface_2WithHttpInfo(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, createDeviceSwitchRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 interface for a switch (asynchronously)
     * Create a layer 3 interface for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSwitchRoutingInterface_2Async(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback<GetDeviceSwitchRoutingInterfaces200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, createDeviceSwitchRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStackRoutingInterface_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingInterface_3Call(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchStackRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
        if (createNetworkSwitchStackRoutingInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface_3(Async)");
        }

        return createNetworkSwitchStackRoutingInterface_3Call(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, _callback);

    }

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStackRoutingInterface_3(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStackRoutingInterface_3WithHttpInfo(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStackRoutingInterface_3WithHttpInfo(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 interface for a switch stack (asynchronously)
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingInterface_3Async(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeviceSwitchRoutingInterface_2
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSwitchRoutingInterface_2Call(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeviceSwitchRoutingInterface_2ValidateBeforeCall(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingInterface_2(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling deleteDeviceSwitchRoutingInterface_2(Async)");
        }

        return deleteDeviceSwitchRoutingInterface_2Call(serial, interfaceId, _callback);

    }

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeviceSwitchRoutingInterface_2(String serial, String interfaceId) throws ApiException {
        deleteDeviceSwitchRoutingInterface_2WithHttpInfo(serial, interfaceId);
    }

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeviceSwitchRoutingInterface_2WithHttpInfo(String serial, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, interfaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 interface from the switch (asynchronously)
     * Delete a layer 3 interface from the switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSwitchRoutingInterface_2Async(String serial, String interfaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, interfaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStackRoutingInterface_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingInterface_3Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface_3(Async)");
        }

        return deleteNetworkSwitchStackRoutingInterface_3Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStackRoutingInterface_3(String networkId, String switchStackId, String interfaceId) throws ApiException {
        deleteNetworkSwitchStackRoutingInterface_3WithHttpInfo(networkId, switchStackId, interfaceId);
    }

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStackRoutingInterface_3WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 interface from a switch stack (asynchronously)
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingInterface_3Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingInterfaceDhcp_2
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaceDhcp_2Call(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingInterfaceDhcp_2ValidateBeforeCall(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp_2(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp_2(Async)");
        }

        return getDeviceSwitchRoutingInterfaceDhcp_2Call(serial, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceSwitchRoutingInterfaceDhcp_2(String serial, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceSwitchRoutingInterfaceDhcp_2WithHttpInfo(serial, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceSwitchRoutingInterfaceDhcp_2WithHttpInfo(String serial, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaceDhcp_2ValidateBeforeCall(serial, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch (asynchronously)
     * Return a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaceDhcp_2Async(String serial, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaceDhcp_2ValidateBeforeCall(serial, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingInterface_2
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterface_2Call(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingInterface_2ValidateBeforeCall(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterface_2(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterface_2(Async)");
        }

        return getDeviceSwitchRoutingInterface_2Call(serial, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return GetDeviceSwitchRoutingInterfaces200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingInterfaces200ResponseInner getDeviceSwitchRoutingInterface_2(String serial, String interfaceId) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> localVarResp = getDeviceSwitchRoutingInterface_2WithHttpInfo(serial, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> getDeviceSwitchRoutingInterface_2WithHttpInfo(String serial, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, interfaceId, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface for a switch (asynchronously)
     * Return a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterface_2Async(String serial, String interfaceId, final ApiCallback<GetDeviceSwitchRoutingInterfaces200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingInterfaces_2
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaces_2Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingInterfaces_2ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaces_2(Async)");
        }

        return getDeviceSwitchRoutingInterfaces_2Call(serial, _callback);

    }

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param serial  (required)
     * @return List&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSwitchRoutingInterfaces200ResponseInner> getDeviceSwitchRoutingInterfaces_2(String serial) throws ApiException {
        ApiResponse<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>> localVarResp = getDeviceSwitchRoutingInterfaces_2WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>> getDeviceSwitchRoutingInterfaces_2WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaces_2ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 interfaces for a switch (asynchronously)
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaces_2Async(String serial, final ApiCallback<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaces_2ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterfaceDhcp_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_3Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_3ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_3(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_3(Async)");
        }

        return getNetworkSwitchStackRoutingInterfaceDhcp_3Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingInterfaceDhcp_3(String networkId, String switchStackId, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingInterfaceDhcp_3WithHttpInfo(networkId, switchStackId, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingInterfaceDhcp_3WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaceDhcp_3ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack (asynchronously)
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_3Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaceDhcp_3ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterface_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterface_3Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface_3(Async)");
        }

        return getNetworkSwitchStackRoutingInterface_3Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingInterface_3(String networkId, String switchStackId, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingInterface_3WithHttpInfo(networkId, switchStackId, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingInterface_3WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface from a switch stack (asynchronously)
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterface_3Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterfaces_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaces_3Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterfaces_3ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces_3(Async)");
        }

        return getNetworkSwitchStackRoutingInterfaces_3Call(networkId, switchStackId, _callback);

    }

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStackRoutingInterfaces_3(String networkId, String switchStackId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStackRoutingInterfaces_3WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStackRoutingInterfaces_3WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaces_3ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 interfaces for a switch stack (asynchronously)
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaces_3Async(String networkId, String switchStackId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaces_3ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchRoutingInterfaceDhcp_2
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterfaceDhcp_2Call(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchRoutingInterfaceDhcpRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchRoutingInterfaceDhcp_2ValidateBeforeCall(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp_2(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp_2(Async)");
        }

        return updateDeviceSwitchRoutingInterfaceDhcp_2Call(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest, _callback);

    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceSwitchRoutingInterfaceDhcp_2(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceSwitchRoutingInterfaceDhcp_2WithHttpInfo(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceSwitchRoutingInterfaceDhcp_2WithHttpInfo(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterfaceDhcp_2ValidateBeforeCall(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch (asynchronously)
     * Update a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterfaceDhcp_2Async(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterfaceDhcp_2ValidateBeforeCall(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchRoutingInterface_2
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterface_2Call(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchRoutingInterface_2ValidateBeforeCall(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterface_2(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterface_2(Async)");
        }

        return updateDeviceSwitchRoutingInterface_2Call(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest, _callback);

    }

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return GetDeviceSwitchRoutingInterfaces200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingInterfaces200ResponseInner updateDeviceSwitchRoutingInterface_2(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> localVarResp = updateDeviceSwitchRoutingInterface_2WithHttpInfo(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> updateDeviceSwitchRoutingInterface_2WithHttpInfo(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface for a switch (asynchronously)
     * Update a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterface_2Async(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback<GetDeviceSwitchRoutingInterfaces200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterface_2ValidateBeforeCall(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingInterfaceDhcp_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_3Call(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStackRoutingInterfaceDhcpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_3ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_3(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_3(Async)");
        }

        return updateNetworkSwitchStackRoutingInterfaceDhcp_3Call(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, _callback);

    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingInterfaceDhcp_3(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingInterfaceDhcp_3WithHttpInfo(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingInterfaceDhcp_3WithHttpInfo(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterfaceDhcp_3ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack (asynchronously)
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_3Async(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterfaceDhcp_3ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingInterface_3
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterface_3Call(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStackRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface_3(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface_3(Async)");
        }

        return updateNetworkSwitchStackRoutingInterface_3Call(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, _callback);

    }

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingInterface_3(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingInterface_3WithHttpInfo(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingInterface_3WithHttpInfo(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface for a switch stack (asynchronously)
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterface_3Async(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterface_3ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
