/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrganizationInsightMonitoredMediaServerRequest;
import org.openapitools.client.model.GetOrganizationInsightMonitoredMediaServers200ResponseInner;
import org.openapitools.client.model.UpdateOrganizationInsightMonitoredMediaServerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MonitoredMediaServersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MonitoredMediaServersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonitoredMediaServersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrganizationInsightMonitoredMediaServer_1
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInsightMonitoredMediaServer_1Call(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInsightMonitoredMediaServerRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        // verify the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' is set
        if (createOrganizationInsightMonitoredMediaServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' when calling createOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        return createOrganizationInsightMonitoredMediaServer_1Call(organizationId, createOrganizationInsightMonitoredMediaServerRequest, _callback);

    }

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationInsightMonitoredMediaServer_1(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationInsightMonitoredMediaServer_1WithHttpInfo(organizationId, createOrganizationInsightMonitoredMediaServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationInsightMonitoredMediaServer_1WithHttpInfo(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, createOrganizationInsightMonitoredMediaServerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a media server to be monitored for this organization (asynchronously)
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInsightMonitoredMediaServer_1Async(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, createOrganizationInsightMonitoredMediaServerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationInsightMonitoredMediaServer_1
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationInsightMonitoredMediaServer_1Call(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "monitoredMediaServerId" + "}", localVarApiClient.escapeString(monitoredMediaServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        // verify the required parameter 'monitoredMediaServerId' is set
        if (monitoredMediaServerId == null) {
            throw new ApiException("Missing the required parameter 'monitoredMediaServerId' when calling deleteOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        return deleteOrganizationInsightMonitoredMediaServer_1Call(organizationId, monitoredMediaServerId, _callback);

    }

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationInsightMonitoredMediaServer_1(String organizationId, String monitoredMediaServerId) throws ApiException {
        deleteOrganizationInsightMonitoredMediaServer_1WithHttpInfo(organizationId, monitoredMediaServerId);
    }

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationInsightMonitoredMediaServer_1WithHttpInfo(String organizationId, String monitoredMediaServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, monitoredMediaServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a monitored media server from this organization (asynchronously)
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationInsightMonitoredMediaServer_1Async(String organizationId, String monitoredMediaServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, monitoredMediaServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInsightMonitoredMediaServer_1
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServer_1Call(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "monitoredMediaServerId" + "}", localVarApiClient.escapeString(monitoredMediaServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        // verify the required parameter 'monitoredMediaServerId' is set
        if (monitoredMediaServerId == null) {
            throw new ApiException("Missing the required parameter 'monitoredMediaServerId' when calling getOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        return getOrganizationInsightMonitoredMediaServer_1Call(organizationId, monitoredMediaServerId, _callback);

    }

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationInsightMonitoredMediaServer_1(String organizationId, String monitoredMediaServerId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationInsightMonitoredMediaServer_1WithHttpInfo(organizationId, monitoredMediaServerId);
        return localVarResp.getData();
    }

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationInsightMonitoredMediaServer_1WithHttpInfo(String organizationId, String monitoredMediaServerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, monitoredMediaServerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a monitored media server for this organization (asynchronously)
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServer_1Async(String organizationId, String monitoredMediaServerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, monitoredMediaServerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInsightMonitoredMediaServers_1
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServers_1Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInsightMonitoredMediaServers_1ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServers_1(Async)");
        }

        return getOrganizationInsightMonitoredMediaServers_1Call(organizationId, _callback);

    }

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationInsightMonitoredMediaServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationInsightMonitoredMediaServers200ResponseInner> getOrganizationInsightMonitoredMediaServers_1(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>> localVarResp = getOrganizationInsightMonitoredMediaServers_1WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationInsightMonitoredMediaServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>> getOrganizationInsightMonitoredMediaServers_1WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServers_1ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the monitored media servers for this organization (asynchronously)
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServers_1Async(String organizationId, final ApiCallback<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServers_1ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationInsightMonitoredMediaServer_1
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationInsightMonitoredMediaServer_1Call(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationInsightMonitoredMediaServerRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "monitoredMediaServerId" + "}", localVarApiClient.escapeString(monitoredMediaServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        // verify the required parameter 'monitoredMediaServerId' is set
        if (monitoredMediaServerId == null) {
            throw new ApiException("Missing the required parameter 'monitoredMediaServerId' when calling updateOrganizationInsightMonitoredMediaServer_1(Async)");
        }

        return updateOrganizationInsightMonitoredMediaServer_1Call(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest, _callback);

    }

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationInsightMonitoredMediaServer_1(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationInsightMonitoredMediaServer_1WithHttpInfo(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationInsightMonitoredMediaServer_1WithHttpInfo(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a monitored media server for this organization (asynchronously)
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationInsightMonitoredMediaServer_1Async(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationInsightMonitoredMediaServer_1ValidateBeforeCall(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
