/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings related to 2.4Ghz band
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings {
  public static final String SERIALIZED_NAME_AX_ENABLED = "axEnabled";
  @SerializedName(SERIALIZED_NAME_AX_ENABLED)
  private Boolean axEnabled;

  public static final String SERIALIZED_NAME_MAX_POWER = "maxPower";
  @SerializedName(SERIALIZED_NAME_MAX_POWER)
  private Integer maxPower;

  public static final String SERIALIZED_NAME_MIN_BITRATE = "minBitrate";
  @SerializedName(SERIALIZED_NAME_MIN_BITRATE)
  private Float minBitrate;

  public static final String SERIALIZED_NAME_MIN_POWER = "minPower";
  @SerializedName(SERIALIZED_NAME_MIN_POWER)
  private Integer minPower;

  public static final String SERIALIZED_NAME_RXSOP = "rxsop";
  @SerializedName(SERIALIZED_NAME_RXSOP)
  private Integer rxsop;

  public static final String SERIALIZED_NAME_VALID_AUTO_CHANNELS = "validAutoChannels";
  @SerializedName(SERIALIZED_NAME_VALID_AUTO_CHANNELS)
  private List<Integer> validAutoChannels = new ArrayList<>();

  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings() {
  }

  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings axEnabled(Boolean axEnabled) {
    this.axEnabled = axEnabled;
    return this;
  }

  /**
   * Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
   * @return axEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAxEnabled() {
    return axEnabled;
  }

  public void setAxEnabled(Boolean axEnabled) {
    this.axEnabled = axEnabled;
  }


  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings maxPower(Integer maxPower) {
    this.maxPower = maxPower;
    return this;
  }

  /**
   * Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
   * @return maxPower
   */
  @javax.annotation.Nullable
  public Integer getMaxPower() {
    return maxPower;
  }

  public void setMaxPower(Integer maxPower) {
    this.maxPower = maxPower;
  }


  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings minBitrate(Float minBitrate) {
    this.minBitrate = minBitrate;
    return this;
  }

  /**
   * Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of &#39;1&#39;, &#39;2&#39;, &#39;5.5&#39;, &#39;6&#39;, &#39;9&#39;, &#39;11&#39;, &#39;12&#39;, &#39;18&#39;, &#39;24&#39;, &#39;36&#39;, &#39;48&#39; or &#39;54&#39;. Defaults to 11.
   * @return minBitrate
   */
  @javax.annotation.Nullable
  public Float getMinBitrate() {
    return minBitrate;
  }

  public void setMinBitrate(Float minBitrate) {
    this.minBitrate = minBitrate;
  }


  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings minPower(Integer minPower) {
    this.minPower = minPower;
    return this;
  }

  /**
   * Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
   * @return minPower
   */
  @javax.annotation.Nullable
  public Integer getMinPower() {
    return minPower;
  }

  public void setMinPower(Integer minPower) {
    this.minPower = minPower;
  }


  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings rxsop(Integer rxsop) {
    this.rxsop = rxsop;
    return this;
  }

  /**
   * The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
   * @return rxsop
   */
  @javax.annotation.Nullable
  public Integer getRxsop() {
    return rxsop;
  }

  public void setRxsop(Integer rxsop) {
    this.rxsop = rxsop;
  }


  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings validAutoChannels(List<Integer> validAutoChannels) {
    this.validAutoChannels = validAutoChannels;
    return this;
  }

  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings addValidAutoChannelsItem(Integer validAutoChannelsItem) {
    if (this.validAutoChannels == null) {
      this.validAutoChannels = new ArrayList<>();
    }
    this.validAutoChannels.add(validAutoChannelsItem);
    return this;
  }

  /**
   * Sets valid auto channels for 2.4Ghz band. Can be one of &#39;1&#39;, &#39;6&#39; or &#39;11&#39;. Defaults to [1, 6, 11].
   * @return validAutoChannels
   */
  @javax.annotation.Nullable
  public List<Integer> getValidAutoChannels() {
    return validAutoChannels;
  }

  public void setValidAutoChannels(List<Integer> validAutoChannels) {
    this.validAutoChannels = validAutoChannels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings createNetworkWirelessRfProfileRequestTwoFourGhzSettings = (CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings) o;
    return Objects.equals(this.axEnabled, createNetworkWirelessRfProfileRequestTwoFourGhzSettings.axEnabled) &&
        Objects.equals(this.maxPower, createNetworkWirelessRfProfileRequestTwoFourGhzSettings.maxPower) &&
        Objects.equals(this.minBitrate, createNetworkWirelessRfProfileRequestTwoFourGhzSettings.minBitrate) &&
        Objects.equals(this.minPower, createNetworkWirelessRfProfileRequestTwoFourGhzSettings.minPower) &&
        Objects.equals(this.rxsop, createNetworkWirelessRfProfileRequestTwoFourGhzSettings.rxsop) &&
        Objects.equals(this.validAutoChannels, createNetworkWirelessRfProfileRequestTwoFourGhzSettings.validAutoChannels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(axEnabled, maxPower, minBitrate, minPower, rxsop, validAutoChannels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings {\n");
    sb.append("    axEnabled: ").append(toIndentedString(axEnabled)).append("\n");
    sb.append("    maxPower: ").append(toIndentedString(maxPower)).append("\n");
    sb.append("    minBitrate: ").append(toIndentedString(minBitrate)).append("\n");
    sb.append("    minPower: ").append(toIndentedString(minPower)).append("\n");
    sb.append("    rxsop: ").append(toIndentedString(rxsop)).append("\n");
    sb.append("    validAutoChannels: ").append(toIndentedString(validAutoChannels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("axEnabled");
    openapiFields.add("maxPower");
    openapiFields.add("minBitrate");
    openapiFields.add("minPower");
    openapiFields.add("rxsop");
    openapiFields.add("validAutoChannels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings is not found in the empty JSON string", CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("validAutoChannels") != null && !jsonObj.get("validAutoChannels").isJsonNull() && !jsonObj.get("validAutoChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validAutoChannels` to be an array in the JSON string but got `%s`", jsonObj.get("validAutoChannels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings>() {
           @Override
           public void write(JsonWriter out, CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
   */
  public static CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.class);
  }

  /**
   * Convert an instance of CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

