/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkApplianceSecurityMalwareRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkApplianceSecurityMalwareRequest {
  public static final String SERIALIZED_NAME_ALLOWED_FILES = "allowedFiles";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FILES)
  private List<UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner> allowedFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_URLS = "allowedUrls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_URLS)
  private List<UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner> allowedUrls = new ArrayList<>();

  /**
   * Set mode to &#39;enabled&#39; to enable malware prevention, otherwise &#39;disabled&#39;
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    DISABLED("disabled"),
    
    ENABLED("enabled");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public UpdateNetworkApplianceSecurityMalwareRequest() {
  }

  public UpdateNetworkApplianceSecurityMalwareRequest allowedFiles(List<UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner> allowedFiles) {
    this.allowedFiles = allowedFiles;
    return this;
  }

  public UpdateNetworkApplianceSecurityMalwareRequest addAllowedFilesItem(UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner allowedFilesItem) {
    if (this.allowedFiles == null) {
      this.allowedFiles = new ArrayList<>();
    }
    this.allowedFiles.add(allowedFilesItem);
    return this;
  }

  /**
   * The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing
   * @return allowedFiles
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner> getAllowedFiles() {
    return allowedFiles;
  }

  public void setAllowedFiles(List<UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner> allowedFiles) {
    this.allowedFiles = allowedFiles;
  }


  public UpdateNetworkApplianceSecurityMalwareRequest allowedUrls(List<UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner> allowedUrls) {
    this.allowedUrls = allowedUrls;
    return this;
  }

  public UpdateNetworkApplianceSecurityMalwareRequest addAllowedUrlsItem(UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner allowedUrlsItem) {
    if (this.allowedUrls == null) {
      this.allowedUrls = new ArrayList<>();
    }
    this.allowedUrls.add(allowedUrlsItem);
    return this;
  }

  /**
   * The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing
   * @return allowedUrls
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner> getAllowedUrls() {
    return allowedUrls;
  }

  public void setAllowedUrls(List<UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner> allowedUrls) {
    this.allowedUrls = allowedUrls;
  }


  public UpdateNetworkApplianceSecurityMalwareRequest mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Set mode to &#39;enabled&#39; to enable malware prevention, otherwise &#39;disabled&#39;
   * @return mode
   */
  @javax.annotation.Nonnull
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest = (UpdateNetworkApplianceSecurityMalwareRequest) o;
    return Objects.equals(this.allowedFiles, updateNetworkApplianceSecurityMalwareRequest.allowedFiles) &&
        Objects.equals(this.allowedUrls, updateNetworkApplianceSecurityMalwareRequest.allowedUrls) &&
        Objects.equals(this.mode, updateNetworkApplianceSecurityMalwareRequest.mode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedFiles, allowedUrls, mode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkApplianceSecurityMalwareRequest {\n");
    sb.append("    allowedFiles: ").append(toIndentedString(allowedFiles)).append("\n");
    sb.append("    allowedUrls: ").append(toIndentedString(allowedUrls)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedFiles");
    openapiFields.add("allowedUrls");
    openapiFields.add("mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkApplianceSecurityMalwareRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkApplianceSecurityMalwareRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkApplianceSecurityMalwareRequest is not found in the empty JSON string", UpdateNetworkApplianceSecurityMalwareRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkApplianceSecurityMalwareRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkApplianceSecurityMalwareRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkApplianceSecurityMalwareRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allowedFiles") != null && !jsonObj.get("allowedFiles").isJsonNull()) {
        JsonArray jsonArrayallowedFiles = jsonObj.getAsJsonArray("allowedFiles");
        if (jsonArrayallowedFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedFiles` to be an array in the JSON string but got `%s`", jsonObj.get("allowedFiles").toString()));
          }

          // validate the optional field `allowedFiles` (array)
          for (int i = 0; i < jsonArrayallowedFiles.size(); i++) {
            UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner.validateJsonElement(jsonArrayallowedFiles.get(i));
          };
        }
      }
      if (jsonObj.get("allowedUrls") != null && !jsonObj.get("allowedUrls").isJsonNull()) {
        JsonArray jsonArrayallowedUrls = jsonObj.getAsJsonArray("allowedUrls");
        if (jsonArrayallowedUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedUrls` to be an array in the JSON string but got `%s`", jsonObj.get("allowedUrls").toString()));
          }

          // validate the optional field `allowedUrls` (array)
          for (int i = 0; i < jsonArrayallowedUrls.size(); i++) {
            UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner.validateJsonElement(jsonArrayallowedUrls.get(i));
          };
        }
      }
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the required field `mode`
      ModeEnum.validateJsonElement(jsonObj.get("mode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkApplianceSecurityMalwareRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkApplianceSecurityMalwareRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkApplianceSecurityMalwareRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkApplianceSecurityMalwareRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkApplianceSecurityMalwareRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkApplianceSecurityMalwareRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkApplianceSecurityMalwareRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkApplianceSecurityMalwareRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkApplianceSecurityMalwareRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkApplianceSecurityMalwareRequest
   */
  public static UpdateNetworkApplianceSecurityMalwareRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkApplianceSecurityMalwareRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkApplianceSecurityMalwareRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

