/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetNetworkInsightApplicationHealthByTime200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HealthByTimeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HealthByTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthByTimeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNetworkInsightApplicationHealthByTime_2
     * @param networkId  (required)
     * @param applicationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkInsightApplicationHealthByTime_2Call(String networkId, String applicationId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/insight/applications/{applicationId}/healthByTime"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkInsightApplicationHealthByTime_2ValidateBeforeCall(String networkId, String applicationId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkInsightApplicationHealthByTime_2(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getNetworkInsightApplicationHealthByTime_2(Async)");
        }

        return getNetworkInsightApplicationHealthByTime_2Call(networkId, applicationId, t0, t1, timespan, resolution, _callback);

    }

    /**
     * Get application health by time
     * Get application health by time
     * @param networkId  (required)
     * @param applicationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300. (optional)
     * @return List&lt;GetNetworkInsightApplicationHealthByTime200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkInsightApplicationHealthByTime200ResponseInner> getNetworkInsightApplicationHealthByTime_2(String networkId, String applicationId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        ApiResponse<List<GetNetworkInsightApplicationHealthByTime200ResponseInner>> localVarResp = getNetworkInsightApplicationHealthByTime_2WithHttpInfo(networkId, applicationId, t0, t1, timespan, resolution);
        return localVarResp.getData();
    }

    /**
     * Get application health by time
     * Get application health by time
     * @param networkId  (required)
     * @param applicationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkInsightApplicationHealthByTime200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkInsightApplicationHealthByTime200ResponseInner>> getNetworkInsightApplicationHealthByTime_2WithHttpInfo(String networkId, String applicationId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        okhttp3.Call localVarCall = getNetworkInsightApplicationHealthByTime_2ValidateBeforeCall(networkId, applicationId, t0, t1, timespan, resolution, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkInsightApplicationHealthByTime200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get application health by time (asynchronously)
     * Get application health by time
     * @param networkId  (required)
     * @param applicationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkInsightApplicationHealthByTime_2Async(String networkId, String applicationId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback<List<GetNetworkInsightApplicationHealthByTime200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkInsightApplicationHealthByTime_2ValidateBeforeCall(networkId, applicationId, t0, t1, timespan, resolution, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkInsightApplicationHealthByTime200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
