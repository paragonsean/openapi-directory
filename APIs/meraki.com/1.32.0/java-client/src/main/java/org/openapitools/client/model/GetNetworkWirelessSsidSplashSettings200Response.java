/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseBilling;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseSplashImage;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkWirelessSsidSplashSettings200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessSsidSplashSettings200Response {
  public static final String SERIALIZED_NAME_ALLOW_SIMULTANEOUS_LOGINS = "allowSimultaneousLogins";
  @SerializedName(SERIALIZED_NAME_ALLOW_SIMULTANEOUS_LOGINS)
  private Boolean allowSimultaneousLogins;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private GetNetworkWirelessSsidSplashSettings200ResponseBilling billing;

  public static final String SERIALIZED_NAME_BLOCK_ALL_TRAFFIC_BEFORE_SIGN_ON = "blockAllTrafficBeforeSignOn";
  @SerializedName(SERIALIZED_NAME_BLOCK_ALL_TRAFFIC_BEFORE_SIGN_ON)
  private Boolean blockAllTrafficBeforeSignOn;

  public static final String SERIALIZED_NAME_CONTROLLER_DISCONNECTION_BEHAVIOR = "controllerDisconnectionBehavior";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_DISCONNECTION_BEHAVIOR)
  private String controllerDisconnectionBehavior;

  public static final String SERIALIZED_NAME_GUEST_SPONSORSHIP = "guestSponsorship";
  @SerializedName(SERIALIZED_NAME_GUEST_SPONSORSHIP)
  private GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship guestSponsorship;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SELF_REGISTRATION = "selfRegistration";
  @SerializedName(SERIALIZED_NAME_SELF_REGISTRATION)
  private GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration selfRegistration;

  public static final String SERIALIZED_NAME_SENTRY_ENROLLMENT = "sentryEnrollment";
  @SerializedName(SERIALIZED_NAME_SENTRY_ENROLLMENT)
  private GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment sentryEnrollment;

  public static final String SERIALIZED_NAME_SPLASH_IMAGE = "splashImage";
  @SerializedName(SERIALIZED_NAME_SPLASH_IMAGE)
  private GetNetworkWirelessSsidSplashSettings200ResponseSplashImage splashImage;

  public static final String SERIALIZED_NAME_SPLASH_LOGO = "splashLogo";
  @SerializedName(SERIALIZED_NAME_SPLASH_LOGO)
  private GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo splashLogo;

  public static final String SERIALIZED_NAME_SPLASH_PAGE = "splashPage";
  @SerializedName(SERIALIZED_NAME_SPLASH_PAGE)
  private String splashPage;

  public static final String SERIALIZED_NAME_SPLASH_PREPAID_FRONT = "splashPrepaidFront";
  @SerializedName(SERIALIZED_NAME_SPLASH_PREPAID_FRONT)
  private GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront splashPrepaidFront;

  public static final String SERIALIZED_NAME_SPLASH_TIMEOUT = "splashTimeout";
  @SerializedName(SERIALIZED_NAME_SPLASH_TIMEOUT)
  private Integer splashTimeout;

  public static final String SERIALIZED_NAME_SPLASH_URL = "splashUrl";
  @SerializedName(SERIALIZED_NAME_SPLASH_URL)
  private String splashUrl;

  public static final String SERIALIZED_NAME_SSID_NUMBER = "ssidNumber";
  @SerializedName(SERIALIZED_NAME_SSID_NUMBER)
  private Integer ssidNumber;

  public static final String SERIALIZED_NAME_USE_REDIRECT_URL = "useRedirectUrl";
  @SerializedName(SERIALIZED_NAME_USE_REDIRECT_URL)
  private Boolean useRedirectUrl;

  public static final String SERIALIZED_NAME_USE_SPLASH_URL = "useSplashUrl";
  @SerializedName(SERIALIZED_NAME_USE_SPLASH_URL)
  private Boolean useSplashUrl;

  public static final String SERIALIZED_NAME_WELCOME_MESSAGE = "welcomeMessage";
  @SerializedName(SERIALIZED_NAME_WELCOME_MESSAGE)
  private String welcomeMessage;

  public GetNetworkWirelessSsidSplashSettings200Response() {
  }

  public GetNetworkWirelessSsidSplashSettings200Response allowSimultaneousLogins(Boolean allowSimultaneousLogins) {
    this.allowSimultaneousLogins = allowSimultaneousLogins;
    return this;
  }

  /**
   * Whether or not to allow simultaneous logins from different devices.
   * @return allowSimultaneousLogins
   */
  @javax.annotation.Nullable
  public Boolean getAllowSimultaneousLogins() {
    return allowSimultaneousLogins;
  }

  public void setAllowSimultaneousLogins(Boolean allowSimultaneousLogins) {
    this.allowSimultaneousLogins = allowSimultaneousLogins;
  }


  public GetNetworkWirelessSsidSplashSettings200Response billing(GetNetworkWirelessSsidSplashSettings200ResponseBilling billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseBilling getBilling() {
    return billing;
  }

  public void setBilling(GetNetworkWirelessSsidSplashSettings200ResponseBilling billing) {
    this.billing = billing;
  }


  public GetNetworkWirelessSsidSplashSettings200Response blockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
    this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
    return this;
  }

  /**
   * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
   * @return blockAllTrafficBeforeSignOn
   */
  @javax.annotation.Nullable
  public Boolean getBlockAllTrafficBeforeSignOn() {
    return blockAllTrafficBeforeSignOn;
  }

  public void setBlockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
    this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
  }


  public GetNetworkWirelessSsidSplashSettings200Response controllerDisconnectionBehavior(String controllerDisconnectionBehavior) {
    this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
    return this;
  }

  /**
   * How login attempts should be handled when the controller is unreachable.
   * @return controllerDisconnectionBehavior
   */
  @javax.annotation.Nullable
  public String getControllerDisconnectionBehavior() {
    return controllerDisconnectionBehavior;
  }

  public void setControllerDisconnectionBehavior(String controllerDisconnectionBehavior) {
    this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
  }


  public GetNetworkWirelessSsidSplashSettings200Response guestSponsorship(GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship guestSponsorship) {
    this.guestSponsorship = guestSponsorship;
    return this;
  }

  /**
   * Get guestSponsorship
   * @return guestSponsorship
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship getGuestSponsorship() {
    return guestSponsorship;
  }

  public void setGuestSponsorship(GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship guestSponsorship) {
    this.guestSponsorship = guestSponsorship;
  }


  public GetNetworkWirelessSsidSplashSettings200Response redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The custom redirect URL where the users will go after the splash page.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public GetNetworkWirelessSsidSplashSettings200Response selfRegistration(GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration selfRegistration) {
    this.selfRegistration = selfRegistration;
    return this;
  }

  /**
   * Get selfRegistration
   * @return selfRegistration
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration getSelfRegistration() {
    return selfRegistration;
  }

  public void setSelfRegistration(GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration selfRegistration) {
    this.selfRegistration = selfRegistration;
  }


  public GetNetworkWirelessSsidSplashSettings200Response sentryEnrollment(GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment sentryEnrollment) {
    this.sentryEnrollment = sentryEnrollment;
    return this;
  }

  /**
   * Get sentryEnrollment
   * @return sentryEnrollment
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment getSentryEnrollment() {
    return sentryEnrollment;
  }

  public void setSentryEnrollment(GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment sentryEnrollment) {
    this.sentryEnrollment = sentryEnrollment;
  }


  public GetNetworkWirelessSsidSplashSettings200Response splashImage(GetNetworkWirelessSsidSplashSettings200ResponseSplashImage splashImage) {
    this.splashImage = splashImage;
    return this;
  }

  /**
   * Get splashImage
   * @return splashImage
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseSplashImage getSplashImage() {
    return splashImage;
  }

  public void setSplashImage(GetNetworkWirelessSsidSplashSettings200ResponseSplashImage splashImage) {
    this.splashImage = splashImage;
  }


  public GetNetworkWirelessSsidSplashSettings200Response splashLogo(GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo splashLogo) {
    this.splashLogo = splashLogo;
    return this;
  }

  /**
   * Get splashLogo
   * @return splashLogo
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo getSplashLogo() {
    return splashLogo;
  }

  public void setSplashLogo(GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo splashLogo) {
    this.splashLogo = splashLogo;
  }


  public GetNetworkWirelessSsidSplashSettings200Response splashPage(String splashPage) {
    this.splashPage = splashPage;
    return this;
  }

  /**
   * The type of splash page for this SSID
   * @return splashPage
   */
  @javax.annotation.Nullable
  public String getSplashPage() {
    return splashPage;
  }

  public void setSplashPage(String splashPage) {
    this.splashPage = splashPage;
  }


  public GetNetworkWirelessSsidSplashSettings200Response splashPrepaidFront(GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront splashPrepaidFront) {
    this.splashPrepaidFront = splashPrepaidFront;
    return this;
  }

  /**
   * Get splashPrepaidFront
   * @return splashPrepaidFront
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront getSplashPrepaidFront() {
    return splashPrepaidFront;
  }

  public void setSplashPrepaidFront(GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront splashPrepaidFront) {
    this.splashPrepaidFront = splashPrepaidFront;
  }


  public GetNetworkWirelessSsidSplashSettings200Response splashTimeout(Integer splashTimeout) {
    this.splashTimeout = splashTimeout;
    return this;
  }

  /**
   * Splash timeout in minutes.
   * @return splashTimeout
   */
  @javax.annotation.Nullable
  public Integer getSplashTimeout() {
    return splashTimeout;
  }

  public void setSplashTimeout(Integer splashTimeout) {
    this.splashTimeout = splashTimeout;
  }


  public GetNetworkWirelessSsidSplashSettings200Response splashUrl(String splashUrl) {
    this.splashUrl = splashUrl;
    return this;
  }

  /**
   * The custom splash URL of the click-through splash page.
   * @return splashUrl
   */
  @javax.annotation.Nullable
  public String getSplashUrl() {
    return splashUrl;
  }

  public void setSplashUrl(String splashUrl) {
    this.splashUrl = splashUrl;
  }


  public GetNetworkWirelessSsidSplashSettings200Response ssidNumber(Integer ssidNumber) {
    this.ssidNumber = ssidNumber;
    return this;
  }

  /**
   * SSID number
   * @return ssidNumber
   */
  @javax.annotation.Nullable
  public Integer getSsidNumber() {
    return ssidNumber;
  }

  public void setSsidNumber(Integer ssidNumber) {
    this.ssidNumber = ssidNumber;
  }


  public GetNetworkWirelessSsidSplashSettings200Response useRedirectUrl(Boolean useRedirectUrl) {
    this.useRedirectUrl = useRedirectUrl;
    return this;
  }

  /**
   * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
   * @return useRedirectUrl
   */
  @javax.annotation.Nullable
  public Boolean getUseRedirectUrl() {
    return useRedirectUrl;
  }

  public void setUseRedirectUrl(Boolean useRedirectUrl) {
    this.useRedirectUrl = useRedirectUrl;
  }


  public GetNetworkWirelessSsidSplashSettings200Response useSplashUrl(Boolean useSplashUrl) {
    this.useSplashUrl = useSplashUrl;
    return this;
  }

  /**
   * Boolean indicating whether the users will be redirected to the custom splash url
   * @return useSplashUrl
   */
  @javax.annotation.Nullable
  public Boolean getUseSplashUrl() {
    return useSplashUrl;
  }

  public void setUseSplashUrl(Boolean useSplashUrl) {
    this.useSplashUrl = useSplashUrl;
  }


  public GetNetworkWirelessSsidSplashSettings200Response welcomeMessage(String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
    return this;
  }

  /**
   * The welcome message for the users on the splash page.
   * @return welcomeMessage
   */
  @javax.annotation.Nullable
  public String getWelcomeMessage() {
    return welcomeMessage;
  }

  public void setWelcomeMessage(String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessSsidSplashSettings200Response getNetworkWirelessSsidSplashSettings200Response = (GetNetworkWirelessSsidSplashSettings200Response) o;
    return Objects.equals(this.allowSimultaneousLogins, getNetworkWirelessSsidSplashSettings200Response.allowSimultaneousLogins) &&
        Objects.equals(this.billing, getNetworkWirelessSsidSplashSettings200Response.billing) &&
        Objects.equals(this.blockAllTrafficBeforeSignOn, getNetworkWirelessSsidSplashSettings200Response.blockAllTrafficBeforeSignOn) &&
        Objects.equals(this.controllerDisconnectionBehavior, getNetworkWirelessSsidSplashSettings200Response.controllerDisconnectionBehavior) &&
        Objects.equals(this.guestSponsorship, getNetworkWirelessSsidSplashSettings200Response.guestSponsorship) &&
        Objects.equals(this.redirectUrl, getNetworkWirelessSsidSplashSettings200Response.redirectUrl) &&
        Objects.equals(this.selfRegistration, getNetworkWirelessSsidSplashSettings200Response.selfRegistration) &&
        Objects.equals(this.sentryEnrollment, getNetworkWirelessSsidSplashSettings200Response.sentryEnrollment) &&
        Objects.equals(this.splashImage, getNetworkWirelessSsidSplashSettings200Response.splashImage) &&
        Objects.equals(this.splashLogo, getNetworkWirelessSsidSplashSettings200Response.splashLogo) &&
        Objects.equals(this.splashPage, getNetworkWirelessSsidSplashSettings200Response.splashPage) &&
        Objects.equals(this.splashPrepaidFront, getNetworkWirelessSsidSplashSettings200Response.splashPrepaidFront) &&
        Objects.equals(this.splashTimeout, getNetworkWirelessSsidSplashSettings200Response.splashTimeout) &&
        Objects.equals(this.splashUrl, getNetworkWirelessSsidSplashSettings200Response.splashUrl) &&
        Objects.equals(this.ssidNumber, getNetworkWirelessSsidSplashSettings200Response.ssidNumber) &&
        Objects.equals(this.useRedirectUrl, getNetworkWirelessSsidSplashSettings200Response.useRedirectUrl) &&
        Objects.equals(this.useSplashUrl, getNetworkWirelessSsidSplashSettings200Response.useSplashUrl) &&
        Objects.equals(this.welcomeMessage, getNetworkWirelessSsidSplashSettings200Response.welcomeMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSimultaneousLogins, billing, blockAllTrafficBeforeSignOn, controllerDisconnectionBehavior, guestSponsorship, redirectUrl, selfRegistration, sentryEnrollment, splashImage, splashLogo, splashPage, splashPrepaidFront, splashTimeout, splashUrl, ssidNumber, useRedirectUrl, useSplashUrl, welcomeMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessSsidSplashSettings200Response {\n");
    sb.append("    allowSimultaneousLogins: ").append(toIndentedString(allowSimultaneousLogins)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    blockAllTrafficBeforeSignOn: ").append(toIndentedString(blockAllTrafficBeforeSignOn)).append("\n");
    sb.append("    controllerDisconnectionBehavior: ").append(toIndentedString(controllerDisconnectionBehavior)).append("\n");
    sb.append("    guestSponsorship: ").append(toIndentedString(guestSponsorship)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    selfRegistration: ").append(toIndentedString(selfRegistration)).append("\n");
    sb.append("    sentryEnrollment: ").append(toIndentedString(sentryEnrollment)).append("\n");
    sb.append("    splashImage: ").append(toIndentedString(splashImage)).append("\n");
    sb.append("    splashLogo: ").append(toIndentedString(splashLogo)).append("\n");
    sb.append("    splashPage: ").append(toIndentedString(splashPage)).append("\n");
    sb.append("    splashPrepaidFront: ").append(toIndentedString(splashPrepaidFront)).append("\n");
    sb.append("    splashTimeout: ").append(toIndentedString(splashTimeout)).append("\n");
    sb.append("    splashUrl: ").append(toIndentedString(splashUrl)).append("\n");
    sb.append("    ssidNumber: ").append(toIndentedString(ssidNumber)).append("\n");
    sb.append("    useRedirectUrl: ").append(toIndentedString(useRedirectUrl)).append("\n");
    sb.append("    useSplashUrl: ").append(toIndentedString(useSplashUrl)).append("\n");
    sb.append("    welcomeMessage: ").append(toIndentedString(welcomeMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowSimultaneousLogins");
    openapiFields.add("billing");
    openapiFields.add("blockAllTrafficBeforeSignOn");
    openapiFields.add("controllerDisconnectionBehavior");
    openapiFields.add("guestSponsorship");
    openapiFields.add("redirectUrl");
    openapiFields.add("selfRegistration");
    openapiFields.add("sentryEnrollment");
    openapiFields.add("splashImage");
    openapiFields.add("splashLogo");
    openapiFields.add("splashPage");
    openapiFields.add("splashPrepaidFront");
    openapiFields.add("splashTimeout");
    openapiFields.add("splashUrl");
    openapiFields.add("ssidNumber");
    openapiFields.add("useRedirectUrl");
    openapiFields.add("useSplashUrl");
    openapiFields.add("welcomeMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessSsidSplashSettings200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessSsidSplashSettings200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessSsidSplashSettings200Response is not found in the empty JSON string", GetNetworkWirelessSsidSplashSettings200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessSsidSplashSettings200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessSsidSplashSettings200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseBilling.validateJsonElement(jsonObj.get("billing"));
      }
      if ((jsonObj.get("controllerDisconnectionBehavior") != null && !jsonObj.get("controllerDisconnectionBehavior").isJsonNull()) && !jsonObj.get("controllerDisconnectionBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllerDisconnectionBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllerDisconnectionBehavior").toString()));
      }
      // validate the optional field `guestSponsorship`
      if (jsonObj.get("guestSponsorship") != null && !jsonObj.get("guestSponsorship").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseGuestSponsorship.validateJsonElement(jsonObj.get("guestSponsorship"));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      // validate the optional field `selfRegistration`
      if (jsonObj.get("selfRegistration") != null && !jsonObj.get("selfRegistration").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseSelfRegistration.validateJsonElement(jsonObj.get("selfRegistration"));
      }
      // validate the optional field `sentryEnrollment`
      if (jsonObj.get("sentryEnrollment") != null && !jsonObj.get("sentryEnrollment").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.validateJsonElement(jsonObj.get("sentryEnrollment"));
      }
      // validate the optional field `splashImage`
      if (jsonObj.get("splashImage") != null && !jsonObj.get("splashImage").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseSplashImage.validateJsonElement(jsonObj.get("splashImage"));
      }
      // validate the optional field `splashLogo`
      if (jsonObj.get("splashLogo") != null && !jsonObj.get("splashLogo").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseSplashLogo.validateJsonElement(jsonObj.get("splashLogo"));
      }
      if ((jsonObj.get("splashPage") != null && !jsonObj.get("splashPage").isJsonNull()) && !jsonObj.get("splashPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splashPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splashPage").toString()));
      }
      // validate the optional field `splashPrepaidFront`
      if (jsonObj.get("splashPrepaidFront") != null && !jsonObj.get("splashPrepaidFront").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseSplashPrepaidFront.validateJsonElement(jsonObj.get("splashPrepaidFront"));
      }
      if ((jsonObj.get("splashUrl") != null && !jsonObj.get("splashUrl").isJsonNull()) && !jsonObj.get("splashUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splashUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splashUrl").toString()));
      }
      if ((jsonObj.get("welcomeMessage") != null && !jsonObj.get("welcomeMessage").isJsonNull()) && !jsonObj.get("welcomeMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcomeMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcomeMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessSsidSplashSettings200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessSsidSplashSettings200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessSsidSplashSettings200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessSsidSplashSettings200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessSsidSplashSettings200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessSsidSplashSettings200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessSsidSplashSettings200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessSsidSplashSettings200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessSsidSplashSettings200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessSsidSplashSettings200Response
   */
  public static GetNetworkWirelessSsidSplashSettings200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessSsidSplashSettings200Response.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessSsidSplashSettings200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

