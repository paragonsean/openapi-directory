/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDeviceSwitchRoutingStaticRoute200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceSwitchRoutingStaticRoute200Response {
  public static final String SERIALIZED_NAME_ADVERTISE_VIA_OSPF_ENABLED = "advertiseViaOspfEnabled";
  @SerializedName(SERIALIZED_NAME_ADVERTISE_VIA_OSPF_ENABLED)
  private Boolean advertiseViaOspfEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_HOP_IP = "nextHopIp";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_IP)
  private String nextHopIp;

  public static final String SERIALIZED_NAME_PREFER_OVER_OSPF_ROUTES_ENABLED = "preferOverOspfRoutesEnabled";
  @SerializedName(SERIALIZED_NAME_PREFER_OVER_OSPF_ROUTES_ENABLED)
  private Boolean preferOverOspfRoutesEnabled;

  public static final String SERIALIZED_NAME_STATIC_ROUTE_ID = "staticRouteId";
  @SerializedName(SERIALIZED_NAME_STATIC_ROUTE_ID)
  private String staticRouteId;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  public GetDeviceSwitchRoutingStaticRoute200Response() {
  }

  public GetDeviceSwitchRoutingStaticRoute200Response advertiseViaOspfEnabled(Boolean advertiseViaOspfEnabled) {
    this.advertiseViaOspfEnabled = advertiseViaOspfEnabled;
    return this;
  }

  /**
   * Option to advertise static routes via OSPF
   * @return advertiseViaOspfEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdvertiseViaOspfEnabled() {
    return advertiseViaOspfEnabled;
  }

  public void setAdvertiseViaOspfEnabled(Boolean advertiseViaOspfEnabled) {
    this.advertiseViaOspfEnabled = advertiseViaOspfEnabled;
  }


  public GetDeviceSwitchRoutingStaticRoute200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name or description of the layer 3 static route
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetDeviceSwitchRoutingStaticRoute200Response nextHopIp(String nextHopIp) {
    this.nextHopIp = nextHopIp;
    return this;
  }

  /**
   *  The IP address of the router to which traffic for this destination network should be sent
   * @return nextHopIp
   */
  @javax.annotation.Nonnull
  public String getNextHopIp() {
    return nextHopIp;
  }

  public void setNextHopIp(String nextHopIp) {
    this.nextHopIp = nextHopIp;
  }


  public GetDeviceSwitchRoutingStaticRoute200Response preferOverOspfRoutesEnabled(Boolean preferOverOspfRoutesEnabled) {
    this.preferOverOspfRoutesEnabled = preferOverOspfRoutesEnabled;
    return this;
  }

  /**
   * Option to prefer static routes over OSPF routes
   * @return preferOverOspfRoutesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPreferOverOspfRoutesEnabled() {
    return preferOverOspfRoutesEnabled;
  }

  public void setPreferOverOspfRoutesEnabled(Boolean preferOverOspfRoutesEnabled) {
    this.preferOverOspfRoutesEnabled = preferOverOspfRoutesEnabled;
  }


  public GetDeviceSwitchRoutingStaticRoute200Response staticRouteId(String staticRouteId) {
    this.staticRouteId = staticRouteId;
    return this;
  }

  /**
   * The identifier of a layer 3 static route
   * @return staticRouteId
   */
  @javax.annotation.Nullable
  public String getStaticRouteId() {
    return staticRouteId;
  }

  public void setStaticRouteId(String staticRouteId) {
    this.staticRouteId = staticRouteId;
  }


  public GetDeviceSwitchRoutingStaticRoute200Response subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
   * @return subnet
   */
  @javax.annotation.Nonnull
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceSwitchRoutingStaticRoute200Response getDeviceSwitchRoutingStaticRoute200Response = (GetDeviceSwitchRoutingStaticRoute200Response) o;
    return Objects.equals(this.advertiseViaOspfEnabled, getDeviceSwitchRoutingStaticRoute200Response.advertiseViaOspfEnabled) &&
        Objects.equals(this.name, getDeviceSwitchRoutingStaticRoute200Response.name) &&
        Objects.equals(this.nextHopIp, getDeviceSwitchRoutingStaticRoute200Response.nextHopIp) &&
        Objects.equals(this.preferOverOspfRoutesEnabled, getDeviceSwitchRoutingStaticRoute200Response.preferOverOspfRoutesEnabled) &&
        Objects.equals(this.staticRouteId, getDeviceSwitchRoutingStaticRoute200Response.staticRouteId) &&
        Objects.equals(this.subnet, getDeviceSwitchRoutingStaticRoute200Response.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiseViaOspfEnabled, name, nextHopIp, preferOverOspfRoutesEnabled, staticRouteId, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceSwitchRoutingStaticRoute200Response {\n");
    sb.append("    advertiseViaOspfEnabled: ").append(toIndentedString(advertiseViaOspfEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextHopIp: ").append(toIndentedString(nextHopIp)).append("\n");
    sb.append("    preferOverOspfRoutesEnabled: ").append(toIndentedString(preferOverOspfRoutesEnabled)).append("\n");
    sb.append("    staticRouteId: ").append(toIndentedString(staticRouteId)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiseViaOspfEnabled");
    openapiFields.add("name");
    openapiFields.add("nextHopIp");
    openapiFields.add("preferOverOspfRoutesEnabled");
    openapiFields.add("staticRouteId");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nextHopIp");
    openapiRequiredFields.add("subnet");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceSwitchRoutingStaticRoute200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceSwitchRoutingStaticRoute200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceSwitchRoutingStaticRoute200Response is not found in the empty JSON string", GetDeviceSwitchRoutingStaticRoute200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceSwitchRoutingStaticRoute200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceSwitchRoutingStaticRoute200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDeviceSwitchRoutingStaticRoute200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nextHopIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopIp").toString()));
      }
      if ((jsonObj.get("staticRouteId") != null && !jsonObj.get("staticRouteId").isJsonNull()) && !jsonObj.get("staticRouteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticRouteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticRouteId").toString()));
      }
      if (!jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceSwitchRoutingStaticRoute200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceSwitchRoutingStaticRoute200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceSwitchRoutingStaticRoute200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceSwitchRoutingStaticRoute200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceSwitchRoutingStaticRoute200Response>() {
           @Override
           public void write(JsonWriter out, GetDeviceSwitchRoutingStaticRoute200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceSwitchRoutingStaticRoute200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceSwitchRoutingStaticRoute200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceSwitchRoutingStaticRoute200Response
   * @throws IOException if the JSON string is invalid with respect to GetDeviceSwitchRoutingStaticRoute200Response
   */
  public static GetDeviceSwitchRoutingStaticRoute200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceSwitchRoutingStaticRoute200Response.class);
  }

  /**
   * Convert an instance of GetDeviceSwitchRoutingStaticRoute200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

