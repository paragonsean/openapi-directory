/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Manual radio settings for 5 GHz.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings {
  /**
   * Sets a manual channel for 5 GHz. Can be &#39;36&#39;, &#39;40&#39;, &#39;44&#39;, &#39;48&#39;, &#39;52&#39;, &#39;56&#39;, &#39;60&#39;, &#39;64&#39;, &#39;100&#39;, &#39;104&#39;, &#39;108&#39;, &#39;112&#39;, &#39;116&#39;, &#39;120&#39;, &#39;124&#39;, &#39;128&#39;, &#39;132&#39;, &#39;136&#39;, &#39;140&#39;, &#39;144&#39;, &#39;149&#39;, &#39;153&#39;, &#39;157&#39;, &#39;161&#39;, &#39;165&#39;, &#39;169&#39;, &#39;173&#39; or &#39;177&#39; or null for using auto channel.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    NUMBER_36(36),
    
    NUMBER_40(40),
    
    NUMBER_44(44),
    
    NUMBER_48(48),
    
    NUMBER_52(52),
    
    NUMBER_56(56),
    
    NUMBER_60(60),
    
    NUMBER_64(64),
    
    NUMBER_100(100),
    
    NUMBER_104(104),
    
    NUMBER_108(108),
    
    NUMBER_112(112),
    
    NUMBER_116(116),
    
    NUMBER_120(120),
    
    NUMBER_124(124),
    
    NUMBER_128(128),
    
    NUMBER_132(132),
    
    NUMBER_136(136),
    
    NUMBER_140(140),
    
    NUMBER_144(144),
    
    NUMBER_149(149),
    
    NUMBER_153(153),
    
    NUMBER_157(157),
    
    NUMBER_161(161),
    
    NUMBER_165(165),
    
    NUMBER_169(169),
    
    NUMBER_173(173),
    
    NUMBER_177(177);

    private Integer value;

    ChannelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(Integer value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  /**
   * Sets a manual channel for 5 GHz. Can be &#39;0&#39;, &#39;20&#39;, &#39;40&#39;, &#39;80&#39; or &#39;160&#39; or null for using auto channel width.
   */
  @JsonAdapter(ChannelWidthEnum.Adapter.class)
  public enum ChannelWidthEnum {
    NUMBER_0(0),
    
    NUMBER_20(20),
    
    NUMBER_40(40),
    
    NUMBER_80(80),
    
    NUMBER_160(160);

    private Integer value;

    ChannelWidthEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelWidthEnum fromValue(Integer value) {
      for (ChannelWidthEnum b : ChannelWidthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelWidthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelWidthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelWidthEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ChannelWidthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ChannelWidthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL_WIDTH = "channelWidth";
  @SerializedName(SERIALIZED_NAME_CHANNEL_WIDTH)
  private ChannelWidthEnum channelWidth;

  public static final String SERIALIZED_NAME_TARGET_POWER = "targetPower";
  @SerializedName(SERIALIZED_NAME_TARGET_POWER)
  private Integer targetPower;

  public UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings() {
  }

  public UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Sets a manual channel for 5 GHz. Can be &#39;36&#39;, &#39;40&#39;, &#39;44&#39;, &#39;48&#39;, &#39;52&#39;, &#39;56&#39;, &#39;60&#39;, &#39;64&#39;, &#39;100&#39;, &#39;104&#39;, &#39;108&#39;, &#39;112&#39;, &#39;116&#39;, &#39;120&#39;, &#39;124&#39;, &#39;128&#39;, &#39;132&#39;, &#39;136&#39;, &#39;140&#39;, &#39;144&#39;, &#39;149&#39;, &#39;153&#39;, &#39;157&#39;, &#39;161&#39;, &#39;165&#39;, &#39;169&#39;, &#39;173&#39; or &#39;177&#39; or null for using auto channel.
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings channelWidth(ChannelWidthEnum channelWidth) {
    this.channelWidth = channelWidth;
    return this;
  }

  /**
   * Sets a manual channel for 5 GHz. Can be &#39;0&#39;, &#39;20&#39;, &#39;40&#39;, &#39;80&#39; or &#39;160&#39; or null for using auto channel width.
   * @return channelWidth
   */
  @javax.annotation.Nullable
  public ChannelWidthEnum getChannelWidth() {
    return channelWidth;
  }

  public void setChannelWidth(ChannelWidthEnum channelWidth) {
    this.channelWidth = channelWidth;
  }


  public UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings targetPower(Integer targetPower) {
    this.targetPower = targetPower;
    return this;
  }

  /**
   * Set a manual target power for 5 GHz. Can be between &#39;8&#39; or &#39;30&#39; or null for using auto power range.
   * @return targetPower
   */
  @javax.annotation.Nullable
  public Integer getTargetPower() {
    return targetPower;
  }

  public void setTargetPower(Integer targetPower) {
    this.targetPower = targetPower;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings updateDeviceWirelessRadioSettingsRequestFiveGhzSettings = (UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings) o;
    return Objects.equals(this.channel, updateDeviceWirelessRadioSettingsRequestFiveGhzSettings.channel) &&
        Objects.equals(this.channelWidth, updateDeviceWirelessRadioSettingsRequestFiveGhzSettings.channelWidth) &&
        Objects.equals(this.targetPower, updateDeviceWirelessRadioSettingsRequestFiveGhzSettings.targetPower);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, channelWidth, targetPower);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    channelWidth: ").append(toIndentedString(channelWidth)).append("\n");
    sb.append("    targetPower: ").append(toIndentedString(targetPower)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("channelWidth");
    openapiFields.add("targetPower");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings is not found in the empty JSON string", UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      }
      // validate the optional field `channelWidth`
      if (jsonObj.get("channelWidth") != null && !jsonObj.get("channelWidth").isJsonNull()) {
        ChannelWidthEnum.validateJsonElement(jsonObj.get("channelWidth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
   */
  public static UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.class);
  }

  /**
   * Convert an instance of UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

