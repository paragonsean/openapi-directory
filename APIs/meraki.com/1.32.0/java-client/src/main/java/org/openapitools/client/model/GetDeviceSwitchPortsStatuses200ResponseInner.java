/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInnerCdp;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInnerLldp;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDeviceSwitchPortsStatuses200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceSwitchPortsStatuses200ResponseInner {
  public static final String SERIALIZED_NAME_CDP = "cdp";
  @SerializedName(SERIALIZED_NAME_CDP)
  private GetDeviceSwitchPortsStatuses200ResponseInnerCdp cdp;

  public static final String SERIALIZED_NAME_CLIENT_COUNT = "clientCount";
  @SerializedName(SERIALIZED_NAME_CLIENT_COUNT)
  private Integer clientCount;

  /**
   * The current duplex of a connected port.
   */
  @JsonAdapter(DuplexEnum.Adapter.class)
  public enum DuplexEnum {
    EMPTY(""),
    
    FULL("full"),
    
    HALF("half");

    private String value;

    DuplexEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplexEnum fromValue(String value) {
      for (DuplexEnum b : DuplexEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DuplexEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplexEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplexEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DuplexEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DuplexEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUPLEX = "duplex";
  @SerializedName(SERIALIZED_NAME_DUPLEX)
  private DuplexEnum duplex;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<String> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_UPLINK = "isUplink";
  @SerializedName(SERIALIZED_NAME_IS_UPLINK)
  private Boolean isUplink;

  public static final String SERIALIZED_NAME_LLDP = "lldp";
  @SerializedName(SERIALIZED_NAME_LLDP)
  private GetDeviceSwitchPortsStatuses200ResponseInnerLldp lldp;

  public static final String SERIALIZED_NAME_PORT_ID = "portId";
  @SerializedName(SERIALIZED_NAME_PORT_ID)
  private String portId;

  public static final String SERIALIZED_NAME_POWER_USAGE_IN_WH = "powerUsageInWh";
  @SerializedName(SERIALIZED_NAME_POWER_USAGE_IN_WH)
  private Float powerUsageInWh;

  public static final String SERIALIZED_NAME_SECURE_PORT = "securePort";
  @SerializedName(SERIALIZED_NAME_SECURE_PORT)
  private GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort securePort;

  /**
   * The current data transfer rate which the port is operating at.
   */
  @JsonAdapter(SpeedEnum.Adapter.class)
  public enum SpeedEnum {
    EMPTY(""),
    
    _1_GBPS("1 Gbps"),
    
    _10_GBPS("10 Gbps"),
    
    _10_MBPS("10 Mbps"),
    
    _100_GBPS("100 Gbps"),
    
    _100_MBPS("100 Mbps"),
    
    _2_5_GBPS("2.5 Gbps"),
    
    _20_GBPS("20 Gbps"),
    
    _40_GBPS("40 Gbps"),
    
    _5_GBPS("5 Gbps");

    private String value;

    SpeedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpeedEnum fromValue(String value) {
      for (SpeedEnum b : SpeedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpeedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpeedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpeedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpeedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpeedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private SpeedEnum speed;

  /**
   * The current connection status of the port.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CONNECTED("Connected"),
    
    DISABLED("Disabled"),
    
    DISCONNECTED("Disconnected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRAFFIC_IN_KBPS = "trafficInKbps";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_IN_KBPS)
  private GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps trafficInKbps;

  public static final String SERIALIZED_NAME_USAGE_IN_KB = "usageInKb";
  @SerializedName(SERIALIZED_NAME_USAGE_IN_KB)
  private GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb usageInKb;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public GetDeviceSwitchPortsStatuses200ResponseInner() {
  }

  public GetDeviceSwitchPortsStatuses200ResponseInner cdp(GetDeviceSwitchPortsStatuses200ResponseInnerCdp cdp) {
    this.cdp = cdp;
    return this;
  }

  /**
   * Get cdp
   * @return cdp
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp getCdp() {
    return cdp;
  }

  public void setCdp(GetDeviceSwitchPortsStatuses200ResponseInnerCdp cdp) {
    this.cdp = cdp;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner clientCount(Integer clientCount) {
    this.clientCount = clientCount;
    return this;
  }

  /**
   * The number of clients connected through this port.
   * @return clientCount
   */
  @javax.annotation.Nullable
  public Integer getClientCount() {
    return clientCount;
  }

  public void setClientCount(Integer clientCount) {
    this.clientCount = clientCount;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner duplex(DuplexEnum duplex) {
    this.duplex = duplex;
    return this;
  }

  /**
   * The current duplex of a connected port.
   * @return duplex
   */
  @javax.annotation.Nullable
  public DuplexEnum getDuplex() {
    return duplex;
  }

  public void setDuplex(DuplexEnum duplex) {
    this.duplex = duplex;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether the port is configured to be enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public GetDeviceSwitchPortsStatuses200ResponseInner addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * All errors present on the port.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner isUplink(Boolean isUplink) {
    this.isUplink = isUplink;
    return this;
  }

  /**
   * Whether the port is the switch&#39;s uplink.
   * @return isUplink
   */
  @javax.annotation.Nullable
  public Boolean getIsUplink() {
    return isUplink;
  }

  public void setIsUplink(Boolean isUplink) {
    this.isUplink = isUplink;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner lldp(GetDeviceSwitchPortsStatuses200ResponseInnerLldp lldp) {
    this.lldp = lldp;
    return this;
  }

  /**
   * Get lldp
   * @return lldp
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp getLldp() {
    return lldp;
  }

  public void setLldp(GetDeviceSwitchPortsStatuses200ResponseInnerLldp lldp) {
    this.lldp = lldp;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner portId(String portId) {
    this.portId = portId;
    return this;
  }

  /**
   * The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
   * @return portId
   */
  @javax.annotation.Nullable
  public String getPortId() {
    return portId;
  }

  public void setPortId(String portId) {
    this.portId = portId;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner powerUsageInWh(Float powerUsageInWh) {
    this.powerUsageInWh = powerUsageInWh;
    return this;
  }

  /**
   * How much power (in watt-hours) has been delivered by this port during the timespan.
   * @return powerUsageInWh
   */
  @javax.annotation.Nullable
  public Float getPowerUsageInWh() {
    return powerUsageInWh;
  }

  public void setPowerUsageInWh(Float powerUsageInWh) {
    this.powerUsageInWh = powerUsageInWh;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner securePort(GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort securePort) {
    this.securePort = securePort;
    return this;
  }

  /**
   * Get securePort
   * @return securePort
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort getSecurePort() {
    return securePort;
  }

  public void setSecurePort(GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort securePort) {
    this.securePort = securePort;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner speed(SpeedEnum speed) {
    this.speed = speed;
    return this;
  }

  /**
   * The current data transfer rate which the port is operating at.
   * @return speed
   */
  @javax.annotation.Nullable
  public SpeedEnum getSpeed() {
    return speed;
  }

  public void setSpeed(SpeedEnum speed) {
    this.speed = speed;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current connection status of the port.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner trafficInKbps(GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps trafficInKbps) {
    this.trafficInKbps = trafficInKbps;
    return this;
  }

  /**
   * Get trafficInKbps
   * @return trafficInKbps
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps getTrafficInKbps() {
    return trafficInKbps;
  }

  public void setTrafficInKbps(GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps trafficInKbps) {
    this.trafficInKbps = trafficInKbps;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner usageInKb(GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb usageInKb) {
    this.usageInKb = usageInKb;
    return this;
  }

  /**
   * Get usageInKb
   * @return usageInKb
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb getUsageInKb() {
    return usageInKb;
  }

  public void setUsageInKb(GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb usageInKb) {
    this.usageInKb = usageInKb;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInner warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public GetDeviceSwitchPortsStatuses200ResponseInner addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * All warnings present on the port.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceSwitchPortsStatuses200ResponseInner getDeviceSwitchPortsStatuses200ResponseInner = (GetDeviceSwitchPortsStatuses200ResponseInner) o;
    return Objects.equals(this.cdp, getDeviceSwitchPortsStatuses200ResponseInner.cdp) &&
        Objects.equals(this.clientCount, getDeviceSwitchPortsStatuses200ResponseInner.clientCount) &&
        Objects.equals(this.duplex, getDeviceSwitchPortsStatuses200ResponseInner.duplex) &&
        Objects.equals(this.enabled, getDeviceSwitchPortsStatuses200ResponseInner.enabled) &&
        Objects.equals(this.errors, getDeviceSwitchPortsStatuses200ResponseInner.errors) &&
        Objects.equals(this.isUplink, getDeviceSwitchPortsStatuses200ResponseInner.isUplink) &&
        Objects.equals(this.lldp, getDeviceSwitchPortsStatuses200ResponseInner.lldp) &&
        Objects.equals(this.portId, getDeviceSwitchPortsStatuses200ResponseInner.portId) &&
        Objects.equals(this.powerUsageInWh, getDeviceSwitchPortsStatuses200ResponseInner.powerUsageInWh) &&
        Objects.equals(this.securePort, getDeviceSwitchPortsStatuses200ResponseInner.securePort) &&
        Objects.equals(this.speed, getDeviceSwitchPortsStatuses200ResponseInner.speed) &&
        Objects.equals(this.status, getDeviceSwitchPortsStatuses200ResponseInner.status) &&
        Objects.equals(this.trafficInKbps, getDeviceSwitchPortsStatuses200ResponseInner.trafficInKbps) &&
        Objects.equals(this.usageInKb, getDeviceSwitchPortsStatuses200ResponseInner.usageInKb) &&
        Objects.equals(this.warnings, getDeviceSwitchPortsStatuses200ResponseInner.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdp, clientCount, duplex, enabled, errors, isUplink, lldp, portId, powerUsageInWh, securePort, speed, status, trafficInKbps, usageInKb, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceSwitchPortsStatuses200ResponseInner {\n");
    sb.append("    cdp: ").append(toIndentedString(cdp)).append("\n");
    sb.append("    clientCount: ").append(toIndentedString(clientCount)).append("\n");
    sb.append("    duplex: ").append(toIndentedString(duplex)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    isUplink: ").append(toIndentedString(isUplink)).append("\n");
    sb.append("    lldp: ").append(toIndentedString(lldp)).append("\n");
    sb.append("    portId: ").append(toIndentedString(portId)).append("\n");
    sb.append("    powerUsageInWh: ").append(toIndentedString(powerUsageInWh)).append("\n");
    sb.append("    securePort: ").append(toIndentedString(securePort)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trafficInKbps: ").append(toIndentedString(trafficInKbps)).append("\n");
    sb.append("    usageInKb: ").append(toIndentedString(usageInKb)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdp");
    openapiFields.add("clientCount");
    openapiFields.add("duplex");
    openapiFields.add("enabled");
    openapiFields.add("errors");
    openapiFields.add("isUplink");
    openapiFields.add("lldp");
    openapiFields.add("portId");
    openapiFields.add("powerUsageInWh");
    openapiFields.add("securePort");
    openapiFields.add("speed");
    openapiFields.add("status");
    openapiFields.add("trafficInKbps");
    openapiFields.add("usageInKb");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceSwitchPortsStatuses200ResponseInner is not found in the empty JSON string", GetDeviceSwitchPortsStatuses200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceSwitchPortsStatuses200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cdp`
      if (jsonObj.get("cdp") != null && !jsonObj.get("cdp").isJsonNull()) {
        GetDeviceSwitchPortsStatuses200ResponseInnerCdp.validateJsonElement(jsonObj.get("cdp"));
      }
      if ((jsonObj.get("duplex") != null && !jsonObj.get("duplex").isJsonNull()) && !jsonObj.get("duplex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplex").toString()));
      }
      // validate the optional field `duplex`
      if (jsonObj.get("duplex") != null && !jsonObj.get("duplex").isJsonNull()) {
        DuplexEnum.validateJsonElement(jsonObj.get("duplex"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull() && !jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }
      // validate the optional field `lldp`
      if (jsonObj.get("lldp") != null && !jsonObj.get("lldp").isJsonNull()) {
        GetDeviceSwitchPortsStatuses200ResponseInnerLldp.validateJsonElement(jsonObj.get("lldp"));
      }
      if ((jsonObj.get("portId") != null && !jsonObj.get("portId").isJsonNull()) && !jsonObj.get("portId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portId").toString()));
      }
      // validate the optional field `securePort`
      if (jsonObj.get("securePort") != null && !jsonObj.get("securePort").isJsonNull()) {
        GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.validateJsonElement(jsonObj.get("securePort"));
      }
      if ((jsonObj.get("speed") != null && !jsonObj.get("speed").isJsonNull()) && !jsonObj.get("speed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `speed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("speed").toString()));
      }
      // validate the optional field `speed`
      if (jsonObj.get("speed") != null && !jsonObj.get("speed").isJsonNull()) {
        SpeedEnum.validateJsonElement(jsonObj.get("speed"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `trafficInKbps`
      if (jsonObj.get("trafficInKbps") != null && !jsonObj.get("trafficInKbps").isJsonNull()) {
        GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps.validateJsonElement(jsonObj.get("trafficInKbps"));
      }
      // validate the optional field `usageInKb`
      if (jsonObj.get("usageInKb") != null && !jsonObj.get("usageInKb").isJsonNull()) {
        GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb.validateJsonElement(jsonObj.get("usageInKb"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceSwitchPortsStatuses200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceSwitchPortsStatuses200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceSwitchPortsStatuses200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetDeviceSwitchPortsStatuses200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceSwitchPortsStatuses200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceSwitchPortsStatuses200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceSwitchPortsStatuses200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInner
   */
  public static GetDeviceSwitchPortsStatuses200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceSwitchPortsStatuses200ResponseInner.class);
  }

  /**
   * Convert an instance of GetDeviceSwitchPortsStatuses200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

