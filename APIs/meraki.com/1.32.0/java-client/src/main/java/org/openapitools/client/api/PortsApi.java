/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CycleDeviceSwitchPortsRequest;
import org.openapitools.client.model.GetDeviceSwitchPorts200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInner;
import org.openapitools.client.model.GetNetworkAppliancePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationSwitchPortsBySwitch200ResponseInner;
import org.openapitools.client.model.UpdateDeviceSwitchPortRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePortRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateSwitchProfilePortRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cycleDeviceSwitchPorts_1
     * @param serial  (required)
     * @param cycleDeviceSwitchPortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cycleDeviceSwitchPorts_1Call(String serial, CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cycleDeviceSwitchPortsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/cycle"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cycleDeviceSwitchPorts_1ValidateBeforeCall(String serial, CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling cycleDeviceSwitchPorts_1(Async)");
        }

        // verify the required parameter 'cycleDeviceSwitchPortsRequest' is set
        if (cycleDeviceSwitchPortsRequest == null) {
            throw new ApiException("Missing the required parameter 'cycleDeviceSwitchPortsRequest' when calling cycleDeviceSwitchPorts_1(Async)");
        }

        return cycleDeviceSwitchPorts_1Call(serial, cycleDeviceSwitchPortsRequest, _callback);

    }

    /**
     * Cycle a set of switch ports
     * Cycle a set of switch ports
     * @param serial  (required)
     * @param cycleDeviceSwitchPortsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object cycleDeviceSwitchPorts_1(String serial, CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = cycleDeviceSwitchPorts_1WithHttpInfo(serial, cycleDeviceSwitchPortsRequest);
        return localVarResp.getData();
    }

    /**
     * Cycle a set of switch ports
     * Cycle a set of switch ports
     * @param serial  (required)
     * @param cycleDeviceSwitchPortsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> cycleDeviceSwitchPorts_1WithHttpInfo(String serial, CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest) throws ApiException {
        okhttp3.Call localVarCall = cycleDeviceSwitchPorts_1ValidateBeforeCall(serial, cycleDeviceSwitchPortsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cycle a set of switch ports (asynchronously)
     * Cycle a set of switch ports
     * @param serial  (required)
     * @param cycleDeviceSwitchPortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cycleDeviceSwitchPorts_1Async(String serial, CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = cycleDeviceSwitchPorts_1ValidateBeforeCall(serial, cycleDeviceSwitchPortsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchPort_1
     * @param serial  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPort_1Call(String serial, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/{portId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchPort_1ValidateBeforeCall(String serial, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchPort_1(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getDeviceSwitchPort_1(Async)");
        }

        return getDeviceSwitchPort_1Call(serial, portId, _callback);

    }

    /**
     * Return a switch port
     * Return a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @return GetDeviceSwitchPorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchPorts200ResponseInner getDeviceSwitchPort_1(String serial, String portId) throws ApiException {
        ApiResponse<GetDeviceSwitchPorts200ResponseInner> localVarResp = getDeviceSwitchPort_1WithHttpInfo(serial, portId);
        return localVarResp.getData();
    }

    /**
     * Return a switch port
     * Return a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetDeviceSwitchPorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchPorts200ResponseInner> getDeviceSwitchPort_1WithHttpInfo(String serial, String portId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchPort_1ValidateBeforeCall(serial, portId, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a switch port (asynchronously)
     * Return a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPort_1Async(String serial, String portId, final ApiCallback<GetDeviceSwitchPorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchPort_1ValidateBeforeCall(serial, portId, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchPortsStatusesPackets_1
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 1 day from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPortsStatusesPackets_1Call(String serial, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/statuses/packets"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchPortsStatusesPackets_1ValidateBeforeCall(String serial, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatusesPackets_1(Async)");
        }

        return getDeviceSwitchPortsStatusesPackets_1Call(serial, t0, timespan, _callback);

    }

    /**
     * Return the packet counters for all the ports of a switch
     * Return the packet counters for all the ports of a switch
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 1 day from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getDeviceSwitchPortsStatusesPackets_1(String serial, String t0, Float timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getDeviceSwitchPortsStatusesPackets_1WithHttpInfo(serial, t0, timespan);
        return localVarResp.getData();
    }

    /**
     * Return the packet counters for all the ports of a switch
     * Return the packet counters for all the ports of a switch
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 1 day from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getDeviceSwitchPortsStatusesPackets_1WithHttpInfo(String serial, String t0, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchPortsStatusesPackets_1ValidateBeforeCall(serial, t0, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the packet counters for all the ports of a switch (asynchronously)
     * Return the packet counters for all the ports of a switch
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 1 day from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPortsStatusesPackets_1Async(String serial, String t0, Float timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchPortsStatusesPackets_1ValidateBeforeCall(serial, t0, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchPortsStatuses_1
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPortsStatuses_1Call(String serial, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/statuses"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchPortsStatuses_1ValidateBeforeCall(String serial, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatuses_1(Async)");
        }

        return getDeviceSwitchPortsStatuses_1Call(serial, t0, timespan, _callback);

    }

    /**
     * Return the status for all the ports of a switch
     * Return the status for all the ports of a switch
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;GetDeviceSwitchPortsStatuses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSwitchPortsStatuses200ResponseInner> getDeviceSwitchPortsStatuses_1(String serial, String t0, Float timespan) throws ApiException {
        ApiResponse<List<GetDeviceSwitchPortsStatuses200ResponseInner>> localVarResp = getDeviceSwitchPortsStatuses_1WithHttpInfo(serial, t0, timespan);
        return localVarResp.getData();
    }

    /**
     * Return the status for all the ports of a switch
     * Return the status for all the ports of a switch
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;GetDeviceSwitchPortsStatuses200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSwitchPortsStatuses200ResponseInner>> getDeviceSwitchPortsStatuses_1WithHttpInfo(String serial, String t0, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchPortsStatuses_1ValidateBeforeCall(serial, t0, timespan, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchPortsStatuses200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the status for all the ports of a switch (asynchronously)
     * Return the status for all the ports of a switch
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPortsStatuses_1Async(String serial, String t0, Float timespan, final ApiCallback<List<GetDeviceSwitchPortsStatuses200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchPortsStatuses_1ValidateBeforeCall(serial, t0, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchPortsStatuses200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchPorts_1
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPorts_1Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchPorts_1ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchPorts_1(Async)");
        }

        return getDeviceSwitchPorts_1Call(serial, _callback);

    }

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param serial  (required)
     * @return List&lt;GetDeviceSwitchPorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSwitchPorts200ResponseInner> getDeviceSwitchPorts_1(String serial) throws ApiException {
        ApiResponse<List<GetDeviceSwitchPorts200ResponseInner>> localVarResp = getDeviceSwitchPorts_1WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;GetDeviceSwitchPorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSwitchPorts200ResponseInner>> getDeviceSwitchPorts_1WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchPorts_1ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchPorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switch ports for a switch (asynchronously)
     * List the switch ports for a switch
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPorts_1Async(String serial, final ApiCallback<List<GetDeviceSwitchPorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchPorts_1ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchPorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAppliancePort_1
     * @param networkId  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePort_1Call(String networkId, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ports/{portId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAppliancePort_1ValidateBeforeCall(String networkId, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAppliancePort_1(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getNetworkAppliancePort_1(Async)");
        }

        return getNetworkAppliancePort_1Call(networkId, portId, _callback);

    }

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @return GetNetworkAppliancePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkAppliancePorts200ResponseInner getNetworkAppliancePort_1(String networkId, String portId) throws ApiException {
        ApiResponse<GetNetworkAppliancePorts200ResponseInner> localVarResp = getNetworkAppliancePort_1WithHttpInfo(networkId, portId);
        return localVarResp.getData();
    }

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetNetworkAppliancePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkAppliancePorts200ResponseInner> getNetworkAppliancePort_1WithHttpInfo(String networkId, String portId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAppliancePort_1ValidateBeforeCall(networkId, portId, null);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return per-port VLAN settings for a single MX port. (asynchronously)
     * Return per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePort_1Async(String networkId, String portId, final ApiCallback<GetNetworkAppliancePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAppliancePort_1ValidateBeforeCall(networkId, portId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAppliancePorts_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePorts_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ports"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAppliancePorts_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAppliancePorts_1(Async)");
        }

        return getNetworkAppliancePorts_1Call(networkId, _callback);

    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param networkId  (required)
     * @return List&lt;GetNetworkAppliancePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkAppliancePorts200ResponseInner> getNetworkAppliancePorts_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkAppliancePorts200ResponseInner>> localVarResp = getNetworkAppliancePorts_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkAppliancePorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkAppliancePorts200ResponseInner>> getNetworkAppliancePorts_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAppliancePorts_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkAppliancePorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List per-port VLAN settings for all ports of a MX. (asynchronously)
     * List per-port VLAN settings for all ports of a MX.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePorts_1Async(String networkId, final ApiCallback<List<GetNetworkAppliancePorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAppliancePorts_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkAppliancePorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfilePort_3
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_3Call(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_3ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfilePort_3Call(organizationId, configTemplateId, profileId, portId, _callback);

    }

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @return GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner getOrganizationConfigTemplateSwitchProfilePort_3(String organizationId, String configTemplateId, String profileId, String portId) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> localVarResp = getOrganizationConfigTemplateSwitchProfilePort_3WithHttpInfo(organizationId, configTemplateId, profileId, portId);
        return localVarResp.getData();
    }

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> getOrganizationConfigTemplateSwitchProfilePort_3WithHttpInfo(String organizationId, String configTemplateId, String profileId, String portId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePort_3ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a switch profile port (asynchronously)
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_3Async(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePort_3ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfilePorts_3
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_3Call(String organizationId, String configTemplateId, String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_3ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts_3(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts_3(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts_3(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfilePorts_3Call(organizationId, configTemplateId, profileId, _callback);

    }

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @return List&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> getOrganizationConfigTemplateSwitchProfilePorts_3(String organizationId, String configTemplateId, String profileId) throws ApiException {
        ApiResponse<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> localVarResp = getOrganizationConfigTemplateSwitchProfilePorts_3WithHttpInfo(organizationId, configTemplateId, profileId);
        return localVarResp.getData();
    }

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> getOrganizationConfigTemplateSwitchProfilePorts_3WithHttpInfo(String organizationId, String configTemplateId, String profileId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePorts_3ValidateBeforeCall(organizationId, configTemplateId, profileId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all the ports of a switch profile (asynchronously)
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_3Async(String organizationId, String configTemplateId, String profileId, final ApiCallback<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePorts_3ValidateBeforeCall(organizationId, configTemplateId, profileId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSwitchPortsBySwitch_1
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSwitchPortsBySwitch_1Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/switch/ports/bySwitch"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (portProfileIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "portProfileIds", portProfileIds));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (configurationUpdatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configurationUpdatedAfter", configurationUpdatedAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSwitchPortsBySwitch_1ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSwitchPortsBySwitch_1(Async)");
        }

        return getOrganizationSwitchPortsBySwitch_1Call(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter, _callback);

    }

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @return List&lt;GetOrganizationSwitchPortsBySwitch200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationSwitchPortsBySwitch200ResponseInner> getOrganizationSwitchPortsBySwitch_1(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter) throws ApiException {
        ApiResponse<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>> localVarResp = getOrganizationSwitchPortsBySwitch_1WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter);
        return localVarResp.getData();
    }

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSwitchPortsBySwitch200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>> getOrganizationSwitchPortsBySwitch_1WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSwitchPortsBySwitch_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switchports in an organization by switch (asynchronously)
     * List the switchports in an organization by switch
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSwitchPortsBySwitch_1Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter, final ApiCallback<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSwitchPortsBySwitch_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchPort_1
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchPort_1Call(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchPortRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/{portId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchPort_1ValidateBeforeCall(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchPort_1(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateDeviceSwitchPort_1(Async)");
        }

        return updateDeviceSwitchPort_1Call(serial, portId, updateDeviceSwitchPortRequest, _callback);

    }

    /**
     * Update a switch port
     * Update a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @return GetDeviceSwitchPorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchPorts200ResponseInner updateDeviceSwitchPort_1(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest) throws ApiException {
        ApiResponse<GetDeviceSwitchPorts200ResponseInner> localVarResp = updateDeviceSwitchPort_1WithHttpInfo(serial, portId, updateDeviceSwitchPortRequest);
        return localVarResp.getData();
    }

    /**
     * Update a switch port
     * Update a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSwitchPorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchPorts200ResponseInner> updateDeviceSwitchPort_1WithHttpInfo(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchPort_1ValidateBeforeCall(serial, portId, updateDeviceSwitchPortRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a switch port (asynchronously)
     * Update a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchPort_1Async(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest, final ApiCallback<GetDeviceSwitchPorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchPort_1ValidateBeforeCall(serial, portId, updateDeviceSwitchPortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkAppliancePort_1
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAppliancePort_1Call(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkAppliancePortRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ports/{portId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkAppliancePort_1ValidateBeforeCall(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkAppliancePort_1(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateNetworkAppliancePort_1(Async)");
        }

        return updateNetworkAppliancePort_1Call(networkId, portId, updateNetworkAppliancePortRequest, _callback);

    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @return GetNetworkAppliancePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkAppliancePorts200ResponseInner updateNetworkAppliancePort_1(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest) throws ApiException {
        ApiResponse<GetNetworkAppliancePorts200ResponseInner> localVarResp = updateNetworkAppliancePort_1WithHttpInfo(networkId, portId, updateNetworkAppliancePortRequest);
        return localVarResp.getData();
    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @return ApiResponse&lt;GetNetworkAppliancePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkAppliancePorts200ResponseInner> updateNetworkAppliancePort_1WithHttpInfo(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkAppliancePort_1ValidateBeforeCall(networkId, portId, updateNetworkAppliancePortRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the per-port VLAN settings for a single MX port. (asynchronously)
     * Update the per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAppliancePort_1Async(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest, final ApiCallback<GetNetworkAppliancePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkAppliancePort_1ValidateBeforeCall(networkId, portId, updateNetworkAppliancePortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationConfigTemplateSwitchProfilePort_3
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_3Call(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationConfigTemplateSwitchProfilePortRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_3ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3(Async)");
        }

        return updateOrganizationConfigTemplateSwitchProfilePort_3Call(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, _callback);

    }

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @return GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner updateOrganizationConfigTemplateSwitchProfilePort_3(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> localVarResp = updateOrganizationConfigTemplateSwitchProfilePort_3WithHttpInfo(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest);
        return localVarResp.getData();
    }

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> updateOrganizationConfigTemplateSwitchProfilePort_3WithHttpInfo(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationConfigTemplateSwitchProfilePort_3ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a switch profile port (asynchronously)
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_3Async(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationConfigTemplateSwitchProfilePort_3ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
