/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeviceCameraQualityAndRetentionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceCameraQualityAndRetentionRequest {
  public static final String SERIALIZED_NAME_AUDIO_RECORDING_ENABLED = "audioRecordingEnabled";
  @SerializedName(SERIALIZED_NAME_AUDIO_RECORDING_ENABLED)
  private Boolean audioRecordingEnabled;

  public static final String SERIALIZED_NAME_MOTION_BASED_RETENTION_ENABLED = "motionBasedRetentionEnabled";
  @SerializedName(SERIALIZED_NAME_MOTION_BASED_RETENTION_ENABLED)
  private Boolean motionBasedRetentionEnabled;

  /**
   * The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.
   */
  @JsonAdapter(MotionDetectorVersionEnum.Adapter.class)
  public enum MotionDetectorVersionEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    MotionDetectorVersionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MotionDetectorVersionEnum fromValue(Integer value) {
      for (MotionDetectorVersionEnum b : MotionDetectorVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MotionDetectorVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MotionDetectorVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MotionDetectorVersionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MotionDetectorVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MotionDetectorVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOTION_DETECTOR_VERSION = "motionDetectorVersion";
  @SerializedName(SERIALIZED_NAME_MOTION_DETECTOR_VERSION)
  private MotionDetectorVersionEnum motionDetectorVersion;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  /**
   * Quality of the camera. Can be one of &#39;Standard&#39;, &#39;High&#39; or &#39;Enhanced&#39;. Not all qualities are supported by every camera model.
   */
  @JsonAdapter(QualityEnum.Adapter.class)
  public enum QualityEnum {
    ENHANCED("Enhanced"),
    
    HIGH("High"),
    
    STANDARD("Standard");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QualityEnum fromValue(String value) {
      for (QualityEnum b : QualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QualityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QualityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QualityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private QualityEnum quality;

  /**
   * Resolution of the camera. Can be one of &#39;1280x720&#39;, &#39;1920x1080&#39;, &#39;1080x1080&#39;, &#39;2058x2058&#39;, &#39;2112x2112&#39;, &#39;2880x2880&#39;, &#39;2688x1512&#39; or &#39;3840x2160&#39;.Not all resolutions are supported by every camera model.
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    _1080X1080("1080x1080"),
    
    _1280X720("1280x720"),
    
    _1920X1080("1920x1080"),
    
    _2058X2058("2058x2058"),
    
    _2112X2112("2112x2112"),
    
    _2688X1512("2688x1512"),
    
    _2880X2880("2880x2880"),
    
    _3840X2160("3840x2160");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  public static final String SERIALIZED_NAME_RESTRICTED_BANDWIDTH_MODE_ENABLED = "restrictedBandwidthModeEnabled";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_BANDWIDTH_MODE_ENABLED)
  private Boolean restrictedBandwidthModeEnabled;

  public UpdateDeviceCameraQualityAndRetentionRequest() {
  }

  public UpdateDeviceCameraQualityAndRetentionRequest audioRecordingEnabled(Boolean audioRecordingEnabled) {
    this.audioRecordingEnabled = audioRecordingEnabled;
    return this;
  }

  /**
   * Boolean indicating if audio recording is enabled(true) or disabled(false) on the camera
   * @return audioRecordingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAudioRecordingEnabled() {
    return audioRecordingEnabled;
  }

  public void setAudioRecordingEnabled(Boolean audioRecordingEnabled) {
    this.audioRecordingEnabled = audioRecordingEnabled;
  }


  public UpdateDeviceCameraQualityAndRetentionRequest motionBasedRetentionEnabled(Boolean motionBasedRetentionEnabled) {
    this.motionBasedRetentionEnabled = motionBasedRetentionEnabled;
    return this;
  }

  /**
   * Boolean indicating if motion-based retention is enabled(true) or disabled(false) on the camera.
   * @return motionBasedRetentionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMotionBasedRetentionEnabled() {
    return motionBasedRetentionEnabled;
  }

  public void setMotionBasedRetentionEnabled(Boolean motionBasedRetentionEnabled) {
    this.motionBasedRetentionEnabled = motionBasedRetentionEnabled;
  }


  public UpdateDeviceCameraQualityAndRetentionRequest motionDetectorVersion(MotionDetectorVersionEnum motionDetectorVersion) {
    this.motionDetectorVersion = motionDetectorVersion;
    return this;
  }

  /**
   * The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.
   * @return motionDetectorVersion
   */
  @javax.annotation.Nullable
  public MotionDetectorVersionEnum getMotionDetectorVersion() {
    return motionDetectorVersion;
  }

  public void setMotionDetectorVersion(MotionDetectorVersionEnum motionDetectorVersion) {
    this.motionDetectorVersion = motionDetectorVersion;
  }


  public UpdateDeviceCameraQualityAndRetentionRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * The ID of a quality and retention profile to assign to the camera. The profile&#39;s settings will override all of the per-camera quality and retention settings. If the value of this parameter is null, any existing profile will be unassigned from the camera.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public UpdateDeviceCameraQualityAndRetentionRequest quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

  /**
   * Quality of the camera. Can be one of &#39;Standard&#39;, &#39;High&#39; or &#39;Enhanced&#39;. Not all qualities are supported by every camera model.
   * @return quality
   */
  @javax.annotation.Nullable
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }


  public UpdateDeviceCameraQualityAndRetentionRequest resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Resolution of the camera. Can be one of &#39;1280x720&#39;, &#39;1920x1080&#39;, &#39;1080x1080&#39;, &#39;2058x2058&#39;, &#39;2112x2112&#39;, &#39;2880x2880&#39;, &#39;2688x1512&#39; or &#39;3840x2160&#39;.Not all resolutions are supported by every camera model.
   * @return resolution
   */
  @javax.annotation.Nullable
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  public UpdateDeviceCameraQualityAndRetentionRequest restrictedBandwidthModeEnabled(Boolean restrictedBandwidthModeEnabled) {
    this.restrictedBandwidthModeEnabled = restrictedBandwidthModeEnabled;
    return this;
  }

  /**
   * Boolean indicating if restricted bandwidth is enabled(true) or disabled(false) on the camera. This setting does not apply to MV2 cameras.
   * @return restrictedBandwidthModeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRestrictedBandwidthModeEnabled() {
    return restrictedBandwidthModeEnabled;
  }

  public void setRestrictedBandwidthModeEnabled(Boolean restrictedBandwidthModeEnabled) {
    this.restrictedBandwidthModeEnabled = restrictedBandwidthModeEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest = (UpdateDeviceCameraQualityAndRetentionRequest) o;
    return Objects.equals(this.audioRecordingEnabled, updateDeviceCameraQualityAndRetentionRequest.audioRecordingEnabled) &&
        Objects.equals(this.motionBasedRetentionEnabled, updateDeviceCameraQualityAndRetentionRequest.motionBasedRetentionEnabled) &&
        Objects.equals(this.motionDetectorVersion, updateDeviceCameraQualityAndRetentionRequest.motionDetectorVersion) &&
        Objects.equals(this.profileId, updateDeviceCameraQualityAndRetentionRequest.profileId) &&
        Objects.equals(this.quality, updateDeviceCameraQualityAndRetentionRequest.quality) &&
        Objects.equals(this.resolution, updateDeviceCameraQualityAndRetentionRequest.resolution) &&
        Objects.equals(this.restrictedBandwidthModeEnabled, updateDeviceCameraQualityAndRetentionRequest.restrictedBandwidthModeEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioRecordingEnabled, motionBasedRetentionEnabled, motionDetectorVersion, profileId, quality, resolution, restrictedBandwidthModeEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceCameraQualityAndRetentionRequest {\n");
    sb.append("    audioRecordingEnabled: ").append(toIndentedString(audioRecordingEnabled)).append("\n");
    sb.append("    motionBasedRetentionEnabled: ").append(toIndentedString(motionBasedRetentionEnabled)).append("\n");
    sb.append("    motionDetectorVersion: ").append(toIndentedString(motionDetectorVersion)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    restrictedBandwidthModeEnabled: ").append(toIndentedString(restrictedBandwidthModeEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioRecordingEnabled");
    openapiFields.add("motionBasedRetentionEnabled");
    openapiFields.add("motionDetectorVersion");
    openapiFields.add("profileId");
    openapiFields.add("quality");
    openapiFields.add("resolution");
    openapiFields.add("restrictedBandwidthModeEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceCameraQualityAndRetentionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceCameraQualityAndRetentionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceCameraQualityAndRetentionRequest is not found in the empty JSON string", UpdateDeviceCameraQualityAndRetentionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceCameraQualityAndRetentionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceCameraQualityAndRetentionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `motionDetectorVersion`
      if (jsonObj.get("motionDetectorVersion") != null && !jsonObj.get("motionDetectorVersion").isJsonNull()) {
        MotionDetectorVersionEnum.validateJsonElement(jsonObj.get("motionDetectorVersion"));
      }
      if ((jsonObj.get("profileId") != null && !jsonObj.get("profileId").isJsonNull()) && !jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      // validate the optional field `quality`
      if (jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) {
        QualityEnum.validateJsonElement(jsonObj.get("quality"));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        ResolutionEnum.validateJsonElement(jsonObj.get("resolution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceCameraQualityAndRetentionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceCameraQualityAndRetentionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceCameraQualityAndRetentionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceCameraQualityAndRetentionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceCameraQualityAndRetentionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceCameraQualityAndRetentionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceCameraQualityAndRetentionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceCameraQualityAndRetentionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceCameraQualityAndRetentionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceCameraQualityAndRetentionRequest
   */
  public static UpdateDeviceCameraQualityAndRetentionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceCameraQualityAndRetentionRequest.class);
  }

  /**
   * Convert an instance of UpdateDeviceCameraQualityAndRetentionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

