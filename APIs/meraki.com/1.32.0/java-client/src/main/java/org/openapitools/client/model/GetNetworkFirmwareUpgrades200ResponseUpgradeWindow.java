/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Upgrade window for devices in network
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkFirmwareUpgrades200ResponseUpgradeWindow {
  /**
   * Day of the week
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
  public enum DayOfWeekEnum {
    FRI("fri"),
    
    FRIDAY("friday"),
    
    MON("mon"),
    
    MONDAY("monday"),
    
    SAT("sat"),
    
    SATURDAY("saturday"),
    
    SUN("sun"),
    
    SUNDAY("sunday"),
    
    THU("thu"),
    
    THURSDAY("thursday"),
    
    TUE("tue"),
    
    TUESDAY("tuesday"),
    
    WED("wed"),
    
    WEDNESDAY("wednesday");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private DayOfWeekEnum dayOfWeek;

  /**
   * Hour of the day
   */
  @JsonAdapter(HourOfDayEnum.Adapter.class)
  public enum HourOfDayEnum {
    _0_00("0:00"),
    
    _600("600"),
    
    _660("660"),
    
    _720("720"),
    
    _780("780"),
    
    _840("840"),
    
    _900("900"),
    
    _960("960"),
    
    _1020("1020"),
    
    _1080("1080"),
    
    _1140("1140"),
    
    _60("60"),
    
    _1200("1200"),
    
    _1260("1260"),
    
    _1320("1320"),
    
    _1380("1380"),
    
    _120("120"),
    
    _180("180"),
    
    _240("240"),
    
    _300("300"),
    
    _360("360"),
    
    _420("420"),
    
    _480("480"),
    
    _540("540");

    private String value;

    HourOfDayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HourOfDayEnum fromValue(String value) {
      for (HourOfDayEnum b : HourOfDayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HourOfDayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HourOfDayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HourOfDayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HourOfDayEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HourOfDayEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOUR_OF_DAY = "hourOfDay";
  @SerializedName(SERIALIZED_NAME_HOUR_OF_DAY)
  private HourOfDayEnum hourOfDay;

  public GetNetworkFirmwareUpgrades200ResponseUpgradeWindow() {
  }

  public GetNetworkFirmwareUpgrades200ResponseUpgradeWindow dayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * Day of the week
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public GetNetworkFirmwareUpgrades200ResponseUpgradeWindow hourOfDay(HourOfDayEnum hourOfDay) {
    this.hourOfDay = hourOfDay;
    return this;
  }

  /**
   * Hour of the day
   * @return hourOfDay
   */
  @javax.annotation.Nullable
  public HourOfDayEnum getHourOfDay() {
    return hourOfDay;
  }

  public void setHourOfDay(HourOfDayEnum hourOfDay) {
    this.hourOfDay = hourOfDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkFirmwareUpgrades200ResponseUpgradeWindow getNetworkFirmwareUpgrades200ResponseUpgradeWindow = (GetNetworkFirmwareUpgrades200ResponseUpgradeWindow) o;
    return Objects.equals(this.dayOfWeek, getNetworkFirmwareUpgrades200ResponseUpgradeWindow.dayOfWeek) &&
        Objects.equals(this.hourOfDay, getNetworkFirmwareUpgrades200ResponseUpgradeWindow.hourOfDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfWeek, hourOfDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkFirmwareUpgrades200ResponseUpgradeWindow {\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    hourOfDay: ").append(toIndentedString(hourOfDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfWeek");
    openapiFields.add("hourOfDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkFirmwareUpgrades200ResponseUpgradeWindow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkFirmwareUpgrades200ResponseUpgradeWindow is not found in the empty JSON string", GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkFirmwareUpgrades200ResponseUpgradeWindow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) && !jsonObj.get("dayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
      // validate the optional field `dayOfWeek`
      if (jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) {
        DayOfWeekEnum.validateJsonElement(jsonObj.get("dayOfWeek"));
      }
      if ((jsonObj.get("hourOfDay") != null && !jsonObj.get("hourOfDay").isJsonNull()) && !jsonObj.get("hourOfDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hourOfDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hourOfDay").toString()));
      }
      // validate the optional field `hourOfDay`
      if (jsonObj.get("hourOfDay") != null && !jsonObj.get("hourOfDay").isJsonNull()) {
        HourOfDayEnum.validateJsonElement(jsonObj.get("hourOfDay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkFirmwareUpgrades200ResponseUpgradeWindow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkFirmwareUpgrades200ResponseUpgradeWindow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkFirmwareUpgrades200ResponseUpgradeWindow>() {
           @Override
           public void write(JsonWriter out, GetNetworkFirmwareUpgrades200ResponseUpgradeWindow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkFirmwareUpgrades200ResponseUpgradeWindow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkFirmwareUpgrades200ResponseUpgradeWindow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkFirmwareUpgrades200ResponseUpgradeWindow
   * @throws IOException if the JSON string is invalid with respect to GetNetworkFirmwareUpgrades200ResponseUpgradeWindow
   */
  public static GetNetworkFirmwareUpgrades200ResponseUpgradeWindow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.class);
  }

  /**
   * Convert an instance of GetNetworkFirmwareUpgrades200ResponseUpgradeWindow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

