/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Venue settings for this SSID
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidHotspot20RequestVenue {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Venue type (&#39;Unspecified&#39;, &#39;Unspecified Assembly&#39;, &#39;Arena&#39;, &#39;Stadium&#39;, &#39;Passenger Terminal&#39;, &#39;Amphitheater&#39;, &#39;Amusement Park&#39;, &#39;Place of Worship&#39;, &#39;Convention Center&#39;, &#39;Library&#39;, &#39;Museum&#39;, &#39;Restaurant&#39;, &#39;Theater&#39;, &#39;Bar&#39;, &#39;Coffee Shop&#39;, &#39;Zoo or Aquarium&#39;, &#39;Emergency Coordination Center&#39;, &#39;Unspecified Business&#39;, &#39;Doctor or Dentist office&#39;, &#39;Bank&#39;, &#39;Fire Station&#39;, &#39;Police Station&#39;, &#39;Post Office&#39;, &#39;Professional Office&#39;, &#39;Research and Development Facility&#39;, &#39;Attorney Office&#39;, &#39;Unspecified Educational&#39;, &#39;School, Primary&#39;, &#39;School, Secondary&#39;, &#39;University or College&#39;, &#39;Unspecified Factory and Industrial&#39;, &#39;Factory&#39;, &#39;Unspecified Institutional&#39;, &#39;Hospital&#39;, &#39;Long-Term Care Facility&#39;, &#39;Alcohol and Drug Rehabilitation Center&#39;, &#39;Group Home&#39;, &#39;Prison or Jail&#39;, &#39;Unspecified Mercantile&#39;, &#39;Retail Store&#39;, &#39;Grocery Market&#39;, &#39;Automotive Service Station&#39;, &#39;Shopping Mall&#39;, &#39;Gas Station&#39;, &#39;Unspecified Residential&#39;, &#39;Private Residence&#39;, &#39;Hotel or Motel&#39;, &#39;Dormitory&#39;, &#39;Boarding House&#39;, &#39;Unspecified Storage&#39;, &#39;Unspecified Utility and Miscellaneous&#39;, &#39;Unspecified Vehicular&#39;, &#39;Automobile or Truck&#39;, &#39;Airplane&#39;, &#39;Bus&#39;, &#39;Ferry&#39;, &#39;Ship or Boat&#39;, &#39;Train&#39;, &#39;Motor Bike&#39;, &#39;Unspecified Outdoor&#39;, &#39;Muni-mesh Network&#39;, &#39;City Park&#39;, &#39;Rest Area&#39;, &#39;Traffic Control&#39;, &#39;Bus Stop&#39;, &#39;Kiosk&#39;)
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AIRPLANE("Airplane"),
    
    ALCOHOL_AND_DRUG_REHABILITATION_CENTER("Alcohol and Drug Rehabilitation Center"),
    
    AMPHITHEATER("Amphitheater"),
    
    AMUSEMENT_PARK("Amusement Park"),
    
    ARENA("Arena"),
    
    ATTORNEY_OFFICE("Attorney Office"),
    
    AUTOMOBILE_OR_TRUCK("Automobile or Truck"),
    
    AUTOMOTIVE_SERVICE_STATION("Automotive Service Station"),
    
    BANK("Bank"),
    
    BAR("Bar"),
    
    BOARDING_HOUSE("Boarding House"),
    
    BUS("Bus"),
    
    BUS_STOP("Bus Stop"),
    
    CITY_PARK("City Park"),
    
    COFFEE_SHOP("Coffee Shop"),
    
    CONVENTION_CENTER("Convention Center"),
    
    DOCTOR_OR_DENTIST_OFFICE("Doctor or Dentist office"),
    
    DORMITORY("Dormitory"),
    
    EMERGENCY_COORDINATION_CENTER("Emergency Coordination Center"),
    
    FACTORY("Factory"),
    
    FERRY("Ferry"),
    
    FIRE_STATION("Fire Station"),
    
    GAS_STATION("Gas Station"),
    
    GROCERY_MARKET("Grocery Market"),
    
    GROUP_HOME("Group Home"),
    
    HOSPITAL("Hospital"),
    
    HOTEL_OR_MOTEL("Hotel or Motel"),
    
    KIOSK("Kiosk"),
    
    LIBRARY("Library"),
    
    LONG_TERM_CARE_FACILITY("Long-Term Care Facility"),
    
    MOTOR_BIKE("Motor Bike"),
    
    MUNI_MESH_NETWORK("Muni-mesh Network"),
    
    MUSEUM("Museum"),
    
    PASSENGER_TERMINAL("Passenger Terminal"),
    
    PLACE_OF_WORSHIP("Place of Worship"),
    
    POLICE_STATION("Police Station"),
    
    POST_OFFICE("Post Office"),
    
    PRISON_OR_JAIL("Prison or Jail"),
    
    PRIVATE_RESIDENCE("Private Residence"),
    
    PROFESSIONAL_OFFICE("Professional Office"),
    
    RESEARCH_AND_DEVELOPMENT_FACILITY("Research and Development Facility"),
    
    REST_AREA("Rest Area"),
    
    RESTAURANT("Restaurant"),
    
    RETAIL_STORE("Retail Store"),
    
    SCHOOL_PRIMARY("School, Primary"),
    
    SCHOOL_SECONDARY("School, Secondary"),
    
    SHIP_OR_BOAT("Ship or Boat"),
    
    SHOPPING_MALL("Shopping Mall"),
    
    STADIUM("Stadium"),
    
    THEATER("Theater"),
    
    TRAFFIC_CONTROL("Traffic Control"),
    
    TRAIN("Train"),
    
    UNIVERSITY_OR_COLLEGE("University or College"),
    
    UNSPECIFIED("Unspecified"),
    
    UNSPECIFIED_ASSEMBLY("Unspecified Assembly"),
    
    UNSPECIFIED_BUSINESS("Unspecified Business"),
    
    UNSPECIFIED_EDUCATIONAL("Unspecified Educational"),
    
    UNSPECIFIED_FACTORY_AND_INDUSTRIAL("Unspecified Factory and Industrial"),
    
    UNSPECIFIED_INSTITUTIONAL("Unspecified Institutional"),
    
    UNSPECIFIED_MERCANTILE("Unspecified Mercantile"),
    
    UNSPECIFIED_OUTDOOR("Unspecified Outdoor"),
    
    UNSPECIFIED_RESIDENTIAL("Unspecified Residential"),
    
    UNSPECIFIED_STORAGE("Unspecified Storage"),
    
    UNSPECIFIED_UTILITY_AND_MISCELLANEOUS("Unspecified Utility and Miscellaneous"),
    
    UNSPECIFIED_VEHICULAR("Unspecified Vehicular"),
    
    ZOO_OR_AQUARIUM("Zoo or Aquarium");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public UpdateNetworkWirelessSsidHotspot20RequestVenue() {
  }

  public UpdateNetworkWirelessSsidHotspot20RequestVenue name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Venue name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNetworkWirelessSsidHotspot20RequestVenue type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Venue type (&#39;Unspecified&#39;, &#39;Unspecified Assembly&#39;, &#39;Arena&#39;, &#39;Stadium&#39;, &#39;Passenger Terminal&#39;, &#39;Amphitheater&#39;, &#39;Amusement Park&#39;, &#39;Place of Worship&#39;, &#39;Convention Center&#39;, &#39;Library&#39;, &#39;Museum&#39;, &#39;Restaurant&#39;, &#39;Theater&#39;, &#39;Bar&#39;, &#39;Coffee Shop&#39;, &#39;Zoo or Aquarium&#39;, &#39;Emergency Coordination Center&#39;, &#39;Unspecified Business&#39;, &#39;Doctor or Dentist office&#39;, &#39;Bank&#39;, &#39;Fire Station&#39;, &#39;Police Station&#39;, &#39;Post Office&#39;, &#39;Professional Office&#39;, &#39;Research and Development Facility&#39;, &#39;Attorney Office&#39;, &#39;Unspecified Educational&#39;, &#39;School, Primary&#39;, &#39;School, Secondary&#39;, &#39;University or College&#39;, &#39;Unspecified Factory and Industrial&#39;, &#39;Factory&#39;, &#39;Unspecified Institutional&#39;, &#39;Hospital&#39;, &#39;Long-Term Care Facility&#39;, &#39;Alcohol and Drug Rehabilitation Center&#39;, &#39;Group Home&#39;, &#39;Prison or Jail&#39;, &#39;Unspecified Mercantile&#39;, &#39;Retail Store&#39;, &#39;Grocery Market&#39;, &#39;Automotive Service Station&#39;, &#39;Shopping Mall&#39;, &#39;Gas Station&#39;, &#39;Unspecified Residential&#39;, &#39;Private Residence&#39;, &#39;Hotel or Motel&#39;, &#39;Dormitory&#39;, &#39;Boarding House&#39;, &#39;Unspecified Storage&#39;, &#39;Unspecified Utility and Miscellaneous&#39;, &#39;Unspecified Vehicular&#39;, &#39;Automobile or Truck&#39;, &#39;Airplane&#39;, &#39;Bus&#39;, &#39;Ferry&#39;, &#39;Ship or Boat&#39;, &#39;Train&#39;, &#39;Motor Bike&#39;, &#39;Unspecified Outdoor&#39;, &#39;Muni-mesh Network&#39;, &#39;City Park&#39;, &#39;Rest Area&#39;, &#39;Traffic Control&#39;, &#39;Bus Stop&#39;, &#39;Kiosk&#39;)
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidHotspot20RequestVenue updateNetworkWirelessSsidHotspot20RequestVenue = (UpdateNetworkWirelessSsidHotspot20RequestVenue) o;
    return Objects.equals(this.name, updateNetworkWirelessSsidHotspot20RequestVenue.name) &&
        Objects.equals(this.type, updateNetworkWirelessSsidHotspot20RequestVenue.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidHotspot20RequestVenue {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidHotspot20RequestVenue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidHotspot20RequestVenue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidHotspot20RequestVenue is not found in the empty JSON string", UpdateNetworkWirelessSsidHotspot20RequestVenue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidHotspot20RequestVenue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidHotspot20RequestVenue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidHotspot20RequestVenue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidHotspot20RequestVenue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidHotspot20RequestVenue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidHotspot20RequestVenue.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidHotspot20RequestVenue>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidHotspot20RequestVenue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidHotspot20RequestVenue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidHotspot20RequestVenue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidHotspot20RequestVenue
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidHotspot20RequestVenue
   */
  public static UpdateNetworkWirelessSsidHotspot20RequestVenue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidHotspot20RequestVenue.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidHotspot20RequestVenue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

