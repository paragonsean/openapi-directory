/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSmDeviceDesktopLogs200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSmDeviceDesktopLogs200ResponseInner {
  public static final String SERIALIZED_NAME_DHCP_SERVER = "dhcpServer";
  @SerializedName(SERIALIZED_NAME_DHCP_SERVER)
  private String dhcpServer;

  public static final String SERIALIZED_NAME_DNS_SERVER = "dnsServer";
  @SerializedName(SERIALIZED_NAME_DNS_SERVER)
  private String dnsServer;

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private String gateway;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MEASURED_AT = "measuredAt";
  @SerializedName(SERIALIZED_NAME_MEASURED_AT)
  private String measuredAt;

  public static final String SERIALIZED_NAME_NETWORK_DEVICE = "networkDevice";
  @SerializedName(SERIALIZED_NAME_NETWORK_DEVICE)
  private String networkDevice;

  public static final String SERIALIZED_NAME_NETWORK_DRIVER = "networkDriver";
  @SerializedName(SERIALIZED_NAME_NETWORK_DRIVER)
  private String networkDriver;

  public static final String SERIALIZED_NAME_NETWORK_M_T_U = "networkMTU";
  @SerializedName(SERIALIZED_NAME_NETWORK_M_T_U)
  private String networkMTU;

  public static final String SERIALIZED_NAME_PUBLIC_I_P = "publicIP";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P)
  private String publicIP;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private String ts;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_WIFI_AUTH = "wifiAuth";
  @SerializedName(SERIALIZED_NAME_WIFI_AUTH)
  private String wifiAuth;

  public static final String SERIALIZED_NAME_WIFI_BSSID = "wifiBssid";
  @SerializedName(SERIALIZED_NAME_WIFI_BSSID)
  private String wifiBssid;

  public static final String SERIALIZED_NAME_WIFI_CHANNEL = "wifiChannel";
  @SerializedName(SERIALIZED_NAME_WIFI_CHANNEL)
  private String wifiChannel;

  public static final String SERIALIZED_NAME_WIFI_NOISE = "wifiNoise";
  @SerializedName(SERIALIZED_NAME_WIFI_NOISE)
  private String wifiNoise;

  public static final String SERIALIZED_NAME_WIFI_RSSI = "wifiRssi";
  @SerializedName(SERIALIZED_NAME_WIFI_RSSI)
  private String wifiRssi;

  public static final String SERIALIZED_NAME_WIFI_SSID = "wifiSsid";
  @SerializedName(SERIALIZED_NAME_WIFI_SSID)
  private String wifiSsid;

  public GetNetworkSmDeviceDesktopLogs200ResponseInner() {
  }

  public GetNetworkSmDeviceDesktopLogs200ResponseInner dhcpServer(String dhcpServer) {
    this.dhcpServer = dhcpServer;
    return this;
  }

  /**
   * The IP address of the DCHP Server.
   * @return dhcpServer
   */
  @javax.annotation.Nullable
  public String getDhcpServer() {
    return dhcpServer;
  }

  public void setDhcpServer(String dhcpServer) {
    this.dhcpServer = dhcpServer;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner dnsServer(String dnsServer) {
    this.dnsServer = dnsServer;
    return this;
  }

  /**
   * The DNS Server during the connection.
   * @return dnsServer
   */
  @javax.annotation.Nullable
  public String getDnsServer() {
    return dnsServer;
  }

  public void setDnsServer(String dnsServer) {
    this.dnsServer = dnsServer;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner gateway(String gateway) {
    this.gateway = gateway;
    return this;
  }

  /**
   * The gateway IP the device was connected to.
   * @return gateway
   */
  @javax.annotation.Nullable
  public String getGateway() {
    return gateway;
  }

  public void setGateway(String gateway) {
    this.gateway = gateway;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP of the device during connection.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner measuredAt(String measuredAt) {
    this.measuredAt = measuredAt;
    return this;
  }

  /**
   * The time the data was measured at.
   * @return measuredAt
   */
  @javax.annotation.Nullable
  public String getMeasuredAt() {
    return measuredAt;
  }

  public void setMeasuredAt(String measuredAt) {
    this.measuredAt = measuredAt;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner networkDevice(String networkDevice) {
    this.networkDevice = networkDevice;
    return this;
  }

  /**
   * The network device for the device used for connection.
   * @return networkDevice
   */
  @javax.annotation.Nullable
  public String getNetworkDevice() {
    return networkDevice;
  }

  public void setNetworkDevice(String networkDevice) {
    this.networkDevice = networkDevice;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner networkDriver(String networkDriver) {
    this.networkDriver = networkDriver;
    return this;
  }

  /**
   * The network driver for the device.
   * @return networkDriver
   */
  @javax.annotation.Nullable
  public String getNetworkDriver() {
    return networkDriver;
  }

  public void setNetworkDriver(String networkDriver) {
    this.networkDriver = networkDriver;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner networkMTU(String networkMTU) {
    this.networkMTU = networkMTU;
    return this;
  }

  /**
   * The network max transmission unit.
   * @return networkMTU
   */
  @javax.annotation.Nullable
  public String getNetworkMTU() {
    return networkMTU;
  }

  public void setNetworkMTU(String networkMTU) {
    this.networkMTU = networkMTU;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner publicIP(String publicIP) {
    this.publicIP = publicIP;
    return this;
  }

  /**
   * The public IP address of the device.
   * @return publicIP
   */
  @javax.annotation.Nullable
  public String getPublicIP() {
    return publicIP;
  }

  public void setPublicIP(String publicIP) {
    this.publicIP = publicIP;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * The subnet of the device connection.
   * @return subnet
   */
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner ts(String ts) {
    this.ts = ts;
    return this;
  }

  /**
   * The time the connection was logged.
   * @return ts
   */
  @javax.annotation.Nullable
  public String getTs() {
    return ts;
  }

  public void setTs(String ts) {
    this.ts = ts;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The user during connection.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner wifiAuth(String wifiAuth) {
    this.wifiAuth = wifiAuth;
    return this;
  }

  /**
   * The type of authentication used by the SSID.
   * @return wifiAuth
   */
  @javax.annotation.Nullable
  public String getWifiAuth() {
    return wifiAuth;
  }

  public void setWifiAuth(String wifiAuth) {
    this.wifiAuth = wifiAuth;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner wifiBssid(String wifiBssid) {
    this.wifiBssid = wifiBssid;
    return this;
  }

  /**
   * The MAC of the access point the device is connected to.
   * @return wifiBssid
   */
  @javax.annotation.Nullable
  public String getWifiBssid() {
    return wifiBssid;
  }

  public void setWifiBssid(String wifiBssid) {
    this.wifiBssid = wifiBssid;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner wifiChannel(String wifiChannel) {
    this.wifiChannel = wifiChannel;
    return this;
  }

  /**
   * Channel through which the connection is routing.
   * @return wifiChannel
   */
  @javax.annotation.Nullable
  public String getWifiChannel() {
    return wifiChannel;
  }

  public void setWifiChannel(String wifiChannel) {
    this.wifiChannel = wifiChannel;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner wifiNoise(String wifiNoise) {
    this.wifiNoise = wifiNoise;
    return this;
  }

  /**
   * The wireless signal power level received by the device.
   * @return wifiNoise
   */
  @javax.annotation.Nullable
  public String getWifiNoise() {
    return wifiNoise;
  }

  public void setWifiNoise(String wifiNoise) {
    this.wifiNoise = wifiNoise;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner wifiRssi(String wifiRssi) {
    this.wifiRssi = wifiRssi;
    return this;
  }

  /**
   * The Received Signal Strength Indicator for the device.
   * @return wifiRssi
   */
  @javax.annotation.Nullable
  public String getWifiRssi() {
    return wifiRssi;
  }

  public void setWifiRssi(String wifiRssi) {
    this.wifiRssi = wifiRssi;
  }


  public GetNetworkSmDeviceDesktopLogs200ResponseInner wifiSsid(String wifiSsid) {
    this.wifiSsid = wifiSsid;
    return this;
  }

  /**
   * The name of the network the device is connected to.
   * @return wifiSsid
   */
  @javax.annotation.Nullable
  public String getWifiSsid() {
    return wifiSsid;
  }

  public void setWifiSsid(String wifiSsid) {
    this.wifiSsid = wifiSsid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSmDeviceDesktopLogs200ResponseInner getNetworkSmDeviceDesktopLogs200ResponseInner = (GetNetworkSmDeviceDesktopLogs200ResponseInner) o;
    return Objects.equals(this.dhcpServer, getNetworkSmDeviceDesktopLogs200ResponseInner.dhcpServer) &&
        Objects.equals(this.dnsServer, getNetworkSmDeviceDesktopLogs200ResponseInner.dnsServer) &&
        Objects.equals(this.gateway, getNetworkSmDeviceDesktopLogs200ResponseInner.gateway) &&
        Objects.equals(this.ip, getNetworkSmDeviceDesktopLogs200ResponseInner.ip) &&
        Objects.equals(this.measuredAt, getNetworkSmDeviceDesktopLogs200ResponseInner.measuredAt) &&
        Objects.equals(this.networkDevice, getNetworkSmDeviceDesktopLogs200ResponseInner.networkDevice) &&
        Objects.equals(this.networkDriver, getNetworkSmDeviceDesktopLogs200ResponseInner.networkDriver) &&
        Objects.equals(this.networkMTU, getNetworkSmDeviceDesktopLogs200ResponseInner.networkMTU) &&
        Objects.equals(this.publicIP, getNetworkSmDeviceDesktopLogs200ResponseInner.publicIP) &&
        Objects.equals(this.subnet, getNetworkSmDeviceDesktopLogs200ResponseInner.subnet) &&
        Objects.equals(this.ts, getNetworkSmDeviceDesktopLogs200ResponseInner.ts) &&
        Objects.equals(this.user, getNetworkSmDeviceDesktopLogs200ResponseInner.user) &&
        Objects.equals(this.wifiAuth, getNetworkSmDeviceDesktopLogs200ResponseInner.wifiAuth) &&
        Objects.equals(this.wifiBssid, getNetworkSmDeviceDesktopLogs200ResponseInner.wifiBssid) &&
        Objects.equals(this.wifiChannel, getNetworkSmDeviceDesktopLogs200ResponseInner.wifiChannel) &&
        Objects.equals(this.wifiNoise, getNetworkSmDeviceDesktopLogs200ResponseInner.wifiNoise) &&
        Objects.equals(this.wifiRssi, getNetworkSmDeviceDesktopLogs200ResponseInner.wifiRssi) &&
        Objects.equals(this.wifiSsid, getNetworkSmDeviceDesktopLogs200ResponseInner.wifiSsid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpServer, dnsServer, gateway, ip, measuredAt, networkDevice, networkDriver, networkMTU, publicIP, subnet, ts, user, wifiAuth, wifiBssid, wifiChannel, wifiNoise, wifiRssi, wifiSsid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSmDeviceDesktopLogs200ResponseInner {\n");
    sb.append("    dhcpServer: ").append(toIndentedString(dhcpServer)).append("\n");
    sb.append("    dnsServer: ").append(toIndentedString(dnsServer)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    measuredAt: ").append(toIndentedString(measuredAt)).append("\n");
    sb.append("    networkDevice: ").append(toIndentedString(networkDevice)).append("\n");
    sb.append("    networkDriver: ").append(toIndentedString(networkDriver)).append("\n");
    sb.append("    networkMTU: ").append(toIndentedString(networkMTU)).append("\n");
    sb.append("    publicIP: ").append(toIndentedString(publicIP)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    wifiAuth: ").append(toIndentedString(wifiAuth)).append("\n");
    sb.append("    wifiBssid: ").append(toIndentedString(wifiBssid)).append("\n");
    sb.append("    wifiChannel: ").append(toIndentedString(wifiChannel)).append("\n");
    sb.append("    wifiNoise: ").append(toIndentedString(wifiNoise)).append("\n");
    sb.append("    wifiRssi: ").append(toIndentedString(wifiRssi)).append("\n");
    sb.append("    wifiSsid: ").append(toIndentedString(wifiSsid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcpServer");
    openapiFields.add("dnsServer");
    openapiFields.add("gateway");
    openapiFields.add("ip");
    openapiFields.add("measuredAt");
    openapiFields.add("networkDevice");
    openapiFields.add("networkDriver");
    openapiFields.add("networkMTU");
    openapiFields.add("publicIP");
    openapiFields.add("subnet");
    openapiFields.add("ts");
    openapiFields.add("user");
    openapiFields.add("wifiAuth");
    openapiFields.add("wifiBssid");
    openapiFields.add("wifiChannel");
    openapiFields.add("wifiNoise");
    openapiFields.add("wifiRssi");
    openapiFields.add("wifiSsid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSmDeviceDesktopLogs200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSmDeviceDesktopLogs200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSmDeviceDesktopLogs200ResponseInner is not found in the empty JSON string", GetNetworkSmDeviceDesktopLogs200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSmDeviceDesktopLogs200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSmDeviceDesktopLogs200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dhcpServer") != null && !jsonObj.get("dhcpServer").isJsonNull()) && !jsonObj.get("dhcpServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpServer").toString()));
      }
      if ((jsonObj.get("dnsServer") != null && !jsonObj.get("dnsServer").isJsonNull()) && !jsonObj.get("dnsServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsServer").toString()));
      }
      if ((jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull()) && !jsonObj.get("gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("measuredAt") != null && !jsonObj.get("measuredAt").isJsonNull()) && !jsonObj.get("measuredAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measuredAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measuredAt").toString()));
      }
      if ((jsonObj.get("networkDevice") != null && !jsonObj.get("networkDevice").isJsonNull()) && !jsonObj.get("networkDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkDevice").toString()));
      }
      if ((jsonObj.get("networkDriver") != null && !jsonObj.get("networkDriver").isJsonNull()) && !jsonObj.get("networkDriver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkDriver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkDriver").toString()));
      }
      if ((jsonObj.get("networkMTU") != null && !jsonObj.get("networkMTU").isJsonNull()) && !jsonObj.get("networkMTU").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkMTU` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkMTU").toString()));
      }
      if ((jsonObj.get("publicIP") != null && !jsonObj.get("publicIP").isJsonNull()) && !jsonObj.get("publicIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIP").toString()));
      }
      if ((jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) && !jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
      if ((jsonObj.get("ts") != null && !jsonObj.get("ts").isJsonNull()) && !jsonObj.get("ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ts").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("wifiAuth") != null && !jsonObj.get("wifiAuth").isJsonNull()) && !jsonObj.get("wifiAuth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiAuth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiAuth").toString()));
      }
      if ((jsonObj.get("wifiBssid") != null && !jsonObj.get("wifiBssid").isJsonNull()) && !jsonObj.get("wifiBssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiBssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiBssid").toString()));
      }
      if ((jsonObj.get("wifiChannel") != null && !jsonObj.get("wifiChannel").isJsonNull()) && !jsonObj.get("wifiChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiChannel").toString()));
      }
      if ((jsonObj.get("wifiNoise") != null && !jsonObj.get("wifiNoise").isJsonNull()) && !jsonObj.get("wifiNoise").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiNoise` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiNoise").toString()));
      }
      if ((jsonObj.get("wifiRssi") != null && !jsonObj.get("wifiRssi").isJsonNull()) && !jsonObj.get("wifiRssi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiRssi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiRssi").toString()));
      }
      if ((jsonObj.get("wifiSsid") != null && !jsonObj.get("wifiSsid").isJsonNull()) && !jsonObj.get("wifiSsid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiSsid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiSsid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSmDeviceDesktopLogs200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSmDeviceDesktopLogs200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSmDeviceDesktopLogs200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSmDeviceDesktopLogs200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSmDeviceDesktopLogs200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSmDeviceDesktopLogs200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSmDeviceDesktopLogs200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSmDeviceDesktopLogs200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSmDeviceDesktopLogs200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSmDeviceDesktopLogs200ResponseInner
   */
  public static GetNetworkSmDeviceDesktopLogs200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSmDeviceDesktopLogs200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSmDeviceDesktopLogs200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

