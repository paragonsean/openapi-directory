/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgradesByDevice200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirmwareApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirmwareApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirmwareApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrganizationFirmwareUpgradesByDevice_1
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgradesByDevice_1Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/firmware/upgrades/byDevice"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (firmwareUpgradeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "firmwareUpgradeIds", firmwareUpgradeIds));
        }

        if (firmwareUpgradeBatchIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "firmwareUpgradeBatchIds", firmwareUpgradeBatchIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationFirmwareUpgradesByDevice_1ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgradesByDevice_1(Async)");
        }

        return getOrganizationFirmwareUpgradesByDevice_1Call(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, _callback);

    }

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @return List&lt;GetOrganizationFirmwareUpgradesByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner> getOrganizationFirmwareUpgradesByDevice_1(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds) throws ApiException {
        ApiResponse<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> localVarResp = getOrganizationFirmwareUpgradesByDevice_1WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationFirmwareUpgradesByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> getOrganizationFirmwareUpgradesByDevice_1WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationFirmwareUpgradesByDevice_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade status for the filtered devices (asynchronously)
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgradesByDevice_1Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationFirmwareUpgradesByDevice_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationFirmwareUpgrades_1
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgrades_1Call(String organizationId, List<String> status, List<String> productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/firmware/upgrades"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (productType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productType", productType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationFirmwareUpgrades_1ValidateBeforeCall(String organizationId, List<String> status, List<String> productType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgrades_1(Async)");
        }

        return getOrganizationFirmwareUpgrades_1Call(organizationId, status, productType, _callback);

    }

    /**
     * Get firmware upgrade information for an organization
     * Get firmware upgrade information for an organization
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @return List&lt;GetOrganizationFirmwareUpgrades200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationFirmwareUpgrades200ResponseInner> getOrganizationFirmwareUpgrades_1(String organizationId, List<String> status, List<String> productType) throws ApiException {
        ApiResponse<List<GetOrganizationFirmwareUpgrades200ResponseInner>> localVarResp = getOrganizationFirmwareUpgrades_1WithHttpInfo(organizationId, status, productType);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade information for an organization
     * Get firmware upgrade information for an organization
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationFirmwareUpgrades200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationFirmwareUpgrades200ResponseInner>> getOrganizationFirmwareUpgrades_1WithHttpInfo(String organizationId, List<String> status, List<String> productType) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationFirmwareUpgrades_1ValidateBeforeCall(organizationId, status, productType, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgrades200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade information for an organization (asynchronously)
     * Get firmware upgrade information for an organization
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgrades_1Async(String organizationId, List<String> status, List<String> productType, final ApiCallback<List<GetOrganizationFirmwareUpgrades200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationFirmwareUpgrades_1ValidateBeforeCall(organizationId, status, productType, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgrades200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
