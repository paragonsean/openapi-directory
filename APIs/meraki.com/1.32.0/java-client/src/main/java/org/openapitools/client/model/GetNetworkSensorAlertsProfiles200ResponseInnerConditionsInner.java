/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner {
  /**
   * If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    ABOVE("above"),
    
    BELOW("below");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  /**
   * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
   */
  @JsonAdapter(DurationEnum.Adapter.class)
  public enum DurationEnum {
    NUMBER_0(0),
    
    NUMBER_60(60),
    
    NUMBER_120(120),
    
    NUMBER_180(180),
    
    NUMBER_240(240),
    
    NUMBER_300(300),
    
    NUMBER_600(600),
    
    NUMBER_900(900),
    
    NUMBER_1800(1800),
    
    NUMBER_3600(3600);

    private Integer value;

    DurationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DurationEnum fromValue(Integer value) {
      for (DurationEnum b : DurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DurationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DurationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DurationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private DurationEnum duration = DurationEnum.NUMBER_0;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private String metric;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold threshold;

  public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner() {
  }

  public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner duration(DurationEnum duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
   * @return duration
   */
  @javax.annotation.Nullable
  public DurationEnum getDuration() {
    return duration;
  }

  public void setDuration(DurationEnum duration) {
    this.duration = duration;
  }


  public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner metric(String metric) {
    this.metric = metric;
    return this;
  }

  /**
   * The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
   * @return metric
   */
  @javax.annotation.Nonnull
  public String getMetric() {
    return metric;
  }

  public void setMetric(String metric) {
    this.metric = metric;
  }


  public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner threshold(GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nonnull
  public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold getThreshold() {
    return threshold;
  }

  public void setThreshold(GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner getNetworkSensorAlertsProfiles200ResponseInnerConditionsInner = (GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner) o;
    return Objects.equals(this.direction, getNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.direction) &&
        Objects.equals(this.duration, getNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.duration) &&
        Objects.equals(this.metric, getNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.metric) &&
        Objects.equals(this.threshold, getNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, duration, metric, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner {\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("direction");
    openapiFields.add("duration");
    openapiFields.add("metric");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metric");
    openapiRequiredFields.add("threshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner is not found in the empty JSON string", GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      // validate the optional field `duration`
      if (jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) {
        DurationEnum.validateJsonElement(jsonObj.get("duration"));
      }
      if (!jsonObj.get("metric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric").toString()));
      }
      // validate the required field `threshold`
      GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold.validateJsonElement(jsonObj.get("threshold"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
   */
  public static GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.class);
  }

  /**
   * Convert an instance of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

