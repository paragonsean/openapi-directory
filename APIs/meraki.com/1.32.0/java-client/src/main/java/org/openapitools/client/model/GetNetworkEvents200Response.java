/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkEvents200ResponseEventsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkEvents200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkEvents200Response {
  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<GetNetworkEvents200ResponseEventsInner> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PAGE_END_AT = "pageEndAt";
  @SerializedName(SERIALIZED_NAME_PAGE_END_AT)
  private String pageEndAt;

  public static final String SERIALIZED_NAME_PAGE_START_AT = "pageStartAt";
  @SerializedName(SERIALIZED_NAME_PAGE_START_AT)
  private String pageStartAt;

  public GetNetworkEvents200Response() {
  }

  public GetNetworkEvents200Response events(List<GetNetworkEvents200ResponseEventsInner> events) {
    this.events = events;
    return this;
  }

  public GetNetworkEvents200Response addEventsItem(GetNetworkEvents200ResponseEventsInner eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * An array of events that took place in the network.
   * @return events
   */
  @javax.annotation.Nullable
  public List<GetNetworkEvents200ResponseEventsInner> getEvents() {
    return events;
  }

  public void setEvents(List<GetNetworkEvents200ResponseEventsInner> events) {
    this.events = events;
  }


  public GetNetworkEvents200Response message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A message regarding the events sent. Usually &#39;null&#39; unless there are no events
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GetNetworkEvents200Response pageEndAt(String pageEndAt) {
    this.pageEndAt = pageEndAt;
    return this;
  }

  /**
   * An UTC ISO8601 string of the latest occured at time of the listed events of the page.
   * @return pageEndAt
   */
  @javax.annotation.Nullable
  public String getPageEndAt() {
    return pageEndAt;
  }

  public void setPageEndAt(String pageEndAt) {
    this.pageEndAt = pageEndAt;
  }


  public GetNetworkEvents200Response pageStartAt(String pageStartAt) {
    this.pageStartAt = pageStartAt;
    return this;
  }

  /**
   * An UTC ISO8601 string of the earliest occured at time of the listed events of the page.
   * @return pageStartAt
   */
  @javax.annotation.Nullable
  public String getPageStartAt() {
    return pageStartAt;
  }

  public void setPageStartAt(String pageStartAt) {
    this.pageStartAt = pageStartAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkEvents200Response getNetworkEvents200Response = (GetNetworkEvents200Response) o;
    return Objects.equals(this.events, getNetworkEvents200Response.events) &&
        Objects.equals(this.message, getNetworkEvents200Response.message) &&
        Objects.equals(this.pageEndAt, getNetworkEvents200Response.pageEndAt) &&
        Objects.equals(this.pageStartAt, getNetworkEvents200Response.pageStartAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, message, pageEndAt, pageStartAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkEvents200Response {\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pageEndAt: ").append(toIndentedString(pageEndAt)).append("\n");
    sb.append("    pageStartAt: ").append(toIndentedString(pageStartAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("events");
    openapiFields.add("message");
    openapiFields.add("pageEndAt");
    openapiFields.add("pageStartAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkEvents200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkEvents200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkEvents200Response is not found in the empty JSON string", GetNetworkEvents200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkEvents200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkEvents200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            GetNetworkEvents200ResponseEventsInner.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("pageEndAt") != null && !jsonObj.get("pageEndAt").isJsonNull()) && !jsonObj.get("pageEndAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageEndAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageEndAt").toString()));
      }
      if ((jsonObj.get("pageStartAt") != null && !jsonObj.get("pageStartAt").isJsonNull()) && !jsonObj.get("pageStartAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageStartAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageStartAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkEvents200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkEvents200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkEvents200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkEvents200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkEvents200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkEvents200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkEvents200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkEvents200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkEvents200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkEvents200Response
   */
  public static GetNetworkEvents200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkEvents200Response.class);
  }

  /**
   * Convert an instance of GetNetworkEvents200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

