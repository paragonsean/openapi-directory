/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.GetDeviceSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsLatest200ResponseInner;
import org.openapitools.client.model.UpdateDeviceSensorRelationshipsRequest;
import org.openapitools.client.model.UpdateNetworkSensorAlertsProfileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SensorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SensorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SensorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkSensorAlertsProfile
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSensorAlertsProfileCall(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSensorAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSensorAlertsProfileValidateBeforeCall(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile(Async)");
        }

        // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
        if (createNetworkSensorAlertsProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile(Async)");
        }

        return createNetworkSensorAlertsProfileCall(networkId, createNetworkSensorAlertsProfileRequest, _callback);

    }

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner createNetworkSensorAlertsProfile(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = createNetworkSensorAlertsProfileWithHttpInfo(networkId, createNetworkSensorAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> createNetworkSensorAlertsProfileWithHttpInfo(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSensorAlertsProfileValidateBeforeCall(networkId, createNetworkSensorAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a sensor alert profile for a network. (asynchronously)
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSensorAlertsProfileAsync(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSensorAlertsProfileValidateBeforeCall(networkId, createNetworkSensorAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSensorAlertsProfile
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSensorAlertsProfileCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSensorAlertsProfileValidateBeforeCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile(Async)");
        }

        return deleteNetworkSensorAlertsProfileCall(networkId, id, _callback);

    }

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSensorAlertsProfile(String networkId, String id) throws ApiException {
        deleteNetworkSensorAlertsProfileWithHttpInfo(networkId, id);
    }

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSensorAlertsProfileWithHttpInfo(String networkId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSensorAlertsProfileValidateBeforeCall(networkId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a sensor alert profile from a network. (asynchronously)
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSensorAlertsProfileAsync(String networkId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSensorAlertsProfileValidateBeforeCall(networkId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSensorRelationships
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSensorRelationshipsCall(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/sensor/relationships"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSensorRelationshipsValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSensorRelationships(Async)");
        }

        return getDeviceSensorRelationshipsCall(serial, _callback);

    }

    /**
     * List the sensor roles for a given sensor or camera device.
     * List the sensor roles for a given sensor or camera device.
     * @param serial  (required)
     * @return List&lt;GetDeviceSensorRelationships200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSensorRelationships200ResponseInner> getDeviceSensorRelationships(String serial) throws ApiException {
        ApiResponse<List<GetDeviceSensorRelationships200ResponseInner>> localVarResp = getDeviceSensorRelationshipsWithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List the sensor roles for a given sensor or camera device.
     * List the sensor roles for a given sensor or camera device.
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;GetDeviceSensorRelationships200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSensorRelationships200ResponseInner>> getDeviceSensorRelationshipsWithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSensorRelationshipsValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSensorRelationships200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the sensor roles for a given sensor or camera device. (asynchronously)
     * List the sensor roles for a given sensor or camera device.
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSensorRelationshipsAsync(String serial, final ApiCallback<List<GetDeviceSensorRelationships200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSensorRelationshipsValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSensorRelationships200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsCurrentOverviewByMetric
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsCurrentOverviewByMetricCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/current/overview/byMetric"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsCurrentOverviewByMetricValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsCurrentOverviewByMetric(Async)");
        }

        return getNetworkSensorAlertsCurrentOverviewByMetricCall(networkId, _callback);

    }

    /**
     * Return an overview of currently alerting sensors by metric
     * Return an overview of currently alerting sensors by metric
     * @param networkId  (required)
     * @return GetNetworkSensorAlertsCurrentOverviewByMetric200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsCurrentOverviewByMetric200Response getNetworkSensorAlertsCurrentOverviewByMetric(String networkId) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> localVarResp = getNetworkSensorAlertsCurrentOverviewByMetricWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return an overview of currently alerting sensors by metric
     * Return an overview of currently alerting sensors by metric
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsCurrentOverviewByMetric200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> getNetworkSensorAlertsCurrentOverviewByMetricWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsCurrentOverviewByMetricValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsCurrentOverviewByMetric200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an overview of currently alerting sensors by metric (asynchronously)
     * Return an overview of currently alerting sensors by metric
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsCurrentOverviewByMetricAsync(String networkId, final ApiCallback<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsCurrentOverviewByMetricValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsCurrentOverviewByMetric200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsOverviewByMetric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsOverviewByMetricCall(String networkId, String t0, String t1, Float timespan, Integer interval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/overview/byMetric"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsOverviewByMetricValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer interval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsOverviewByMetric(Async)");
        }

        return getNetworkSensorAlertsOverviewByMetricCall(networkId, t0, t1, timespan, interval, _callback);

    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * Return an overview of alert occurrences over a timespan, by metric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @return List&lt;GetNetworkSensorAlertsOverviewByMetric200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner> getNetworkSensorAlertsOverviewByMetric(String networkId, String t0, String t1, Float timespan, Integer interval) throws ApiException {
        ApiResponse<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>> localVarResp = getNetworkSensorAlertsOverviewByMetricWithHttpInfo(networkId, t0, t1, timespan, interval);
        return localVarResp.getData();
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * Return an overview of alert occurrences over a timespan, by metric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorAlertsOverviewByMetric200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>> getNetworkSensorAlertsOverviewByMetricWithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer interval) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsOverviewByMetricValidateBeforeCall(networkId, t0, t1, timespan, interval, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric (asynchronously)
     * Return an overview of alert occurrences over a timespan, by metric
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days. (optional)
     * @param interval The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsOverviewByMetricAsync(String networkId, String t0, String t1, Float timespan, Integer interval, final ApiCallback<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsOverviewByMetricValidateBeforeCall(networkId, t0, t1, timespan, interval, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsProfile
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfileCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsProfileValidateBeforeCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile(Async)");
        }

        return getNetworkSensorAlertsProfileCall(networkId, id, _callback);

    }

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner getNetworkSensorAlertsProfile(String networkId, String id) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = getNetworkSensorAlertsProfileWithHttpInfo(networkId, id);
        return localVarResp.getData();
    }

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> getNetworkSensorAlertsProfileWithHttpInfo(String networkId, String id) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsProfileValidateBeforeCall(networkId, id, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show details of a sensor alert profile for a network. (asynchronously)
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfileAsync(String networkId, String id, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsProfileValidateBeforeCall(networkId, id, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsProfiles
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfilesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsProfilesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles(Async)");
        }

        return getNetworkSensorAlertsProfilesCall(networkId, _callback);

    }

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @return List&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorAlertsProfiles200ResponseInner> getNetworkSensorAlertsProfiles(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSensorAlertsProfiles200ResponseInner>> localVarResp = getNetworkSensorAlertsProfilesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorAlertsProfiles200ResponseInner>> getNetworkSensorAlertsProfilesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsProfilesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all sensor alert profiles for a network. (asynchronously)
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfilesAsync(String networkId, final ApiCallback<List<GetNetworkSensorAlertsProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsProfilesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorRelationships
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorRelationshipsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/relationships"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorRelationshipsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorRelationships(Async)");
        }

        return getNetworkSensorRelationshipsCall(networkId, _callback);

    }

    /**
     * List the sensor roles for devices in a given network
     * List the sensor roles for devices in a given network
     * @param networkId  (required)
     * @return List&lt;GetNetworkSensorRelationships200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorRelationships200ResponseInner> getNetworkSensorRelationships(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSensorRelationships200ResponseInner>> localVarResp = getNetworkSensorRelationshipsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the sensor roles for devices in a given network
     * List the sensor roles for devices in a given network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorRelationships200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorRelationships200ResponseInner>> getNetworkSensorRelationshipsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorRelationshipsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorRelationships200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the sensor roles for devices in a given network (asynchronously)
     * List the sensor roles for devices in a given network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorRelationshipsAsync(String networkId, final ApiCallback<List<GetNetworkSensorRelationships200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorRelationshipsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorRelationships200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSensorReadingsHistory
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSensorReadingsHistoryCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> networkIds, List<String> serials, List<String> metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/sensor/readings/history"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSensorReadingsHistoryValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> networkIds, List<String> serials, List<String> metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSensorReadingsHistory(Async)");
        }

        return getOrganizationSensorReadingsHistoryCall(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics, _callback);

    }

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @return List&lt;GetOrganizationSensorReadingsHistory200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationSensorReadingsHistory200ResponseInner> getOrganizationSensorReadingsHistory(String organizationId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> networkIds, List<String> serials, List<String> metrics) throws ApiException {
        ApiResponse<List<GetOrganizationSensorReadingsHistory200ResponseInner>> localVarResp = getOrganizationSensorReadingsHistoryWithHttpInfo(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics);
        return localVarResp.getData();
    }

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSensorReadingsHistory200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSensorReadingsHistory200ResponseInner>> getOrganizationSensorReadingsHistoryWithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> networkIds, List<String> serials, List<String> metrics) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSensorReadingsHistoryValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSensorReadingsHistory200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp (asynchronously)
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSensorReadingsHistoryAsync(String organizationId, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, List<String> networkIds, List<String> serials, List<String> metrics, final ApiCallback<List<GetOrganizationSensorReadingsHistory200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSensorReadingsHistoryValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSensorReadingsHistory200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSensorReadingsLatest
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSensorReadingsLatestCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/sensor/readings/latest"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSensorReadingsLatestValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSensorReadingsLatest(Async)");
        }

        return getOrganizationSensorReadingsLatestCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, metrics, _callback);

    }

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @return List&lt;GetOrganizationSensorReadingsLatest200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationSensorReadingsLatest200ResponseInner> getOrganizationSensorReadingsLatest(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> metrics) throws ApiException {
        ApiResponse<List<GetOrganizationSensorReadingsLatest200ResponseInner>> localVarResp = getOrganizationSensorReadingsLatestWithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, metrics);
        return localVarResp.getData();
    }

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSensorReadingsLatest200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSensorReadingsLatest200ResponseInner>> getOrganizationSensorReadingsLatestWithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> metrics) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSensorReadingsLatestValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, metrics, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSensorReadingsLatest200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial (asynchronously)
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter readings by network. (optional)
     * @param serials Optional parameter to filter readings by sensor. (optional)
     * @param metrics Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSensorReadingsLatestAsync(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> metrics, final ApiCallback<List<GetOrganizationSensorReadingsLatest200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSensorReadingsLatestValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, metrics, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSensorReadingsLatest200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSensorRelationships
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSensorRelationshipsCall(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSensorRelationshipsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/sensor/relationships"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSensorRelationshipsValidateBeforeCall(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSensorRelationships(Async)");
        }

        return updateDeviceSensorRelationshipsCall(serial, updateDeviceSensorRelationshipsRequest, _callback);

    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @return GetDeviceSensorRelationships200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSensorRelationships200ResponseInner updateDeviceSensorRelationships(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest) throws ApiException {
        ApiResponse<GetDeviceSensorRelationships200ResponseInner> localVarResp = updateDeviceSensorRelationshipsWithHttpInfo(serial, updateDeviceSensorRelationshipsRequest);
        return localVarResp.getData();
    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSensorRelationships200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSensorRelationships200ResponseInner> updateDeviceSensorRelationshipsWithHttpInfo(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSensorRelationshipsValidateBeforeCall(serial, updateDeviceSensorRelationshipsRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSensorRelationships200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device. (asynchronously)
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSensorRelationshipsAsync(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest, final ApiCallback<GetDeviceSensorRelationships200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSensorRelationshipsValidateBeforeCall(serial, updateDeviceSensorRelationshipsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSensorRelationships200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSensorAlertsProfile
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSensorAlertsProfileCall(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSensorAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSensorAlertsProfileValidateBeforeCall(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile(Async)");
        }

        return updateNetworkSensorAlertsProfileCall(networkId, id, updateNetworkSensorAlertsProfileRequest, _callback);

    }

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner updateNetworkSensorAlertsProfile(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = updateNetworkSensorAlertsProfileWithHttpInfo(networkId, id, updateNetworkSensorAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> updateNetworkSensorAlertsProfileWithHttpInfo(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSensorAlertsProfileValidateBeforeCall(networkId, id, updateNetworkSensorAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a sensor alert profile for a network. (asynchronously)
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSensorAlertsProfileAsync(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSensorAlertsProfileValidateBeforeCall(networkId, id, updateNetworkSensorAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
