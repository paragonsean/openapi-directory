/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmProfiles200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfiles200Response;
import org.openapitools.client.model.UpdateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.UpdateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateSwitchProfilePortRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkSensorAlertsProfile_2
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSensorAlertsProfile_2Call(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSensorAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSensorAlertsProfile_2ValidateBeforeCall(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile_2(Async)");
        }

        // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
        if (createNetworkSensorAlertsProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile_2(Async)");
        }

        return createNetworkSensorAlertsProfile_2Call(networkId, createNetworkSensorAlertsProfileRequest, _callback);

    }

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner createNetworkSensorAlertsProfile_2(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = createNetworkSensorAlertsProfile_2WithHttpInfo(networkId, createNetworkSensorAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> createNetworkSensorAlertsProfile_2WithHttpInfo(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, createNetworkSensorAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a sensor alert profile for a network. (asynchronously)
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSensorAlertsProfile_2Async(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, createNetworkSensorAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationAlertsProfile_2
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAlertsProfile_2Call(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAlertsProfile_2ValidateBeforeCall(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationAlertsProfile_2(Async)");
        }

        // verify the required parameter 'createOrganizationAlertsProfileRequest' is set
        if (createOrganizationAlertsProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationAlertsProfileRequest' when calling createOrganizationAlertsProfile_2(Async)");
        }

        return createOrganizationAlertsProfile_2Call(organizationId, createOrganizationAlertsProfileRequest, _callback);

    }

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationAlertsProfile_2(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationAlertsProfile_2WithHttpInfo(organizationId, createOrganizationAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationAlertsProfile_2WithHttpInfo(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAlertsProfile_2ValidateBeforeCall(organizationId, createOrganizationAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization-wide alert configuration (asynchronously)
     * Create an organization-wide alert configuration
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAlertsProfile_2Async(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAlertsProfile_2ValidateBeforeCall(organizationId, createOrganizationAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSensorAlertsProfile_2
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSensorAlertsProfile_2Call(String networkId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSensorAlertsProfile_2ValidateBeforeCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile_2(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile_2(Async)");
        }

        return deleteNetworkSensorAlertsProfile_2Call(networkId, id, _callback);

    }

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSensorAlertsProfile_2(String networkId, String id) throws ApiException {
        deleteNetworkSensorAlertsProfile_2WithHttpInfo(networkId, id);
    }

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSensorAlertsProfile_2WithHttpInfo(String networkId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a sensor alert profile from a network. (asynchronously)
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSensorAlertsProfile_2Async(String networkId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationAlertsProfile_2
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAlertsProfile_2Call(String organizationId, String alertConfigId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles/{alertConfigId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "alertConfigId" + "}", localVarApiClient.escapeString(alertConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationAlertsProfile_2ValidateBeforeCall(String organizationId, String alertConfigId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationAlertsProfile_2(Async)");
        }

        // verify the required parameter 'alertConfigId' is set
        if (alertConfigId == null) {
            throw new ApiException("Missing the required parameter 'alertConfigId' when calling deleteOrganizationAlertsProfile_2(Async)");
        }

        return deleteOrganizationAlertsProfile_2Call(organizationId, alertConfigId, _callback);

    }

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationAlertsProfile_2(String organizationId, String alertConfigId) throws ApiException {
        deleteOrganizationAlertsProfile_2WithHttpInfo(organizationId, alertConfigId);
    }

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationAlertsProfile_2WithHttpInfo(String organizationId, String alertConfigId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationAlertsProfile_2ValidateBeforeCall(organizationId, alertConfigId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes an organization-wide alert config (asynchronously)
     * Removes an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAlertsProfile_2Async(String organizationId, String alertConfigId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationAlertsProfile_2ValidateBeforeCall(organizationId, alertConfigId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsProfile_2
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfile_2Call(String networkId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsProfile_2ValidateBeforeCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile_2(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile_2(Async)");
        }

        return getNetworkSensorAlertsProfile_2Call(networkId, id, _callback);

    }

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner getNetworkSensorAlertsProfile_2(String networkId, String id) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = getNetworkSensorAlertsProfile_2WithHttpInfo(networkId, id);
        return localVarResp.getData();
    }

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> getNetworkSensorAlertsProfile_2WithHttpInfo(String networkId, String id) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, id, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show details of a sensor alert profile for a network. (asynchronously)
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfile_2Async(String networkId, String id, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, id, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsProfiles_2
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfiles_2Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsProfiles_2ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles_2(Async)");
        }

        return getNetworkSensorAlertsProfiles_2Call(networkId, _callback);

    }

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @return List&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorAlertsProfiles200ResponseInner> getNetworkSensorAlertsProfiles_2(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSensorAlertsProfiles200ResponseInner>> localVarResp = getNetworkSensorAlertsProfiles_2WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorAlertsProfiles200ResponseInner>> getNetworkSensorAlertsProfiles_2WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsProfiles_2ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all sensor alert profiles for a network. (asynchronously)
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfiles_2Async(String networkId, final ApiCallback<List<GetNetworkSensorAlertsProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsProfiles_2ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmProfiles_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmProfiles_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmProfiles_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmProfiles_1(Async)");
        }

        return getNetworkSmProfiles_1Call(networkId, _callback);

    }

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkSmProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmProfiles200ResponseInner> getNetworkSmProfiles_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSmProfiles200ResponseInner>> localVarResp = getNetworkSmProfiles_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmProfiles200ResponseInner>> getNetworkSmProfiles_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmProfiles_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all profiles in a network (asynchronously)
     * List all profiles in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmProfiles_1Async(String networkId, final ApiCallback<List<GetNetworkSmProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmProfiles_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAlertsProfiles_2
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAlertsProfiles_2Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAlertsProfiles_2ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAlertsProfiles_2(Async)");
        }

        return getOrganizationAlertsProfiles_2Call(organizationId, _callback);

    }

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationAlertsProfiles_2(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationAlertsProfiles_2WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationAlertsProfiles_2WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAlertsProfiles_2ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all organization-wide alert configurations (asynchronously)
     * List all organization-wide alert configurations
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAlertsProfiles_2Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAlertsProfiles_2ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfilePort_2
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_2Call(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_2ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfilePort_2Call(organizationId, configTemplateId, profileId, portId, _callback);

    }

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @return GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner getOrganizationConfigTemplateSwitchProfilePort_2(String organizationId, String configTemplateId, String profileId, String portId) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> localVarResp = getOrganizationConfigTemplateSwitchProfilePort_2WithHttpInfo(organizationId, configTemplateId, profileId, portId);
        return localVarResp.getData();
    }

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> getOrganizationConfigTemplateSwitchProfilePort_2WithHttpInfo(String organizationId, String configTemplateId, String profileId, String portId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePort_2ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a switch profile port (asynchronously)
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_2Async(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePort_2ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfilePorts_2
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_2Call(String organizationId, String configTemplateId, String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_2ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts_2(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts_2(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts_2(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfilePorts_2Call(organizationId, configTemplateId, profileId, _callback);

    }

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @return List&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> getOrganizationConfigTemplateSwitchProfilePorts_2(String organizationId, String configTemplateId, String profileId) throws ApiException {
        ApiResponse<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> localVarResp = getOrganizationConfigTemplateSwitchProfilePorts_2WithHttpInfo(organizationId, configTemplateId, profileId);
        return localVarResp.getData();
    }

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> getOrganizationConfigTemplateSwitchProfilePorts_2WithHttpInfo(String organizationId, String configTemplateId, String profileId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePorts_2ValidateBeforeCall(organizationId, configTemplateId, profileId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all the ports of a switch profile (asynchronously)
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_2Async(String organizationId, String configTemplateId, String profileId, final ApiCallback<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePorts_2ValidateBeforeCall(organizationId, configTemplateId, profileId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfiles_2
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfiles_2Call(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfiles_2ValidateBeforeCall(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfiles_2(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfiles_2(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfiles_2Call(organizationId, configTemplateId, _callback);

    }

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return GetOrganizationConfigTemplateSwitchProfiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfiles200Response getOrganizationConfigTemplateSwitchProfiles_2(String organizationId, String configTemplateId) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfiles200Response> localVarResp = getOrganizationConfigTemplateSwitchProfiles_2WithHttpInfo(organizationId, configTemplateId);
        return localVarResp.getData();
    }

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfiles200Response> getOrganizationConfigTemplateSwitchProfiles_2WithHttpInfo(String organizationId, String configTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfiles_2ValidateBeforeCall(organizationId, configTemplateId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switch profiles for your switch template configuration (asynchronously)
     * List the switch profiles for your switch template configuration
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfiles_2Async(String organizationId, String configTemplateId, final ApiCallback<GetOrganizationConfigTemplateSwitchProfiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfiles_2ValidateBeforeCall(organizationId, configTemplateId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSensorAlertsProfile_2
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSensorAlertsProfile_2Call(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSensorAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSensorAlertsProfile_2ValidateBeforeCall(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile_2(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile_2(Async)");
        }

        return updateNetworkSensorAlertsProfile_2Call(networkId, id, updateNetworkSensorAlertsProfileRequest, _callback);

    }

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner updateNetworkSensorAlertsProfile_2(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = updateNetworkSensorAlertsProfile_2WithHttpInfo(networkId, id, updateNetworkSensorAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> updateNetworkSensorAlertsProfile_2WithHttpInfo(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, id, updateNetworkSensorAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a sensor alert profile for a network. (asynchronously)
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSensorAlertsProfile_2Async(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSensorAlertsProfile_2ValidateBeforeCall(networkId, id, updateNetworkSensorAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAlertsProfile_2
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAlertsProfile_2Call(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles/{alertConfigId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "alertConfigId" + "}", localVarApiClient.escapeString(alertConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAlertsProfile_2ValidateBeforeCall(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAlertsProfile_2(Async)");
        }

        // verify the required parameter 'alertConfigId' is set
        if (alertConfigId == null) {
            throw new ApiException("Missing the required parameter 'alertConfigId' when calling updateOrganizationAlertsProfile_2(Async)");
        }

        return updateOrganizationAlertsProfile_2Call(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest, _callback);

    }

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAlertsProfile_2(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAlertsProfile_2WithHttpInfo(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAlertsProfile_2WithHttpInfo(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAlertsProfile_2ValidateBeforeCall(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organization-wide alert config (asynchronously)
     * Update an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAlertsProfile_2Async(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAlertsProfile_2ValidateBeforeCall(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationConfigTemplateSwitchProfilePort_2
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_2Call(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationConfigTemplateSwitchProfilePortRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_2ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2(Async)");
        }

        return updateOrganizationConfigTemplateSwitchProfilePort_2Call(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, _callback);

    }

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @return GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner updateOrganizationConfigTemplateSwitchProfilePort_2(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> localVarResp = updateOrganizationConfigTemplateSwitchProfilePort_2WithHttpInfo(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest);
        return localVarResp.getData();
    }

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> updateOrganizationConfigTemplateSwitchProfilePort_2WithHttpInfo(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationConfigTemplateSwitchProfilePort_2ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a switch profile port (asynchronously)
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_2Async(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationConfigTemplateSwitchProfilePort_2ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
