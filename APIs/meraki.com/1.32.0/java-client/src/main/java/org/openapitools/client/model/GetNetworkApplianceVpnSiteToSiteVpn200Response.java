/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner;
import org.openapitools.client.model.GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkApplianceVpnSiteToSiteVpn200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkApplianceVpnSiteToSiteVpn200Response {
  public static final String SERIALIZED_NAME_HUBS = "hubs";
  @SerializedName(SERIALIZED_NAME_HUBS)
  private List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner> hubs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner> subnets = new ArrayList<>();

  public GetNetworkApplianceVpnSiteToSiteVpn200Response() {
  }

  public GetNetworkApplianceVpnSiteToSiteVpn200Response hubs(List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner> hubs) {
    this.hubs = hubs;
    return this;
  }

  public GetNetworkApplianceVpnSiteToSiteVpn200Response addHubsItem(GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner hubsItem) {
    if (this.hubs == null) {
      this.hubs = new ArrayList<>();
    }
    this.hubs.add(hubsItem);
    return this;
  }

  /**
   * The list of VPN hubs, in order of preference.
   * @return hubs
   */
  @javax.annotation.Nullable
  public List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner> getHubs() {
    return hubs;
  }

  public void setHubs(List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner> hubs) {
    this.hubs = hubs;
  }


  public GetNetworkApplianceVpnSiteToSiteVpn200Response mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The site-to-site VPN mode.
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public GetNetworkApplianceVpnSiteToSiteVpn200Response subnets(List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner> subnets) {
    this.subnets = subnets;
    return this;
  }

  public GetNetworkApplianceVpnSiteToSiteVpn200Response addSubnetsItem(GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * The list of subnets and their VPN presence.
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner> subnets) {
    this.subnets = subnets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkApplianceVpnSiteToSiteVpn200Response getNetworkApplianceVpnSiteToSiteVpn200Response = (GetNetworkApplianceVpnSiteToSiteVpn200Response) o;
    return Objects.equals(this.hubs, getNetworkApplianceVpnSiteToSiteVpn200Response.hubs) &&
        Objects.equals(this.mode, getNetworkApplianceVpnSiteToSiteVpn200Response.mode) &&
        Objects.equals(this.subnets, getNetworkApplianceVpnSiteToSiteVpn200Response.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hubs, mode, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkApplianceVpnSiteToSiteVpn200Response {\n");
    sb.append("    hubs: ").append(toIndentedString(hubs)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hubs");
    openapiFields.add("mode");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkApplianceVpnSiteToSiteVpn200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkApplianceVpnSiteToSiteVpn200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkApplianceVpnSiteToSiteVpn200Response is not found in the empty JSON string", GetNetworkApplianceVpnSiteToSiteVpn200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkApplianceVpnSiteToSiteVpn200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkApplianceVpnSiteToSiteVpn200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("hubs") != null && !jsonObj.get("hubs").isJsonNull()) {
        JsonArray jsonArrayhubs = jsonObj.getAsJsonArray("hubs");
        if (jsonArrayhubs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hubs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hubs` to be an array in the JSON string but got `%s`", jsonObj.get("hubs").toString()));
          }

          // validate the optional field `hubs` (array)
          for (int i = 0; i < jsonArrayhubs.size(); i++) {
            GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner.validateJsonElement(jsonArrayhubs.get(i));
          };
        }
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkApplianceVpnSiteToSiteVpn200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkApplianceVpnSiteToSiteVpn200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkApplianceVpnSiteToSiteVpn200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkApplianceVpnSiteToSiteVpn200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkApplianceVpnSiteToSiteVpn200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkApplianceVpnSiteToSiteVpn200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkApplianceVpnSiteToSiteVpn200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkApplianceVpnSiteToSiteVpn200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkApplianceVpnSiteToSiteVpn200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkApplianceVpnSiteToSiteVpn200Response
   */
  public static GetNetworkApplianceVpnSiteToSiteVpn200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkApplianceVpnSiteToSiteVpn200Response.class);
  }

  /**
   * Convert an instance of GetNetworkApplianceVpnSiteToSiteVpn200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

