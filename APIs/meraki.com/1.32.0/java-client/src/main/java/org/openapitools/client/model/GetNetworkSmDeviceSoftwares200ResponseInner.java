/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSmDeviceSoftwares200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSmDeviceSoftwares200ResponseInner {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_BUNDLE_SIZE = "bundleSize";
  @SerializedName(SERIALIZED_NAME_BUNDLE_SIZE)
  private Integer bundleSize;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DYNAMIC_SIZE = "dynamicSize";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SIZE)
  private Integer dynamicSize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_INSTALLED_AT = "installedAt";
  @SerializedName(SERIALIZED_NAME_INSTALLED_AT)
  private String installedAt;

  public static final String SERIALIZED_NAME_IOS_REDEMPTION_CODE = "iosRedemptionCode";
  @SerializedName(SERIALIZED_NAME_IOS_REDEMPTION_CODE)
  private Boolean iosRedemptionCode;

  public static final String SERIALIZED_NAME_IS_MANAGED = "isManaged";
  @SerializedName(SERIALIZED_NAME_IS_MANAGED)
  private Boolean isManaged;

  public static final String SERIALIZED_NAME_ITUNES_ID = "itunesId";
  @SerializedName(SERIALIZED_NAME_ITUNES_ID)
  private String itunesId;

  public static final String SERIALIZED_NAME_LICENSE_KEY = "licenseKey";
  @SerializedName(SERIALIZED_NAME_LICENSE_KEY)
  private String licenseKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REDEMPTION_CODE = "redemptionCode";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CODE)
  private Integer redemptionCode;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "shortVersion";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TO_INSTALL = "toInstall";
  @SerializedName(SERIALIZED_NAME_TO_INSTALL)
  private Boolean toInstall;

  public static final String SERIALIZED_NAME_TO_UNINSTALL = "toUninstall";
  @SerializedName(SERIALIZED_NAME_TO_UNINSTALL)
  private Boolean toUninstall;

  public static final String SERIALIZED_NAME_UNINSTALLED_AT = "uninstalledAt";
  @SerializedName(SERIALIZED_NAME_UNINSTALLED_AT)
  private String uninstalledAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GetNetworkSmDeviceSoftwares200ResponseInner() {
  }

  public GetNetworkSmDeviceSoftwares200ResponseInner appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The Meraki managed application Id for this record on a particular device.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner bundleSize(Integer bundleSize) {
    this.bundleSize = bundleSize;
    return this;
  }

  /**
   * The size of the software bundle.
   * @return bundleSize
   */
  @javax.annotation.Nullable
  public Integer getBundleSize() {
    return bundleSize;
  }

  public void setBundleSize(Integer bundleSize) {
    this.bundleSize = bundleSize;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the Meraki record for the software was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The Meraki managed device Id.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner dynamicSize(Integer dynamicSize) {
    this.dynamicSize = dynamicSize;
    return this;
  }

  /**
   * The size of the data stored in the application.
   * @return dynamicSize
   */
  @javax.annotation.Nullable
  public Integer getDynamicSize() {
    return dynamicSize;
  }

  public void setDynamicSize(Integer dynamicSize) {
    this.dynamicSize = dynamicSize;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Meraki software Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Software bundle identifier.
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner installedAt(String installedAt) {
    this.installedAt = installedAt;
    return this;
  }

  /**
   * When the Software was installed on the device.
   * @return installedAt
   */
  @javax.annotation.Nullable
  public String getInstalledAt() {
    return installedAt;
  }

  public void setInstalledAt(String installedAt) {
    this.installedAt = installedAt;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner iosRedemptionCode(Boolean iosRedemptionCode) {
    this.iosRedemptionCode = iosRedemptionCode;
    return this;
  }

  /**
   * A boolean indicating whether or not an iOS redemption code was used.
   * @return iosRedemptionCode
   */
  @javax.annotation.Nullable
  public Boolean getIosRedemptionCode() {
    return iosRedemptionCode;
  }

  public void setIosRedemptionCode(Boolean iosRedemptionCode) {
    this.iosRedemptionCode = iosRedemptionCode;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner isManaged(Boolean isManaged) {
    this.isManaged = isManaged;
    return this;
  }

  /**
   * A boolean indicating whether or not the software is managed by Meraki.
   * @return isManaged
   */
  @javax.annotation.Nullable
  public Boolean getIsManaged() {
    return isManaged;
  }

  public void setIsManaged(Boolean isManaged) {
    this.isManaged = isManaged;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner itunesId(String itunesId) {
    this.itunesId = itunesId;
    return this;
  }

  /**
   * The itunes numerical identifier.
   * @return itunesId
   */
  @javax.annotation.Nullable
  public String getItunesId() {
    return itunesId;
  }

  public void setItunesId(String itunesId) {
    this.itunesId = itunesId;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner licenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

  /**
   * The license key associated with this software installation.
   * @return licenseKey
   */
  @javax.annotation.Nullable
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the software.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path on the device where the software record is located.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner redemptionCode(Integer redemptionCode) {
    this.redemptionCode = redemptionCode;
    return this;
  }

  /**
   * The redemption code used for this software.
   * @return redemptionCode
   */
  @javax.annotation.Nullable
  public Integer getRedemptionCode() {
    return redemptionCode;
  }

  public void setRedemptionCode(Integer redemptionCode) {
    this.redemptionCode = redemptionCode;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * Short version notation for the software.
   * @return shortVersion
   */
  @javax.annotation.Nullable
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The management status of the software.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner toInstall(Boolean toInstall) {
    this.toInstall = toInstall;
    return this;
  }

  /**
   * A boolean indicating this software record should be installed on the associated device.
   * @return toInstall
   */
  @javax.annotation.Nullable
  public Boolean getToInstall() {
    return toInstall;
  }

  public void setToInstall(Boolean toInstall) {
    this.toInstall = toInstall;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner toUninstall(Boolean toUninstall) {
    this.toUninstall = toUninstall;
    return this;
  }

  /**
   * A boolean indicating this software record should be uninstalled on the associated device.
   * @return toUninstall
   */
  @javax.annotation.Nullable
  public Boolean getToUninstall() {
    return toUninstall;
  }

  public void setToUninstall(Boolean toUninstall) {
    this.toUninstall = toUninstall;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner uninstalledAt(String uninstalledAt) {
    this.uninstalledAt = uninstalledAt;
    return this;
  }

  /**
   * When the record was uninstalled from the device.
   * @return uninstalledAt
   */
  @javax.annotation.Nullable
  public String getUninstalledAt() {
    return uninstalledAt;
  }

  public void setUninstalledAt(String uninstalledAt) {
    this.uninstalledAt = uninstalledAt;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the record was last updated by Meraki.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * The vendor of the software.
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }


  public GetNetworkSmDeviceSoftwares200ResponseInner version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Full version notation for the software.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSmDeviceSoftwares200ResponseInner getNetworkSmDeviceSoftwares200ResponseInner = (GetNetworkSmDeviceSoftwares200ResponseInner) o;
    return Objects.equals(this.appId, getNetworkSmDeviceSoftwares200ResponseInner.appId) &&
        Objects.equals(this.bundleSize, getNetworkSmDeviceSoftwares200ResponseInner.bundleSize) &&
        Objects.equals(this.createdAt, getNetworkSmDeviceSoftwares200ResponseInner.createdAt) &&
        Objects.equals(this.deviceId, getNetworkSmDeviceSoftwares200ResponseInner.deviceId) &&
        Objects.equals(this.dynamicSize, getNetworkSmDeviceSoftwares200ResponseInner.dynamicSize) &&
        Objects.equals(this.id, getNetworkSmDeviceSoftwares200ResponseInner.id) &&
        Objects.equals(this.identifier, getNetworkSmDeviceSoftwares200ResponseInner.identifier) &&
        Objects.equals(this.installedAt, getNetworkSmDeviceSoftwares200ResponseInner.installedAt) &&
        Objects.equals(this.iosRedemptionCode, getNetworkSmDeviceSoftwares200ResponseInner.iosRedemptionCode) &&
        Objects.equals(this.isManaged, getNetworkSmDeviceSoftwares200ResponseInner.isManaged) &&
        Objects.equals(this.itunesId, getNetworkSmDeviceSoftwares200ResponseInner.itunesId) &&
        Objects.equals(this.licenseKey, getNetworkSmDeviceSoftwares200ResponseInner.licenseKey) &&
        Objects.equals(this.name, getNetworkSmDeviceSoftwares200ResponseInner.name) &&
        Objects.equals(this.path, getNetworkSmDeviceSoftwares200ResponseInner.path) &&
        Objects.equals(this.redemptionCode, getNetworkSmDeviceSoftwares200ResponseInner.redemptionCode) &&
        Objects.equals(this.shortVersion, getNetworkSmDeviceSoftwares200ResponseInner.shortVersion) &&
        Objects.equals(this.status, getNetworkSmDeviceSoftwares200ResponseInner.status) &&
        Objects.equals(this.toInstall, getNetworkSmDeviceSoftwares200ResponseInner.toInstall) &&
        Objects.equals(this.toUninstall, getNetworkSmDeviceSoftwares200ResponseInner.toUninstall) &&
        Objects.equals(this.uninstalledAt, getNetworkSmDeviceSoftwares200ResponseInner.uninstalledAt) &&
        Objects.equals(this.updatedAt, getNetworkSmDeviceSoftwares200ResponseInner.updatedAt) &&
        Objects.equals(this.vendor, getNetworkSmDeviceSoftwares200ResponseInner.vendor) &&
        Objects.equals(this.version, getNetworkSmDeviceSoftwares200ResponseInner.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, bundleSize, createdAt, deviceId, dynamicSize, id, identifier, installedAt, iosRedemptionCode, isManaged, itunesId, licenseKey, name, path, redemptionCode, shortVersion, status, toInstall, toUninstall, uninstalledAt, updatedAt, vendor, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSmDeviceSoftwares200ResponseInner {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    bundleSize: ").append(toIndentedString(bundleSize)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    dynamicSize: ").append(toIndentedString(dynamicSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    installedAt: ").append(toIndentedString(installedAt)).append("\n");
    sb.append("    iosRedemptionCode: ").append(toIndentedString(iosRedemptionCode)).append("\n");
    sb.append("    isManaged: ").append(toIndentedString(isManaged)).append("\n");
    sb.append("    itunesId: ").append(toIndentedString(itunesId)).append("\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    redemptionCode: ").append(toIndentedString(redemptionCode)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    toInstall: ").append(toIndentedString(toInstall)).append("\n");
    sb.append("    toUninstall: ").append(toIndentedString(toUninstall)).append("\n");
    sb.append("    uninstalledAt: ").append(toIndentedString(uninstalledAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("bundleSize");
    openapiFields.add("createdAt");
    openapiFields.add("deviceId");
    openapiFields.add("dynamicSize");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("installedAt");
    openapiFields.add("iosRedemptionCode");
    openapiFields.add("isManaged");
    openapiFields.add("itunesId");
    openapiFields.add("licenseKey");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("redemptionCode");
    openapiFields.add("shortVersion");
    openapiFields.add("status");
    openapiFields.add("toInstall");
    openapiFields.add("toUninstall");
    openapiFields.add("uninstalledAt");
    openapiFields.add("updatedAt");
    openapiFields.add("vendor");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSmDeviceSoftwares200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSmDeviceSoftwares200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSmDeviceSoftwares200ResponseInner is not found in the empty JSON string", GetNetworkSmDeviceSoftwares200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSmDeviceSoftwares200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSmDeviceSoftwares200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("installedAt") != null && !jsonObj.get("installedAt").isJsonNull()) && !jsonObj.get("installedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installedAt").toString()));
      }
      if ((jsonObj.get("itunesId") != null && !jsonObj.get("itunesId").isJsonNull()) && !jsonObj.get("itunesId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itunesId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itunesId").toString()));
      }
      if ((jsonObj.get("licenseKey") != null && !jsonObj.get("licenseKey").isJsonNull()) && !jsonObj.get("licenseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseKey").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("shortVersion") != null && !jsonObj.get("shortVersion").isJsonNull()) && !jsonObj.get("shortVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortVersion").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("uninstalledAt") != null && !jsonObj.get("uninstalledAt").isJsonNull()) && !jsonObj.get("uninstalledAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uninstalledAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uninstalledAt").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSmDeviceSoftwares200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSmDeviceSoftwares200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSmDeviceSoftwares200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSmDeviceSoftwares200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSmDeviceSoftwares200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSmDeviceSoftwares200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSmDeviceSoftwares200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSmDeviceSoftwares200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSmDeviceSoftwares200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSmDeviceSoftwares200ResponseInner
   */
  public static GetNetworkSmDeviceSoftwares200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSmDeviceSoftwares200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSmDeviceSoftwares200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

