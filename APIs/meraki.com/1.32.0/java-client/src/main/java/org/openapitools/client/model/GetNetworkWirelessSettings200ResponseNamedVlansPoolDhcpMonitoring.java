/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Named VLAN Pool DHCP Monitoring settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring() {
  }

  public GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration in minutes that devices will refrain from using dirty VLANs before adding them back to the pool.
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not devices using named VLAN pools should remove dirty VLANs from the pool, thereby preventing clients from being assigned to VLANs where they would be unable to obtain an IP address via DHCP
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring getNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring = (GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring) o;
    return Objects.equals(this.duration, getNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.duration) &&
        Objects.equals(this.enabled, getNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring is not found in the empty JSON string", GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring
   */
  public static GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessSettings200ResponseNamedVlansPoolDhcpMonitoring to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

