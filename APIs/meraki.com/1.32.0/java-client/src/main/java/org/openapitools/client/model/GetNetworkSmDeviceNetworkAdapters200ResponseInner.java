/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSmDeviceNetworkAdapters200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSmDeviceNetworkAdapters200ResponseInner {
  public static final String SERIALIZED_NAME_DHCP_SERVER = "dhcpServer";
  @SerializedName(SERIALIZED_NAME_DHCP_SERVER)
  private String dhcpServer;

  public static final String SERIALIZED_NAME_DNS_SERVER = "dnsServer";
  @SerializedName(SERIALIZED_NAME_DNS_SERVER)
  private String dnsServer;

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private String gateway;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  public GetNetworkSmDeviceNetworkAdapters200ResponseInner() {
  }

  public GetNetworkSmDeviceNetworkAdapters200ResponseInner dhcpServer(String dhcpServer) {
    this.dhcpServer = dhcpServer;
    return this;
  }

  /**
   * The IP address of the DCHP Server.
   * @return dhcpServer
   */
  @javax.annotation.Nullable
  public String getDhcpServer() {
    return dhcpServer;
  }

  public void setDhcpServer(String dhcpServer) {
    this.dhcpServer = dhcpServer;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner dnsServer(String dnsServer) {
    this.dnsServer = dnsServer;
    return this;
  }

  /**
   * The IP address of the DNS Server.
   * @return dnsServer
   */
  @javax.annotation.Nullable
  public String getDnsServer() {
    return dnsServer;
  }

  public void setDnsServer(String dnsServer) {
    this.dnsServer = dnsServer;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner gateway(String gateway) {
    this.gateway = gateway;
    return this;
  }

  /**
   * The IP address of the Gateway.
   * @return gateway
   */
  @javax.annotation.Nullable
  public String getGateway() {
    return gateway;
  }

  public void setGateway(String gateway) {
    this.gateway = gateway;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Meraki Id of the network adapter record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address of the network adapter.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner mac(String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * The MAC associated with the network adapter.
   * @return mac
   */
  @javax.annotation.Nullable
  public String getMac() {
    return mac;
  }

  public void setMac(String mac) {
    this.mac = mac;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the newtwork adapter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetworkSmDeviceNetworkAdapters200ResponseInner subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * The subnet for the network adapter.
   * @return subnet
   */
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSmDeviceNetworkAdapters200ResponseInner getNetworkSmDeviceNetworkAdapters200ResponseInner = (GetNetworkSmDeviceNetworkAdapters200ResponseInner) o;
    return Objects.equals(this.dhcpServer, getNetworkSmDeviceNetworkAdapters200ResponseInner.dhcpServer) &&
        Objects.equals(this.dnsServer, getNetworkSmDeviceNetworkAdapters200ResponseInner.dnsServer) &&
        Objects.equals(this.gateway, getNetworkSmDeviceNetworkAdapters200ResponseInner.gateway) &&
        Objects.equals(this.id, getNetworkSmDeviceNetworkAdapters200ResponseInner.id) &&
        Objects.equals(this.ip, getNetworkSmDeviceNetworkAdapters200ResponseInner.ip) &&
        Objects.equals(this.mac, getNetworkSmDeviceNetworkAdapters200ResponseInner.mac) &&
        Objects.equals(this.name, getNetworkSmDeviceNetworkAdapters200ResponseInner.name) &&
        Objects.equals(this.subnet, getNetworkSmDeviceNetworkAdapters200ResponseInner.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpServer, dnsServer, gateway, id, ip, mac, name, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSmDeviceNetworkAdapters200ResponseInner {\n");
    sb.append("    dhcpServer: ").append(toIndentedString(dhcpServer)).append("\n");
    sb.append("    dnsServer: ").append(toIndentedString(dnsServer)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcpServer");
    openapiFields.add("dnsServer");
    openapiFields.add("gateway");
    openapiFields.add("id");
    openapiFields.add("ip");
    openapiFields.add("mac");
    openapiFields.add("name");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSmDeviceNetworkAdapters200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSmDeviceNetworkAdapters200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSmDeviceNetworkAdapters200ResponseInner is not found in the empty JSON string", GetNetworkSmDeviceNetworkAdapters200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSmDeviceNetworkAdapters200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSmDeviceNetworkAdapters200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dhcpServer") != null && !jsonObj.get("dhcpServer").isJsonNull()) && !jsonObj.get("dhcpServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpServer").toString()));
      }
      if ((jsonObj.get("dnsServer") != null && !jsonObj.get("dnsServer").isJsonNull()) && !jsonObj.get("dnsServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsServer").toString()));
      }
      if ((jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull()) && !jsonObj.get("gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) && !jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSmDeviceNetworkAdapters200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSmDeviceNetworkAdapters200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSmDeviceNetworkAdapters200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSmDeviceNetworkAdapters200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSmDeviceNetworkAdapters200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSmDeviceNetworkAdapters200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSmDeviceNetworkAdapters200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSmDeviceNetworkAdapters200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSmDeviceNetworkAdapters200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSmDeviceNetworkAdapters200ResponseInner
   */
  public static GetNetworkSmDeviceNetworkAdapters200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSmDeviceNetworkAdapters200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSmDeviceNetworkAdapters200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

