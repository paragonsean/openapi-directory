/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WAN 1 settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceManagementInterfaceRequestWan1 {
  public static final String SERIALIZED_NAME_STATIC_DNS = "staticDns";
  @SerializedName(SERIALIZED_NAME_STATIC_DNS)
  private List<String> staticDns = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_GATEWAY_IP = "staticGatewayIp";
  @SerializedName(SERIALIZED_NAME_STATIC_GATEWAY_IP)
  private String staticGatewayIp;

  public static final String SERIALIZED_NAME_STATIC_IP = "staticIp";
  @SerializedName(SERIALIZED_NAME_STATIC_IP)
  private String staticIp;

  public static final String SERIALIZED_NAME_STATIC_SUBNET_MASK = "staticSubnetMask";
  @SerializedName(SERIALIZED_NAME_STATIC_SUBNET_MASK)
  private String staticSubnetMask;

  public static final String SERIALIZED_NAME_USING_STATIC_IP = "usingStaticIp";
  @SerializedName(SERIALIZED_NAME_USING_STATIC_IP)
  private Boolean usingStaticIp;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private Integer vlan;

  /**
   * Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
   */
  @JsonAdapter(WanEnabledEnum.Adapter.class)
  public enum WanEnabledEnum {
    DISABLED("disabled"),
    
    ENABLED("enabled"),
    
    NOT_CONFIGURED("not configured");

    private String value;

    WanEnabledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WanEnabledEnum fromValue(String value) {
      for (WanEnabledEnum b : WanEnabledEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WanEnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WanEnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WanEnabledEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WanEnabledEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WanEnabledEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAN_ENABLED = "wanEnabled";
  @SerializedName(SERIALIZED_NAME_WAN_ENABLED)
  private WanEnabledEnum wanEnabled;

  public UpdateDeviceManagementInterfaceRequestWan1() {
  }

  public UpdateDeviceManagementInterfaceRequestWan1 staticDns(List<String> staticDns) {
    this.staticDns = staticDns;
    return this;
  }

  public UpdateDeviceManagementInterfaceRequestWan1 addStaticDnsItem(String staticDnsItem) {
    if (this.staticDns == null) {
      this.staticDns = new ArrayList<>();
    }
    this.staticDns.add(staticDnsItem);
    return this;
  }

  /**
   * Up to two DNS IPs.
   * @return staticDns
   */
  @javax.annotation.Nullable
  public List<String> getStaticDns() {
    return staticDns;
  }

  public void setStaticDns(List<String> staticDns) {
    this.staticDns = staticDns;
  }


  public UpdateDeviceManagementInterfaceRequestWan1 staticGatewayIp(String staticGatewayIp) {
    this.staticGatewayIp = staticGatewayIp;
    return this;
  }

  /**
   * The IP of the gateway on the WAN.
   * @return staticGatewayIp
   */
  @javax.annotation.Nullable
  public String getStaticGatewayIp() {
    return staticGatewayIp;
  }

  public void setStaticGatewayIp(String staticGatewayIp) {
    this.staticGatewayIp = staticGatewayIp;
  }


  public UpdateDeviceManagementInterfaceRequestWan1 staticIp(String staticIp) {
    this.staticIp = staticIp;
    return this;
  }

  /**
   * The IP the device should use on the WAN.
   * @return staticIp
   */
  @javax.annotation.Nullable
  public String getStaticIp() {
    return staticIp;
  }

  public void setStaticIp(String staticIp) {
    this.staticIp = staticIp;
  }


  public UpdateDeviceManagementInterfaceRequestWan1 staticSubnetMask(String staticSubnetMask) {
    this.staticSubnetMask = staticSubnetMask;
    return this;
  }

  /**
   * The subnet mask for the WAN.
   * @return staticSubnetMask
   */
  @javax.annotation.Nullable
  public String getStaticSubnetMask() {
    return staticSubnetMask;
  }

  public void setStaticSubnetMask(String staticSubnetMask) {
    this.staticSubnetMask = staticSubnetMask;
  }


  public UpdateDeviceManagementInterfaceRequestWan1 usingStaticIp(Boolean usingStaticIp) {
    this.usingStaticIp = usingStaticIp;
    return this;
  }

  /**
   * Configure the interface to have static IP settings or use DHCP.
   * @return usingStaticIp
   */
  @javax.annotation.Nullable
  public Boolean getUsingStaticIp() {
    return usingStaticIp;
  }

  public void setUsingStaticIp(Boolean usingStaticIp) {
    this.usingStaticIp = usingStaticIp;
  }


  public UpdateDeviceManagementInterfaceRequestWan1 vlan(Integer vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
   * @return vlan
   */
  @javax.annotation.Nullable
  public Integer getVlan() {
    return vlan;
  }

  public void setVlan(Integer vlan) {
    this.vlan = vlan;
  }


  public UpdateDeviceManagementInterfaceRequestWan1 wanEnabled(WanEnabledEnum wanEnabled) {
    this.wanEnabled = wanEnabled;
    return this;
  }

  /**
   * Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
   * @return wanEnabled
   */
  @javax.annotation.Nullable
  public WanEnabledEnum getWanEnabled() {
    return wanEnabled;
  }

  public void setWanEnabled(WanEnabledEnum wanEnabled) {
    this.wanEnabled = wanEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceManagementInterfaceRequestWan1 updateDeviceManagementInterfaceRequestWan1 = (UpdateDeviceManagementInterfaceRequestWan1) o;
    return Objects.equals(this.staticDns, updateDeviceManagementInterfaceRequestWan1.staticDns) &&
        Objects.equals(this.staticGatewayIp, updateDeviceManagementInterfaceRequestWan1.staticGatewayIp) &&
        Objects.equals(this.staticIp, updateDeviceManagementInterfaceRequestWan1.staticIp) &&
        Objects.equals(this.staticSubnetMask, updateDeviceManagementInterfaceRequestWan1.staticSubnetMask) &&
        Objects.equals(this.usingStaticIp, updateDeviceManagementInterfaceRequestWan1.usingStaticIp) &&
        Objects.equals(this.vlan, updateDeviceManagementInterfaceRequestWan1.vlan) &&
        Objects.equals(this.wanEnabled, updateDeviceManagementInterfaceRequestWan1.wanEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(staticDns, staticGatewayIp, staticIp, staticSubnetMask, usingStaticIp, vlan, wanEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceManagementInterfaceRequestWan1 {\n");
    sb.append("    staticDns: ").append(toIndentedString(staticDns)).append("\n");
    sb.append("    staticGatewayIp: ").append(toIndentedString(staticGatewayIp)).append("\n");
    sb.append("    staticIp: ").append(toIndentedString(staticIp)).append("\n");
    sb.append("    staticSubnetMask: ").append(toIndentedString(staticSubnetMask)).append("\n");
    sb.append("    usingStaticIp: ").append(toIndentedString(usingStaticIp)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("    wanEnabled: ").append(toIndentedString(wanEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("staticDns");
    openapiFields.add("staticGatewayIp");
    openapiFields.add("staticIp");
    openapiFields.add("staticSubnetMask");
    openapiFields.add("usingStaticIp");
    openapiFields.add("vlan");
    openapiFields.add("wanEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceManagementInterfaceRequestWan1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceManagementInterfaceRequestWan1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceManagementInterfaceRequestWan1 is not found in the empty JSON string", UpdateDeviceManagementInterfaceRequestWan1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceManagementInterfaceRequestWan1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceManagementInterfaceRequestWan1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("staticDns") != null && !jsonObj.get("staticDns").isJsonNull() && !jsonObj.get("staticDns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticDns` to be an array in the JSON string but got `%s`", jsonObj.get("staticDns").toString()));
      }
      if ((jsonObj.get("staticGatewayIp") != null && !jsonObj.get("staticGatewayIp").isJsonNull()) && !jsonObj.get("staticGatewayIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticGatewayIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticGatewayIp").toString()));
      }
      if ((jsonObj.get("staticIp") != null && !jsonObj.get("staticIp").isJsonNull()) && !jsonObj.get("staticIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticIp").toString()));
      }
      if ((jsonObj.get("staticSubnetMask") != null && !jsonObj.get("staticSubnetMask").isJsonNull()) && !jsonObj.get("staticSubnetMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticSubnetMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticSubnetMask").toString()));
      }
      if ((jsonObj.get("wanEnabled") != null && !jsonObj.get("wanEnabled").isJsonNull()) && !jsonObj.get("wanEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wanEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wanEnabled").toString()));
      }
      // validate the optional field `wanEnabled`
      if (jsonObj.get("wanEnabled") != null && !jsonObj.get("wanEnabled").isJsonNull()) {
        WanEnabledEnum.validateJsonElement(jsonObj.get("wanEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceManagementInterfaceRequestWan1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceManagementInterfaceRequestWan1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceManagementInterfaceRequestWan1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceManagementInterfaceRequestWan1.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceManagementInterfaceRequestWan1>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceManagementInterfaceRequestWan1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceManagementInterfaceRequestWan1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceManagementInterfaceRequestWan1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceManagementInterfaceRequestWan1
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceManagementInterfaceRequestWan1
   */
  public static UpdateDeviceManagementInterfaceRequestWan1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceManagementInterfaceRequestWan1.class);
  }

  /**
   * Convert an instance of UpdateDeviceManagementInterfaceRequestWan1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

