/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkAppliancePorts200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkAppliancePorts200ResponseInner {
  public static final String SERIALIZED_NAME_ACCESS_POLICY = "accessPolicy";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY)
  private String accessPolicy;

  public static final String SERIALIZED_NAME_ALLOWED_VLANS = "allowedVlans";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VLANS)
  private String allowedVlans;

  public static final String SERIALIZED_NAME_DROP_UNTAGGED_TRAFFIC = "dropUntaggedTraffic";
  @SerializedName(SERIALIZED_NAME_DROP_UNTAGGED_TRAFFIC)
  private Boolean dropUntaggedTraffic;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private Integer vlan;

  public GetNetworkAppliancePorts200ResponseInner() {
  }

  public GetNetworkAppliancePorts200ResponseInner accessPolicy(String accessPolicy) {
    this.accessPolicy = accessPolicy;
    return this;
  }

  /**
   * The name of the policy. Only applicable to Access ports.
   * @return accessPolicy
   */
  @javax.annotation.Nullable
  public String getAccessPolicy() {
    return accessPolicy;
  }

  public void setAccessPolicy(String accessPolicy) {
    this.accessPolicy = accessPolicy;
  }


  public GetNetworkAppliancePorts200ResponseInner allowedVlans(String allowedVlans) {
    this.allowedVlans = allowedVlans;
    return this;
  }

  /**
   * Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
   * @return allowedVlans
   */
  @javax.annotation.Nullable
  public String getAllowedVlans() {
    return allowedVlans;
  }

  public void setAllowedVlans(String allowedVlans) {
    this.allowedVlans = allowedVlans;
  }


  public GetNetworkAppliancePorts200ResponseInner dropUntaggedTraffic(Boolean dropUntaggedTraffic) {
    this.dropUntaggedTraffic = dropUntaggedTraffic;
    return this;
  }

  /**
   * Whether the trunk port can drop all untagged traffic.
   * @return dropUntaggedTraffic
   */
  @javax.annotation.Nullable
  public Boolean getDropUntaggedTraffic() {
    return dropUntaggedTraffic;
  }

  public void setDropUntaggedTraffic(Boolean dropUntaggedTraffic) {
    this.dropUntaggedTraffic = dropUntaggedTraffic;
  }


  public GetNetworkAppliancePorts200ResponseInner enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * The status of the port
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GetNetworkAppliancePorts200ResponseInner number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Number of the port
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public GetNetworkAppliancePorts200ResponseInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the port: &#39;access&#39; or &#39;trunk&#39;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public GetNetworkAppliancePorts200ResponseInner vlan(Integer vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
   * @return vlan
   */
  @javax.annotation.Nullable
  public Integer getVlan() {
    return vlan;
  }

  public void setVlan(Integer vlan) {
    this.vlan = vlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkAppliancePorts200ResponseInner getNetworkAppliancePorts200ResponseInner = (GetNetworkAppliancePorts200ResponseInner) o;
    return Objects.equals(this.accessPolicy, getNetworkAppliancePorts200ResponseInner.accessPolicy) &&
        Objects.equals(this.allowedVlans, getNetworkAppliancePorts200ResponseInner.allowedVlans) &&
        Objects.equals(this.dropUntaggedTraffic, getNetworkAppliancePorts200ResponseInner.dropUntaggedTraffic) &&
        Objects.equals(this.enabled, getNetworkAppliancePorts200ResponseInner.enabled) &&
        Objects.equals(this.number, getNetworkAppliancePorts200ResponseInner.number) &&
        Objects.equals(this.type, getNetworkAppliancePorts200ResponseInner.type) &&
        Objects.equals(this.vlan, getNetworkAppliancePorts200ResponseInner.vlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPolicy, allowedVlans, dropUntaggedTraffic, enabled, number, type, vlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkAppliancePorts200ResponseInner {\n");
    sb.append("    accessPolicy: ").append(toIndentedString(accessPolicy)).append("\n");
    sb.append("    allowedVlans: ").append(toIndentedString(allowedVlans)).append("\n");
    sb.append("    dropUntaggedTraffic: ").append(toIndentedString(dropUntaggedTraffic)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPolicy");
    openapiFields.add("allowedVlans");
    openapiFields.add("dropUntaggedTraffic");
    openapiFields.add("enabled");
    openapiFields.add("number");
    openapiFields.add("type");
    openapiFields.add("vlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkAppliancePorts200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkAppliancePorts200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkAppliancePorts200ResponseInner is not found in the empty JSON string", GetNetworkAppliancePorts200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkAppliancePorts200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkAppliancePorts200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessPolicy") != null && !jsonObj.get("accessPolicy").isJsonNull()) && !jsonObj.get("accessPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessPolicy").toString()));
      }
      if ((jsonObj.get("allowedVlans") != null && !jsonObj.get("allowedVlans").isJsonNull()) && !jsonObj.get("allowedVlans").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedVlans` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedVlans").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkAppliancePorts200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkAppliancePorts200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkAppliancePorts200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkAppliancePorts200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkAppliancePorts200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkAppliancePorts200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkAppliancePorts200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkAppliancePorts200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkAppliancePorts200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkAppliancePorts200ResponseInner
   */
  public static GetNetworkAppliancePorts200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkAppliancePorts200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkAppliancePorts200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

