/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSensorAlertsCurrentOverviewByMetric200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSensorAlertsCurrentOverviewByMetric200Response {
  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts counts;

  /**
   * Gets or Sets supportedMetrics
   */
  @JsonAdapter(SupportedMetricsEnum.Adapter.class)
  public enum SupportedMetricsEnum {
    DOOR("door"),
    
    HUMIDITY("humidity"),
    
    INDOOR_AIR_QUALITY("indoorAirQuality"),
    
    NOISE("noise"),
    
    PM25("pm25"),
    
    TEMPERATURE("temperature"),
    
    TVOC("tvoc"),
    
    WATER("water");

    private String value;

    SupportedMetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedMetricsEnum fromValue(String value) {
      for (SupportedMetricsEnum b : SupportedMetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedMetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedMetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedMetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedMetricsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedMetricsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_METRICS = "supportedMetrics";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_METRICS)
  private List<SupportedMetricsEnum> supportedMetrics = new ArrayList<>();

  public GetNetworkSensorAlertsCurrentOverviewByMetric200Response() {
  }

  public GetNetworkSensorAlertsCurrentOverviewByMetric200Response counts(GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts getCounts() {
    return counts;
  }

  public void setCounts(GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts counts) {
    this.counts = counts;
  }


  public GetNetworkSensorAlertsCurrentOverviewByMetric200Response supportedMetrics(List<SupportedMetricsEnum> supportedMetrics) {
    this.supportedMetrics = supportedMetrics;
    return this;
  }

  public GetNetworkSensorAlertsCurrentOverviewByMetric200Response addSupportedMetricsItem(SupportedMetricsEnum supportedMetricsItem) {
    if (this.supportedMetrics == null) {
      this.supportedMetrics = new ArrayList<>();
    }
    this.supportedMetrics.add(supportedMetricsItem);
    return this;
  }

  /**
   * List of metrics that are supported for alerts, based on available sensor devices in the network
   * @return supportedMetrics
   */
  @javax.annotation.Nullable
  public List<SupportedMetricsEnum> getSupportedMetrics() {
    return supportedMetrics;
  }

  public void setSupportedMetrics(List<SupportedMetricsEnum> supportedMetrics) {
    this.supportedMetrics = supportedMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSensorAlertsCurrentOverviewByMetric200Response getNetworkSensorAlertsCurrentOverviewByMetric200Response = (GetNetworkSensorAlertsCurrentOverviewByMetric200Response) o;
    return Objects.equals(this.counts, getNetworkSensorAlertsCurrentOverviewByMetric200Response.counts) &&
        Objects.equals(this.supportedMetrics, getNetworkSensorAlertsCurrentOverviewByMetric200Response.supportedMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(counts, supportedMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSensorAlertsCurrentOverviewByMetric200Response {\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    supportedMetrics: ").append(toIndentedString(supportedMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("counts");
    openapiFields.add("supportedMetrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSensorAlertsCurrentOverviewByMetric200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSensorAlertsCurrentOverviewByMetric200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSensorAlertsCurrentOverviewByMetric200Response is not found in the empty JSON string", GetNetworkSensorAlertsCurrentOverviewByMetric200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSensorAlertsCurrentOverviewByMetric200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSensorAlertsCurrentOverviewByMetric200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts.validateJsonElement(jsonObj.get("counts"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedMetrics") != null && !jsonObj.get("supportedMetrics").isJsonNull() && !jsonObj.get("supportedMetrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("supportedMetrics").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSensorAlertsCurrentOverviewByMetric200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSensorAlertsCurrentOverviewByMetric200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSensorAlertsCurrentOverviewByMetric200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSensorAlertsCurrentOverviewByMetric200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSensorAlertsCurrentOverviewByMetric200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkSensorAlertsCurrentOverviewByMetric200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSensorAlertsCurrentOverviewByMetric200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSensorAlertsCurrentOverviewByMetric200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSensorAlertsCurrentOverviewByMetric200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSensorAlertsCurrentOverviewByMetric200Response
   */
  public static GetNetworkSensorAlertsCurrentOverviewByMetric200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSensorAlertsCurrentOverviewByMetric200Response.class);
  }

  /**
   * Convert an instance of GetNetworkSensorAlertsCurrentOverviewByMetric200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

