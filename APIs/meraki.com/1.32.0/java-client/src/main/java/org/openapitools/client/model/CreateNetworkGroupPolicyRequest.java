/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequestBandwidth;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequestBonjourForwarding;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequestContentFiltering;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequestScheduling;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequestVlanTagging;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkGroupPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkGroupPolicyRequest {
  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private CreateNetworkGroupPolicyRequestBandwidth bandwidth;

  public static final String SERIALIZED_NAME_BONJOUR_FORWARDING = "bonjourForwarding";
  @SerializedName(SERIALIZED_NAME_BONJOUR_FORWARDING)
  private CreateNetworkGroupPolicyRequestBonjourForwarding bonjourForwarding;

  public static final String SERIALIZED_NAME_CONTENT_FILTERING = "contentFiltering";
  @SerializedName(SERIALIZED_NAME_CONTENT_FILTERING)
  private CreateNetworkGroupPolicyRequestContentFiltering contentFiltering;

  public static final String SERIALIZED_NAME_FIREWALL_AND_TRAFFIC_SHAPING = "firewallAndTrafficShaping";
  @SerializedName(SERIALIZED_NAME_FIREWALL_AND_TRAFFIC_SHAPING)
  private CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping firewallAndTrafficShaping;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULING = "scheduling";
  @SerializedName(SERIALIZED_NAME_SCHEDULING)
  private CreateNetworkGroupPolicyRequestScheduling scheduling;

  /**
   * Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
   */
  @JsonAdapter(SplashAuthSettingsEnum.Adapter.class)
  public enum SplashAuthSettingsEnum {
    BYPASS("bypass"),
    
    NETWORK_DEFAULT("network default");

    private String value;

    SplashAuthSettingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SplashAuthSettingsEnum fromValue(String value) {
      for (SplashAuthSettingsEnum b : SplashAuthSettingsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SplashAuthSettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SplashAuthSettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SplashAuthSettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SplashAuthSettingsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SplashAuthSettingsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPLASH_AUTH_SETTINGS = "splashAuthSettings";
  @SerializedName(SERIALIZED_NAME_SPLASH_AUTH_SETTINGS)
  private SplashAuthSettingsEnum splashAuthSettings;

  public static final String SERIALIZED_NAME_VLAN_TAGGING = "vlanTagging";
  @SerializedName(SERIALIZED_NAME_VLAN_TAGGING)
  private CreateNetworkGroupPolicyRequestVlanTagging vlanTagging;

  public CreateNetworkGroupPolicyRequest() {
  }

  public CreateNetworkGroupPolicyRequest bandwidth(CreateNetworkGroupPolicyRequestBandwidth bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Get bandwidth
   * @return bandwidth
   */
  @javax.annotation.Nullable
  public CreateNetworkGroupPolicyRequestBandwidth getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(CreateNetworkGroupPolicyRequestBandwidth bandwidth) {
    this.bandwidth = bandwidth;
  }


  public CreateNetworkGroupPolicyRequest bonjourForwarding(CreateNetworkGroupPolicyRequestBonjourForwarding bonjourForwarding) {
    this.bonjourForwarding = bonjourForwarding;
    return this;
  }

  /**
   * Get bonjourForwarding
   * @return bonjourForwarding
   */
  @javax.annotation.Nullable
  public CreateNetworkGroupPolicyRequestBonjourForwarding getBonjourForwarding() {
    return bonjourForwarding;
  }

  public void setBonjourForwarding(CreateNetworkGroupPolicyRequestBonjourForwarding bonjourForwarding) {
    this.bonjourForwarding = bonjourForwarding;
  }


  public CreateNetworkGroupPolicyRequest contentFiltering(CreateNetworkGroupPolicyRequestContentFiltering contentFiltering) {
    this.contentFiltering = contentFiltering;
    return this;
  }

  /**
   * Get contentFiltering
   * @return contentFiltering
   */
  @javax.annotation.Nullable
  public CreateNetworkGroupPolicyRequestContentFiltering getContentFiltering() {
    return contentFiltering;
  }

  public void setContentFiltering(CreateNetworkGroupPolicyRequestContentFiltering contentFiltering) {
    this.contentFiltering = contentFiltering;
  }


  public CreateNetworkGroupPolicyRequest firewallAndTrafficShaping(CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping firewallAndTrafficShaping) {
    this.firewallAndTrafficShaping = firewallAndTrafficShaping;
    return this;
  }

  /**
   * Get firewallAndTrafficShaping
   * @return firewallAndTrafficShaping
   */
  @javax.annotation.Nullable
  public CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping getFirewallAndTrafficShaping() {
    return firewallAndTrafficShaping;
  }

  public void setFirewallAndTrafficShaping(CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping firewallAndTrafficShaping) {
    this.firewallAndTrafficShaping = firewallAndTrafficShaping;
  }


  public CreateNetworkGroupPolicyRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for your group policy. Required.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkGroupPolicyRequest scheduling(CreateNetworkGroupPolicyRequestScheduling scheduling) {
    this.scheduling = scheduling;
    return this;
  }

  /**
   * Get scheduling
   * @return scheduling
   */
  @javax.annotation.Nullable
  public CreateNetworkGroupPolicyRequestScheduling getScheduling() {
    return scheduling;
  }

  public void setScheduling(CreateNetworkGroupPolicyRequestScheduling scheduling) {
    this.scheduling = scheduling;
  }


  public CreateNetworkGroupPolicyRequest splashAuthSettings(SplashAuthSettingsEnum splashAuthSettings) {
    this.splashAuthSettings = splashAuthSettings;
    return this;
  }

  /**
   * Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
   * @return splashAuthSettings
   */
  @javax.annotation.Nullable
  public SplashAuthSettingsEnum getSplashAuthSettings() {
    return splashAuthSettings;
  }

  public void setSplashAuthSettings(SplashAuthSettingsEnum splashAuthSettings) {
    this.splashAuthSettings = splashAuthSettings;
  }


  public CreateNetworkGroupPolicyRequest vlanTagging(CreateNetworkGroupPolicyRequestVlanTagging vlanTagging) {
    this.vlanTagging = vlanTagging;
    return this;
  }

  /**
   * Get vlanTagging
   * @return vlanTagging
   */
  @javax.annotation.Nullable
  public CreateNetworkGroupPolicyRequestVlanTagging getVlanTagging() {
    return vlanTagging;
  }

  public void setVlanTagging(CreateNetworkGroupPolicyRequestVlanTagging vlanTagging) {
    this.vlanTagging = vlanTagging;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest = (CreateNetworkGroupPolicyRequest) o;
    return Objects.equals(this.bandwidth, createNetworkGroupPolicyRequest.bandwidth) &&
        Objects.equals(this.bonjourForwarding, createNetworkGroupPolicyRequest.bonjourForwarding) &&
        Objects.equals(this.contentFiltering, createNetworkGroupPolicyRequest.contentFiltering) &&
        Objects.equals(this.firewallAndTrafficShaping, createNetworkGroupPolicyRequest.firewallAndTrafficShaping) &&
        Objects.equals(this.name, createNetworkGroupPolicyRequest.name) &&
        Objects.equals(this.scheduling, createNetworkGroupPolicyRequest.scheduling) &&
        Objects.equals(this.splashAuthSettings, createNetworkGroupPolicyRequest.splashAuthSettings) &&
        Objects.equals(this.vlanTagging, createNetworkGroupPolicyRequest.vlanTagging);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, bonjourForwarding, contentFiltering, firewallAndTrafficShaping, name, scheduling, splashAuthSettings, vlanTagging);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkGroupPolicyRequest {\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    bonjourForwarding: ").append(toIndentedString(bonjourForwarding)).append("\n");
    sb.append("    contentFiltering: ").append(toIndentedString(contentFiltering)).append("\n");
    sb.append("    firewallAndTrafficShaping: ").append(toIndentedString(firewallAndTrafficShaping)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scheduling: ").append(toIndentedString(scheduling)).append("\n");
    sb.append("    splashAuthSettings: ").append(toIndentedString(splashAuthSettings)).append("\n");
    sb.append("    vlanTagging: ").append(toIndentedString(vlanTagging)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidth");
    openapiFields.add("bonjourForwarding");
    openapiFields.add("contentFiltering");
    openapiFields.add("firewallAndTrafficShaping");
    openapiFields.add("name");
    openapiFields.add("scheduling");
    openapiFields.add("splashAuthSettings");
    openapiFields.add("vlanTagging");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkGroupPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkGroupPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkGroupPolicyRequest is not found in the empty JSON string", CreateNetworkGroupPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkGroupPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkGroupPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNetworkGroupPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bandwidth`
      if (jsonObj.get("bandwidth") != null && !jsonObj.get("bandwidth").isJsonNull()) {
        CreateNetworkGroupPolicyRequestBandwidth.validateJsonElement(jsonObj.get("bandwidth"));
      }
      // validate the optional field `bonjourForwarding`
      if (jsonObj.get("bonjourForwarding") != null && !jsonObj.get("bonjourForwarding").isJsonNull()) {
        CreateNetworkGroupPolicyRequestBonjourForwarding.validateJsonElement(jsonObj.get("bonjourForwarding"));
      }
      // validate the optional field `contentFiltering`
      if (jsonObj.get("contentFiltering") != null && !jsonObj.get("contentFiltering").isJsonNull()) {
        CreateNetworkGroupPolicyRequestContentFiltering.validateJsonElement(jsonObj.get("contentFiltering"));
      }
      // validate the optional field `firewallAndTrafficShaping`
      if (jsonObj.get("firewallAndTrafficShaping") != null && !jsonObj.get("firewallAndTrafficShaping").isJsonNull()) {
        CreateNetworkGroupPolicyRequestFirewallAndTrafficShaping.validateJsonElement(jsonObj.get("firewallAndTrafficShaping"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `scheduling`
      if (jsonObj.get("scheduling") != null && !jsonObj.get("scheduling").isJsonNull()) {
        CreateNetworkGroupPolicyRequestScheduling.validateJsonElement(jsonObj.get("scheduling"));
      }
      if ((jsonObj.get("splashAuthSettings") != null && !jsonObj.get("splashAuthSettings").isJsonNull()) && !jsonObj.get("splashAuthSettings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splashAuthSettings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splashAuthSettings").toString()));
      }
      // validate the optional field `splashAuthSettings`
      if (jsonObj.get("splashAuthSettings") != null && !jsonObj.get("splashAuthSettings").isJsonNull()) {
        SplashAuthSettingsEnum.validateJsonElement(jsonObj.get("splashAuthSettings"));
      }
      // validate the optional field `vlanTagging`
      if (jsonObj.get("vlanTagging") != null && !jsonObj.get("vlanTagging").isJsonNull()) {
        CreateNetworkGroupPolicyRequestVlanTagging.validateJsonElement(jsonObj.get("vlanTagging"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkGroupPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkGroupPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkGroupPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkGroupPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkGroupPolicyRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkGroupPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkGroupPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkGroupPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkGroupPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkGroupPolicyRequest
   */
  public static CreateNetworkGroupPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkGroupPolicyRequest.class);
  }

  /**
   * Convert an instance of CreateNetworkGroupPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

