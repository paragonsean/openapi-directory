/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateOrganizationSnmpRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateOrganizationSnmpRequest {
  public static final String SERIALIZED_NAME_PEER_IPS = "peerIps";
  @SerializedName(SERIALIZED_NAME_PEER_IPS)
  private List<String> peerIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_V2C_ENABLED = "v2cEnabled";
  @SerializedName(SERIALIZED_NAME_V2C_ENABLED)
  private Boolean v2cEnabled;

  /**
   * The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
   */
  @JsonAdapter(V3AuthModeEnum.Adapter.class)
  public enum V3AuthModeEnum {
    MD5("MD5"),
    
    SHA("SHA");

    private String value;

    V3AuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static V3AuthModeEnum fromValue(String value) {
      for (V3AuthModeEnum b : V3AuthModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<V3AuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final V3AuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public V3AuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return V3AuthModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      V3AuthModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_V3_AUTH_MODE = "v3AuthMode";
  @SerializedName(SERIALIZED_NAME_V3_AUTH_MODE)
  private V3AuthModeEnum v3AuthMode;

  public static final String SERIALIZED_NAME_V3_AUTH_PASS = "v3AuthPass";
  @SerializedName(SERIALIZED_NAME_V3_AUTH_PASS)
  private String v3AuthPass;

  public static final String SERIALIZED_NAME_V3_ENABLED = "v3Enabled";
  @SerializedName(SERIALIZED_NAME_V3_ENABLED)
  private Boolean v3Enabled;

  /**
   * The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
   */
  @JsonAdapter(V3PrivModeEnum.Adapter.class)
  public enum V3PrivModeEnum {
    AES128("AES128"),
    
    DES("DES");

    private String value;

    V3PrivModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static V3PrivModeEnum fromValue(String value) {
      for (V3PrivModeEnum b : V3PrivModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<V3PrivModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final V3PrivModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public V3PrivModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return V3PrivModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      V3PrivModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_V3_PRIV_MODE = "v3PrivMode";
  @SerializedName(SERIALIZED_NAME_V3_PRIV_MODE)
  private V3PrivModeEnum v3PrivMode;

  public static final String SERIALIZED_NAME_V3_PRIV_PASS = "v3PrivPass";
  @SerializedName(SERIALIZED_NAME_V3_PRIV_PASS)
  private String v3PrivPass;

  public UpdateOrganizationSnmpRequest() {
  }

  public UpdateOrganizationSnmpRequest peerIps(List<String> peerIps) {
    this.peerIps = peerIps;
    return this;
  }

  public UpdateOrganizationSnmpRequest addPeerIpsItem(String peerIpsItem) {
    if (this.peerIps == null) {
      this.peerIps = new ArrayList<>();
    }
    this.peerIps.add(peerIpsItem);
    return this;
  }

  /**
   * The list of IPv4 addresses that are allowed to access the SNMP server.
   * @return peerIps
   */
  @javax.annotation.Nullable
  public List<String> getPeerIps() {
    return peerIps;
  }

  public void setPeerIps(List<String> peerIps) {
    this.peerIps = peerIps;
  }


  public UpdateOrganizationSnmpRequest v2cEnabled(Boolean v2cEnabled) {
    this.v2cEnabled = v2cEnabled;
    return this;
  }

  /**
   * Boolean indicating whether SNMP version 2c is enabled for the organization.
   * @return v2cEnabled
   */
  @javax.annotation.Nullable
  public Boolean getV2cEnabled() {
    return v2cEnabled;
  }

  public void setV2cEnabled(Boolean v2cEnabled) {
    this.v2cEnabled = v2cEnabled;
  }


  public UpdateOrganizationSnmpRequest v3AuthMode(V3AuthModeEnum v3AuthMode) {
    this.v3AuthMode = v3AuthMode;
    return this;
  }

  /**
   * The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
   * @return v3AuthMode
   */
  @javax.annotation.Nullable
  public V3AuthModeEnum getV3AuthMode() {
    return v3AuthMode;
  }

  public void setV3AuthMode(V3AuthModeEnum v3AuthMode) {
    this.v3AuthMode = v3AuthMode;
  }


  public UpdateOrganizationSnmpRequest v3AuthPass(String v3AuthPass) {
    this.v3AuthPass = v3AuthPass;
    return this;
  }

  /**
   * The SNMP version 3 authentication password. Must be at least 8 characters if specified.
   * @return v3AuthPass
   */
  @javax.annotation.Nullable
  public String getV3AuthPass() {
    return v3AuthPass;
  }

  public void setV3AuthPass(String v3AuthPass) {
    this.v3AuthPass = v3AuthPass;
  }


  public UpdateOrganizationSnmpRequest v3Enabled(Boolean v3Enabled) {
    this.v3Enabled = v3Enabled;
    return this;
  }

  /**
   * Boolean indicating whether SNMP version 3 is enabled for the organization.
   * @return v3Enabled
   */
  @javax.annotation.Nullable
  public Boolean getV3Enabled() {
    return v3Enabled;
  }

  public void setV3Enabled(Boolean v3Enabled) {
    this.v3Enabled = v3Enabled;
  }


  public UpdateOrganizationSnmpRequest v3PrivMode(V3PrivModeEnum v3PrivMode) {
    this.v3PrivMode = v3PrivMode;
    return this;
  }

  /**
   * The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
   * @return v3PrivMode
   */
  @javax.annotation.Nullable
  public V3PrivModeEnum getV3PrivMode() {
    return v3PrivMode;
  }

  public void setV3PrivMode(V3PrivModeEnum v3PrivMode) {
    this.v3PrivMode = v3PrivMode;
  }


  public UpdateOrganizationSnmpRequest v3PrivPass(String v3PrivPass) {
    this.v3PrivPass = v3PrivPass;
    return this;
  }

  /**
   * The SNMP version 3 privacy password. Must be at least 8 characters if specified.
   * @return v3PrivPass
   */
  @javax.annotation.Nullable
  public String getV3PrivPass() {
    return v3PrivPass;
  }

  public void setV3PrivPass(String v3PrivPass) {
    this.v3PrivPass = v3PrivPass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest = (UpdateOrganizationSnmpRequest) o;
    return Objects.equals(this.peerIps, updateOrganizationSnmpRequest.peerIps) &&
        Objects.equals(this.v2cEnabled, updateOrganizationSnmpRequest.v2cEnabled) &&
        Objects.equals(this.v3AuthMode, updateOrganizationSnmpRequest.v3AuthMode) &&
        Objects.equals(this.v3AuthPass, updateOrganizationSnmpRequest.v3AuthPass) &&
        Objects.equals(this.v3Enabled, updateOrganizationSnmpRequest.v3Enabled) &&
        Objects.equals(this.v3PrivMode, updateOrganizationSnmpRequest.v3PrivMode) &&
        Objects.equals(this.v3PrivPass, updateOrganizationSnmpRequest.v3PrivPass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(peerIps, v2cEnabled, v3AuthMode, v3AuthPass, v3Enabled, v3PrivMode, v3PrivPass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOrganizationSnmpRequest {\n");
    sb.append("    peerIps: ").append(toIndentedString(peerIps)).append("\n");
    sb.append("    v2cEnabled: ").append(toIndentedString(v2cEnabled)).append("\n");
    sb.append("    v3AuthMode: ").append(toIndentedString(v3AuthMode)).append("\n");
    sb.append("    v3AuthPass: ").append(toIndentedString(v3AuthPass)).append("\n");
    sb.append("    v3Enabled: ").append(toIndentedString(v3Enabled)).append("\n");
    sb.append("    v3PrivMode: ").append(toIndentedString(v3PrivMode)).append("\n");
    sb.append("    v3PrivPass: ").append(toIndentedString(v3PrivPass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("peerIps");
    openapiFields.add("v2cEnabled");
    openapiFields.add("v3AuthMode");
    openapiFields.add("v3AuthPass");
    openapiFields.add("v3Enabled");
    openapiFields.add("v3PrivMode");
    openapiFields.add("v3PrivPass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOrganizationSnmpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOrganizationSnmpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOrganizationSnmpRequest is not found in the empty JSON string", UpdateOrganizationSnmpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOrganizationSnmpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOrganizationSnmpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("peerIps") != null && !jsonObj.get("peerIps").isJsonNull() && !jsonObj.get("peerIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerIps` to be an array in the JSON string but got `%s`", jsonObj.get("peerIps").toString()));
      }
      if ((jsonObj.get("v3AuthMode") != null && !jsonObj.get("v3AuthMode").isJsonNull()) && !jsonObj.get("v3AuthMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v3AuthMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v3AuthMode").toString()));
      }
      // validate the optional field `v3AuthMode`
      if (jsonObj.get("v3AuthMode") != null && !jsonObj.get("v3AuthMode").isJsonNull()) {
        V3AuthModeEnum.validateJsonElement(jsonObj.get("v3AuthMode"));
      }
      if ((jsonObj.get("v3AuthPass") != null && !jsonObj.get("v3AuthPass").isJsonNull()) && !jsonObj.get("v3AuthPass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v3AuthPass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v3AuthPass").toString()));
      }
      if ((jsonObj.get("v3PrivMode") != null && !jsonObj.get("v3PrivMode").isJsonNull()) && !jsonObj.get("v3PrivMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v3PrivMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v3PrivMode").toString()));
      }
      // validate the optional field `v3PrivMode`
      if (jsonObj.get("v3PrivMode") != null && !jsonObj.get("v3PrivMode").isJsonNull()) {
        V3PrivModeEnum.validateJsonElement(jsonObj.get("v3PrivMode"));
      }
      if ((jsonObj.get("v3PrivPass") != null && !jsonObj.get("v3PrivPass").isJsonNull()) && !jsonObj.get("v3PrivPass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v3PrivPass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v3PrivPass").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOrganizationSnmpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOrganizationSnmpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOrganizationSnmpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOrganizationSnmpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOrganizationSnmpRequest>() {
           @Override
           public void write(JsonWriter out, UpdateOrganizationSnmpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOrganizationSnmpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOrganizationSnmpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOrganizationSnmpRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateOrganizationSnmpRequest
   */
  public static UpdateOrganizationSnmpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOrganizationSnmpRequest.class);
  }

  /**
   * Convert an instance of UpdateOrganizationSnmpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

