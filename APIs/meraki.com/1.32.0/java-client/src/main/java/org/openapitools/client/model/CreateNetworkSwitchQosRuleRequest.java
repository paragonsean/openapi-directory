/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkSwitchQosRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkSwitchQosRuleRequest {
  public static final String SERIALIZED_NAME_DSCP = "dscp";
  @SerializedName(SERIALIZED_NAME_DSCP)
  private Integer dscp;

  public static final String SERIALIZED_NAME_DST_PORT = "dstPort";
  @SerializedName(SERIALIZED_NAME_DST_PORT)
  private Integer dstPort;

  public static final String SERIALIZED_NAME_DST_PORT_RANGE = "dstPortRange";
  @SerializedName(SERIALIZED_NAME_DST_PORT_RANGE)
  private String dstPortRange;

  /**
   * The protocol of the incoming packet. Can be one of \&quot;ANY\&quot;, \&quot;TCP\&quot; or \&quot;UDP\&quot;. Default value is \&quot;ANY\&quot;
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    ANY("ANY"),
    
    TCP("TCP"),
    
    UDP("UDP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_SRC_PORT = "srcPort";
  @SerializedName(SERIALIZED_NAME_SRC_PORT)
  private Integer srcPort;

  public static final String SERIALIZED_NAME_SRC_PORT_RANGE = "srcPortRange";
  @SerializedName(SERIALIZED_NAME_SRC_PORT_RANGE)
  private String srcPortRange;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private Integer vlan;

  public CreateNetworkSwitchQosRuleRequest() {
  }

  public CreateNetworkSwitchQosRuleRequest dscp(Integer dscp) {
    this.dscp = dscp;
    return this;
  }

  /**
   * DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
   * @return dscp
   */
  @javax.annotation.Nullable
  public Integer getDscp() {
    return dscp;
  }

  public void setDscp(Integer dscp) {
    this.dscp = dscp;
  }


  public CreateNetworkSwitchQosRuleRequest dstPort(Integer dstPort) {
    this.dstPort = dstPort;
    return this;
  }

  /**
   * The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
   * @return dstPort
   */
  @javax.annotation.Nullable
  public Integer getDstPort() {
    return dstPort;
  }

  public void setDstPort(Integer dstPort) {
    this.dstPort = dstPort;
  }


  public CreateNetworkSwitchQosRuleRequest dstPortRange(String dstPortRange) {
    this.dstPortRange = dstPortRange;
    return this;
  }

  /**
   * The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
   * @return dstPortRange
   */
  @javax.annotation.Nullable
  public String getDstPortRange() {
    return dstPortRange;
  }

  public void setDstPortRange(String dstPortRange) {
    this.dstPortRange = dstPortRange;
  }


  public CreateNetworkSwitchQosRuleRequest protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol of the incoming packet. Can be one of \&quot;ANY\&quot;, \&quot;TCP\&quot; or \&quot;UDP\&quot;. Default value is \&quot;ANY\&quot;
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public CreateNetworkSwitchQosRuleRequest srcPort(Integer srcPort) {
    this.srcPort = srcPort;
    return this;
  }

  /**
   * The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
   * @return srcPort
   */
  @javax.annotation.Nullable
  public Integer getSrcPort() {
    return srcPort;
  }

  public void setSrcPort(Integer srcPort) {
    this.srcPort = srcPort;
  }


  public CreateNetworkSwitchQosRuleRequest srcPortRange(String srcPortRange) {
    this.srcPortRange = srcPortRange;
    return this;
  }

  /**
   * The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
   * @return srcPortRange
   */
  @javax.annotation.Nullable
  public String getSrcPortRange() {
    return srcPortRange;
  }

  public void setSrcPortRange(String srcPortRange) {
    this.srcPortRange = srcPortRange;
  }


  public CreateNetworkSwitchQosRuleRequest vlan(Integer vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * The VLAN of the incoming packet. A null value will match any VLAN.
   * @return vlan
   */
  @javax.annotation.Nonnull
  public Integer getVlan() {
    return vlan;
  }

  public void setVlan(Integer vlan) {
    this.vlan = vlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest = (CreateNetworkSwitchQosRuleRequest) o;
    return Objects.equals(this.dscp, createNetworkSwitchQosRuleRequest.dscp) &&
        Objects.equals(this.dstPort, createNetworkSwitchQosRuleRequest.dstPort) &&
        Objects.equals(this.dstPortRange, createNetworkSwitchQosRuleRequest.dstPortRange) &&
        Objects.equals(this.protocol, createNetworkSwitchQosRuleRequest.protocol) &&
        Objects.equals(this.srcPort, createNetworkSwitchQosRuleRequest.srcPort) &&
        Objects.equals(this.srcPortRange, createNetworkSwitchQosRuleRequest.srcPortRange) &&
        Objects.equals(this.vlan, createNetworkSwitchQosRuleRequest.vlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dscp, dstPort, dstPortRange, protocol, srcPort, srcPortRange, vlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkSwitchQosRuleRequest {\n");
    sb.append("    dscp: ").append(toIndentedString(dscp)).append("\n");
    sb.append("    dstPort: ").append(toIndentedString(dstPort)).append("\n");
    sb.append("    dstPortRange: ").append(toIndentedString(dstPortRange)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    srcPort: ").append(toIndentedString(srcPort)).append("\n");
    sb.append("    srcPortRange: ").append(toIndentedString(srcPortRange)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dscp");
    openapiFields.add("dstPort");
    openapiFields.add("dstPortRange");
    openapiFields.add("protocol");
    openapiFields.add("srcPort");
    openapiFields.add("srcPortRange");
    openapiFields.add("vlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vlan");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkSwitchQosRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkSwitchQosRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkSwitchQosRuleRequest is not found in the empty JSON string", CreateNetworkSwitchQosRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkSwitchQosRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkSwitchQosRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNetworkSwitchQosRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dstPortRange") != null && !jsonObj.get("dstPortRange").isJsonNull()) && !jsonObj.get("dstPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dstPortRange").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("srcPortRange") != null && !jsonObj.get("srcPortRange").isJsonNull()) && !jsonObj.get("srcPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcPortRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkSwitchQosRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkSwitchQosRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkSwitchQosRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkSwitchQosRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkSwitchQosRuleRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkSwitchQosRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkSwitchQosRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkSwitchQosRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkSwitchQosRuleRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkSwitchQosRuleRequest
   */
  public static CreateNetworkSwitchQosRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkSwitchQosRuleRequest.class);
  }

  /**
   * Convert an instance of CreateNetworkSwitchQosRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

