/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollmentSystemsManagerNetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Systems Manager sentry enrollment splash settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment {
  public static final String SERIALIZED_NAME_ENFORCED_SYSTEMS = "enforcedSystems";
  @SerializedName(SERIALIZED_NAME_ENFORCED_SYSTEMS)
  private List<String> enforcedSystems = new ArrayList<>();

  /**
   * The strength of the enforcement of selected system types.
   */
  @JsonAdapter(StrengthEnum.Adapter.class)
  public enum StrengthEnum {
    CLICK_THROUGH("click-through"),
    
    FOCUSED("focused"),
    
    STRICT("strict");

    private String value;

    StrengthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StrengthEnum fromValue(String value) {
      for (StrengthEnum b : StrengthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StrengthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StrengthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StrengthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StrengthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StrengthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STRENGTH = "strength";
  @SerializedName(SERIALIZED_NAME_STRENGTH)
  private StrengthEnum strength;

  public static final String SERIALIZED_NAME_SYSTEMS_MANAGER_NETWORK = "systemsManagerNetwork";
  @SerializedName(SERIALIZED_NAME_SYSTEMS_MANAGER_NETWORK)
  private GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollmentSystemsManagerNetwork systemsManagerNetwork;

  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment() {
  }

  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment enforcedSystems(List<String> enforcedSystems) {
    this.enforcedSystems = enforcedSystems;
    return this;
  }

  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment addEnforcedSystemsItem(String enforcedSystemsItem) {
    if (this.enforcedSystems == null) {
      this.enforcedSystems = new ArrayList<>();
    }
    this.enforcedSystems.add(enforcedSystemsItem);
    return this;
  }

  /**
   * The system types that the Sentry enforces.
   * @return enforcedSystems
   */
  @javax.annotation.Nullable
  public List<String> getEnforcedSystems() {
    return enforcedSystems;
  }

  public void setEnforcedSystems(List<String> enforcedSystems) {
    this.enforcedSystems = enforcedSystems;
  }


  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment strength(StrengthEnum strength) {
    this.strength = strength;
    return this;
  }

  /**
   * The strength of the enforcement of selected system types.
   * @return strength
   */
  @javax.annotation.Nullable
  public StrengthEnum getStrength() {
    return strength;
  }

  public void setStrength(StrengthEnum strength) {
    this.strength = strength;
  }


  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment systemsManagerNetwork(GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollmentSystemsManagerNetwork systemsManagerNetwork) {
    this.systemsManagerNetwork = systemsManagerNetwork;
    return this;
  }

  /**
   * Get systemsManagerNetwork
   * @return systemsManagerNetwork
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollmentSystemsManagerNetwork getSystemsManagerNetwork() {
    return systemsManagerNetwork;
  }

  public void setSystemsManagerNetwork(GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollmentSystemsManagerNetwork systemsManagerNetwork) {
    this.systemsManagerNetwork = systemsManagerNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment getNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment = (GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment) o;
    return Objects.equals(this.enforcedSystems, getNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.enforcedSystems) &&
        Objects.equals(this.strength, getNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.strength) &&
        Objects.equals(this.systemsManagerNetwork, getNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.systemsManagerNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enforcedSystems, strength, systemsManagerNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment {\n");
    sb.append("    enforcedSystems: ").append(toIndentedString(enforcedSystems)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("    systemsManagerNetwork: ").append(toIndentedString(systemsManagerNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enforcedSystems");
    openapiFields.add("strength");
    openapiFields.add("systemsManagerNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment is not found in the empty JSON string", GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("enforcedSystems") != null && !jsonObj.get("enforcedSystems").isJsonNull() && !jsonObj.get("enforcedSystems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcedSystems` to be an array in the JSON string but got `%s`", jsonObj.get("enforcedSystems").toString()));
      }
      if ((jsonObj.get("strength") != null && !jsonObj.get("strength").isJsonNull()) && !jsonObj.get("strength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strength").toString()));
      }
      // validate the optional field `strength`
      if (jsonObj.get("strength") != null && !jsonObj.get("strength").isJsonNull()) {
        StrengthEnum.validateJsonElement(jsonObj.get("strength"));
      }
      // validate the optional field `systemsManagerNetwork`
      if (jsonObj.get("systemsManagerNetwork") != null && !jsonObj.get("systemsManagerNetwork").isJsonNull()) {
        GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollmentSystemsManagerNetwork.validateJsonElement(jsonObj.get("systemsManagerNetwork"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment
   */
  public static GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessSsidSplashSettings200ResponseSentryEnrollment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

