/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPv4 settings for static/dynamic mode.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  /**
   * The assignment mode for this SVI. Applies only when PPPoE is disabled.
   */
  @JsonAdapter(AssignmentModeEnum.Adapter.class)
  public enum AssignmentModeEnum {
    DYNAMIC("dynamic"),
    
    STATIC("static");

    private String value;

    AssignmentModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssignmentModeEnum fromValue(String value) {
      for (AssignmentModeEnum b : AssignmentModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssignmentModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssignmentModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssignmentModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssignmentModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssignmentModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNMENT_MODE = "assignmentMode";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_MODE)
  private AssignmentModeEnum assignmentMode;

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private String gateway;

  public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  private GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers nameservers;

  public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4() {
  }

  public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 address(String address) {
    this.address = address;
    return this;
  }

  /**
   * IP address and subnet mask when in static mode.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 assignmentMode(AssignmentModeEnum assignmentMode) {
    this.assignmentMode = assignmentMode;
    return this;
  }

  /**
   * The assignment mode for this SVI. Applies only when PPPoE is disabled.
   * @return assignmentMode
   */
  @javax.annotation.Nullable
  public AssignmentModeEnum getAssignmentMode() {
    return assignmentMode;
  }

  public void setAssignmentMode(AssignmentModeEnum assignmentMode) {
    this.assignmentMode = assignmentMode;
  }


  public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 gateway(String gateway) {
    this.gateway = gateway;
    return this;
  }

  /**
   * Gateway IP address when in static mode.
   * @return gateway
   */
  @javax.annotation.Nullable
  public String getGateway() {
    return gateway;
  }

  public void setGateway(String gateway) {
    this.gateway = gateway;
  }


  public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 nameservers(GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers nameservers) {
    this.nameservers = nameservers;
    return this;
  }

  /**
   * Get nameservers
   * @return nameservers
   */
  @javax.annotation.Nullable
  public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers getNameservers() {
    return nameservers;
  }

  public void setNameservers(GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers nameservers) {
    this.nameservers = nameservers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 getDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 = (GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4) o;
    return Objects.equals(this.address, getDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.address) &&
        Objects.equals(this.assignmentMode, getDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.assignmentMode) &&
        Objects.equals(this.gateway, getDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.gateway) &&
        Objects.equals(this.nameservers, getDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.nameservers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, assignmentMode, gateway, nameservers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    assignmentMode: ").append(toIndentedString(assignmentMode)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("assignmentMode");
    openapiFields.add("gateway");
    openapiFields.add("nameservers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 is not found in the empty JSON string", GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("assignmentMode") != null && !jsonObj.get("assignmentMode").isJsonNull()) && !jsonObj.get("assignmentMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignmentMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignmentMode").toString()));
      }
      // validate the optional field `assignmentMode`
      if (jsonObj.get("assignmentMode") != null && !jsonObj.get("assignmentMode").isJsonNull()) {
        AssignmentModeEnum.validateJsonElement(jsonObj.get("assignmentMode"));
      }
      if ((jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull()) && !jsonObj.get("gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway").toString()));
      }
      // validate the optional field `nameservers`
      if (jsonObj.get("nameservers") != null && !jsonObj.get("nameservers").isJsonNull()) {
        GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers.validateJsonElement(jsonObj.get("nameservers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4>() {
           @Override
           public void write(JsonWriter out, GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4
   * @throws IOException if the JSON string is invalid with respect to GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4
   */
  public static GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4.class);
  }

  /**
   * Convert an instance of GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

