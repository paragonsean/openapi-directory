/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeviceSwitchRoutingInterfaceDhcpRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceSwitchRoutingInterfaceDhcpRequest {
  public static final String SERIALIZED_NAME_BOOT_FILE_NAME = "bootFileName";
  @SerializedName(SERIALIZED_NAME_BOOT_FILE_NAME)
  private String bootFileName;

  public static final String SERIALIZED_NAME_BOOT_NEXT_SERVER = "bootNextServer";
  @SerializedName(SERIALIZED_NAME_BOOT_NEXT_SERVER)
  private String bootNextServer;

  public static final String SERIALIZED_NAME_BOOT_OPTIONS_ENABLED = "bootOptionsEnabled";
  @SerializedName(SERIALIZED_NAME_BOOT_OPTIONS_ENABLED)
  private Boolean bootOptionsEnabled;

  /**
   * The DHCP lease time config for the dhcp server running on switch interface (&#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;)
   */
  @JsonAdapter(DhcpLeaseTimeEnum.Adapter.class)
  public enum DhcpLeaseTimeEnum {
    _1_DAY("1 day"),
    
    _1_HOUR("1 hour"),
    
    _1_WEEK("1 week"),
    
    _12_HOURS("12 hours"),
    
    _30_MINUTES("30 minutes"),
    
    _4_HOURS("4 hours");

    private String value;

    DhcpLeaseTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DhcpLeaseTimeEnum fromValue(String value) {
      for (DhcpLeaseTimeEnum b : DhcpLeaseTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DhcpLeaseTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DhcpLeaseTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DhcpLeaseTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DhcpLeaseTimeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DhcpLeaseTimeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DHCP_LEASE_TIME = "dhcpLeaseTime";
  @SerializedName(SERIALIZED_NAME_DHCP_LEASE_TIME)
  private DhcpLeaseTimeEnum dhcpLeaseTime;

  /**
   * The DHCP mode options for the switch interface (&#39;dhcpDisabled&#39;, &#39;dhcpRelay&#39; or &#39;dhcpServer&#39;)
   */
  @JsonAdapter(DhcpModeEnum.Adapter.class)
  public enum DhcpModeEnum {
    DHCP_DISABLED("dhcpDisabled"),
    
    DHCP_RELAY("dhcpRelay"),
    
    DHCP_SERVER("dhcpServer");

    private String value;

    DhcpModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DhcpModeEnum fromValue(String value) {
      for (DhcpModeEnum b : DhcpModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DhcpModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DhcpModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DhcpModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DhcpModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DhcpModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DHCP_MODE = "dhcpMode";
  @SerializedName(SERIALIZED_NAME_DHCP_MODE)
  private DhcpModeEnum dhcpMode;

  public static final String SERIALIZED_NAME_DHCP_OPTIONS = "dhcpOptions";
  @SerializedName(SERIALIZED_NAME_DHCP_OPTIONS)
  private List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner> dhcpOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DHCP_RELAY_SERVER_IPS = "dhcpRelayServerIps";
  @SerializedName(SERIALIZED_NAME_DHCP_RELAY_SERVER_IPS)
  private List<String> dhcpRelayServerIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_CUSTOM_NAMESERVERS = "dnsCustomNameservers";
  @SerializedName(SERIALIZED_NAME_DNS_CUSTOM_NAMESERVERS)
  private List<String> dnsCustomNameservers = new ArrayList<>();

  /**
   * The DHCP name server option for the dhcp server running on the switch interface (&#39;googlePublicDns&#39;, &#39;openDns&#39; or &#39;custom&#39;)
   */
  @JsonAdapter(DnsNameserversOptionEnum.Adapter.class)
  public enum DnsNameserversOptionEnum {
    CUSTOM("custom"),
    
    GOOGLE_PUBLIC_DNS("googlePublicDns"),
    
    OPEN_DNS("openDns");

    private String value;

    DnsNameserversOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DnsNameserversOptionEnum fromValue(String value) {
      for (DnsNameserversOptionEnum b : DnsNameserversOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DnsNameserversOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DnsNameserversOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DnsNameserversOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DnsNameserversOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DnsNameserversOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DNS_NAMESERVERS_OPTION = "dnsNameserversOption";
  @SerializedName(SERIALIZED_NAME_DNS_NAMESERVERS_OPTION)
  private DnsNameserversOptionEnum dnsNameserversOption;

  public static final String SERIALIZED_NAME_FIXED_IP_ASSIGNMENTS = "fixedIpAssignments";
  @SerializedName(SERIALIZED_NAME_FIXED_IP_ASSIGNMENTS)
  private List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner> fixedIpAssignments = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVED_IP_RANGES = "reservedIpRanges";
  @SerializedName(SERIALIZED_NAME_RESERVED_IP_RANGES)
  private List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner> reservedIpRanges = new ArrayList<>();

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest() {
  }

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest bootFileName(String bootFileName) {
    this.bootFileName = bootFileName;
    return this;
  }

  /**
   * The PXE boot server filename for the DHCP server running on the switch interface
   * @return bootFileName
   */
  @javax.annotation.Nullable
  public String getBootFileName() {
    return bootFileName;
  }

  public void setBootFileName(String bootFileName) {
    this.bootFileName = bootFileName;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest bootNextServer(String bootNextServer) {
    this.bootNextServer = bootNextServer;
    return this;
  }

  /**
   * The PXE boot server IP for the DHCP server running on the switch interface
   * @return bootNextServer
   */
  @javax.annotation.Nullable
  public String getBootNextServer() {
    return bootNextServer;
  }

  public void setBootNextServer(String bootNextServer) {
    this.bootNextServer = bootNextServer;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest bootOptionsEnabled(Boolean bootOptionsEnabled) {
    this.bootOptionsEnabled = bootOptionsEnabled;
    return this;
  }

  /**
   * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface
   * @return bootOptionsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBootOptionsEnabled() {
    return bootOptionsEnabled;
  }

  public void setBootOptionsEnabled(Boolean bootOptionsEnabled) {
    this.bootOptionsEnabled = bootOptionsEnabled;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest dhcpLeaseTime(DhcpLeaseTimeEnum dhcpLeaseTime) {
    this.dhcpLeaseTime = dhcpLeaseTime;
    return this;
  }

  /**
   * The DHCP lease time config for the dhcp server running on switch interface (&#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;)
   * @return dhcpLeaseTime
   */
  @javax.annotation.Nullable
  public DhcpLeaseTimeEnum getDhcpLeaseTime() {
    return dhcpLeaseTime;
  }

  public void setDhcpLeaseTime(DhcpLeaseTimeEnum dhcpLeaseTime) {
    this.dhcpLeaseTime = dhcpLeaseTime;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest dhcpMode(DhcpModeEnum dhcpMode) {
    this.dhcpMode = dhcpMode;
    return this;
  }

  /**
   * The DHCP mode options for the switch interface (&#39;dhcpDisabled&#39;, &#39;dhcpRelay&#39; or &#39;dhcpServer&#39;)
   * @return dhcpMode
   */
  @javax.annotation.Nullable
  public DhcpModeEnum getDhcpMode() {
    return dhcpMode;
  }

  public void setDhcpMode(DhcpModeEnum dhcpMode) {
    this.dhcpMode = dhcpMode;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest dhcpOptions(List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner> dhcpOptions) {
    this.dhcpOptions = dhcpOptions;
    return this;
  }

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest addDhcpOptionsItem(UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner dhcpOptionsItem) {
    if (this.dhcpOptions == null) {
      this.dhcpOptions = new ArrayList<>();
    }
    this.dhcpOptions.add(dhcpOptionsItem);
    return this;
  }

  /**
   * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface
   * @return dhcpOptions
   */
  @javax.annotation.Nullable
  public List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner> getDhcpOptions() {
    return dhcpOptions;
  }

  public void setDhcpOptions(List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner> dhcpOptions) {
    this.dhcpOptions = dhcpOptions;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest dhcpRelayServerIps(List<String> dhcpRelayServerIps) {
    this.dhcpRelayServerIps = dhcpRelayServerIps;
    return this;
  }

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest addDhcpRelayServerIpsItem(String dhcpRelayServerIpsItem) {
    if (this.dhcpRelayServerIps == null) {
      this.dhcpRelayServerIps = new ArrayList<>();
    }
    this.dhcpRelayServerIps.add(dhcpRelayServerIpsItem);
    return this;
  }

  /**
   * The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface
   * @return dhcpRelayServerIps
   */
  @javax.annotation.Nullable
  public List<String> getDhcpRelayServerIps() {
    return dhcpRelayServerIps;
  }

  public void setDhcpRelayServerIps(List<String> dhcpRelayServerIps) {
    this.dhcpRelayServerIps = dhcpRelayServerIps;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest dnsCustomNameservers(List<String> dnsCustomNameservers) {
    this.dnsCustomNameservers = dnsCustomNameservers;
    return this;
  }

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest addDnsCustomNameserversItem(String dnsCustomNameserversItem) {
    if (this.dnsCustomNameservers == null) {
      this.dnsCustomNameservers = new ArrayList<>();
    }
    this.dnsCustomNameservers.add(dnsCustomNameserversItem);
    return this;
  }

  /**
   * The DHCP name server IPs when DHCP name server option is &#39;custom&#39;
   * @return dnsCustomNameservers
   */
  @javax.annotation.Nullable
  public List<String> getDnsCustomNameservers() {
    return dnsCustomNameservers;
  }

  public void setDnsCustomNameservers(List<String> dnsCustomNameservers) {
    this.dnsCustomNameservers = dnsCustomNameservers;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest dnsNameserversOption(DnsNameserversOptionEnum dnsNameserversOption) {
    this.dnsNameserversOption = dnsNameserversOption;
    return this;
  }

  /**
   * The DHCP name server option for the dhcp server running on the switch interface (&#39;googlePublicDns&#39;, &#39;openDns&#39; or &#39;custom&#39;)
   * @return dnsNameserversOption
   */
  @javax.annotation.Nullable
  public DnsNameserversOptionEnum getDnsNameserversOption() {
    return dnsNameserversOption;
  }

  public void setDnsNameserversOption(DnsNameserversOptionEnum dnsNameserversOption) {
    this.dnsNameserversOption = dnsNameserversOption;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest fixedIpAssignments(List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner> fixedIpAssignments) {
    this.fixedIpAssignments = fixedIpAssignments;
    return this;
  }

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest addFixedIpAssignmentsItem(UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner fixedIpAssignmentsItem) {
    if (this.fixedIpAssignments == null) {
      this.fixedIpAssignments = new ArrayList<>();
    }
    this.fixedIpAssignments.add(fixedIpAssignmentsItem);
    return this;
  }

  /**
   * Array of DHCP fixed IP assignments for the DHCP server running on the switch interface
   * @return fixedIpAssignments
   */
  @javax.annotation.Nullable
  public List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner> getFixedIpAssignments() {
    return fixedIpAssignments;
  }

  public void setFixedIpAssignments(List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner> fixedIpAssignments) {
    this.fixedIpAssignments = fixedIpAssignments;
  }


  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest reservedIpRanges(List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner> reservedIpRanges) {
    this.reservedIpRanges = reservedIpRanges;
    return this;
  }

  public UpdateDeviceSwitchRoutingInterfaceDhcpRequest addReservedIpRangesItem(UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner reservedIpRangesItem) {
    if (this.reservedIpRanges == null) {
      this.reservedIpRanges = new ArrayList<>();
    }
    this.reservedIpRanges.add(reservedIpRangesItem);
    return this;
  }

  /**
   * Array of DHCP reserved IP assignments for the DHCP server running on the switch interface
   * @return reservedIpRanges
   */
  @javax.annotation.Nullable
  public List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner> getReservedIpRanges() {
    return reservedIpRanges;
  }

  public void setReservedIpRanges(List<UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner> reservedIpRanges) {
    this.reservedIpRanges = reservedIpRanges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = (UpdateDeviceSwitchRoutingInterfaceDhcpRequest) o;
    return Objects.equals(this.bootFileName, updateDeviceSwitchRoutingInterfaceDhcpRequest.bootFileName) &&
        Objects.equals(this.bootNextServer, updateDeviceSwitchRoutingInterfaceDhcpRequest.bootNextServer) &&
        Objects.equals(this.bootOptionsEnabled, updateDeviceSwitchRoutingInterfaceDhcpRequest.bootOptionsEnabled) &&
        Objects.equals(this.dhcpLeaseTime, updateDeviceSwitchRoutingInterfaceDhcpRequest.dhcpLeaseTime) &&
        Objects.equals(this.dhcpMode, updateDeviceSwitchRoutingInterfaceDhcpRequest.dhcpMode) &&
        Objects.equals(this.dhcpOptions, updateDeviceSwitchRoutingInterfaceDhcpRequest.dhcpOptions) &&
        Objects.equals(this.dhcpRelayServerIps, updateDeviceSwitchRoutingInterfaceDhcpRequest.dhcpRelayServerIps) &&
        Objects.equals(this.dnsCustomNameservers, updateDeviceSwitchRoutingInterfaceDhcpRequest.dnsCustomNameservers) &&
        Objects.equals(this.dnsNameserversOption, updateDeviceSwitchRoutingInterfaceDhcpRequest.dnsNameserversOption) &&
        Objects.equals(this.fixedIpAssignments, updateDeviceSwitchRoutingInterfaceDhcpRequest.fixedIpAssignments) &&
        Objects.equals(this.reservedIpRanges, updateDeviceSwitchRoutingInterfaceDhcpRequest.reservedIpRanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootFileName, bootNextServer, bootOptionsEnabled, dhcpLeaseTime, dhcpMode, dhcpOptions, dhcpRelayServerIps, dnsCustomNameservers, dnsNameserversOption, fixedIpAssignments, reservedIpRanges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceSwitchRoutingInterfaceDhcpRequest {\n");
    sb.append("    bootFileName: ").append(toIndentedString(bootFileName)).append("\n");
    sb.append("    bootNextServer: ").append(toIndentedString(bootNextServer)).append("\n");
    sb.append("    bootOptionsEnabled: ").append(toIndentedString(bootOptionsEnabled)).append("\n");
    sb.append("    dhcpLeaseTime: ").append(toIndentedString(dhcpLeaseTime)).append("\n");
    sb.append("    dhcpMode: ").append(toIndentedString(dhcpMode)).append("\n");
    sb.append("    dhcpOptions: ").append(toIndentedString(dhcpOptions)).append("\n");
    sb.append("    dhcpRelayServerIps: ").append(toIndentedString(dhcpRelayServerIps)).append("\n");
    sb.append("    dnsCustomNameservers: ").append(toIndentedString(dnsCustomNameservers)).append("\n");
    sb.append("    dnsNameserversOption: ").append(toIndentedString(dnsNameserversOption)).append("\n");
    sb.append("    fixedIpAssignments: ").append(toIndentedString(fixedIpAssignments)).append("\n");
    sb.append("    reservedIpRanges: ").append(toIndentedString(reservedIpRanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootFileName");
    openapiFields.add("bootNextServer");
    openapiFields.add("bootOptionsEnabled");
    openapiFields.add("dhcpLeaseTime");
    openapiFields.add("dhcpMode");
    openapiFields.add("dhcpOptions");
    openapiFields.add("dhcpRelayServerIps");
    openapiFields.add("dnsCustomNameservers");
    openapiFields.add("dnsNameserversOption");
    openapiFields.add("fixedIpAssignments");
    openapiFields.add("reservedIpRanges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceSwitchRoutingInterfaceDhcpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceSwitchRoutingInterfaceDhcpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceSwitchRoutingInterfaceDhcpRequest is not found in the empty JSON string", UpdateDeviceSwitchRoutingInterfaceDhcpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceSwitchRoutingInterfaceDhcpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceSwitchRoutingInterfaceDhcpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bootFileName") != null && !jsonObj.get("bootFileName").isJsonNull()) && !jsonObj.get("bootFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootFileName").toString()));
      }
      if ((jsonObj.get("bootNextServer") != null && !jsonObj.get("bootNextServer").isJsonNull()) && !jsonObj.get("bootNextServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootNextServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootNextServer").toString()));
      }
      if ((jsonObj.get("dhcpLeaseTime") != null && !jsonObj.get("dhcpLeaseTime").isJsonNull()) && !jsonObj.get("dhcpLeaseTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpLeaseTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpLeaseTime").toString()));
      }
      // validate the optional field `dhcpLeaseTime`
      if (jsonObj.get("dhcpLeaseTime") != null && !jsonObj.get("dhcpLeaseTime").isJsonNull()) {
        DhcpLeaseTimeEnum.validateJsonElement(jsonObj.get("dhcpLeaseTime"));
      }
      if ((jsonObj.get("dhcpMode") != null && !jsonObj.get("dhcpMode").isJsonNull()) && !jsonObj.get("dhcpMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpMode").toString()));
      }
      // validate the optional field `dhcpMode`
      if (jsonObj.get("dhcpMode") != null && !jsonObj.get("dhcpMode").isJsonNull()) {
        DhcpModeEnum.validateJsonElement(jsonObj.get("dhcpMode"));
      }
      if (jsonObj.get("dhcpOptions") != null && !jsonObj.get("dhcpOptions").isJsonNull()) {
        JsonArray jsonArraydhcpOptions = jsonObj.getAsJsonArray("dhcpOptions");
        if (jsonArraydhcpOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dhcpOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dhcpOptions` to be an array in the JSON string but got `%s`", jsonObj.get("dhcpOptions").toString()));
          }

          // validate the optional field `dhcpOptions` (array)
          for (int i = 0; i < jsonArraydhcpOptions.size(); i++) {
            UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner.validateJsonElement(jsonArraydhcpOptions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dhcpRelayServerIps") != null && !jsonObj.get("dhcpRelayServerIps").isJsonNull() && !jsonObj.get("dhcpRelayServerIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpRelayServerIps` to be an array in the JSON string but got `%s`", jsonObj.get("dhcpRelayServerIps").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsCustomNameservers") != null && !jsonObj.get("dnsCustomNameservers").isJsonNull() && !jsonObj.get("dnsCustomNameservers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsCustomNameservers` to be an array in the JSON string but got `%s`", jsonObj.get("dnsCustomNameservers").toString()));
      }
      if ((jsonObj.get("dnsNameserversOption") != null && !jsonObj.get("dnsNameserversOption").isJsonNull()) && !jsonObj.get("dnsNameserversOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsNameserversOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsNameserversOption").toString()));
      }
      // validate the optional field `dnsNameserversOption`
      if (jsonObj.get("dnsNameserversOption") != null && !jsonObj.get("dnsNameserversOption").isJsonNull()) {
        DnsNameserversOptionEnum.validateJsonElement(jsonObj.get("dnsNameserversOption"));
      }
      if (jsonObj.get("fixedIpAssignments") != null && !jsonObj.get("fixedIpAssignments").isJsonNull()) {
        JsonArray jsonArrayfixedIpAssignments = jsonObj.getAsJsonArray("fixedIpAssignments");
        if (jsonArrayfixedIpAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fixedIpAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fixedIpAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("fixedIpAssignments").toString()));
          }

          // validate the optional field `fixedIpAssignments` (array)
          for (int i = 0; i < jsonArrayfixedIpAssignments.size(); i++) {
            UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.validateJsonElement(jsonArrayfixedIpAssignments.get(i));
          };
        }
      }
      if (jsonObj.get("reservedIpRanges") != null && !jsonObj.get("reservedIpRanges").isJsonNull()) {
        JsonArray jsonArrayreservedIpRanges = jsonObj.getAsJsonArray("reservedIpRanges");
        if (jsonArrayreservedIpRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservedIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservedIpRanges` to be an array in the JSON string but got `%s`", jsonObj.get("reservedIpRanges").toString()));
          }

          // validate the optional field `reservedIpRanges` (array)
          for (int i = 0; i < jsonArrayreservedIpRanges.size(); i++) {
            UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner.validateJsonElement(jsonArrayreservedIpRanges.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceSwitchRoutingInterfaceDhcpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceSwitchRoutingInterfaceDhcpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceSwitchRoutingInterfaceDhcpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceSwitchRoutingInterfaceDhcpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceSwitchRoutingInterfaceDhcpRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceSwitchRoutingInterfaceDhcpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceSwitchRoutingInterfaceDhcpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceSwitchRoutingInterfaceDhcpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceSwitchRoutingInterfaceDhcpRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceSwitchRoutingInterfaceDhcpRequest
   */
  public static UpdateDeviceSwitchRoutingInterfaceDhcpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceSwitchRoutingInterfaceDhcpRequest.class);
  }

  /**
   * Convert an instance of UpdateDeviceSwitchRoutingInterfaceDhcpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

