/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrganizationBrandingPolicy201Response;
import org.openapitools.client.model.CreateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.GetOrganizationBrandingPolicies200ResponseInner;
import org.openapitools.client.model.GetOrganizationBrandingPoliciesPriorities200Response;
import org.openapitools.client.model.UpdateOrganizationBrandingPoliciesPrioritiesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPolicyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandingPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandingPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandingPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrganizationBrandingPolicy_1
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationBrandingPolicy_1Call(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationBrandingPolicyRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationBrandingPolicy_1ValidateBeforeCall(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationBrandingPolicy_1(Async)");
        }

        return createOrganizationBrandingPolicy_1Call(organizationId, createOrganizationBrandingPolicyRequest, _callback);

    }

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @return CreateOrganizationBrandingPolicy201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationBrandingPolicy201Response createOrganizationBrandingPolicy_1(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest) throws ApiException {
        ApiResponse<CreateOrganizationBrandingPolicy201Response> localVarResp = createOrganizationBrandingPolicy_1WithHttpInfo(organizationId, createOrganizationBrandingPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @return ApiResponse&lt;CreateOrganizationBrandingPolicy201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrganizationBrandingPolicy201Response> createOrganizationBrandingPolicy_1WithHttpInfo(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, createOrganizationBrandingPolicyRequest, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationBrandingPolicy201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new branding policy to an organization (asynchronously)
     * Add a new branding policy to an organization
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationBrandingPolicy_1Async(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest, final ApiCallback<CreateOrganizationBrandingPolicy201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, createOrganizationBrandingPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationBrandingPolicy201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationBrandingPolicy_1
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationBrandingPolicy_1Call(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "brandingPolicyId" + "}", localVarApiClient.escapeString(brandingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationBrandingPolicy_1ValidateBeforeCall(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationBrandingPolicy_1(Async)");
        }

        // verify the required parameter 'brandingPolicyId' is set
        if (brandingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'brandingPolicyId' when calling deleteOrganizationBrandingPolicy_1(Async)");
        }

        return deleteOrganizationBrandingPolicy_1Call(organizationId, brandingPolicyId, _callback);

    }

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationBrandingPolicy_1(String organizationId, String brandingPolicyId) throws ApiException {
        deleteOrganizationBrandingPolicy_1WithHttpInfo(organizationId, brandingPolicyId);
    }

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationBrandingPolicy_1WithHttpInfo(String organizationId, String brandingPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, brandingPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a branding policy (asynchronously)
     * Delete a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationBrandingPolicy_1Async(String organizationId, String brandingPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, brandingPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationBrandingPoliciesPriorities_1
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPoliciesPriorities_1Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/priorities"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationBrandingPoliciesPriorities_1ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPoliciesPriorities_1(Async)");
        }

        return getOrganizationBrandingPoliciesPriorities_1Call(organizationId, _callback);

    }

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param organizationId  (required)
     * @return GetOrganizationBrandingPoliciesPriorities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPoliciesPriorities200Response getOrganizationBrandingPoliciesPriorities_1(String organizationId) throws ApiException {
        ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> localVarResp = getOrganizationBrandingPoliciesPriorities_1WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizationBrandingPoliciesPriorities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> getOrganizationBrandingPoliciesPriorities_1WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationBrandingPoliciesPriorities_1ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the branding policy IDs of an organization in priority order (asynchronously)
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPoliciesPriorities_1Async(String organizationId, final ApiCallback<GetOrganizationBrandingPoliciesPriorities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationBrandingPoliciesPriorities_1ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationBrandingPolicies_1
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicies_1Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationBrandingPolicies_1ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicies_1(Async)");
        }

        return getOrganizationBrandingPolicies_1Call(organizationId, _callback);

    }

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationBrandingPolicies200ResponseInner> getOrganizationBrandingPolicies_1(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationBrandingPolicies200ResponseInner>> localVarResp = getOrganizationBrandingPolicies_1WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationBrandingPolicies200ResponseInner>> getOrganizationBrandingPolicies_1WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationBrandingPolicies_1ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationBrandingPolicies200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the branding policies of an organization (asynchronously)
     * List the branding policies of an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicies_1Async(String organizationId, final ApiCallback<List<GetOrganizationBrandingPolicies200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationBrandingPolicies_1ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationBrandingPolicies200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationBrandingPolicy_1
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicy_1Call(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "brandingPolicyId" + "}", localVarApiClient.escapeString(brandingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationBrandingPolicy_1ValidateBeforeCall(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicy_1(Async)");
        }

        // verify the required parameter 'brandingPolicyId' is set
        if (brandingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'brandingPolicyId' when calling getOrganizationBrandingPolicy_1(Async)");
        }

        return getOrganizationBrandingPolicy_1Call(organizationId, brandingPolicyId, _callback);

    }

    /**
     * Return a branding policy
     * Return a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @return GetOrganizationBrandingPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPolicies200ResponseInner getOrganizationBrandingPolicy_1(String organizationId, String brandingPolicyId) throws ApiException {
        ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> localVarResp = getOrganizationBrandingPolicy_1WithHttpInfo(organizationId, brandingPolicyId);
        return localVarResp.getData();
    }

    /**
     * Return a branding policy
     * Return a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @return ApiResponse&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> getOrganizationBrandingPolicy_1WithHttpInfo(String organizationId, String brandingPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, brandingPolicyId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a branding policy (asynchronously)
     * Return a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicy_1Async(String organizationId, String brandingPolicyId, final ApiCallback<GetOrganizationBrandingPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, brandingPolicyId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationBrandingPoliciesPriorities_1
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPoliciesPriorities_1Call(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationBrandingPoliciesPrioritiesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/priorities"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationBrandingPoliciesPriorities_1ValidateBeforeCall(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPoliciesPriorities_1(Async)");
        }

        return updateOrganizationBrandingPoliciesPriorities_1Call(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest, _callback);

    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     * Update the priority ordering of an organization&#39;s branding policies.
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @return GetOrganizationBrandingPoliciesPriorities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPoliciesPriorities200Response updateOrganizationBrandingPoliciesPriorities_1(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest) throws ApiException {
        ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> localVarResp = updateOrganizationBrandingPoliciesPriorities_1WithHttpInfo(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     * Update the priority ordering of an organization&#39;s branding policies.
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationBrandingPoliciesPriorities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> updateOrganizationBrandingPoliciesPriorities_1WithHttpInfo(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationBrandingPoliciesPriorities_1ValidateBeforeCall(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies. (asynchronously)
     * Update the priority ordering of an organization&#39;s branding policies.
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPoliciesPriorities_1Async(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest, final ApiCallback<GetOrganizationBrandingPoliciesPriorities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationBrandingPoliciesPriorities_1ValidateBeforeCall(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationBrandingPolicy_1
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPolicy_1Call(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationBrandingPolicyRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "brandingPolicyId" + "}", localVarApiClient.escapeString(brandingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationBrandingPolicy_1ValidateBeforeCall(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPolicy_1(Async)");
        }

        // verify the required parameter 'brandingPolicyId' is set
        if (brandingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'brandingPolicyId' when calling updateOrganizationBrandingPolicy_1(Async)");
        }

        return updateOrganizationBrandingPolicy_1Call(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest, _callback);

    }

    /**
     * Update a branding policy
     * Update a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @return GetOrganizationBrandingPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPolicies200ResponseInner updateOrganizationBrandingPolicy_1(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest) throws ApiException {
        ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> localVarResp = updateOrganizationBrandingPolicy_1WithHttpInfo(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a branding policy
     * Update a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> updateOrganizationBrandingPolicy_1WithHttpInfo(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a branding policy (asynchronously)
     * Update a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPolicy_1Async(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest, final ApiCallback<GetOrganizationBrandingPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationBrandingPolicy_1ValidateBeforeCall(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
