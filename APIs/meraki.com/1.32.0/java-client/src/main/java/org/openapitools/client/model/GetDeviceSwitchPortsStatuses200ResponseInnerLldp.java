/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Link Layer Discovery Protocol (LLDP) information of the connected device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceSwitchPortsStatuses200ResponseInnerLldp {
  public static final String SERIALIZED_NAME_CHASSIS_ID = "chassisId";
  @SerializedName(SERIALIZED_NAME_CHASSIS_ID)
  private String chassisId;

  public static final String SERIALIZED_NAME_MANAGEMENT_ADDRESS = "managementAddress";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_ADDRESS)
  private String managementAddress;

  public static final String SERIALIZED_NAME_MANAGEMENT_VLAN = "managementVlan";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_VLAN)
  private Integer managementVlan;

  public static final String SERIALIZED_NAME_PORT_DESCRIPTION = "portDescription";
  @SerializedName(SERIALIZED_NAME_PORT_DESCRIPTION)
  private String portDescription;

  public static final String SERIALIZED_NAME_PORT_ID = "portId";
  @SerializedName(SERIALIZED_NAME_PORT_ID)
  private String portId;

  public static final String SERIALIZED_NAME_PORT_VLAN = "portVlan";
  @SerializedName(SERIALIZED_NAME_PORT_VLAN)
  private Integer portVlan;

  public static final String SERIALIZED_NAME_SYSTEM_CAPABILITIES = "systemCapabilities";
  @SerializedName(SERIALIZED_NAME_SYSTEM_CAPABILITIES)
  private String systemCapabilities;

  public static final String SERIALIZED_NAME_SYSTEM_DESCRIPTION = "systemDescription";
  @SerializedName(SERIALIZED_NAME_SYSTEM_DESCRIPTION)
  private String systemDescription;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp() {
  }

  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp chassisId(String chassisId) {
    this.chassisId = chassisId;
    return this;
  }

  /**
   * The device&#39;s chassis ID.
   * @return chassisId
   */
  @javax.annotation.Nullable
  public String getChassisId() {
    return chassisId;
  }

  public void setChassisId(String chassisId) {
    this.chassisId = chassisId;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp managementAddress(String managementAddress) {
    this.managementAddress = managementAddress;
    return this;
  }

  /**
   * The device&#39;s management IP.
   * @return managementAddress
   */
  @javax.annotation.Nullable
  public String getManagementAddress() {
    return managementAddress;
  }

  public void setManagementAddress(String managementAddress) {
    this.managementAddress = managementAddress;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp managementVlan(Integer managementVlan) {
    this.managementVlan = managementVlan;
    return this;
  }

  /**
   * The device&#39;s management VLAN.
   * @return managementVlan
   */
  @javax.annotation.Nullable
  public Integer getManagementVlan() {
    return managementVlan;
  }

  public void setManagementVlan(Integer managementVlan) {
    this.managementVlan = managementVlan;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp portDescription(String portDescription) {
    this.portDescription = portDescription;
    return this;
  }

  /**
   * Description of the port from which the LLDP packet was sent.
   * @return portDescription
   */
  @javax.annotation.Nullable
  public String getPortDescription() {
    return portDescription;
  }

  public void setPortDescription(String portDescription) {
    this.portDescription = portDescription;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp portId(String portId) {
    this.portId = portId;
    return this;
  }

  /**
   * Identifies the port from which the LLDP packet was sent
   * @return portId
   */
  @javax.annotation.Nullable
  public String getPortId() {
    return portId;
  }

  public void setPortId(String portId) {
    this.portId = portId;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp portVlan(Integer portVlan) {
    this.portVlan = portVlan;
    return this;
  }

  /**
   * The port&#39;s VLAN.
   * @return portVlan
   */
  @javax.annotation.Nullable
  public Integer getPortVlan() {
    return portVlan;
  }

  public void setPortVlan(Integer portVlan) {
    this.portVlan = portVlan;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp systemCapabilities(String systemCapabilities) {
    this.systemCapabilities = systemCapabilities;
    return this;
  }

  /**
   * Identifies the device type, which indicates the functional capabilities of the device.
   * @return systemCapabilities
   */
  @javax.annotation.Nullable
  public String getSystemCapabilities() {
    return systemCapabilities;
  }

  public void setSystemCapabilities(String systemCapabilities) {
    this.systemCapabilities = systemCapabilities;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp systemDescription(String systemDescription) {
    this.systemDescription = systemDescription;
    return this;
  }

  /**
   * The device&#39;s system description.
   * @return systemDescription
   */
  @javax.annotation.Nullable
  public String getSystemDescription() {
    return systemDescription;
  }

  public void setSystemDescription(String systemDescription) {
    this.systemDescription = systemDescription;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerLldp systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * The device&#39;s system name.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceSwitchPortsStatuses200ResponseInnerLldp getDeviceSwitchPortsStatuses200ResponseInnerLldp = (GetDeviceSwitchPortsStatuses200ResponseInnerLldp) o;
    return Objects.equals(this.chassisId, getDeviceSwitchPortsStatuses200ResponseInnerLldp.chassisId) &&
        Objects.equals(this.managementAddress, getDeviceSwitchPortsStatuses200ResponseInnerLldp.managementAddress) &&
        Objects.equals(this.managementVlan, getDeviceSwitchPortsStatuses200ResponseInnerLldp.managementVlan) &&
        Objects.equals(this.portDescription, getDeviceSwitchPortsStatuses200ResponseInnerLldp.portDescription) &&
        Objects.equals(this.portId, getDeviceSwitchPortsStatuses200ResponseInnerLldp.portId) &&
        Objects.equals(this.portVlan, getDeviceSwitchPortsStatuses200ResponseInnerLldp.portVlan) &&
        Objects.equals(this.systemCapabilities, getDeviceSwitchPortsStatuses200ResponseInnerLldp.systemCapabilities) &&
        Objects.equals(this.systemDescription, getDeviceSwitchPortsStatuses200ResponseInnerLldp.systemDescription) &&
        Objects.equals(this.systemName, getDeviceSwitchPortsStatuses200ResponseInnerLldp.systemName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chassisId, managementAddress, managementVlan, portDescription, portId, portVlan, systemCapabilities, systemDescription, systemName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceSwitchPortsStatuses200ResponseInnerLldp {\n");
    sb.append("    chassisId: ").append(toIndentedString(chassisId)).append("\n");
    sb.append("    managementAddress: ").append(toIndentedString(managementAddress)).append("\n");
    sb.append("    managementVlan: ").append(toIndentedString(managementVlan)).append("\n");
    sb.append("    portDescription: ").append(toIndentedString(portDescription)).append("\n");
    sb.append("    portId: ").append(toIndentedString(portId)).append("\n");
    sb.append("    portVlan: ").append(toIndentedString(portVlan)).append("\n");
    sb.append("    systemCapabilities: ").append(toIndentedString(systemCapabilities)).append("\n");
    sb.append("    systemDescription: ").append(toIndentedString(systemDescription)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chassisId");
    openapiFields.add("managementAddress");
    openapiFields.add("managementVlan");
    openapiFields.add("portDescription");
    openapiFields.add("portId");
    openapiFields.add("portVlan");
    openapiFields.add("systemCapabilities");
    openapiFields.add("systemDescription");
    openapiFields.add("systemName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInnerLldp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInnerLldp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceSwitchPortsStatuses200ResponseInnerLldp is not found in the empty JSON string", GetDeviceSwitchPortsStatuses200ResponseInnerLldp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInnerLldp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceSwitchPortsStatuses200ResponseInnerLldp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chassisId") != null && !jsonObj.get("chassisId").isJsonNull()) && !jsonObj.get("chassisId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chassisId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chassisId").toString()));
      }
      if ((jsonObj.get("managementAddress") != null && !jsonObj.get("managementAddress").isJsonNull()) && !jsonObj.get("managementAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementAddress").toString()));
      }
      if ((jsonObj.get("portDescription") != null && !jsonObj.get("portDescription").isJsonNull()) && !jsonObj.get("portDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portDescription").toString()));
      }
      if ((jsonObj.get("portId") != null && !jsonObj.get("portId").isJsonNull()) && !jsonObj.get("portId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portId").toString()));
      }
      if ((jsonObj.get("systemCapabilities") != null && !jsonObj.get("systemCapabilities").isJsonNull()) && !jsonObj.get("systemCapabilities").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemCapabilities` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemCapabilities").toString()));
      }
      if ((jsonObj.get("systemDescription") != null && !jsonObj.get("systemDescription").isJsonNull()) && !jsonObj.get("systemDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemDescription").toString()));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceSwitchPortsStatuses200ResponseInnerLldp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceSwitchPortsStatuses200ResponseInnerLldp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInnerLldp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceSwitchPortsStatuses200ResponseInnerLldp.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInnerLldp>() {
           @Override
           public void write(JsonWriter out, GetDeviceSwitchPortsStatuses200ResponseInnerLldp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceSwitchPortsStatuses200ResponseInnerLldp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceSwitchPortsStatuses200ResponseInnerLldp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceSwitchPortsStatuses200ResponseInnerLldp
   * @throws IOException if the JSON string is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInnerLldp
   */
  public static GetDeviceSwitchPortsStatuses200ResponseInnerLldp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceSwitchPortsStatuses200ResponseInnerLldp.class);
  }

  /**
   * Convert an instance of GetDeviceSwitchPortsStatuses200ResponseInnerLldp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

