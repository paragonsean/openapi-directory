/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkSwitchStpRequestStpBridgePriorityInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkSwitchStpRequestStpBridgePriorityInner {
  public static final String SERIALIZED_NAME_STACKS = "stacks";
  @SerializedName(SERIALIZED_NAME_STACKS)
  private List<String> stacks = new ArrayList<>();

  public static final String SERIALIZED_NAME_STP_PRIORITY = "stpPriority";
  @SerializedName(SERIALIZED_NAME_STP_PRIORITY)
  private Integer stpPriority;

  public static final String SERIALIZED_NAME_SWITCH_PROFILES = "switchProfiles";
  @SerializedName(SERIALIZED_NAME_SWITCH_PROFILES)
  private List<String> switchProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWITCHES = "switches";
  @SerializedName(SERIALIZED_NAME_SWITCHES)
  private List<String> switches = new ArrayList<>();

  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner() {
  }

  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner stacks(List<String> stacks) {
    this.stacks = stacks;
    return this;
  }

  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner addStacksItem(String stacksItem) {
    if (this.stacks == null) {
      this.stacks = new ArrayList<>();
    }
    this.stacks.add(stacksItem);
    return this;
  }

  /**
   * List of stack IDs
   * @return stacks
   */
  @javax.annotation.Nullable
  public List<String> getStacks() {
    return stacks;
  }

  public void setStacks(List<String> stacks) {
    this.stacks = stacks;
  }


  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner stpPriority(Integer stpPriority) {
    this.stpPriority = stpPriority;
    return this;
  }

  /**
   * STP priority for switch, stacks, or switch profiles
   * @return stpPriority
   */
  @javax.annotation.Nonnull
  public Integer getStpPriority() {
    return stpPriority;
  }

  public void setStpPriority(Integer stpPriority) {
    this.stpPriority = stpPriority;
  }


  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner switchProfiles(List<String> switchProfiles) {
    this.switchProfiles = switchProfiles;
    return this;
  }

  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner addSwitchProfilesItem(String switchProfilesItem) {
    if (this.switchProfiles == null) {
      this.switchProfiles = new ArrayList<>();
    }
    this.switchProfiles.add(switchProfilesItem);
    return this;
  }

  /**
   * List of switch profile IDs
   * @return switchProfiles
   */
  @javax.annotation.Nullable
  public List<String> getSwitchProfiles() {
    return switchProfiles;
  }

  public void setSwitchProfiles(List<String> switchProfiles) {
    this.switchProfiles = switchProfiles;
  }


  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner switches(List<String> switches) {
    this.switches = switches;
    return this;
  }

  public UpdateNetworkSwitchStpRequestStpBridgePriorityInner addSwitchesItem(String switchesItem) {
    if (this.switches == null) {
      this.switches = new ArrayList<>();
    }
    this.switches.add(switchesItem);
    return this;
  }

  /**
   * List of switch serial numbers
   * @return switches
   */
  @javax.annotation.Nullable
  public List<String> getSwitches() {
    return switches;
  }

  public void setSwitches(List<String> switches) {
    this.switches = switches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkSwitchStpRequestStpBridgePriorityInner updateNetworkSwitchStpRequestStpBridgePriorityInner = (UpdateNetworkSwitchStpRequestStpBridgePriorityInner) o;
    return Objects.equals(this.stacks, updateNetworkSwitchStpRequestStpBridgePriorityInner.stacks) &&
        Objects.equals(this.stpPriority, updateNetworkSwitchStpRequestStpBridgePriorityInner.stpPriority) &&
        Objects.equals(this.switchProfiles, updateNetworkSwitchStpRequestStpBridgePriorityInner.switchProfiles) &&
        Objects.equals(this.switches, updateNetworkSwitchStpRequestStpBridgePriorityInner.switches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stacks, stpPriority, switchProfiles, switches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkSwitchStpRequestStpBridgePriorityInner {\n");
    sb.append("    stacks: ").append(toIndentedString(stacks)).append("\n");
    sb.append("    stpPriority: ").append(toIndentedString(stpPriority)).append("\n");
    sb.append("    switchProfiles: ").append(toIndentedString(switchProfiles)).append("\n");
    sb.append("    switches: ").append(toIndentedString(switches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stacks");
    openapiFields.add("stpPriority");
    openapiFields.add("switchProfiles");
    openapiFields.add("switches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stpPriority");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkSwitchStpRequestStpBridgePriorityInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkSwitchStpRequestStpBridgePriorityInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkSwitchStpRequestStpBridgePriorityInner is not found in the empty JSON string", UpdateNetworkSwitchStpRequestStpBridgePriorityInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkSwitchStpRequestStpBridgePriorityInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkSwitchStpRequestStpBridgePriorityInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkSwitchStpRequestStpBridgePriorityInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("stacks") != null && !jsonObj.get("stacks").isJsonNull() && !jsonObj.get("stacks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stacks` to be an array in the JSON string but got `%s`", jsonObj.get("stacks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("switchProfiles") != null && !jsonObj.get("switchProfiles").isJsonNull() && !jsonObj.get("switchProfiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("switchProfiles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("switches") != null && !jsonObj.get("switches").isJsonNull() && !jsonObj.get("switches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `switches` to be an array in the JSON string but got `%s`", jsonObj.get("switches").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkSwitchStpRequestStpBridgePriorityInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkSwitchStpRequestStpBridgePriorityInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkSwitchStpRequestStpBridgePriorityInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkSwitchStpRequestStpBridgePriorityInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkSwitchStpRequestStpBridgePriorityInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkSwitchStpRequestStpBridgePriorityInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkSwitchStpRequestStpBridgePriorityInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkSwitchStpRequestStpBridgePriorityInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkSwitchStpRequestStpBridgePriorityInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkSwitchStpRequestStpBridgePriorityInner
   */
  public static UpdateNetworkSwitchStpRequestStpBridgePriorityInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkSwitchStpRequestStpBridgePriorityInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkSwitchStpRequestStpBridgePriorityInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

