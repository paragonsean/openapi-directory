/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogoImage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The logo used in the splash page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo {
  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogoImage image;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  private String md5;

  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo() {
  }

  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * The extension of the logo file.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo image(UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogoImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogoImage getImage() {
    return image;
  }

  public void setImage(UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogoImage image) {
    this.image = image;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo md5(String md5) {
    this.md5 = md5;
    return this;
  }

  /**
   * The MD5 value of the logo file. Setting this to null will remove the logo from the splash page.
   * @return md5
   */
  @javax.annotation.Nullable
  public String getMd5() {
    return md5;
  }

  public void setMd5(String md5) {
    this.md5 = md5;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo updateNetworkWirelessSsidSplashSettingsRequestSplashLogo = (UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo) o;
    return Objects.equals(this.extension, updateNetworkWirelessSsidSplashSettingsRequestSplashLogo.extension) &&
        Objects.equals(this.image, updateNetworkWirelessSsidSplashSettingsRequestSplashLogo.image) &&
        Objects.equals(this.md5, updateNetworkWirelessSsidSplashSettingsRequestSplashLogo.md5);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extension, image, md5);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo {\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extension");
    openapiFields.add("image");
    openapiFields.add("md5");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo is not found in the empty JSON string", UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogoImage.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("md5") != null && !jsonObj.get("md5").isJsonNull()) && !jsonObj.get("md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo
   */
  public static UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

