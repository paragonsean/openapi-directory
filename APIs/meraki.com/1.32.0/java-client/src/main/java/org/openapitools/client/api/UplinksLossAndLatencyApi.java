/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetOrganizationDevicesUplinksLossAndLatency200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UplinksLossAndLatencyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UplinksLossAndLatencyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UplinksLossAndLatencyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrganizationDevicesUplinksLossAndLatency_3
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 60 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes. (optional)
     * @param uplink Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks. (optional)
     * @param ip Optional filter for a specific destination IP. Default will return all destination IPs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevicesUplinksLossAndLatency_3Call(String organizationId, String t0, String t1, Float timespan, String uplink, String ip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/devices/uplinksLossAndLatency"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (uplink != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uplink", uplink));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDevicesUplinksLossAndLatency_3ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, String uplink, String ip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksLossAndLatency_3(Async)");
        }

        return getOrganizationDevicesUplinksLossAndLatency_3Call(organizationId, t0, t1, timespan, uplink, ip, _callback);

    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 60 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes. (optional)
     * @param uplink Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks. (optional)
     * @param ip Optional filter for a specific destination IP. Default will return all destination IPs. (optional)
     * @return List&lt;GetOrganizationDevicesUplinksLossAndLatency200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner> getOrganizationDevicesUplinksLossAndLatency_3(String organizationId, String t0, String t1, Float timespan, String uplink, String ip) throws ApiException {
        ApiResponse<List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>> localVarResp = getOrganizationDevicesUplinksLossAndLatency_3WithHttpInfo(organizationId, t0, t1, timespan, uplink, ip);
        return localVarResp.getData();
    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 60 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes. (optional)
     * @param uplink Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks. (optional)
     * @param ip Optional filter for a specific destination IP. Default will return all destination IPs. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationDevicesUplinksLossAndLatency200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>> getOrganizationDevicesUplinksLossAndLatency_3WithHttpInfo(String organizationId, String t0, String t1, Float timespan, String uplink, String ip) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDevicesUplinksLossAndLatency_3ValidateBeforeCall(organizationId, t0, t1, timespan, uplink, ip, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago (asynchronously)
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 60 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes. (optional)
     * @param uplink Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks. (optional)
     * @param ip Optional filter for a specific destination IP. Default will return all destination IPs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevicesUplinksLossAndLatency_3Async(String organizationId, String t0, String t1, Float timespan, String uplink, String ip, final ApiCallback<List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDevicesUplinksLossAndLatency_3ValidateBeforeCall(organizationId, t0, t1, timespan, uplink, ip, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
