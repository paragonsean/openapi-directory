/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner {
  /**
   * The device policy. Can be one of &#39;Allowed&#39;, &#39;Blocked&#39; or &#39;Group policy&#39;
   */
  @JsonAdapter(DevicePolicyEnum.Adapter.class)
  public enum DevicePolicyEnum {
    ALLOWED("Allowed"),
    
    BLOCKED("Blocked"),
    
    GROUP_POLICY("Group policy");

    private String value;

    DevicePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DevicePolicyEnum fromValue(String value) {
      for (DevicePolicyEnum b : DevicePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DevicePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DevicePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DevicePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DevicePolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DevicePolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_POLICY = "devicePolicy";
  @SerializedName(SERIALIZED_NAME_DEVICE_POLICY)
  private DevicePolicyEnum devicePolicy;

  /**
   * The device type. Can be one of &#39;Android&#39;, &#39;BlackBerry&#39;, &#39;Chrome OS&#39;, &#39;iPad&#39;, &#39;iPhone&#39;, &#39;iPod&#39;, &#39;Mac OS X&#39;, &#39;Windows&#39;, &#39;Windows Phone&#39;, &#39;B&amp;N Nook&#39; or &#39;Other OS&#39;
   */
  @JsonAdapter(DeviceTypeEnum.Adapter.class)
  public enum DeviceTypeEnum {
    ANDROID("Android"),
    
    B_N_NOOK("B&N Nook"),
    
    BLACK_BERRY("BlackBerry"),
    
    CHROME_OS("Chrome OS"),
    
    MAC_OS_X("Mac OS X"),
    
    OTHER_OS("Other OS"),
    
    WINDOWS("Windows"),
    
    WINDOWS_PHONE("Windows Phone"),
    
    I_PAD("iPad"),
    
    I_PHONE("iPhone"),
    
    I_POD("iPod");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceTypeEnum fromValue(String value) {
      for (DeviceTypeEnum b : DeviceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceTypeEnum deviceType;

  public static final String SERIALIZED_NAME_GROUP_POLICY_ID = "groupPolicyId";
  @SerializedName(SERIALIZED_NAME_GROUP_POLICY_ID)
  private Integer groupPolicyId;

  public UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner() {
  }

  public UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner devicePolicy(DevicePolicyEnum devicePolicy) {
    this.devicePolicy = devicePolicy;
    return this;
  }

  /**
   * The device policy. Can be one of &#39;Allowed&#39;, &#39;Blocked&#39; or &#39;Group policy&#39;
   * @return devicePolicy
   */
  @javax.annotation.Nonnull
  public DevicePolicyEnum getDevicePolicy() {
    return devicePolicy;
  }

  public void setDevicePolicy(DevicePolicyEnum devicePolicy) {
    this.devicePolicy = devicePolicy;
  }


  public UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner deviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * The device type. Can be one of &#39;Android&#39;, &#39;BlackBerry&#39;, &#39;Chrome OS&#39;, &#39;iPad&#39;, &#39;iPhone&#39;, &#39;iPod&#39;, &#39;Mac OS X&#39;, &#39;Windows&#39;, &#39;Windows Phone&#39;, &#39;B&amp;N Nook&#39; or &#39;Other OS&#39;
   * @return deviceType
   */
  @javax.annotation.Nonnull
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
  }


  public UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner groupPolicyId(Integer groupPolicyId) {
    this.groupPolicyId = groupPolicyId;
    return this;
  }

  /**
   * ID of the group policy object.
   * @return groupPolicyId
   */
  @javax.annotation.Nullable
  public Integer getGroupPolicyId() {
    return groupPolicyId;
  }

  public void setGroupPolicyId(Integer groupPolicyId) {
    this.groupPolicyId = groupPolicyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner = (UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner) o;
    return Objects.equals(this.devicePolicy, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.devicePolicy) &&
        Objects.equals(this.deviceType, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.deviceType) &&
        Objects.equals(this.groupPolicyId, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.groupPolicyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(devicePolicy, deviceType, groupPolicyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner {\n");
    sb.append("    devicePolicy: ").append(toIndentedString(devicePolicy)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    groupPolicyId: ").append(toIndentedString(groupPolicyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("devicePolicy");
    openapiFields.add("deviceType");
    openapiFields.add("groupPolicyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("devicePolicy");
    openapiRequiredFields.add("deviceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner is not found in the empty JSON string", UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("devicePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicePolicy").toString()));
      }
      // validate the required field `devicePolicy`
      DevicePolicyEnum.validateJsonElement(jsonObj.get("devicePolicy"));
      if (!jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      // validate the required field `deviceType`
      DeviceTypeEnum.validateJsonElement(jsonObj.get("deviceType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner
   */
  public static UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequestDeviceTypePoliciesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

