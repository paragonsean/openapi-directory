/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner {
  public static final String SERIALIZED_NAME_HAS_TRUSTED_PORT = "hasTrustedPort";
  @SerializedName(SERIALIZED_NAME_HAS_TRUSTED_PORT)
  private Boolean hasTrustedPort;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_SUPPORTS_INSPECTION = "supportsInspection";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_INSPECTION)
  private Boolean supportsInspection;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner() {
  }

  public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner hasTrustedPort(Boolean hasTrustedPort) {
    this.hasTrustedPort = hasTrustedPort;
    return this;
  }

  /**
   * Whether this switch has a trusted DAI port. Always false if supportsInspection is false.
   * @return hasTrustedPort
   */
  @javax.annotation.Nullable
  public Boolean getHasTrustedPort() {
    return hasTrustedPort;
  }

  public void setHasTrustedPort(Boolean hasTrustedPort) {
    this.hasTrustedPort = hasTrustedPort;
  }


  public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Switch name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Switch serial.
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner supportsInspection(Boolean supportsInspection) {
    this.supportsInspection = supportsInspection;
    return this;
  }

  /**
   * Whether this switch supports Dynamic ARP Inspection.
   * @return supportsInspection
   */
  @javax.annotation.Nullable
  public Boolean getSupportsInspection() {
    return supportsInspection;
  }

  public void setSupportsInspection(Boolean supportsInspection) {
    this.supportsInspection = supportsInspection;
  }


  public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Url link to switch.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner = (GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner) o;
    return Objects.equals(this.hasTrustedPort, getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.hasTrustedPort) &&
        Objects.equals(this.name, getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.name) &&
        Objects.equals(this.serial, getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.serial) &&
        Objects.equals(this.supportsInspection, getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.supportsInspection) &&
        Objects.equals(this.url, getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasTrustedPort, name, serial, supportsInspection, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner {\n");
    sb.append("    hasTrustedPort: ").append(toIndentedString(hasTrustedPort)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    supportsInspection: ").append(toIndentedString(supportsInspection)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasTrustedPort");
    openapiFields.add("name");
    openapiFields.add("serial");
    openapiFields.add("supportsInspection");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner is not found in the empty JSON string", GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner
   */
  public static GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

