/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkSwitchAccessControlListsRequestRulesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkSwitchAccessControlListsRequestRulesInner {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DST_CIDR = "dstCidr";
  @SerializedName(SERIALIZED_NAME_DST_CIDR)
  private String dstCidr;

  public static final String SERIALIZED_NAME_DST_PORT = "dstPort";
  @SerializedName(SERIALIZED_NAME_DST_PORT)
  private String dstPort;

  /**
   * IP address version (must be &#39;any&#39;, &#39;ipv4&#39; or &#39;ipv6&#39;). Applicable only if network supports IPv6. Default value is &#39;ipv4&#39;.
   */
  @JsonAdapter(IpVersionEnum.Adapter.class)
  public enum IpVersionEnum {
    ANY("any"),
    
    IPV4("ipv4"),
    
    IPV6("ipv6");

    private String value;

    IpVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpVersionEnum fromValue(String value) {
      for (IpVersionEnum b : IpVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IpVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IP_VERSION = "ipVersion";
  @SerializedName(SERIALIZED_NAME_IP_VERSION)
  private IpVersionEnum ipVersion;

  /**
   * &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule.
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    ALLOW("allow"),
    
    DENY("deny");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String value) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private PolicyEnum policy;

  /**
   * The type of protocol (must be &#39;tcp&#39;, &#39;udp&#39;, or &#39;any&#39;).
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    ANY("any"),
    
    TCP("tcp"),
    
    UDP("udp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_SRC_CIDR = "srcCidr";
  @SerializedName(SERIALIZED_NAME_SRC_CIDR)
  private String srcCidr;

  public static final String SERIALIZED_NAME_SRC_PORT = "srcPort";
  @SerializedName(SERIALIZED_NAME_SRC_PORT)
  private String srcPort;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private String vlan;

  public UpdateNetworkSwitchAccessControlListsRequestRulesInner() {
  }

  public UpdateNetworkSwitchAccessControlListsRequestRulesInner comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Description of the rule (optional).
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner dstCidr(String dstCidr) {
    this.dstCidr = dstCidr;
    return this;
  }

  /**
   * Destination IP address (in IP or CIDR notation) or &#39;any&#39;.
   * @return dstCidr
   */
  @javax.annotation.Nonnull
  public String getDstCidr() {
    return dstCidr;
  }

  public void setDstCidr(String dstCidr) {
    this.dstCidr = dstCidr;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner dstPort(String dstPort) {
    this.dstPort = dstPort;
    return this;
  }

  /**
   * Destination port. Must be in the range of 1-65535 or &#39;any&#39;. Default is &#39;any&#39;.
   * @return dstPort
   */
  @javax.annotation.Nullable
  public String getDstPort() {
    return dstPort;
  }

  public void setDstPort(String dstPort) {
    this.dstPort = dstPort;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner ipVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
    return this;
  }

  /**
   * IP address version (must be &#39;any&#39;, &#39;ipv4&#39; or &#39;ipv6&#39;). Applicable only if network supports IPv6. Default value is &#39;ipv4&#39;.
   * @return ipVersion
   */
  @javax.annotation.Nullable
  public IpVersionEnum getIpVersion() {
    return ipVersion;
  }

  public void setIpVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

  /**
   * &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule.
   * @return policy
   */
  @javax.annotation.Nonnull
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The type of protocol (must be &#39;tcp&#39;, &#39;udp&#39;, or &#39;any&#39;).
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner srcCidr(String srcCidr) {
    this.srcCidr = srcCidr;
    return this;
  }

  /**
   * Source IP address (in IP or CIDR notation) or &#39;any&#39;.
   * @return srcCidr
   */
  @javax.annotation.Nonnull
  public String getSrcCidr() {
    return srcCidr;
  }

  public void setSrcCidr(String srcCidr) {
    this.srcCidr = srcCidr;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner srcPort(String srcPort) {
    this.srcPort = srcPort;
    return this;
  }

  /**
   * Source port. Must be in the range  of 1-65535 or &#39;any&#39;. Default is &#39;any&#39;.
   * @return srcPort
   */
  @javax.annotation.Nullable
  public String getSrcPort() {
    return srcPort;
  }

  public void setSrcPort(String srcPort) {
    this.srcPort = srcPort;
  }


  public UpdateNetworkSwitchAccessControlListsRequestRulesInner vlan(String vlan) {
    this.vlan = vlan;
    return this;
  }

  /**
   * Incoming traffic VLAN. Must be in the range of 1-4095 or &#39;any&#39;. Default is &#39;any&#39;.
   * @return vlan
   */
  @javax.annotation.Nullable
  public String getVlan() {
    return vlan;
  }

  public void setVlan(String vlan) {
    this.vlan = vlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkSwitchAccessControlListsRequestRulesInner updateNetworkSwitchAccessControlListsRequestRulesInner = (UpdateNetworkSwitchAccessControlListsRequestRulesInner) o;
    return Objects.equals(this.comment, updateNetworkSwitchAccessControlListsRequestRulesInner.comment) &&
        Objects.equals(this.dstCidr, updateNetworkSwitchAccessControlListsRequestRulesInner.dstCidr) &&
        Objects.equals(this.dstPort, updateNetworkSwitchAccessControlListsRequestRulesInner.dstPort) &&
        Objects.equals(this.ipVersion, updateNetworkSwitchAccessControlListsRequestRulesInner.ipVersion) &&
        Objects.equals(this.policy, updateNetworkSwitchAccessControlListsRequestRulesInner.policy) &&
        Objects.equals(this.protocol, updateNetworkSwitchAccessControlListsRequestRulesInner.protocol) &&
        Objects.equals(this.srcCidr, updateNetworkSwitchAccessControlListsRequestRulesInner.srcCidr) &&
        Objects.equals(this.srcPort, updateNetworkSwitchAccessControlListsRequestRulesInner.srcPort) &&
        Objects.equals(this.vlan, updateNetworkSwitchAccessControlListsRequestRulesInner.vlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, dstCidr, dstPort, ipVersion, policy, protocol, srcCidr, srcPort, vlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkSwitchAccessControlListsRequestRulesInner {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    dstCidr: ").append(toIndentedString(dstCidr)).append("\n");
    sb.append("    dstPort: ").append(toIndentedString(dstPort)).append("\n");
    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    srcCidr: ").append(toIndentedString(srcCidr)).append("\n");
    sb.append("    srcPort: ").append(toIndentedString(srcPort)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("dstCidr");
    openapiFields.add("dstPort");
    openapiFields.add("ipVersion");
    openapiFields.add("policy");
    openapiFields.add("protocol");
    openapiFields.add("srcCidr");
    openapiFields.add("srcPort");
    openapiFields.add("vlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dstCidr");
    openapiRequiredFields.add("policy");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("srcCidr");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkSwitchAccessControlListsRequestRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkSwitchAccessControlListsRequestRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkSwitchAccessControlListsRequestRulesInner is not found in the empty JSON string", UpdateNetworkSwitchAccessControlListsRequestRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkSwitchAccessControlListsRequestRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkSwitchAccessControlListsRequestRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkSwitchAccessControlListsRequestRulesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("dstCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dstCidr").toString()));
      }
      if ((jsonObj.get("dstPort") != null && !jsonObj.get("dstPort").isJsonNull()) && !jsonObj.get("dstPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dstPort").toString()));
      }
      if ((jsonObj.get("ipVersion") != null && !jsonObj.get("ipVersion").isJsonNull()) && !jsonObj.get("ipVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipVersion").toString()));
      }
      // validate the optional field `ipVersion`
      if (jsonObj.get("ipVersion") != null && !jsonObj.get("ipVersion").isJsonNull()) {
        IpVersionEnum.validateJsonElement(jsonObj.get("ipVersion"));
      }
      if (!jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      // validate the required field `policy`
      PolicyEnum.validateJsonElement(jsonObj.get("policy"));
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if (!jsonObj.get("srcCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCidr").toString()));
      }
      if ((jsonObj.get("srcPort") != null && !jsonObj.get("srcPort").isJsonNull()) && !jsonObj.get("srcPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcPort").toString()));
      }
      if ((jsonObj.get("vlan") != null && !jsonObj.get("vlan").isJsonNull()) && !jsonObj.get("vlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vlan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkSwitchAccessControlListsRequestRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkSwitchAccessControlListsRequestRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkSwitchAccessControlListsRequestRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkSwitchAccessControlListsRequestRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkSwitchAccessControlListsRequestRulesInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkSwitchAccessControlListsRequestRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkSwitchAccessControlListsRequestRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkSwitchAccessControlListsRequestRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkSwitchAccessControlListsRequestRulesInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkSwitchAccessControlListsRequestRulesInner
   */
  public static UpdateNetworkSwitchAccessControlListsRequestRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkSwitchAccessControlListsRequestRulesInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkSwitchAccessControlListsRequestRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

