/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.GetNetworkSwitchStack200Response;
import org.openapitools.client.model.RemoveNetworkSwitchStackRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StacksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StacksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StacksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNetworkSwitchStack_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNetworkSwitchStack_1Call(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNetworkSwitchStackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/add"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNetworkSwitchStack_1ValidateBeforeCall(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling addNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling addNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'addNetworkSwitchStackRequest' is set
        if (addNetworkSwitchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'addNetworkSwitchStackRequest' when calling addNetworkSwitchStack_1(Async)");
        }

        return addNetworkSwitchStack_1Call(networkId, switchStackId, addNetworkSwitchStackRequest, _callback);

    }

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object addNetworkSwitchStack_1(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest) throws ApiException {
        ApiResponse<Object> localVarResp = addNetworkSwitchStack_1WithHttpInfo(networkId, switchStackId, addNetworkSwitchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addNetworkSwitchStack_1WithHttpInfo(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = addNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, addNetworkSwitchStackRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a switch to a stack (asynchronously)
     * Add a switch to a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNetworkSwitchStack_1Async(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, addNetworkSwitchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStackRoutingInterface_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingInterface_1Call(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchStackRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
        if (createNetworkSwitchStackRoutingInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface_1(Async)");
        }

        return createNetworkSwitchStackRoutingInterface_1Call(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, _callback);

    }

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStackRoutingInterface_1(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStackRoutingInterface_1WithHttpInfo(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStackRoutingInterface_1WithHttpInfo(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 interface for a switch stack (asynchronously)
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingInterface_1Async(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStackRoutingStaticRoute_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingStaticRoute_1Call(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
        if (createDeviceSwitchRoutingStaticRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        return createNetworkSwitchStackRoutingStaticRoute_1Call(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, _callback);

    }

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStackRoutingStaticRoute_1(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 static route for a switch stack (asynchronously)
     * Create a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingStaticRoute_1Async(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStack_1
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStack_1Call(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchStackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStack_1ValidateBeforeCall(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'createNetworkSwitchStackRequest' is set
        if (createNetworkSwitchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchStackRequest' when calling createNetworkSwitchStack_1(Async)");
        }

        return createNetworkSwitchStack_1Call(networkId, createNetworkSwitchStackRequest, _callback);

    }

    /**
     * Create a stack
     * Create a stack
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStack_1(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStack_1WithHttpInfo(networkId, createNetworkSwitchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Create a stack
     * Create a stack
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStack_1WithHttpInfo(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStack_1ValidateBeforeCall(networkId, createNetworkSwitchStackRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a stack (asynchronously)
     * Create a stack
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStack_1Async(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStack_1ValidateBeforeCall(networkId, createNetworkSwitchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStackRoutingInterface_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingInterface_1Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface_1(Async)");
        }

        return deleteNetworkSwitchStackRoutingInterface_1Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStackRoutingInterface_1(String networkId, String switchStackId, String interfaceId) throws ApiException {
        deleteNetworkSwitchStackRoutingInterface_1WithHttpInfo(networkId, switchStackId, interfaceId);
    }

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStackRoutingInterface_1WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 interface from a switch stack (asynchronously)
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingInterface_1Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStackRoutingStaticRoute_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingStaticRoute_1Call(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        return deleteNetworkSwitchStackRoutingStaticRoute_1Call(networkId, switchStackId, staticRouteId, _callback);

    }

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStackRoutingStaticRoute_1(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        deleteNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(networkId, switchStackId, staticRouteId);
    }

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, staticRouteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 static route for a switch stack (asynchronously)
     * Delete a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingStaticRoute_1Async(String networkId, String switchStackId, String staticRouteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, staticRouteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStack_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStack_1Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStack_1ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStack_1(Async)");
        }

        return deleteNetworkSwitchStack_1Call(networkId, switchStackId, _callback);

    }

    /**
     * Delete a stack
     * Delete a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStack_1(String networkId, String switchStackId) throws ApiException {
        deleteNetworkSwitchStack_1WithHttpInfo(networkId, switchStackId);
    }

    /**
     * Delete a stack
     * Delete a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStack_1WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a stack (asynchronously)
     * Delete a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStack_1Async(String networkId, String switchStackId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterfaceDhcp_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_1Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_1ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_1(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_1(Async)");
        }

        return getNetworkSwitchStackRoutingInterfaceDhcp_1Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingInterfaceDhcp_1(String networkId, String switchStackId, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingInterfaceDhcp_1WithHttpInfo(networkId, switchStackId, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingInterfaceDhcp_1WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaceDhcp_1ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack (asynchronously)
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_1Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaceDhcp_1ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterface_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterface_1Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface_1(Async)");
        }

        return getNetworkSwitchStackRoutingInterface_1Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingInterface_1(String networkId, String switchStackId, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingInterface_1WithHttpInfo(networkId, switchStackId, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingInterface_1WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface from a switch stack (asynchronously)
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterface_1Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterfaces_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaces_1Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterfaces_1ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces_1(Async)");
        }

        return getNetworkSwitchStackRoutingInterfaces_1Call(networkId, switchStackId, _callback);

    }

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStackRoutingInterfaces_1(String networkId, String switchStackId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStackRoutingInterfaces_1WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStackRoutingInterfaces_1WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaces_1ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 interfaces for a switch stack (asynchronously)
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaces_1Async(String networkId, String switchStackId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaces_1ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingStaticRoute_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoute_1Call(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        return getNetworkSwitchStackRoutingStaticRoute_1Call(networkId, switchStackId, staticRouteId, _callback);

    }

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingStaticRoute_1(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(networkId, switchStackId, staticRouteId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, staticRouteId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 static route for a switch stack (asynchronously)
     * Return a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoute_1Async(String networkId, String switchStackId, String staticRouteId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, staticRouteId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingStaticRoutes_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoutes_1Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingStaticRoutes_1ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes_1(Async)");
        }

        return getNetworkSwitchStackRoutingStaticRoutes_1Call(networkId, switchStackId, _callback);

    }

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStackRoutingStaticRoutes_1(String networkId, String switchStackId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStackRoutingStaticRoutes_1WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStackRoutingStaticRoutes_1WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoutes_1ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 static routes for a switch stack (asynchronously)
     * List layer 3 static routes for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoutes_1Async(String networkId, String switchStackId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoutes_1ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStack_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStack_1Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStack_1ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStack_1(Async)");
        }

        return getNetworkSwitchStack_1Call(networkId, switchStackId, _callback);

    }

    /**
     * Show a switch stack
     * Show a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return GetNetworkSwitchStack200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchStack200Response getNetworkSwitchStack_1(String networkId, String switchStackId) throws ApiException {
        ApiResponse<GetNetworkSwitchStack200Response> localVarResp = getNetworkSwitchStack_1WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * Show a switch stack
     * Show a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;GetNetworkSwitchStack200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchStack200Response> getNetworkSwitchStack_1WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchStack200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show a switch stack (asynchronously)
     * Show a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStack_1Async(String networkId, String switchStackId, final ApiCallback<GetNetworkSwitchStack200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchStack200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStacks_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStacks_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStacks_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStacks_1(Async)");
        }

        return getNetworkSwitchStacks_1Call(networkId, _callback);

    }

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStacks_1(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStacks_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStacks_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStacks_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switch stacks in a network (asynchronously)
     * List the switch stacks in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStacks_1Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStacks_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeNetworkSwitchStack_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkSwitchStack_1Call(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeNetworkSwitchStackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/remove"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeNetworkSwitchStack_1ValidateBeforeCall(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling removeNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling removeNetworkSwitchStack_1(Async)");
        }

        // verify the required parameter 'removeNetworkSwitchStackRequest' is set
        if (removeNetworkSwitchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'removeNetworkSwitchStackRequest' when calling removeNetworkSwitchStack_1(Async)");
        }

        return removeNetworkSwitchStack_1Call(networkId, switchStackId, removeNetworkSwitchStackRequest, _callback);

    }

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object removeNetworkSwitchStack_1(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest) throws ApiException {
        ApiResponse<Object> localVarResp = removeNetworkSwitchStack_1WithHttpInfo(networkId, switchStackId, removeNetworkSwitchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeNetworkSwitchStack_1WithHttpInfo(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = removeNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, removeNetworkSwitchStackRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a switch from a stack (asynchronously)
     * Remove a switch from a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkSwitchStack_1Async(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeNetworkSwitchStack_1ValidateBeforeCall(networkId, switchStackId, removeNetworkSwitchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingInterfaceDhcp_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_1Call(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStackRoutingInterfaceDhcpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_1ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_1(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_1(Async)");
        }

        return updateNetworkSwitchStackRoutingInterfaceDhcp_1Call(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, _callback);

    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingInterfaceDhcp_1(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingInterfaceDhcp_1WithHttpInfo(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingInterfaceDhcp_1WithHttpInfo(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterfaceDhcp_1ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack (asynchronously)
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_1Async(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterfaceDhcp_1ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingInterface_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterface_1Call(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStackRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface_1(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface_1(Async)");
        }

        return updateNetworkSwitchStackRoutingInterface_1Call(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, _callback);

    }

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingInterface_1(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingInterface_1WithHttpInfo(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingInterface_1WithHttpInfo(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface for a switch stack (asynchronously)
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterface_1Async(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterface_1ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingStaticRoute_1
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingStaticRoute_1Call(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchRoutingStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute_1(Async)");
        }

        return updateNetworkSwitchStackRoutingStaticRoute_1Call(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, _callback);

    }

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingStaticRoute_1(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingStaticRoute_1WithHttpInfo(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 static route for a switch stack (asynchronously)
     * Update a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingStaticRoute_1Async(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingStaticRoute_1ValidateBeforeCall(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
