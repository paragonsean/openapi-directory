/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSmDevices200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSmDevices200ResponseInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SSID = "ssid";
  @SerializedName(SERIALIZED_NAME_SSID)
  private String ssid;

  public static final String SERIALIZED_NAME_SYSTEM_MODEL = "systemModel";
  @SerializedName(SERIALIZED_NAME_SYSTEM_MODEL)
  private String systemModel;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_WIFI_MAC = "wifiMac";
  @SerializedName(SERIALIZED_NAME_WIFI_MAC)
  private String wifiMac;

  public GetNetworkSmDevices200ResponseInner() {
  }

  public GetNetworkSmDevices200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Meraki Id of the device record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetworkSmDevices200ResponseInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address of the device.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public GetNetworkSmDevices200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the device.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetworkSmDevices200ResponseInner notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Notes associated with the device.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public GetNetworkSmDevices200ResponseInner osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * The name of the device OS.
   * @return osName
   */
  @javax.annotation.Nullable
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public GetNetworkSmDevices200ResponseInner serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * The device serial.
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public GetNetworkSmDevices200ResponseInner serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The device serial number.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public GetNetworkSmDevices200ResponseInner ssid(String ssid) {
    this.ssid = ssid;
    return this;
  }

  /**
   * The name of the SSID the device was last connected to.
   * @return ssid
   */
  @javax.annotation.Nullable
  public String getSsid() {
    return ssid;
  }

  public void setSsid(String ssid) {
    this.ssid = ssid;
  }


  public GetNetworkSmDevices200ResponseInner systemModel(String systemModel) {
    this.systemModel = systemModel;
    return this;
  }

  /**
   * The device model.
   * @return systemModel
   */
  @javax.annotation.Nullable
  public String getSystemModel() {
    return systemModel;
  }

  public void setSystemModel(String systemModel) {
    this.systemModel = systemModel;
  }


  public GetNetworkSmDevices200ResponseInner tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GetNetworkSmDevices200ResponseInner addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * An array of tags associated with the device.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public GetNetworkSmDevices200ResponseInner uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The UUID of the device.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public GetNetworkSmDevices200ResponseInner wifiMac(String wifiMac) {
    this.wifiMac = wifiMac;
    return this;
  }

  /**
   * The MAC of the device.
   * @return wifiMac
   */
  @javax.annotation.Nullable
  public String getWifiMac() {
    return wifiMac;
  }

  public void setWifiMac(String wifiMac) {
    this.wifiMac = wifiMac;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSmDevices200ResponseInner getNetworkSmDevices200ResponseInner = (GetNetworkSmDevices200ResponseInner) o;
    return Objects.equals(this.id, getNetworkSmDevices200ResponseInner.id) &&
        Objects.equals(this.ip, getNetworkSmDevices200ResponseInner.ip) &&
        Objects.equals(this.name, getNetworkSmDevices200ResponseInner.name) &&
        Objects.equals(this.notes, getNetworkSmDevices200ResponseInner.notes) &&
        Objects.equals(this.osName, getNetworkSmDevices200ResponseInner.osName) &&
        Objects.equals(this.serial, getNetworkSmDevices200ResponseInner.serial) &&
        Objects.equals(this.serialNumber, getNetworkSmDevices200ResponseInner.serialNumber) &&
        Objects.equals(this.ssid, getNetworkSmDevices200ResponseInner.ssid) &&
        Objects.equals(this.systemModel, getNetworkSmDevices200ResponseInner.systemModel) &&
        Objects.equals(this.tags, getNetworkSmDevices200ResponseInner.tags) &&
        Objects.equals(this.uuid, getNetworkSmDevices200ResponseInner.uuid) &&
        Objects.equals(this.wifiMac, getNetworkSmDevices200ResponseInner.wifiMac);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ip, name, notes, osName, serial, serialNumber, ssid, systemModel, tags, uuid, wifiMac);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSmDevices200ResponseInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    ssid: ").append(toIndentedString(ssid)).append("\n");
    sb.append("    systemModel: ").append(toIndentedString(systemModel)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    wifiMac: ").append(toIndentedString(wifiMac)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ip");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("osName");
    openapiFields.add("serial");
    openapiFields.add("serialNumber");
    openapiFields.add("ssid");
    openapiFields.add("systemModel");
    openapiFields.add("tags");
    openapiFields.add("uuid");
    openapiFields.add("wifiMac");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSmDevices200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSmDevices200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSmDevices200ResponseInner is not found in the empty JSON string", GetNetworkSmDevices200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSmDevices200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSmDevices200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("osName") != null && !jsonObj.get("osName").isJsonNull()) && !jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("ssid") != null && !jsonObj.get("ssid").isJsonNull()) && !jsonObj.get("ssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssid").toString()));
      }
      if ((jsonObj.get("systemModel") != null && !jsonObj.get("systemModel").isJsonNull()) && !jsonObj.get("systemModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemModel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("wifiMac") != null && !jsonObj.get("wifiMac").isJsonNull()) && !jsonObj.get("wifiMac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiMac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiMac").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSmDevices200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSmDevices200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSmDevices200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSmDevices200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSmDevices200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSmDevices200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSmDevices200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSmDevices200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSmDevices200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSmDevices200ResponseInner
   */
  public static GetNetworkSmDevices200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSmDevices200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSmDevices200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

