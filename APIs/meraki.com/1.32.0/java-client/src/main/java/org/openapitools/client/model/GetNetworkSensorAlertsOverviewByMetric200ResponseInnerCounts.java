/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Counts of sensor alerts over the timespan, by reading metric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts {
  public static final String SERIALIZED_NAME_DOOR = "door";
  @SerializedName(SERIALIZED_NAME_DOOR)
  private Integer door;

  public static final String SERIALIZED_NAME_HUMIDITY = "humidity";
  @SerializedName(SERIALIZED_NAME_HUMIDITY)
  private Integer humidity;

  public static final String SERIALIZED_NAME_INDOOR_AIR_QUALITY = "indoorAirQuality";
  @SerializedName(SERIALIZED_NAME_INDOOR_AIR_QUALITY)
  private Integer indoorAirQuality;

  public static final String SERIALIZED_NAME_NOISE = "noise";
  @SerializedName(SERIALIZED_NAME_NOISE)
  private GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise noise;

  public static final String SERIALIZED_NAME_PM25 = "pm25";
  @SerializedName(SERIALIZED_NAME_PM25)
  private Integer pm25;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Integer temperature;

  public static final String SERIALIZED_NAME_TVOC = "tvoc";
  @SerializedName(SERIALIZED_NAME_TVOC)
  private Integer tvoc;

  public static final String SERIALIZED_NAME_WATER = "water";
  @SerializedName(SERIALIZED_NAME_WATER)
  private Integer water;

  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts() {
  }

  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts door(Integer door) {
    this.door = door;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to an open door
   * @return door
   */
  @javax.annotation.Nullable
  public Integer getDoor() {
    return door;
  }

  public void setDoor(Integer door) {
    this.door = door;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts humidity(Integer humidity) {
    this.humidity = humidity;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to humidity readings
   * @return humidity
   */
  @javax.annotation.Nullable
  public Integer getHumidity() {
    return humidity;
  }

  public void setHumidity(Integer humidity) {
    this.humidity = humidity;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts indoorAirQuality(Integer indoorAirQuality) {
    this.indoorAirQuality = indoorAirQuality;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to indoor air quality readings
   * @return indoorAirQuality
   */
  @javax.annotation.Nullable
  public Integer getIndoorAirQuality() {
    return indoorAirQuality;
  }

  public void setIndoorAirQuality(Integer indoorAirQuality) {
    this.indoorAirQuality = indoorAirQuality;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts noise(GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise noise) {
    this.noise = noise;
    return this;
  }

  /**
   * Get noise
   * @return noise
   */
  @javax.annotation.Nullable
  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise getNoise() {
    return noise;
  }

  public void setNoise(GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise noise) {
    this.noise = noise;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts pm25(Integer pm25) {
    this.pm25 = pm25;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to PM2.5 readings
   * @return pm25
   */
  @javax.annotation.Nullable
  public Integer getPm25() {
    return pm25;
  }

  public void setPm25(Integer pm25) {
    this.pm25 = pm25;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts temperature(Integer temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to temperature readings
   * @return temperature
   */
  @javax.annotation.Nullable
  public Integer getTemperature() {
    return temperature;
  }

  public void setTemperature(Integer temperature) {
    this.temperature = temperature;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts tvoc(Integer tvoc) {
    this.tvoc = tvoc;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to TVOC readings
   * @return tvoc
   */
  @javax.annotation.Nullable
  public Integer getTvoc() {
    return tvoc;
  }

  public void setTvoc(Integer tvoc) {
    this.tvoc = tvoc;
  }


  public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts water(Integer water) {
    this.water = water;
    return this;
  }

  /**
   * Number of sensor alerts that occurred due to the presence of water
   * @return water
   */
  @javax.annotation.Nullable
  public Integer getWater() {
    return water;
  }

  public void setWater(Integer water) {
    this.water = water;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts = (GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts) o;
    return Objects.equals(this.door, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.door) &&
        Objects.equals(this.humidity, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.humidity) &&
        Objects.equals(this.indoorAirQuality, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.indoorAirQuality) &&
        Objects.equals(this.noise, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.noise) &&
        Objects.equals(this.pm25, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.pm25) &&
        Objects.equals(this.temperature, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.temperature) &&
        Objects.equals(this.tvoc, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.tvoc) &&
        Objects.equals(this.water, getNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.water);
  }

  @Override
  public int hashCode() {
    return Objects.hash(door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, water);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts {\n");
    sb.append("    door: ").append(toIndentedString(door)).append("\n");
    sb.append("    humidity: ").append(toIndentedString(humidity)).append("\n");
    sb.append("    indoorAirQuality: ").append(toIndentedString(indoorAirQuality)).append("\n");
    sb.append("    noise: ").append(toIndentedString(noise)).append("\n");
    sb.append("    pm25: ").append(toIndentedString(pm25)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    tvoc: ").append(toIndentedString(tvoc)).append("\n");
    sb.append("    water: ").append(toIndentedString(water)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("door");
    openapiFields.add("humidity");
    openapiFields.add("indoorAirQuality");
    openapiFields.add("noise");
    openapiFields.add("pm25");
    openapiFields.add("temperature");
    openapiFields.add("tvoc");
    openapiFields.add("water");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts is not found in the empty JSON string", GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `noise`
      if (jsonObj.get("noise") != null && !jsonObj.get("noise").isJsonNull()) {
        GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise.validateJsonElement(jsonObj.get("noise"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts>() {
           @Override
           public void write(JsonWriter out, GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts
   */
  public static GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.class);
  }

  /**
   * Convert an instance of GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

