/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedEventRequest;
import org.openapitools.client.model.GetNetworkEvents200Response;
import org.openapitools.client.model.GetNetworkEventsEventTypes200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedEvents200Response;
import org.openapitools.client.model.RollbacksNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedEventsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkFirmwareUpgradesStagedEvent_3
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_3Call(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedEventRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_3ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent_3(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
        if (createNetworkFirmwareUpgradesStagedEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent_3(Async)");
        }

        return createNetworkFirmwareUpgradesStagedEvent_3Call(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response createNetworkFirmwareUpgradesStagedEvent_3(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = createNetworkFirmwareUpgradesStagedEvent_3WithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedEventRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> createNetworkFirmwareUpgradesStagedEvent_3WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEvent_3ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Event for a network (asynchronously)
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_3Async(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEvent_3ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deferNetworkFirmwareUpgradesStagedEvents_3
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_3Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/defer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents_3(Async)");
        }

        return deferNetworkFirmwareUpgradesStagedEvents_3Call(networkId, _callback);

    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response deferNetworkFirmwareUpgradesStagedEvents_3(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = deferNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> deferNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network (asynchronously)
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_3Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceClientSecurityEvents_3
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceClientSecurityEvents_3Call(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/clients/{clientId}/security/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceClientSecurityEvents_3ValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceClientSecurityEvents_3(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkApplianceClientSecurityEvents_3(Async)");
        }

        return getNetworkApplianceClientSecurityEvents_3Call(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);

    }

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceClientSecurityEvents_3(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceClientSecurityEvents_3WithHttpInfo(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceClientSecurityEvents_3WithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceClientSecurityEvents_3ValidateBeforeCall(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the security events for a client (asynchronously)
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 791 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceClientSecurityEvents_3Async(String networkId, String clientId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceClientSecurityEvents_3ValidateBeforeCall(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSecurityEvents_2
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSecurityEvents_2Call(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/security/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSecurityEvents_2ValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityEvents_2(Async)");
        }

        return getNetworkApplianceSecurityEvents_2Call(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);

    }

    /**
     * List the security events for a network
     * List the security events for a network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceSecurityEvents_2(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceSecurityEvents_2WithHttpInfo(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List the security events for a network
     * List the security events for a network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceSecurityEvents_2WithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSecurityEvents_2ValidateBeforeCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the security events for a network (asynchronously)
     * List the security events for a network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSecurityEvents_2Async(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSecurityEvents_2ValidateBeforeCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkEventsEventTypes_1
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsEventTypes_1Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/events/eventTypes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkEventsEventTypes_1ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkEventsEventTypes_1(Async)");
        }

        return getNetworkEventsEventTypes_1Call(networkId, _callback);

    }

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param networkId  (required)
     * @return List&lt;GetNetworkEventsEventTypes200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkEventsEventTypes200ResponseInner> getNetworkEventsEventTypes_1(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkEventsEventTypes200ResponseInner>> localVarResp = getNetworkEventsEventTypes_1WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkEventsEventTypes200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkEventsEventTypes200ResponseInner>> getNetworkEventsEventTypes_1WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkEventsEventTypes_1ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkEventsEventTypes200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the event type to human-readable description (asynchronously)
     * List the event type to human-readable description
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsEventTypes_1Async(String networkId, final ApiCallback<List<GetNetworkEventsEventTypes200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkEventsEventTypes_1ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkEventsEventTypes200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkEvents_1
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEvents_1Call(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (includedEventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includedEventTypes", includedEventTypes));
        }

        if (excludedEventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "excludedEventTypes", excludedEventTypes));
        }

        if (deviceMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceMac", deviceMac));
        }

        if (deviceSerial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceSerial", deviceSerial));
        }

        if (deviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceName", deviceName));
        }

        if (clientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientIp", clientIp));
        }

        if (clientMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientMac", clientMac));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientName", clientName));
        }

        if (smDeviceMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smDeviceMac", smDeviceMac));
        }

        if (smDeviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smDeviceName", smDeviceName));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkEvents_1ValidateBeforeCall(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkEvents_1(Async)");
        }

        return getNetworkEvents_1Call(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List the events for the network
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return GetNetworkEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public GetNetworkEvents200Response getNetworkEvents_1(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<GetNetworkEvents200Response> localVarResp = getNetworkEvents_1WithHttpInfo(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List the events for the network
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;GetNetworkEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkEvents200Response> getNetworkEvents_1WithHttpInfo(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkEvents_1ValidateBeforeCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<GetNetworkEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the events for the network (asynchronously)
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEvents_1Async(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<GetNetworkEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkEvents_1ValidateBeforeCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedEvents_3
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_3Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents_3(Async)");
        }

        return getNetworkFirmwareUpgradesStagedEvents_3Call(networkId, _callback);

    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response getNetworkFirmwareUpgradesStagedEvents_3(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = getNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> getNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Staged Upgrade Event from a network (asynchronously)
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_3Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationApplianceSecurityEvents_2
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceSecurityEvents_2Call(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/security/events"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApplianceSecurityEvents_2ValidateBeforeCall(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApplianceSecurityEvents_2(Async)");
        }

        return getOrganizationApplianceSecurityEvents_2Call(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);

    }

    /**
     * List the security events for an organization
     * List the security events for an organization
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getOrganizationApplianceSecurityEvents_2(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationApplianceSecurityEvents_2WithHttpInfo(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List the security events for an organization
     * List the security events for an organization
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationApplianceSecurityEvents_2WithHttpInfo(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApplianceSecurityEvents_2ValidateBeforeCall(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the security events for an organization (asynchronously)
     * List the security events for an organization
     * @param organizationId  (required)
     * @param t0 The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param sortOrder Sorted order of security events based on event detection time. Order options are &#39;ascending&#39; or &#39;descending&#39;. Default is ascending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceSecurityEvents_2Async(String organizationId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, String sortOrder, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApplianceSecurityEvents_2ValidateBeforeCall(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbacksNetworkFirmwareUpgradesStagedEvents_3
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_3Call(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_3(Async)");
        }

        // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_3(Async)");
        }

        return rollbacksNetworkFirmwareUpgradesStagedEvents_3Call(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response rollbacksNetworkFirmwareUpgradesStagedEvents_3(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = rollbacksNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> rollbacksNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Staged Upgrade Event for a network (asynchronously)
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_3Async(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedEvents_3
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_3Call(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents_3(Async)");
        }

        // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (updateNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents_3(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedEvents_3Call(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response updateNetworkFirmwareUpgradesStagedEvents_3(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = updateNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> updateNetworkFirmwareUpgradesStagedEvents_3WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Staged Upgrade Event for a network (asynchronously)
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_3Async(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEvents_3ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
