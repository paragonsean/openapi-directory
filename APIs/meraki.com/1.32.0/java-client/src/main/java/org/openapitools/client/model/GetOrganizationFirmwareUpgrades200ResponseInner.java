/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInnerFromVersion;
import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInnerNetwork;
import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInnerToVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrganizationFirmwareUpgrades200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationFirmwareUpgrades200ResponseInner {
  public static final String SERIALIZED_NAME_COMPLETED_AT = "completedAt";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private String completedAt;

  public static final String SERIALIZED_NAME_FROM_VERSION = "fromVersion";
  @SerializedName(SERIALIZED_NAME_FROM_VERSION)
  private GetOrganizationFirmwareUpgrades200ResponseInnerFromVersion fromVersion;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private GetOrganizationFirmwareUpgrades200ResponseInnerNetwork network;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_TO_VERSION = "toVersion";
  @SerializedName(SERIALIZED_NAME_TO_VERSION)
  private GetOrganizationFirmwareUpgrades200ResponseInnerToVersion toVersion;

  public static final String SERIALIZED_NAME_UPGRADE_BATCH_ID = "upgradeBatchId";
  @SerializedName(SERIALIZED_NAME_UPGRADE_BATCH_ID)
  private String upgradeBatchId;

  public static final String SERIALIZED_NAME_UPGRADE_ID = "upgradeId";
  @SerializedName(SERIALIZED_NAME_UPGRADE_ID)
  private String upgradeId;

  public GetOrganizationFirmwareUpgrades200ResponseInner() {
  }

  public GetOrganizationFirmwareUpgrades200ResponseInner completedAt(String completedAt) {
    this.completedAt = completedAt;
    return this;
  }

  /**
   * Timestamp when upgrade completed. Null if status pending.
   * @return completedAt
   */
  @javax.annotation.Nullable
  public String getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(String completedAt) {
    this.completedAt = completedAt;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner fromVersion(GetOrganizationFirmwareUpgrades200ResponseInnerFromVersion fromVersion) {
    this.fromVersion = fromVersion;
    return this;
  }

  /**
   * Get fromVersion
   * @return fromVersion
   */
  @javax.annotation.Nullable
  public GetOrganizationFirmwareUpgrades200ResponseInnerFromVersion getFromVersion() {
    return fromVersion;
  }

  public void setFromVersion(GetOrganizationFirmwareUpgrades200ResponseInnerFromVersion fromVersion) {
    this.fromVersion = fromVersion;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner network(GetOrganizationFirmwareUpgrades200ResponseInnerNetwork network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public GetOrganizationFirmwareUpgrades200ResponseInnerNetwork getNetwork() {
    return network;
  }

  public void setNetwork(GetOrganizationFirmwareUpgrades200ResponseInnerNetwork network) {
    this.network = network;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * product upgraded [wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor]
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of upgrade event: [Cancelled, Completed]
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Scheduled start time
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner toVersion(GetOrganizationFirmwareUpgrades200ResponseInnerToVersion toVersion) {
    this.toVersion = toVersion;
    return this;
  }

  /**
   * Get toVersion
   * @return toVersion
   */
  @javax.annotation.Nullable
  public GetOrganizationFirmwareUpgrades200ResponseInnerToVersion getToVersion() {
    return toVersion;
  }

  public void setToVersion(GetOrganizationFirmwareUpgrades200ResponseInnerToVersion toVersion) {
    this.toVersion = toVersion;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner upgradeBatchId(String upgradeBatchId) {
    this.upgradeBatchId = upgradeBatchId;
    return this;
  }

  /**
   * The upgrade batch
   * @return upgradeBatchId
   */
  @javax.annotation.Nullable
  public String getUpgradeBatchId() {
    return upgradeBatchId;
  }

  public void setUpgradeBatchId(String upgradeBatchId) {
    this.upgradeBatchId = upgradeBatchId;
  }


  public GetOrganizationFirmwareUpgrades200ResponseInner upgradeId(String upgradeId) {
    this.upgradeId = upgradeId;
    return this;
  }

  /**
   * The upgrade
   * @return upgradeId
   */
  @javax.annotation.Nullable
  public String getUpgradeId() {
    return upgradeId;
  }

  public void setUpgradeId(String upgradeId) {
    this.upgradeId = upgradeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationFirmwareUpgrades200ResponseInner getOrganizationFirmwareUpgrades200ResponseInner = (GetOrganizationFirmwareUpgrades200ResponseInner) o;
    return Objects.equals(this.completedAt, getOrganizationFirmwareUpgrades200ResponseInner.completedAt) &&
        Objects.equals(this.fromVersion, getOrganizationFirmwareUpgrades200ResponseInner.fromVersion) &&
        Objects.equals(this.network, getOrganizationFirmwareUpgrades200ResponseInner.network) &&
        Objects.equals(this.productType, getOrganizationFirmwareUpgrades200ResponseInner.productType) &&
        Objects.equals(this.status, getOrganizationFirmwareUpgrades200ResponseInner.status) &&
        Objects.equals(this.time, getOrganizationFirmwareUpgrades200ResponseInner.time) &&
        Objects.equals(this.toVersion, getOrganizationFirmwareUpgrades200ResponseInner.toVersion) &&
        Objects.equals(this.upgradeBatchId, getOrganizationFirmwareUpgrades200ResponseInner.upgradeBatchId) &&
        Objects.equals(this.upgradeId, getOrganizationFirmwareUpgrades200ResponseInner.upgradeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedAt, fromVersion, network, productType, status, time, toVersion, upgradeBatchId, upgradeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationFirmwareUpgrades200ResponseInner {\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    fromVersion: ").append(toIndentedString(fromVersion)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    toVersion: ").append(toIndentedString(toVersion)).append("\n");
    sb.append("    upgradeBatchId: ").append(toIndentedString(upgradeBatchId)).append("\n");
    sb.append("    upgradeId: ").append(toIndentedString(upgradeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedAt");
    openapiFields.add("fromVersion");
    openapiFields.add("network");
    openapiFields.add("productType");
    openapiFields.add("status");
    openapiFields.add("time");
    openapiFields.add("toVersion");
    openapiFields.add("upgradeBatchId");
    openapiFields.add("upgradeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationFirmwareUpgrades200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationFirmwareUpgrades200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationFirmwareUpgrades200ResponseInner is not found in the empty JSON string", GetOrganizationFirmwareUpgrades200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationFirmwareUpgrades200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationFirmwareUpgrades200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completedAt") != null && !jsonObj.get("completedAt").isJsonNull()) && !jsonObj.get("completedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedAt").toString()));
      }
      // validate the optional field `fromVersion`
      if (jsonObj.get("fromVersion") != null && !jsonObj.get("fromVersion").isJsonNull()) {
        GetOrganizationFirmwareUpgrades200ResponseInnerFromVersion.validateJsonElement(jsonObj.get("fromVersion"));
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        GetOrganizationFirmwareUpgrades200ResponseInnerNetwork.validateJsonElement(jsonObj.get("network"));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `toVersion`
      if (jsonObj.get("toVersion") != null && !jsonObj.get("toVersion").isJsonNull()) {
        GetOrganizationFirmwareUpgrades200ResponseInnerToVersion.validateJsonElement(jsonObj.get("toVersion"));
      }
      if ((jsonObj.get("upgradeBatchId") != null && !jsonObj.get("upgradeBatchId").isJsonNull()) && !jsonObj.get("upgradeBatchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeBatchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeBatchId").toString()));
      }
      if ((jsonObj.get("upgradeId") != null && !jsonObj.get("upgradeId").isJsonNull()) && !jsonObj.get("upgradeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationFirmwareUpgrades200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationFirmwareUpgrades200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationFirmwareUpgrades200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationFirmwareUpgrades200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationFirmwareUpgrades200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetOrganizationFirmwareUpgrades200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationFirmwareUpgrades200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationFirmwareUpgrades200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationFirmwareUpgrades200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationFirmwareUpgrades200ResponseInner
   */
  public static GetOrganizationFirmwareUpgrades200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationFirmwareUpgrades200ResponseInner.class);
  }

  /**
   * Convert an instance of GetOrganizationFirmwareUpgrades200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

