/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestActiveDirectory;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestDnsRewrite;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestDot11r;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestDot11w;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestGre;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestLdap;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestLocalRadius;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestOauth;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestRadiusServersInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequestSpeedBurst;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessSsidRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidRequest {
  public static final String SERIALIZED_NAME_ACTIVE_DIRECTORY = "activeDirectory";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DIRECTORY)
  private UpdateNetworkWirelessSsidRequestActiveDirectory activeDirectory;

  public static final String SERIALIZED_NAME_ADULT_CONTENT_FILTERING_ENABLED = "adultContentFilteringEnabled";
  @SerializedName(SERIALIZED_NAME_ADULT_CONTENT_FILTERING_ENABLED)
  private Boolean adultContentFilteringEnabled;

  public static final String SERIALIZED_NAME_AP_TAGS_AND_VLAN_IDS = "apTagsAndVlanIds";
  @SerializedName(SERIALIZED_NAME_AP_TAGS_AND_VLAN_IDS)
  private List<UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner> apTagsAndVlanIds = new ArrayList<>();

  /**
   * The association control method for the SSID (&#39;open&#39;, &#39;open-enhanced&#39;, &#39;psk&#39;, &#39;open-with-radius&#39;, &#39;open-with-nac&#39;, &#39;8021x-meraki&#39;, &#39;8021x-nac&#39;, &#39;8021x-radius&#39;, &#39;8021x-google&#39;, &#39;8021x-localradius&#39;, &#39;ipsk-with-radius&#39; or &#39;ipsk-without-radius&#39;)
   */
  @JsonAdapter(AuthModeEnum.Adapter.class)
  public enum AuthModeEnum {
    _8021X_GOOGLE("8021x-google"),
    
    _8021X_LOCALRADIUS("8021x-localradius"),
    
    _8021X_MERAKI("8021x-meraki"),
    
    _8021X_NAC("8021x-nac"),
    
    _8021X_RADIUS("8021x-radius"),
    
    IPSK_WITH_RADIUS("ipsk-with-radius"),
    
    IPSK_WITHOUT_RADIUS("ipsk-without-radius"),
    
    OPEN("open"),
    
    OPEN_ENHANCED("open-enhanced"),
    
    OPEN_WITH_NAC("open-with-nac"),
    
    OPEN_WITH_RADIUS("open-with-radius"),
    
    PSK("psk");

    private String value;

    AuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthModeEnum fromValue(String value) {
      for (AuthModeEnum b : AuthModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_MODE = "authMode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  private AuthModeEnum authMode;

  public static final String SERIALIZED_NAME_AVAILABILITY_TAGS = "availabilityTags";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_TAGS)
  private List<String> availabilityTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_ON_ALL_APS = "availableOnAllAps";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ON_ALL_APS)
  private Boolean availableOnAllAps;

  public static final String SERIALIZED_NAME_BAND_SELECTION = "bandSelection";
  @SerializedName(SERIALIZED_NAME_BAND_SELECTION)
  private String bandSelection;

  public static final String SERIALIZED_NAME_CONCENTRATOR_NETWORK_ID = "concentratorNetworkId";
  @SerializedName(SERIALIZED_NAME_CONCENTRATOR_NETWORK_ID)
  private String concentratorNetworkId;

  public static final String SERIALIZED_NAME_DEFAULT_VLAN_ID = "defaultVlanId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VLAN_ID)
  private Integer defaultVlanId;

  public static final String SERIALIZED_NAME_DISASSOCIATE_CLIENTS_ON_VPN_FAILOVER = "disassociateClientsOnVpnFailover";
  @SerializedName(SERIALIZED_NAME_DISASSOCIATE_CLIENTS_ON_VPN_FAILOVER)
  private Boolean disassociateClientsOnVpnFailover;

  public static final String SERIALIZED_NAME_DNS_REWRITE = "dnsRewrite";
  @SerializedName(SERIALIZED_NAME_DNS_REWRITE)
  private UpdateNetworkWirelessSsidRequestDnsRewrite dnsRewrite;

  public static final String SERIALIZED_NAME_DOT11R = "dot11r";
  @SerializedName(SERIALIZED_NAME_DOT11R)
  private UpdateNetworkWirelessSsidRequestDot11r dot11r;

  public static final String SERIALIZED_NAME_DOT11W = "dot11w";
  @SerializedName(SERIALIZED_NAME_DOT11W)
  private UpdateNetworkWirelessSsidRequestDot11w dot11w;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * The psk encryption mode for the SSID (&#39;wep&#39; or &#39;wpa&#39;). This param is only valid if the authMode is &#39;psk&#39;
   */
  @JsonAdapter(EncryptionModeEnum.Adapter.class)
  public enum EncryptionModeEnum {
    WEP("wep"),
    
    WPA("wpa");

    private String value;

    EncryptionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionModeEnum fromValue(String value) {
      for (EncryptionModeEnum b : EncryptionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_MODE = "encryptionMode";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_MODE)
  private EncryptionModeEnum encryptionMode;

  /**
   * Whether or not an SSID is accessible by &#39;enterprise&#39; administrators (&#39;access disabled&#39; or &#39;access enabled&#39;)
   */
  @JsonAdapter(EnterpriseAdminAccessEnum.Adapter.class)
  public enum EnterpriseAdminAccessEnum {
    DISABLED("access disabled"),
    
    ENABLED("access enabled");

    private String value;

    EnterpriseAdminAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnterpriseAdminAccessEnum fromValue(String value) {
      for (EnterpriseAdminAccessEnum b : EnterpriseAdminAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnterpriseAdminAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnterpriseAdminAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnterpriseAdminAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnterpriseAdminAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnterpriseAdminAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTERPRISE_ADMIN_ACCESS = "enterpriseAdminAccess";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_ADMIN_ACCESS)
  private EnterpriseAdminAccessEnum enterpriseAdminAccess;

  public static final String SERIALIZED_NAME_GRE = "gre";
  @SerializedName(SERIALIZED_NAME_GRE)
  private UpdateNetworkWirelessSsidRequestGre gre;

  public static final String SERIALIZED_NAME_IP_ASSIGNMENT_MODE = "ipAssignmentMode";
  @SerializedName(SERIALIZED_NAME_IP_ASSIGNMENT_MODE)
  private String ipAssignmentMode;

  public static final String SERIALIZED_NAME_LAN_ISOLATION_ENABLED = "lanIsolationEnabled";
  @SerializedName(SERIALIZED_NAME_LAN_ISOLATION_ENABLED)
  private Boolean lanIsolationEnabled;

  public static final String SERIALIZED_NAME_LDAP = "ldap";
  @SerializedName(SERIALIZED_NAME_LDAP)
  private UpdateNetworkWirelessSsidRequestLdap ldap;

  public static final String SERIALIZED_NAME_LOCAL_RADIUS = "localRadius";
  @SerializedName(SERIALIZED_NAME_LOCAL_RADIUS)
  private UpdateNetworkWirelessSsidRequestLocalRadius localRadius;

  public static final String SERIALIZED_NAME_MANDATORY_DHCP_ENABLED = "mandatoryDhcpEnabled";
  @SerializedName(SERIALIZED_NAME_MANDATORY_DHCP_ENABLED)
  private Boolean mandatoryDhcpEnabled;

  public static final String SERIALIZED_NAME_MIN_BITRATE = "minBitrate";
  @SerializedName(SERIALIZED_NAME_MIN_BITRATE)
  private Float minBitrate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OAUTH = "oauth";
  @SerializedName(SERIALIZED_NAME_OAUTH)
  private UpdateNetworkWirelessSsidRequestOauth oauth;

  public static final String SERIALIZED_NAME_PER_CLIENT_BANDWIDTH_LIMIT_DOWN = "perClientBandwidthLimitDown";
  @SerializedName(SERIALIZED_NAME_PER_CLIENT_BANDWIDTH_LIMIT_DOWN)
  private Integer perClientBandwidthLimitDown;

  public static final String SERIALIZED_NAME_PER_CLIENT_BANDWIDTH_LIMIT_UP = "perClientBandwidthLimitUp";
  @SerializedName(SERIALIZED_NAME_PER_CLIENT_BANDWIDTH_LIMIT_UP)
  private Integer perClientBandwidthLimitUp;

  public static final String SERIALIZED_NAME_PER_SSID_BANDWIDTH_LIMIT_DOWN = "perSsidBandwidthLimitDown";
  @SerializedName(SERIALIZED_NAME_PER_SSID_BANDWIDTH_LIMIT_DOWN)
  private Integer perSsidBandwidthLimitDown;

  public static final String SERIALIZED_NAME_PER_SSID_BANDWIDTH_LIMIT_UP = "perSsidBandwidthLimitUp";
  @SerializedName(SERIALIZED_NAME_PER_SSID_BANDWIDTH_LIMIT_UP)
  private Integer perSsidBandwidthLimitUp;

  public static final String SERIALIZED_NAME_PSK = "psk";
  @SerializedName(SERIALIZED_NAME_PSK)
  private String psk;

  public static final String SERIALIZED_NAME_RADIUS_ACCOUNTING_ENABLED = "radiusAccountingEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_ACCOUNTING_ENABLED)
  private Boolean radiusAccountingEnabled;

  public static final String SERIALIZED_NAME_RADIUS_ACCOUNTING_INTERIM_INTERVAL = "radiusAccountingInterimInterval";
  @SerializedName(SERIALIZED_NAME_RADIUS_ACCOUNTING_INTERIM_INTERVAL)
  private Integer radiusAccountingInterimInterval;

  public static final String SERIALIZED_NAME_RADIUS_ACCOUNTING_SERVERS = "radiusAccountingServers";
  @SerializedName(SERIALIZED_NAME_RADIUS_ACCOUNTING_SERVERS)
  private List<UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner> radiusAccountingServers = new ArrayList<>();

  /**
   * Specify the RADIUS attribute used to look up group policies (&#39;Filter-Id&#39;, &#39;Reply-Message&#39;, &#39;Airespace-ACL-Name&#39; or &#39;Aruba-User-Role&#39;). Access points must receive this attribute in the RADIUS Access-Accept message
   */
  @JsonAdapter(RadiusAttributeForGroupPoliciesEnum.Adapter.class)
  public enum RadiusAttributeForGroupPoliciesEnum {
    AIRESPACE_ACL_NAME("Airespace-ACL-Name"),
    
    ARUBA_USER_ROLE("Aruba-User-Role"),
    
    FILTER_ID("Filter-Id"),
    
    REPLY_MESSAGE("Reply-Message");

    private String value;

    RadiusAttributeForGroupPoliciesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RadiusAttributeForGroupPoliciesEnum fromValue(String value) {
      for (RadiusAttributeForGroupPoliciesEnum b : RadiusAttributeForGroupPoliciesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RadiusAttributeForGroupPoliciesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RadiusAttributeForGroupPoliciesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RadiusAttributeForGroupPoliciesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RadiusAttributeForGroupPoliciesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RadiusAttributeForGroupPoliciesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RADIUS_ATTRIBUTE_FOR_GROUP_POLICIES = "radiusAttributeForGroupPolicies";
  @SerializedName(SERIALIZED_NAME_RADIUS_ATTRIBUTE_FOR_GROUP_POLICIES)
  private RadiusAttributeForGroupPoliciesEnum radiusAttributeForGroupPolicies;

  public static final String SERIALIZED_NAME_RADIUS_AUTHENTICATION_NAS_ID = "radiusAuthenticationNasId";
  @SerializedName(SERIALIZED_NAME_RADIUS_AUTHENTICATION_NAS_ID)
  private String radiusAuthenticationNasId;

  public static final String SERIALIZED_NAME_RADIUS_CALLED_STATION_ID = "radiusCalledStationId";
  @SerializedName(SERIALIZED_NAME_RADIUS_CALLED_STATION_ID)
  private String radiusCalledStationId;

  public static final String SERIALIZED_NAME_RADIUS_COA_ENABLED = "radiusCoaEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_COA_ENABLED)
  private Boolean radiusCoaEnabled;

  /**
   * This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable (&#39;Deny access&#39; or &#39;Allow access&#39;)
   */
  @JsonAdapter(RadiusFailoverPolicyEnum.Adapter.class)
  public enum RadiusFailoverPolicyEnum {
    ALLOW_ACCESS("Allow access"),
    
    DENY_ACCESS("Deny access");

    private String value;

    RadiusFailoverPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RadiusFailoverPolicyEnum fromValue(String value) {
      for (RadiusFailoverPolicyEnum b : RadiusFailoverPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RadiusFailoverPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RadiusFailoverPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RadiusFailoverPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RadiusFailoverPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RadiusFailoverPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RADIUS_FAILOVER_POLICY = "radiusFailoverPolicy";
  @SerializedName(SERIALIZED_NAME_RADIUS_FAILOVER_POLICY)
  private RadiusFailoverPolicyEnum radiusFailoverPolicy;

  public static final String SERIALIZED_NAME_RADIUS_FALLBACK_ENABLED = "radiusFallbackEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_FALLBACK_ENABLED)
  private Boolean radiusFallbackEnabled;

  public static final String SERIALIZED_NAME_RADIUS_GUEST_VLAN_ENABLED = "radiusGuestVlanEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_GUEST_VLAN_ENABLED)
  private Boolean radiusGuestVlanEnabled;

  public static final String SERIALIZED_NAME_RADIUS_GUEST_VLAN_ID = "radiusGuestVlanId";
  @SerializedName(SERIALIZED_NAME_RADIUS_GUEST_VLAN_ID)
  private Integer radiusGuestVlanId;

  /**
   * This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts (&#39;Strict priority order&#39; or &#39;Round robin&#39;)
   */
  @JsonAdapter(RadiusLoadBalancingPolicyEnum.Adapter.class)
  public enum RadiusLoadBalancingPolicyEnum {
    ROUND_ROBIN("Round robin"),
    
    STRICT_PRIORITY_ORDER("Strict priority order");

    private String value;

    RadiusLoadBalancingPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RadiusLoadBalancingPolicyEnum fromValue(String value) {
      for (RadiusLoadBalancingPolicyEnum b : RadiusLoadBalancingPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RadiusLoadBalancingPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RadiusLoadBalancingPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RadiusLoadBalancingPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RadiusLoadBalancingPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RadiusLoadBalancingPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RADIUS_LOAD_BALANCING_POLICY = "radiusLoadBalancingPolicy";
  @SerializedName(SERIALIZED_NAME_RADIUS_LOAD_BALANCING_POLICY)
  private RadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy;

  public static final String SERIALIZED_NAME_RADIUS_OVERRIDE = "radiusOverride";
  @SerializedName(SERIALIZED_NAME_RADIUS_OVERRIDE)
  private Boolean radiusOverride;

  public static final String SERIALIZED_NAME_RADIUS_PROXY_ENABLED = "radiusProxyEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_PROXY_ENABLED)
  private Boolean radiusProxyEnabled;

  public static final String SERIALIZED_NAME_RADIUS_SERVER_ATTEMPTS_LIMIT = "radiusServerAttemptsLimit";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVER_ATTEMPTS_LIMIT)
  private Integer radiusServerAttemptsLimit;

  public static final String SERIALIZED_NAME_RADIUS_SERVER_TIMEOUT = "radiusServerTimeout";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVER_TIMEOUT)
  private Integer radiusServerTimeout;

  public static final String SERIALIZED_NAME_RADIUS_SERVERS = "radiusServers";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVERS)
  private List<UpdateNetworkWirelessSsidRequestRadiusServersInner> radiusServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RADIUS_TESTING_ENABLED = "radiusTestingEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_TESTING_ENABLED)
  private Boolean radiusTestingEnabled;

  public static final String SERIALIZED_NAME_SECONDARY_CONCENTRATOR_NETWORK_ID = "secondaryConcentratorNetworkId";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CONCENTRATOR_NETWORK_ID)
  private String secondaryConcentratorNetworkId;

  public static final String SERIALIZED_NAME_SPEED_BURST = "speedBurst";
  @SerializedName(SERIALIZED_NAME_SPEED_BURST)
  private UpdateNetworkWirelessSsidRequestSpeedBurst speedBurst;

  public static final String SERIALIZED_NAME_SPLASH_GUEST_SPONSOR_DOMAINS = "splashGuestSponsorDomains";
  @SerializedName(SERIALIZED_NAME_SPLASH_GUEST_SPONSOR_DOMAINS)
  private List<String> splashGuestSponsorDomains = new ArrayList<>();

  /**
   * The type of splash page for the SSID (&#39;None&#39;, &#39;Click-through splash page&#39;, &#39;Billing&#39;, &#39;Password-protected with Meraki RADIUS&#39;, &#39;Password-protected with custom RADIUS&#39;, &#39;Password-protected with Active Directory&#39;, &#39;Password-protected with LDAP&#39;, &#39;SMS authentication&#39;, &#39;Systems Manager Sentry&#39;, &#39;Facebook Wi-Fi&#39;, &#39;Google OAuth&#39;, &#39;Sponsored guest&#39;, &#39;Cisco ISE&#39; or &#39;Google Apps domain&#39;). This attribute is not supported for template children.
   */
  @JsonAdapter(SplashPageEnum.Adapter.class)
  public enum SplashPageEnum {
    BILLING("Billing"),
    
    CISCO_ISE("Cisco ISE"),
    
    CLICK_THROUGH_SPLASH_PAGE("Click-through splash page"),
    
    FACEBOOK_WI_FI("Facebook Wi-Fi"),
    
    GOOGLE_APPS_DOMAIN("Google Apps domain"),
    
    GOOGLE_O_AUTH("Google OAuth"),
    
    NONE("None"),
    
    PASSWORD_PROTECTED_WITH_ACTIVE_DIRECTORY("Password-protected with Active Directory"),
    
    PASSWORD_PROTECTED_WITH_LDAP("Password-protected with LDAP"),
    
    PASSWORD_PROTECTED_WITH_MERAKI_RADIUS("Password-protected with Meraki RADIUS"),
    
    PASSWORD_PROTECTED_WITH_CUSTOM_RADIUS("Password-protected with custom RADIUS"),
    
    SMS_AUTHENTICATION("SMS authentication"),
    
    SPONSORED_GUEST("Sponsored guest"),
    
    SYSTEMS_MANAGER_SENTRY("Systems Manager Sentry");

    private String value;

    SplashPageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SplashPageEnum fromValue(String value) {
      for (SplashPageEnum b : SplashPageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SplashPageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SplashPageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SplashPageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SplashPageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SplashPageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPLASH_PAGE = "splashPage";
  @SerializedName(SERIALIZED_NAME_SPLASH_PAGE)
  private SplashPageEnum splashPage;

  public static final String SERIALIZED_NAME_USE_VLAN_TAGGING = "useVlanTagging";
  @SerializedName(SERIALIZED_NAME_USE_VLAN_TAGGING)
  private Boolean useVlanTagging;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_VLAN_ID = "vlanId";
  @SerializedName(SERIALIZED_NAME_VLAN_ID)
  private Integer vlanId;

  public static final String SERIALIZED_NAME_WALLED_GARDEN_ENABLED = "walledGardenEnabled";
  @SerializedName(SERIALIZED_NAME_WALLED_GARDEN_ENABLED)
  private Boolean walledGardenEnabled;

  public static final String SERIALIZED_NAME_WALLED_GARDEN_RANGES = "walledGardenRanges";
  @SerializedName(SERIALIZED_NAME_WALLED_GARDEN_RANGES)
  private List<String> walledGardenRanges = new ArrayList<>();

  /**
   * The types of WPA encryption. (&#39;WPA1 only&#39;, &#39;WPA1 and WPA2&#39;, &#39;WPA2 only&#39;, &#39;WPA3 Transition Mode&#39;, &#39;WPA3 only&#39; or &#39;WPA3 192-bit Security&#39;)
   */
  @JsonAdapter(WpaEncryptionModeEnum.Adapter.class)
  public enum WpaEncryptionModeEnum {
    WPA1_AND_WPA2("WPA1 and WPA2"),
    
    WPA1_ONLY("WPA1 only"),
    
    WPA2_ONLY("WPA2 only"),
    
    WPA3_192_BIT_SECURITY("WPA3 192-bit Security"),
    
    WPA3_TRANSITION_MODE("WPA3 Transition Mode"),
    
    WPA3_ONLY("WPA3 only");

    private String value;

    WpaEncryptionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WpaEncryptionModeEnum fromValue(String value) {
      for (WpaEncryptionModeEnum b : WpaEncryptionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WpaEncryptionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WpaEncryptionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WpaEncryptionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WpaEncryptionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WpaEncryptionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WPA_ENCRYPTION_MODE = "wpaEncryptionMode";
  @SerializedName(SERIALIZED_NAME_WPA_ENCRYPTION_MODE)
  private WpaEncryptionModeEnum wpaEncryptionMode;

  public UpdateNetworkWirelessSsidRequest() {
  }

  public UpdateNetworkWirelessSsidRequest activeDirectory(UpdateNetworkWirelessSsidRequestActiveDirectory activeDirectory) {
    this.activeDirectory = activeDirectory;
    return this;
  }

  /**
   * Get activeDirectory
   * @return activeDirectory
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestActiveDirectory getActiveDirectory() {
    return activeDirectory;
  }

  public void setActiveDirectory(UpdateNetworkWirelessSsidRequestActiveDirectory activeDirectory) {
    this.activeDirectory = activeDirectory;
  }


  public UpdateNetworkWirelessSsidRequest adultContentFilteringEnabled(Boolean adultContentFilteringEnabled) {
    this.adultContentFilteringEnabled = adultContentFilteringEnabled;
    return this;
  }

  /**
   * Boolean indicating whether or not adult content will be blocked
   * @return adultContentFilteringEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdultContentFilteringEnabled() {
    return adultContentFilteringEnabled;
  }

  public void setAdultContentFilteringEnabled(Boolean adultContentFilteringEnabled) {
    this.adultContentFilteringEnabled = adultContentFilteringEnabled;
  }


  public UpdateNetworkWirelessSsidRequest apTagsAndVlanIds(List<UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner> apTagsAndVlanIds) {
    this.apTagsAndVlanIds = apTagsAndVlanIds;
    return this;
  }

  public UpdateNetworkWirelessSsidRequest addApTagsAndVlanIdsItem(UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner apTagsAndVlanIdsItem) {
    if (this.apTagsAndVlanIds == null) {
      this.apTagsAndVlanIds = new ArrayList<>();
    }
    this.apTagsAndVlanIds.add(apTagsAndVlanIdsItem);
    return this;
  }

  /**
   * The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is &#39;Bridge mode&#39; or &#39;Layer 3 roaming&#39;
   * @return apTagsAndVlanIds
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner> getApTagsAndVlanIds() {
    return apTagsAndVlanIds;
  }

  public void setApTagsAndVlanIds(List<UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner> apTagsAndVlanIds) {
    this.apTagsAndVlanIds = apTagsAndVlanIds;
  }


  public UpdateNetworkWirelessSsidRequest authMode(AuthModeEnum authMode) {
    this.authMode = authMode;
    return this;
  }

  /**
   * The association control method for the SSID (&#39;open&#39;, &#39;open-enhanced&#39;, &#39;psk&#39;, &#39;open-with-radius&#39;, &#39;open-with-nac&#39;, &#39;8021x-meraki&#39;, &#39;8021x-nac&#39;, &#39;8021x-radius&#39;, &#39;8021x-google&#39;, &#39;8021x-localradius&#39;, &#39;ipsk-with-radius&#39; or &#39;ipsk-without-radius&#39;)
   * @return authMode
   */
  @javax.annotation.Nullable
  public AuthModeEnum getAuthMode() {
    return authMode;
  }

  public void setAuthMode(AuthModeEnum authMode) {
    this.authMode = authMode;
  }


  public UpdateNetworkWirelessSsidRequest availabilityTags(List<String> availabilityTags) {
    this.availabilityTags = availabilityTags;
    return this;
  }

  public UpdateNetworkWirelessSsidRequest addAvailabilityTagsItem(String availabilityTagsItem) {
    if (this.availabilityTags == null) {
      this.availabilityTags = new ArrayList<>();
    }
    this.availabilityTags.add(availabilityTagsItem);
    return this;
  }

  /**
   * Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.
   * @return availabilityTags
   */
  @javax.annotation.Nullable
  public List<String> getAvailabilityTags() {
    return availabilityTags;
  }

  public void setAvailabilityTags(List<String> availabilityTags) {
    this.availabilityTags = availabilityTags;
  }


  public UpdateNetworkWirelessSsidRequest availableOnAllAps(Boolean availableOnAllAps) {
    this.availableOnAllAps = availableOnAllAps;
    return this;
  }

  /**
   * Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.
   * @return availableOnAllAps
   */
  @javax.annotation.Nullable
  public Boolean getAvailableOnAllAps() {
    return availableOnAllAps;
  }

  public void setAvailableOnAllAps(Boolean availableOnAllAps) {
    this.availableOnAllAps = availableOnAllAps;
  }


  public UpdateNetworkWirelessSsidRequest bandSelection(String bandSelection) {
    this.bandSelection = bandSelection;
    return this;
  }

  /**
   * The client-serving radio frequencies of this SSID in the default indoor RF profile. (&#39;Dual band operation&#39;, &#39;5 GHz band only&#39; or &#39;Dual band operation with Band Steering&#39;)
   * @return bandSelection
   */
  @javax.annotation.Nullable
  public String getBandSelection() {
    return bandSelection;
  }

  public void setBandSelection(String bandSelection) {
    this.bandSelection = bandSelection;
  }


  public UpdateNetworkWirelessSsidRequest concentratorNetworkId(String concentratorNetworkId) {
    this.concentratorNetworkId = concentratorNetworkId;
    return this;
  }

  /**
   * The concentrator to use when the ipAssignmentMode is &#39;Layer 3 roaming with a concentrator&#39; or &#39;VPN&#39;.
   * @return concentratorNetworkId
   */
  @javax.annotation.Nullable
  public String getConcentratorNetworkId() {
    return concentratorNetworkId;
  }

  public void setConcentratorNetworkId(String concentratorNetworkId) {
    this.concentratorNetworkId = concentratorNetworkId;
  }


  public UpdateNetworkWirelessSsidRequest defaultVlanId(Integer defaultVlanId) {
    this.defaultVlanId = defaultVlanId;
    return this;
  }

  /**
   * The default VLAN ID used for &#39;all other APs&#39;. This param is only valid when the ipAssignmentMode is &#39;Bridge mode&#39; or &#39;Layer 3 roaming&#39;
   * @return defaultVlanId
   */
  @javax.annotation.Nullable
  public Integer getDefaultVlanId() {
    return defaultVlanId;
  }

  public void setDefaultVlanId(Integer defaultVlanId) {
    this.defaultVlanId = defaultVlanId;
  }


  public UpdateNetworkWirelessSsidRequest disassociateClientsOnVpnFailover(Boolean disassociateClientsOnVpnFailover) {
    this.disassociateClientsOnVpnFailover = disassociateClientsOnVpnFailover;
    return this;
  }

  /**
   * Disassociate clients when &#39;VPN&#39; concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is &#39;VPN&#39;.
   * @return disassociateClientsOnVpnFailover
   */
  @javax.annotation.Nullable
  public Boolean getDisassociateClientsOnVpnFailover() {
    return disassociateClientsOnVpnFailover;
  }

  public void setDisassociateClientsOnVpnFailover(Boolean disassociateClientsOnVpnFailover) {
    this.disassociateClientsOnVpnFailover = disassociateClientsOnVpnFailover;
  }


  public UpdateNetworkWirelessSsidRequest dnsRewrite(UpdateNetworkWirelessSsidRequestDnsRewrite dnsRewrite) {
    this.dnsRewrite = dnsRewrite;
    return this;
  }

  /**
   * Get dnsRewrite
   * @return dnsRewrite
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestDnsRewrite getDnsRewrite() {
    return dnsRewrite;
  }

  public void setDnsRewrite(UpdateNetworkWirelessSsidRequestDnsRewrite dnsRewrite) {
    this.dnsRewrite = dnsRewrite;
  }


  public UpdateNetworkWirelessSsidRequest dot11r(UpdateNetworkWirelessSsidRequestDot11r dot11r) {
    this.dot11r = dot11r;
    return this;
  }

  /**
   * Get dot11r
   * @return dot11r
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestDot11r getDot11r() {
    return dot11r;
  }

  public void setDot11r(UpdateNetworkWirelessSsidRequestDot11r dot11r) {
    this.dot11r = dot11r;
  }


  public UpdateNetworkWirelessSsidRequest dot11w(UpdateNetworkWirelessSsidRequestDot11w dot11w) {
    this.dot11w = dot11w;
    return this;
  }

  /**
   * Get dot11w
   * @return dot11w
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestDot11w getDot11w() {
    return dot11w;
  }

  public void setDot11w(UpdateNetworkWirelessSsidRequestDot11w dot11w) {
    this.dot11w = dot11w;
  }


  public UpdateNetworkWirelessSsidRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the SSID is enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateNetworkWirelessSsidRequest encryptionMode(EncryptionModeEnum encryptionMode) {
    this.encryptionMode = encryptionMode;
    return this;
  }

  /**
   * The psk encryption mode for the SSID (&#39;wep&#39; or &#39;wpa&#39;). This param is only valid if the authMode is &#39;psk&#39;
   * @return encryptionMode
   */
  @javax.annotation.Nullable
  public EncryptionModeEnum getEncryptionMode() {
    return encryptionMode;
  }

  public void setEncryptionMode(EncryptionModeEnum encryptionMode) {
    this.encryptionMode = encryptionMode;
  }


  public UpdateNetworkWirelessSsidRequest enterpriseAdminAccess(EnterpriseAdminAccessEnum enterpriseAdminAccess) {
    this.enterpriseAdminAccess = enterpriseAdminAccess;
    return this;
  }

  /**
   * Whether or not an SSID is accessible by &#39;enterprise&#39; administrators (&#39;access disabled&#39; or &#39;access enabled&#39;)
   * @return enterpriseAdminAccess
   */
  @javax.annotation.Nullable
  public EnterpriseAdminAccessEnum getEnterpriseAdminAccess() {
    return enterpriseAdminAccess;
  }

  public void setEnterpriseAdminAccess(EnterpriseAdminAccessEnum enterpriseAdminAccess) {
    this.enterpriseAdminAccess = enterpriseAdminAccess;
  }


  public UpdateNetworkWirelessSsidRequest gre(UpdateNetworkWirelessSsidRequestGre gre) {
    this.gre = gre;
    return this;
  }

  /**
   * Get gre
   * @return gre
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestGre getGre() {
    return gre;
  }

  public void setGre(UpdateNetworkWirelessSsidRequestGre gre) {
    this.gre = gre;
  }


  public UpdateNetworkWirelessSsidRequest ipAssignmentMode(String ipAssignmentMode) {
    this.ipAssignmentMode = ipAssignmentMode;
    return this;
  }

  /**
   * The client IP assignment mode (&#39;NAT mode&#39;, &#39;Bridge mode&#39;, &#39;Layer 3 roaming&#39;, &#39;Ethernet over GRE&#39;, &#39;Layer 3 roaming with a concentrator&#39; or &#39;VPN&#39;)
   * @return ipAssignmentMode
   */
  @javax.annotation.Nullable
  public String getIpAssignmentMode() {
    return ipAssignmentMode;
  }

  public void setIpAssignmentMode(String ipAssignmentMode) {
    this.ipAssignmentMode = ipAssignmentMode;
  }


  public UpdateNetworkWirelessSsidRequest lanIsolationEnabled(Boolean lanIsolationEnabled) {
    this.lanIsolationEnabled = lanIsolationEnabled;
    return this;
  }

  /**
   * Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is &#39;Bridge mode&#39;.
   * @return lanIsolationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLanIsolationEnabled() {
    return lanIsolationEnabled;
  }

  public void setLanIsolationEnabled(Boolean lanIsolationEnabled) {
    this.lanIsolationEnabled = lanIsolationEnabled;
  }


  public UpdateNetworkWirelessSsidRequest ldap(UpdateNetworkWirelessSsidRequestLdap ldap) {
    this.ldap = ldap;
    return this;
  }

  /**
   * Get ldap
   * @return ldap
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestLdap getLdap() {
    return ldap;
  }

  public void setLdap(UpdateNetworkWirelessSsidRequestLdap ldap) {
    this.ldap = ldap;
  }


  public UpdateNetworkWirelessSsidRequest localRadius(UpdateNetworkWirelessSsidRequestLocalRadius localRadius) {
    this.localRadius = localRadius;
    return this;
  }

  /**
   * Get localRadius
   * @return localRadius
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestLocalRadius getLocalRadius() {
    return localRadius;
  }

  public void setLocalRadius(UpdateNetworkWirelessSsidRequestLocalRadius localRadius) {
    this.localRadius = localRadius;
  }


  public UpdateNetworkWirelessSsidRequest mandatoryDhcpEnabled(Boolean mandatoryDhcpEnabled) {
    this.mandatoryDhcpEnabled = mandatoryDhcpEnabled;
    return this;
  }

  /**
   * If true, Mandatory DHCP will enforce that clients connecting to this SSID must use the IP address assigned by the DHCP server. Clients who use a static IP address won&#39;t be able to associate.
   * @return mandatoryDhcpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMandatoryDhcpEnabled() {
    return mandatoryDhcpEnabled;
  }

  public void setMandatoryDhcpEnabled(Boolean mandatoryDhcpEnabled) {
    this.mandatoryDhcpEnabled = mandatoryDhcpEnabled;
  }


  public UpdateNetworkWirelessSsidRequest minBitrate(Float minBitrate) {
    this.minBitrate = minBitrate;
    return this;
  }

  /**
   * The minimum bitrate in Mbps of this SSID in the default indoor RF profile. (&#39;1&#39;, &#39;2&#39;, &#39;5.5&#39;, &#39;6&#39;, &#39;9&#39;, &#39;11&#39;, &#39;12&#39;, &#39;18&#39;, &#39;24&#39;, &#39;36&#39;, &#39;48&#39; or &#39;54&#39;)
   * @return minBitrate
   */
  @javax.annotation.Nullable
  public Float getMinBitrate() {
    return minBitrate;
  }

  public void setMinBitrate(Float minBitrate) {
    this.minBitrate = minBitrate;
  }


  public UpdateNetworkWirelessSsidRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SSID
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNetworkWirelessSsidRequest oauth(UpdateNetworkWirelessSsidRequestOauth oauth) {
    this.oauth = oauth;
    return this;
  }

  /**
   * Get oauth
   * @return oauth
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestOauth getOauth() {
    return oauth;
  }

  public void setOauth(UpdateNetworkWirelessSsidRequestOauth oauth) {
    this.oauth = oauth;
  }


  public UpdateNetworkWirelessSsidRequest perClientBandwidthLimitDown(Integer perClientBandwidthLimitDown) {
    this.perClientBandwidthLimitDown = perClientBandwidthLimitDown;
    return this;
  }

  /**
   * The download bandwidth limit in Kbps. (0 represents no limit.)
   * @return perClientBandwidthLimitDown
   */
  @javax.annotation.Nullable
  public Integer getPerClientBandwidthLimitDown() {
    return perClientBandwidthLimitDown;
  }

  public void setPerClientBandwidthLimitDown(Integer perClientBandwidthLimitDown) {
    this.perClientBandwidthLimitDown = perClientBandwidthLimitDown;
  }


  public UpdateNetworkWirelessSsidRequest perClientBandwidthLimitUp(Integer perClientBandwidthLimitUp) {
    this.perClientBandwidthLimitUp = perClientBandwidthLimitUp;
    return this;
  }

  /**
   * The upload bandwidth limit in Kbps. (0 represents no limit.)
   * @return perClientBandwidthLimitUp
   */
  @javax.annotation.Nullable
  public Integer getPerClientBandwidthLimitUp() {
    return perClientBandwidthLimitUp;
  }

  public void setPerClientBandwidthLimitUp(Integer perClientBandwidthLimitUp) {
    this.perClientBandwidthLimitUp = perClientBandwidthLimitUp;
  }


  public UpdateNetworkWirelessSsidRequest perSsidBandwidthLimitDown(Integer perSsidBandwidthLimitDown) {
    this.perSsidBandwidthLimitDown = perSsidBandwidthLimitDown;
    return this;
  }

  /**
   * The total download bandwidth limit in Kbps. (0 represents no limit.)
   * @return perSsidBandwidthLimitDown
   */
  @javax.annotation.Nullable
  public Integer getPerSsidBandwidthLimitDown() {
    return perSsidBandwidthLimitDown;
  }

  public void setPerSsidBandwidthLimitDown(Integer perSsidBandwidthLimitDown) {
    this.perSsidBandwidthLimitDown = perSsidBandwidthLimitDown;
  }


  public UpdateNetworkWirelessSsidRequest perSsidBandwidthLimitUp(Integer perSsidBandwidthLimitUp) {
    this.perSsidBandwidthLimitUp = perSsidBandwidthLimitUp;
    return this;
  }

  /**
   * The total upload bandwidth limit in Kbps. (0 represents no limit.)
   * @return perSsidBandwidthLimitUp
   */
  @javax.annotation.Nullable
  public Integer getPerSsidBandwidthLimitUp() {
    return perSsidBandwidthLimitUp;
  }

  public void setPerSsidBandwidthLimitUp(Integer perSsidBandwidthLimitUp) {
    this.perSsidBandwidthLimitUp = perSsidBandwidthLimitUp;
  }


  public UpdateNetworkWirelessSsidRequest psk(String psk) {
    this.psk = psk;
    return this;
  }

  /**
   * The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;
   * @return psk
   */
  @javax.annotation.Nullable
  public String getPsk() {
    return psk;
  }

  public void setPsk(String psk) {
    this.psk = psk;
  }


  public UpdateNetworkWirelessSsidRequest radiusAccountingEnabled(Boolean radiusAccountingEnabled) {
    this.radiusAccountingEnabled = radiusAccountingEnabled;
    return this;
  }

  /**
   * Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is &#39;open-with-radius&#39;, &#39;8021x-radius&#39; or &#39;ipsk-with-radius&#39;
   * @return radiusAccountingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadiusAccountingEnabled() {
    return radiusAccountingEnabled;
  }

  public void setRadiusAccountingEnabled(Boolean radiusAccountingEnabled) {
    this.radiusAccountingEnabled = radiusAccountingEnabled;
  }


  public UpdateNetworkWirelessSsidRequest radiusAccountingInterimInterval(Integer radiusAccountingInterimInterval) {
    this.radiusAccountingInterimInterval = radiusAccountingInterimInterval;
    return this;
  }

  /**
   * The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
   * @return radiusAccountingInterimInterval
   */
  @javax.annotation.Nullable
  public Integer getRadiusAccountingInterimInterval() {
    return radiusAccountingInterimInterval;
  }

  public void setRadiusAccountingInterimInterval(Integer radiusAccountingInterimInterval) {
    this.radiusAccountingInterimInterval = radiusAccountingInterimInterval;
  }


  public UpdateNetworkWirelessSsidRequest radiusAccountingServers(List<UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner> radiusAccountingServers) {
    this.radiusAccountingServers = radiusAccountingServers;
    return this;
  }

  public UpdateNetworkWirelessSsidRequest addRadiusAccountingServersItem(UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner radiusAccountingServersItem) {
    if (this.radiusAccountingServers == null) {
      this.radiusAccountingServers = new ArrayList<>();
    }
    this.radiusAccountingServers.add(radiusAccountingServersItem);
    return this;
  }

  /**
   * The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is &#39;open-with-radius&#39;, &#39;8021x-radius&#39; or &#39;ipsk-with-radius&#39; and radiusAccountingEnabled is &#39;true&#39;
   * @return radiusAccountingServers
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner> getRadiusAccountingServers() {
    return radiusAccountingServers;
  }

  public void setRadiusAccountingServers(List<UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner> radiusAccountingServers) {
    this.radiusAccountingServers = radiusAccountingServers;
  }


  public UpdateNetworkWirelessSsidRequest radiusAttributeForGroupPolicies(RadiusAttributeForGroupPoliciesEnum radiusAttributeForGroupPolicies) {
    this.radiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
    return this;
  }

  /**
   * Specify the RADIUS attribute used to look up group policies (&#39;Filter-Id&#39;, &#39;Reply-Message&#39;, &#39;Airespace-ACL-Name&#39; or &#39;Aruba-User-Role&#39;). Access points must receive this attribute in the RADIUS Access-Accept message
   * @return radiusAttributeForGroupPolicies
   */
  @javax.annotation.Nullable
  public RadiusAttributeForGroupPoliciesEnum getRadiusAttributeForGroupPolicies() {
    return radiusAttributeForGroupPolicies;
  }

  public void setRadiusAttributeForGroupPolicies(RadiusAttributeForGroupPoliciesEnum radiusAttributeForGroupPolicies) {
    this.radiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
  }


  public UpdateNetworkWirelessSsidRequest radiusAuthenticationNasId(String radiusAuthenticationNasId) {
    this.radiusAuthenticationNasId = radiusAuthenticationNasId;
    return this;
  }

  /**
   * The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE_MAC$:$VAP_NUM$).
   * @return radiusAuthenticationNasId
   */
  @javax.annotation.Nullable
  public String getRadiusAuthenticationNasId() {
    return radiusAuthenticationNasId;
  }

  public void setRadiusAuthenticationNasId(String radiusAuthenticationNasId) {
    this.radiusAuthenticationNasId = radiusAuthenticationNasId;
  }


  public UpdateNetworkWirelessSsidRequest radiusCalledStationId(String radiusCalledStationId) {
    this.radiusCalledStationId = radiusCalledStationId;
    return this;
  }

  /**
   * The template of the called station identifier to be used for RADIUS (ex. $NODE_MAC$:$VAP_NUM$).
   * @return radiusCalledStationId
   */
  @javax.annotation.Nullable
  public String getRadiusCalledStationId() {
    return radiusCalledStationId;
  }

  public void setRadiusCalledStationId(String radiusCalledStationId) {
    this.radiusCalledStationId = radiusCalledStationId;
  }


  public UpdateNetworkWirelessSsidRequest radiusCoaEnabled(Boolean radiusCoaEnabled) {
    this.radiusCoaEnabled = radiusCoaEnabled;
    return this;
  }

  /**
   * If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
   * @return radiusCoaEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadiusCoaEnabled() {
    return radiusCoaEnabled;
  }

  public void setRadiusCoaEnabled(Boolean radiusCoaEnabled) {
    this.radiusCoaEnabled = radiusCoaEnabled;
  }


  public UpdateNetworkWirelessSsidRequest radiusFailoverPolicy(RadiusFailoverPolicyEnum radiusFailoverPolicy) {
    this.radiusFailoverPolicy = radiusFailoverPolicy;
    return this;
  }

  /**
   * This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable (&#39;Deny access&#39; or &#39;Allow access&#39;)
   * @return radiusFailoverPolicy
   */
  @javax.annotation.Nullable
  public RadiusFailoverPolicyEnum getRadiusFailoverPolicy() {
    return radiusFailoverPolicy;
  }

  public void setRadiusFailoverPolicy(RadiusFailoverPolicyEnum radiusFailoverPolicy) {
    this.radiusFailoverPolicy = radiusFailoverPolicy;
  }


  public UpdateNetworkWirelessSsidRequest radiusFallbackEnabled(Boolean radiusFallbackEnabled) {
    this.radiusFallbackEnabled = radiusFallbackEnabled;
    return this;
  }

  /**
   * Whether or not higher priority RADIUS servers should be retried after 60 seconds.
   * @return radiusFallbackEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadiusFallbackEnabled() {
    return radiusFallbackEnabled;
  }

  public void setRadiusFallbackEnabled(Boolean radiusFallbackEnabled) {
    this.radiusFallbackEnabled = radiusFallbackEnabled;
  }


  public UpdateNetworkWirelessSsidRequest radiusGuestVlanEnabled(Boolean radiusGuestVlanEnabled) {
    this.radiusGuestVlanEnabled = radiusGuestVlanEnabled;
    return this;
  }

  /**
   * Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is &#39;open-with-radius&#39; and addressing mode is not set to &#39;isolated&#39; or &#39;nat&#39; mode
   * @return radiusGuestVlanEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadiusGuestVlanEnabled() {
    return radiusGuestVlanEnabled;
  }

  public void setRadiusGuestVlanEnabled(Boolean radiusGuestVlanEnabled) {
    this.radiusGuestVlanEnabled = radiusGuestVlanEnabled;
  }


  public UpdateNetworkWirelessSsidRequest radiusGuestVlanId(Integer radiusGuestVlanId) {
    this.radiusGuestVlanId = radiusGuestVlanId;
    return this;
  }

  /**
   * VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is &#39;open-with-radius&#39; and addressing mode is not set to &#39;isolated&#39; or &#39;nat&#39; mode
   * @return radiusGuestVlanId
   */
  @javax.annotation.Nullable
  public Integer getRadiusGuestVlanId() {
    return radiusGuestVlanId;
  }

  public void setRadiusGuestVlanId(Integer radiusGuestVlanId) {
    this.radiusGuestVlanId = radiusGuestVlanId;
  }


  public UpdateNetworkWirelessSsidRequest radiusLoadBalancingPolicy(RadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy) {
    this.radiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
    return this;
  }

  /**
   * This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts (&#39;Strict priority order&#39; or &#39;Round robin&#39;)
   * @return radiusLoadBalancingPolicy
   */
  @javax.annotation.Nullable
  public RadiusLoadBalancingPolicyEnum getRadiusLoadBalancingPolicy() {
    return radiusLoadBalancingPolicy;
  }

  public void setRadiusLoadBalancingPolicy(RadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy) {
    this.radiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
  }


  public UpdateNetworkWirelessSsidRequest radiusOverride(Boolean radiusOverride) {
    this.radiusOverride = radiusOverride;
    return this;
  }

  /**
   * If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is &#39;NAT mode&#39;.
   * @return radiusOverride
   */
  @javax.annotation.Nullable
  public Boolean getRadiusOverride() {
    return radiusOverride;
  }

  public void setRadiusOverride(Boolean radiusOverride) {
    this.radiusOverride = radiusOverride;
  }


  public UpdateNetworkWirelessSsidRequest radiusProxyEnabled(Boolean radiusProxyEnabled) {
    this.radiusProxyEnabled = radiusProxyEnabled;
    return this;
  }

  /**
   * If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
   * @return radiusProxyEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadiusProxyEnabled() {
    return radiusProxyEnabled;
  }

  public void setRadiusProxyEnabled(Boolean radiusProxyEnabled) {
    this.radiusProxyEnabled = radiusProxyEnabled;
  }


  public UpdateNetworkWirelessSsidRequest radiusServerAttemptsLimit(Integer radiusServerAttemptsLimit) {
    this.radiusServerAttemptsLimit = radiusServerAttemptsLimit;
    return this;
  }

  /**
   * The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
   * @return radiusServerAttemptsLimit
   */
  @javax.annotation.Nullable
  public Integer getRadiusServerAttemptsLimit() {
    return radiusServerAttemptsLimit;
  }

  public void setRadiusServerAttemptsLimit(Integer radiusServerAttemptsLimit) {
    this.radiusServerAttemptsLimit = radiusServerAttemptsLimit;
  }


  public UpdateNetworkWirelessSsidRequest radiusServerTimeout(Integer radiusServerTimeout) {
    this.radiusServerTimeout = radiusServerTimeout;
    return this;
  }

  /**
   * The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
   * @return radiusServerTimeout
   */
  @javax.annotation.Nullable
  public Integer getRadiusServerTimeout() {
    return radiusServerTimeout;
  }

  public void setRadiusServerTimeout(Integer radiusServerTimeout) {
    this.radiusServerTimeout = radiusServerTimeout;
  }


  public UpdateNetworkWirelessSsidRequest radiusServers(List<UpdateNetworkWirelessSsidRequestRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
    return this;
  }

  public UpdateNetworkWirelessSsidRequest addRadiusServersItem(UpdateNetworkWirelessSsidRequestRadiusServersInner radiusServersItem) {
    if (this.radiusServers == null) {
      this.radiusServers = new ArrayList<>();
    }
    this.radiusServers.add(radiusServersItem);
    return this;
  }

  /**
   * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is &#39;open-with-radius&#39;, &#39;8021x-radius&#39; or &#39;ipsk-with-radius&#39;
   * @return radiusServers
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkWirelessSsidRequestRadiusServersInner> getRadiusServers() {
    return radiusServers;
  }

  public void setRadiusServers(List<UpdateNetworkWirelessSsidRequestRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
  }


  public UpdateNetworkWirelessSsidRequest radiusTestingEnabled(Boolean radiusTestingEnabled) {
    this.radiusTestingEnabled = radiusTestingEnabled;
    return this;
  }

  /**
   * If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity &#39;meraki_8021x_test&#39; to ensure that the RADIUS servers are reachable.
   * @return radiusTestingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadiusTestingEnabled() {
    return radiusTestingEnabled;
  }

  public void setRadiusTestingEnabled(Boolean radiusTestingEnabled) {
    this.radiusTestingEnabled = radiusTestingEnabled;
  }


  public UpdateNetworkWirelessSsidRequest secondaryConcentratorNetworkId(String secondaryConcentratorNetworkId) {
    this.secondaryConcentratorNetworkId = secondaryConcentratorNetworkId;
    return this;
  }

  /**
   * The secondary concentrator to use when the ipAssignmentMode is &#39;VPN&#39;. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. (&#39;disabled&#39; represents no secondary concentrator.)
   * @return secondaryConcentratorNetworkId
   */
  @javax.annotation.Nullable
  public String getSecondaryConcentratorNetworkId() {
    return secondaryConcentratorNetworkId;
  }

  public void setSecondaryConcentratorNetworkId(String secondaryConcentratorNetworkId) {
    this.secondaryConcentratorNetworkId = secondaryConcentratorNetworkId;
  }


  public UpdateNetworkWirelessSsidRequest speedBurst(UpdateNetworkWirelessSsidRequestSpeedBurst speedBurst) {
    this.speedBurst = speedBurst;
    return this;
  }

  /**
   * Get speedBurst
   * @return speedBurst
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidRequestSpeedBurst getSpeedBurst() {
    return speedBurst;
  }

  public void setSpeedBurst(UpdateNetworkWirelessSsidRequestSpeedBurst speedBurst) {
    this.speedBurst = speedBurst;
  }


  public UpdateNetworkWirelessSsidRequest splashGuestSponsorDomains(List<String> splashGuestSponsorDomains) {
    this.splashGuestSponsorDomains = splashGuestSponsorDomains;
    return this;
  }

  public UpdateNetworkWirelessSsidRequest addSplashGuestSponsorDomainsItem(String splashGuestSponsorDomainsItem) {
    if (this.splashGuestSponsorDomains == null) {
      this.splashGuestSponsorDomains = new ArrayList<>();
    }
    this.splashGuestSponsorDomains.add(splashGuestSponsorDomainsItem);
    return this;
  }

  /**
   * Array of valid sponsor email domains for sponsored guest splash type.
   * @return splashGuestSponsorDomains
   */
  @javax.annotation.Nullable
  public List<String> getSplashGuestSponsorDomains() {
    return splashGuestSponsorDomains;
  }

  public void setSplashGuestSponsorDomains(List<String> splashGuestSponsorDomains) {
    this.splashGuestSponsorDomains = splashGuestSponsorDomains;
  }


  public UpdateNetworkWirelessSsidRequest splashPage(SplashPageEnum splashPage) {
    this.splashPage = splashPage;
    return this;
  }

  /**
   * The type of splash page for the SSID (&#39;None&#39;, &#39;Click-through splash page&#39;, &#39;Billing&#39;, &#39;Password-protected with Meraki RADIUS&#39;, &#39;Password-protected with custom RADIUS&#39;, &#39;Password-protected with Active Directory&#39;, &#39;Password-protected with LDAP&#39;, &#39;SMS authentication&#39;, &#39;Systems Manager Sentry&#39;, &#39;Facebook Wi-Fi&#39;, &#39;Google OAuth&#39;, &#39;Sponsored guest&#39;, &#39;Cisco ISE&#39; or &#39;Google Apps domain&#39;). This attribute is not supported for template children.
   * @return splashPage
   */
  @javax.annotation.Nullable
  public SplashPageEnum getSplashPage() {
    return splashPage;
  }

  public void setSplashPage(SplashPageEnum splashPage) {
    this.splashPage = splashPage;
  }


  public UpdateNetworkWirelessSsidRequest useVlanTagging(Boolean useVlanTagging) {
    this.useVlanTagging = useVlanTagging;
    return this;
  }

  /**
   * Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is &#39;Bridge mode&#39; or &#39;Layer 3 roaming&#39;
   * @return useVlanTagging
   */
  @javax.annotation.Nullable
  public Boolean getUseVlanTagging() {
    return useVlanTagging;
  }

  public void setUseVlanTagging(Boolean useVlanTagging) {
    this.useVlanTagging = useVlanTagging;
  }


  public UpdateNetworkWirelessSsidRequest visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public UpdateNetworkWirelessSsidRequest vlanId(Integer vlanId) {
    this.vlanId = vlanId;
    return this;
  }

  /**
   * The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is &#39;Layer 3 roaming with a concentrator&#39; or &#39;VPN&#39;
   * @return vlanId
   */
  @javax.annotation.Nullable
  public Integer getVlanId() {
    return vlanId;
  }

  public void setVlanId(Integer vlanId) {
    this.vlanId = vlanId;
  }


  public UpdateNetworkWirelessSsidRequest walledGardenEnabled(Boolean walledGardenEnabled) {
    this.walledGardenEnabled = walledGardenEnabled;
    return this;
  }

  /**
   * Allow access to a configurable list of IP ranges, which users may access prior to sign-on.
   * @return walledGardenEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWalledGardenEnabled() {
    return walledGardenEnabled;
  }

  public void setWalledGardenEnabled(Boolean walledGardenEnabled) {
    this.walledGardenEnabled = walledGardenEnabled;
  }


  public UpdateNetworkWirelessSsidRequest walledGardenRanges(List<String> walledGardenRanges) {
    this.walledGardenRanges = walledGardenRanges;
    return this;
  }

  public UpdateNetworkWirelessSsidRequest addWalledGardenRangesItem(String walledGardenRangesItem) {
    if (this.walledGardenRanges == null) {
      this.walledGardenRanges = new ArrayList<>();
    }
    this.walledGardenRanges.add(walledGardenRangesItem);
    return this;
  }

  /**
   * Specify your walled garden by entering an array of addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. &#39;192.168.1.1/24&#39;, &#39;192.168.37.10/32&#39;, &#39;www.yahoo.com&#39;, &#39;*.google.com&#39;]). Meraki&#39;s splash page is automatically included in your walled garden.
   * @return walledGardenRanges
   */
  @javax.annotation.Nullable
  public List<String> getWalledGardenRanges() {
    return walledGardenRanges;
  }

  public void setWalledGardenRanges(List<String> walledGardenRanges) {
    this.walledGardenRanges = walledGardenRanges;
  }


  public UpdateNetworkWirelessSsidRequest wpaEncryptionMode(WpaEncryptionModeEnum wpaEncryptionMode) {
    this.wpaEncryptionMode = wpaEncryptionMode;
    return this;
  }

  /**
   * The types of WPA encryption. (&#39;WPA1 only&#39;, &#39;WPA1 and WPA2&#39;, &#39;WPA2 only&#39;, &#39;WPA3 Transition Mode&#39;, &#39;WPA3 only&#39; or &#39;WPA3 192-bit Security&#39;)
   * @return wpaEncryptionMode
   */
  @javax.annotation.Nullable
  public WpaEncryptionModeEnum getWpaEncryptionMode() {
    return wpaEncryptionMode;
  }

  public void setWpaEncryptionMode(WpaEncryptionModeEnum wpaEncryptionMode) {
    this.wpaEncryptionMode = wpaEncryptionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest = (UpdateNetworkWirelessSsidRequest) o;
    return Objects.equals(this.activeDirectory, updateNetworkWirelessSsidRequest.activeDirectory) &&
        Objects.equals(this.adultContentFilteringEnabled, updateNetworkWirelessSsidRequest.adultContentFilteringEnabled) &&
        Objects.equals(this.apTagsAndVlanIds, updateNetworkWirelessSsidRequest.apTagsAndVlanIds) &&
        Objects.equals(this.authMode, updateNetworkWirelessSsidRequest.authMode) &&
        Objects.equals(this.availabilityTags, updateNetworkWirelessSsidRequest.availabilityTags) &&
        Objects.equals(this.availableOnAllAps, updateNetworkWirelessSsidRequest.availableOnAllAps) &&
        Objects.equals(this.bandSelection, updateNetworkWirelessSsidRequest.bandSelection) &&
        Objects.equals(this.concentratorNetworkId, updateNetworkWirelessSsidRequest.concentratorNetworkId) &&
        Objects.equals(this.defaultVlanId, updateNetworkWirelessSsidRequest.defaultVlanId) &&
        Objects.equals(this.disassociateClientsOnVpnFailover, updateNetworkWirelessSsidRequest.disassociateClientsOnVpnFailover) &&
        Objects.equals(this.dnsRewrite, updateNetworkWirelessSsidRequest.dnsRewrite) &&
        Objects.equals(this.dot11r, updateNetworkWirelessSsidRequest.dot11r) &&
        Objects.equals(this.dot11w, updateNetworkWirelessSsidRequest.dot11w) &&
        Objects.equals(this.enabled, updateNetworkWirelessSsidRequest.enabled) &&
        Objects.equals(this.encryptionMode, updateNetworkWirelessSsidRequest.encryptionMode) &&
        Objects.equals(this.enterpriseAdminAccess, updateNetworkWirelessSsidRequest.enterpriseAdminAccess) &&
        Objects.equals(this.gre, updateNetworkWirelessSsidRequest.gre) &&
        Objects.equals(this.ipAssignmentMode, updateNetworkWirelessSsidRequest.ipAssignmentMode) &&
        Objects.equals(this.lanIsolationEnabled, updateNetworkWirelessSsidRequest.lanIsolationEnabled) &&
        Objects.equals(this.ldap, updateNetworkWirelessSsidRequest.ldap) &&
        Objects.equals(this.localRadius, updateNetworkWirelessSsidRequest.localRadius) &&
        Objects.equals(this.mandatoryDhcpEnabled, updateNetworkWirelessSsidRequest.mandatoryDhcpEnabled) &&
        Objects.equals(this.minBitrate, updateNetworkWirelessSsidRequest.minBitrate) &&
        Objects.equals(this.name, updateNetworkWirelessSsidRequest.name) &&
        Objects.equals(this.oauth, updateNetworkWirelessSsidRequest.oauth) &&
        Objects.equals(this.perClientBandwidthLimitDown, updateNetworkWirelessSsidRequest.perClientBandwidthLimitDown) &&
        Objects.equals(this.perClientBandwidthLimitUp, updateNetworkWirelessSsidRequest.perClientBandwidthLimitUp) &&
        Objects.equals(this.perSsidBandwidthLimitDown, updateNetworkWirelessSsidRequest.perSsidBandwidthLimitDown) &&
        Objects.equals(this.perSsidBandwidthLimitUp, updateNetworkWirelessSsidRequest.perSsidBandwidthLimitUp) &&
        Objects.equals(this.psk, updateNetworkWirelessSsidRequest.psk) &&
        Objects.equals(this.radiusAccountingEnabled, updateNetworkWirelessSsidRequest.radiusAccountingEnabled) &&
        Objects.equals(this.radiusAccountingInterimInterval, updateNetworkWirelessSsidRequest.radiusAccountingInterimInterval) &&
        Objects.equals(this.radiusAccountingServers, updateNetworkWirelessSsidRequest.radiusAccountingServers) &&
        Objects.equals(this.radiusAttributeForGroupPolicies, updateNetworkWirelessSsidRequest.radiusAttributeForGroupPolicies) &&
        Objects.equals(this.radiusAuthenticationNasId, updateNetworkWirelessSsidRequest.radiusAuthenticationNasId) &&
        Objects.equals(this.radiusCalledStationId, updateNetworkWirelessSsidRequest.radiusCalledStationId) &&
        Objects.equals(this.radiusCoaEnabled, updateNetworkWirelessSsidRequest.radiusCoaEnabled) &&
        Objects.equals(this.radiusFailoverPolicy, updateNetworkWirelessSsidRequest.radiusFailoverPolicy) &&
        Objects.equals(this.radiusFallbackEnabled, updateNetworkWirelessSsidRequest.radiusFallbackEnabled) &&
        Objects.equals(this.radiusGuestVlanEnabled, updateNetworkWirelessSsidRequest.radiusGuestVlanEnabled) &&
        Objects.equals(this.radiusGuestVlanId, updateNetworkWirelessSsidRequest.radiusGuestVlanId) &&
        Objects.equals(this.radiusLoadBalancingPolicy, updateNetworkWirelessSsidRequest.radiusLoadBalancingPolicy) &&
        Objects.equals(this.radiusOverride, updateNetworkWirelessSsidRequest.radiusOverride) &&
        Objects.equals(this.radiusProxyEnabled, updateNetworkWirelessSsidRequest.radiusProxyEnabled) &&
        Objects.equals(this.radiusServerAttemptsLimit, updateNetworkWirelessSsidRequest.radiusServerAttemptsLimit) &&
        Objects.equals(this.radiusServerTimeout, updateNetworkWirelessSsidRequest.radiusServerTimeout) &&
        Objects.equals(this.radiusServers, updateNetworkWirelessSsidRequest.radiusServers) &&
        Objects.equals(this.radiusTestingEnabled, updateNetworkWirelessSsidRequest.radiusTestingEnabled) &&
        Objects.equals(this.secondaryConcentratorNetworkId, updateNetworkWirelessSsidRequest.secondaryConcentratorNetworkId) &&
        Objects.equals(this.speedBurst, updateNetworkWirelessSsidRequest.speedBurst) &&
        Objects.equals(this.splashGuestSponsorDomains, updateNetworkWirelessSsidRequest.splashGuestSponsorDomains) &&
        Objects.equals(this.splashPage, updateNetworkWirelessSsidRequest.splashPage) &&
        Objects.equals(this.useVlanTagging, updateNetworkWirelessSsidRequest.useVlanTagging) &&
        Objects.equals(this.visible, updateNetworkWirelessSsidRequest.visible) &&
        Objects.equals(this.vlanId, updateNetworkWirelessSsidRequest.vlanId) &&
        Objects.equals(this.walledGardenEnabled, updateNetworkWirelessSsidRequest.walledGardenEnabled) &&
        Objects.equals(this.walledGardenRanges, updateNetworkWirelessSsidRequest.walledGardenRanges) &&
        Objects.equals(this.wpaEncryptionMode, updateNetworkWirelessSsidRequest.wpaEncryptionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeDirectory, adultContentFilteringEnabled, apTagsAndVlanIds, authMode, availabilityTags, availableOnAllAps, bandSelection, concentratorNetworkId, defaultVlanId, disassociateClientsOnVpnFailover, dnsRewrite, dot11r, dot11w, enabled, encryptionMode, enterpriseAdminAccess, gre, ipAssignmentMode, lanIsolationEnabled, ldap, localRadius, mandatoryDhcpEnabled, minBitrate, name, oauth, perClientBandwidthLimitDown, perClientBandwidthLimitUp, perSsidBandwidthLimitDown, perSsidBandwidthLimitUp, psk, radiusAccountingEnabled, radiusAccountingInterimInterval, radiusAccountingServers, radiusAttributeForGroupPolicies, radiusAuthenticationNasId, radiusCalledStationId, radiusCoaEnabled, radiusFailoverPolicy, radiusFallbackEnabled, radiusGuestVlanEnabled, radiusGuestVlanId, radiusLoadBalancingPolicy, radiusOverride, radiusProxyEnabled, radiusServerAttemptsLimit, radiusServerTimeout, radiusServers, radiusTestingEnabled, secondaryConcentratorNetworkId, speedBurst, splashGuestSponsorDomains, splashPage, useVlanTagging, visible, vlanId, walledGardenEnabled, walledGardenRanges, wpaEncryptionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidRequest {\n");
    sb.append("    activeDirectory: ").append(toIndentedString(activeDirectory)).append("\n");
    sb.append("    adultContentFilteringEnabled: ").append(toIndentedString(adultContentFilteringEnabled)).append("\n");
    sb.append("    apTagsAndVlanIds: ").append(toIndentedString(apTagsAndVlanIds)).append("\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    availabilityTags: ").append(toIndentedString(availabilityTags)).append("\n");
    sb.append("    availableOnAllAps: ").append(toIndentedString(availableOnAllAps)).append("\n");
    sb.append("    bandSelection: ").append(toIndentedString(bandSelection)).append("\n");
    sb.append("    concentratorNetworkId: ").append(toIndentedString(concentratorNetworkId)).append("\n");
    sb.append("    defaultVlanId: ").append(toIndentedString(defaultVlanId)).append("\n");
    sb.append("    disassociateClientsOnVpnFailover: ").append(toIndentedString(disassociateClientsOnVpnFailover)).append("\n");
    sb.append("    dnsRewrite: ").append(toIndentedString(dnsRewrite)).append("\n");
    sb.append("    dot11r: ").append(toIndentedString(dot11r)).append("\n");
    sb.append("    dot11w: ").append(toIndentedString(dot11w)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    encryptionMode: ").append(toIndentedString(encryptionMode)).append("\n");
    sb.append("    enterpriseAdminAccess: ").append(toIndentedString(enterpriseAdminAccess)).append("\n");
    sb.append("    gre: ").append(toIndentedString(gre)).append("\n");
    sb.append("    ipAssignmentMode: ").append(toIndentedString(ipAssignmentMode)).append("\n");
    sb.append("    lanIsolationEnabled: ").append(toIndentedString(lanIsolationEnabled)).append("\n");
    sb.append("    ldap: ").append(toIndentedString(ldap)).append("\n");
    sb.append("    localRadius: ").append(toIndentedString(localRadius)).append("\n");
    sb.append("    mandatoryDhcpEnabled: ").append(toIndentedString(mandatoryDhcpEnabled)).append("\n");
    sb.append("    minBitrate: ").append(toIndentedString(minBitrate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oauth: ").append(toIndentedString(oauth)).append("\n");
    sb.append("    perClientBandwidthLimitDown: ").append(toIndentedString(perClientBandwidthLimitDown)).append("\n");
    sb.append("    perClientBandwidthLimitUp: ").append(toIndentedString(perClientBandwidthLimitUp)).append("\n");
    sb.append("    perSsidBandwidthLimitDown: ").append(toIndentedString(perSsidBandwidthLimitDown)).append("\n");
    sb.append("    perSsidBandwidthLimitUp: ").append(toIndentedString(perSsidBandwidthLimitUp)).append("\n");
    sb.append("    psk: ").append(toIndentedString(psk)).append("\n");
    sb.append("    radiusAccountingEnabled: ").append(toIndentedString(radiusAccountingEnabled)).append("\n");
    sb.append("    radiusAccountingInterimInterval: ").append(toIndentedString(radiusAccountingInterimInterval)).append("\n");
    sb.append("    radiusAccountingServers: ").append(toIndentedString(radiusAccountingServers)).append("\n");
    sb.append("    radiusAttributeForGroupPolicies: ").append(toIndentedString(radiusAttributeForGroupPolicies)).append("\n");
    sb.append("    radiusAuthenticationNasId: ").append(toIndentedString(radiusAuthenticationNasId)).append("\n");
    sb.append("    radiusCalledStationId: ").append(toIndentedString(radiusCalledStationId)).append("\n");
    sb.append("    radiusCoaEnabled: ").append(toIndentedString(radiusCoaEnabled)).append("\n");
    sb.append("    radiusFailoverPolicy: ").append(toIndentedString(radiusFailoverPolicy)).append("\n");
    sb.append("    radiusFallbackEnabled: ").append(toIndentedString(radiusFallbackEnabled)).append("\n");
    sb.append("    radiusGuestVlanEnabled: ").append(toIndentedString(radiusGuestVlanEnabled)).append("\n");
    sb.append("    radiusGuestVlanId: ").append(toIndentedString(radiusGuestVlanId)).append("\n");
    sb.append("    radiusLoadBalancingPolicy: ").append(toIndentedString(radiusLoadBalancingPolicy)).append("\n");
    sb.append("    radiusOverride: ").append(toIndentedString(radiusOverride)).append("\n");
    sb.append("    radiusProxyEnabled: ").append(toIndentedString(radiusProxyEnabled)).append("\n");
    sb.append("    radiusServerAttemptsLimit: ").append(toIndentedString(radiusServerAttemptsLimit)).append("\n");
    sb.append("    radiusServerTimeout: ").append(toIndentedString(radiusServerTimeout)).append("\n");
    sb.append("    radiusServers: ").append(toIndentedString(radiusServers)).append("\n");
    sb.append("    radiusTestingEnabled: ").append(toIndentedString(radiusTestingEnabled)).append("\n");
    sb.append("    secondaryConcentratorNetworkId: ").append(toIndentedString(secondaryConcentratorNetworkId)).append("\n");
    sb.append("    speedBurst: ").append(toIndentedString(speedBurst)).append("\n");
    sb.append("    splashGuestSponsorDomains: ").append(toIndentedString(splashGuestSponsorDomains)).append("\n");
    sb.append("    splashPage: ").append(toIndentedString(splashPage)).append("\n");
    sb.append("    useVlanTagging: ").append(toIndentedString(useVlanTagging)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("    walledGardenEnabled: ").append(toIndentedString(walledGardenEnabled)).append("\n");
    sb.append("    walledGardenRanges: ").append(toIndentedString(walledGardenRanges)).append("\n");
    sb.append("    wpaEncryptionMode: ").append(toIndentedString(wpaEncryptionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeDirectory");
    openapiFields.add("adultContentFilteringEnabled");
    openapiFields.add("apTagsAndVlanIds");
    openapiFields.add("authMode");
    openapiFields.add("availabilityTags");
    openapiFields.add("availableOnAllAps");
    openapiFields.add("bandSelection");
    openapiFields.add("concentratorNetworkId");
    openapiFields.add("defaultVlanId");
    openapiFields.add("disassociateClientsOnVpnFailover");
    openapiFields.add("dnsRewrite");
    openapiFields.add("dot11r");
    openapiFields.add("dot11w");
    openapiFields.add("enabled");
    openapiFields.add("encryptionMode");
    openapiFields.add("enterpriseAdminAccess");
    openapiFields.add("gre");
    openapiFields.add("ipAssignmentMode");
    openapiFields.add("lanIsolationEnabled");
    openapiFields.add("ldap");
    openapiFields.add("localRadius");
    openapiFields.add("mandatoryDhcpEnabled");
    openapiFields.add("minBitrate");
    openapiFields.add("name");
    openapiFields.add("oauth");
    openapiFields.add("perClientBandwidthLimitDown");
    openapiFields.add("perClientBandwidthLimitUp");
    openapiFields.add("perSsidBandwidthLimitDown");
    openapiFields.add("perSsidBandwidthLimitUp");
    openapiFields.add("psk");
    openapiFields.add("radiusAccountingEnabled");
    openapiFields.add("radiusAccountingInterimInterval");
    openapiFields.add("radiusAccountingServers");
    openapiFields.add("radiusAttributeForGroupPolicies");
    openapiFields.add("radiusAuthenticationNasId");
    openapiFields.add("radiusCalledStationId");
    openapiFields.add("radiusCoaEnabled");
    openapiFields.add("radiusFailoverPolicy");
    openapiFields.add("radiusFallbackEnabled");
    openapiFields.add("radiusGuestVlanEnabled");
    openapiFields.add("radiusGuestVlanId");
    openapiFields.add("radiusLoadBalancingPolicy");
    openapiFields.add("radiusOverride");
    openapiFields.add("radiusProxyEnabled");
    openapiFields.add("radiusServerAttemptsLimit");
    openapiFields.add("radiusServerTimeout");
    openapiFields.add("radiusServers");
    openapiFields.add("radiusTestingEnabled");
    openapiFields.add("secondaryConcentratorNetworkId");
    openapiFields.add("speedBurst");
    openapiFields.add("splashGuestSponsorDomains");
    openapiFields.add("splashPage");
    openapiFields.add("useVlanTagging");
    openapiFields.add("visible");
    openapiFields.add("vlanId");
    openapiFields.add("walledGardenEnabled");
    openapiFields.add("walledGardenRanges");
    openapiFields.add("wpaEncryptionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidRequest is not found in the empty JSON string", UpdateNetworkWirelessSsidRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activeDirectory`
      if (jsonObj.get("activeDirectory") != null && !jsonObj.get("activeDirectory").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestActiveDirectory.validateJsonElement(jsonObj.get("activeDirectory"));
      }
      if (jsonObj.get("apTagsAndVlanIds") != null && !jsonObj.get("apTagsAndVlanIds").isJsonNull()) {
        JsonArray jsonArrayapTagsAndVlanIds = jsonObj.getAsJsonArray("apTagsAndVlanIds");
        if (jsonArrayapTagsAndVlanIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apTagsAndVlanIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apTagsAndVlanIds` to be an array in the JSON string but got `%s`", jsonObj.get("apTagsAndVlanIds").toString()));
          }

          // validate the optional field `apTagsAndVlanIds` (array)
          for (int i = 0; i < jsonArrayapTagsAndVlanIds.size(); i++) {
            UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner.validateJsonElement(jsonArrayapTagsAndVlanIds.get(i));
          };
        }
      }
      if ((jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) && !jsonObj.get("authMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authMode").toString()));
      }
      // validate the optional field `authMode`
      if (jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) {
        AuthModeEnum.validateJsonElement(jsonObj.get("authMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availabilityTags") != null && !jsonObj.get("availabilityTags").isJsonNull() && !jsonObj.get("availabilityTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityTags` to be an array in the JSON string but got `%s`", jsonObj.get("availabilityTags").toString()));
      }
      if ((jsonObj.get("bandSelection") != null && !jsonObj.get("bandSelection").isJsonNull()) && !jsonObj.get("bandSelection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandSelection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandSelection").toString()));
      }
      if ((jsonObj.get("concentratorNetworkId") != null && !jsonObj.get("concentratorNetworkId").isJsonNull()) && !jsonObj.get("concentratorNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concentratorNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concentratorNetworkId").toString()));
      }
      // validate the optional field `dnsRewrite`
      if (jsonObj.get("dnsRewrite") != null && !jsonObj.get("dnsRewrite").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestDnsRewrite.validateJsonElement(jsonObj.get("dnsRewrite"));
      }
      // validate the optional field `dot11r`
      if (jsonObj.get("dot11r") != null && !jsonObj.get("dot11r").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestDot11r.validateJsonElement(jsonObj.get("dot11r"));
      }
      // validate the optional field `dot11w`
      if (jsonObj.get("dot11w") != null && !jsonObj.get("dot11w").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestDot11w.validateJsonElement(jsonObj.get("dot11w"));
      }
      if ((jsonObj.get("encryptionMode") != null && !jsonObj.get("encryptionMode").isJsonNull()) && !jsonObj.get("encryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionMode").toString()));
      }
      // validate the optional field `encryptionMode`
      if (jsonObj.get("encryptionMode") != null && !jsonObj.get("encryptionMode").isJsonNull()) {
        EncryptionModeEnum.validateJsonElement(jsonObj.get("encryptionMode"));
      }
      if ((jsonObj.get("enterpriseAdminAccess") != null && !jsonObj.get("enterpriseAdminAccess").isJsonNull()) && !jsonObj.get("enterpriseAdminAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterpriseAdminAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterpriseAdminAccess").toString()));
      }
      // validate the optional field `enterpriseAdminAccess`
      if (jsonObj.get("enterpriseAdminAccess") != null && !jsonObj.get("enterpriseAdminAccess").isJsonNull()) {
        EnterpriseAdminAccessEnum.validateJsonElement(jsonObj.get("enterpriseAdminAccess"));
      }
      // validate the optional field `gre`
      if (jsonObj.get("gre") != null && !jsonObj.get("gre").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestGre.validateJsonElement(jsonObj.get("gre"));
      }
      if ((jsonObj.get("ipAssignmentMode") != null && !jsonObj.get("ipAssignmentMode").isJsonNull()) && !jsonObj.get("ipAssignmentMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAssignmentMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAssignmentMode").toString()));
      }
      // validate the optional field `ldap`
      if (jsonObj.get("ldap") != null && !jsonObj.get("ldap").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestLdap.validateJsonElement(jsonObj.get("ldap"));
      }
      // validate the optional field `localRadius`
      if (jsonObj.get("localRadius") != null && !jsonObj.get("localRadius").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestLocalRadius.validateJsonElement(jsonObj.get("localRadius"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `oauth`
      if (jsonObj.get("oauth") != null && !jsonObj.get("oauth").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestOauth.validateJsonElement(jsonObj.get("oauth"));
      }
      if ((jsonObj.get("psk") != null && !jsonObj.get("psk").isJsonNull()) && !jsonObj.get("psk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psk").toString()));
      }
      if (jsonObj.get("radiusAccountingServers") != null && !jsonObj.get("radiusAccountingServers").isJsonNull()) {
        JsonArray jsonArrayradiusAccountingServers = jsonObj.getAsJsonArray("radiusAccountingServers");
        if (jsonArrayradiusAccountingServers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("radiusAccountingServers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `radiusAccountingServers` to be an array in the JSON string but got `%s`", jsonObj.get("radiusAccountingServers").toString()));
          }

          // validate the optional field `radiusAccountingServers` (array)
          for (int i = 0; i < jsonArrayradiusAccountingServers.size(); i++) {
            UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner.validateJsonElement(jsonArrayradiusAccountingServers.get(i));
          };
        }
      }
      if ((jsonObj.get("radiusAttributeForGroupPolicies") != null && !jsonObj.get("radiusAttributeForGroupPolicies").isJsonNull()) && !jsonObj.get("radiusAttributeForGroupPolicies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusAttributeForGroupPolicies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusAttributeForGroupPolicies").toString()));
      }
      // validate the optional field `radiusAttributeForGroupPolicies`
      if (jsonObj.get("radiusAttributeForGroupPolicies") != null && !jsonObj.get("radiusAttributeForGroupPolicies").isJsonNull()) {
        RadiusAttributeForGroupPoliciesEnum.validateJsonElement(jsonObj.get("radiusAttributeForGroupPolicies"));
      }
      if ((jsonObj.get("radiusAuthenticationNasId") != null && !jsonObj.get("radiusAuthenticationNasId").isJsonNull()) && !jsonObj.get("radiusAuthenticationNasId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusAuthenticationNasId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusAuthenticationNasId").toString()));
      }
      if ((jsonObj.get("radiusCalledStationId") != null && !jsonObj.get("radiusCalledStationId").isJsonNull()) && !jsonObj.get("radiusCalledStationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusCalledStationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusCalledStationId").toString()));
      }
      if ((jsonObj.get("radiusFailoverPolicy") != null && !jsonObj.get("radiusFailoverPolicy").isJsonNull()) && !jsonObj.get("radiusFailoverPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusFailoverPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusFailoverPolicy").toString()));
      }
      // validate the optional field `radiusFailoverPolicy`
      if (jsonObj.get("radiusFailoverPolicy") != null && !jsonObj.get("radiusFailoverPolicy").isJsonNull()) {
        RadiusFailoverPolicyEnum.validateJsonElement(jsonObj.get("radiusFailoverPolicy"));
      }
      if ((jsonObj.get("radiusLoadBalancingPolicy") != null && !jsonObj.get("radiusLoadBalancingPolicy").isJsonNull()) && !jsonObj.get("radiusLoadBalancingPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusLoadBalancingPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusLoadBalancingPolicy").toString()));
      }
      // validate the optional field `radiusLoadBalancingPolicy`
      if (jsonObj.get("radiusLoadBalancingPolicy") != null && !jsonObj.get("radiusLoadBalancingPolicy").isJsonNull()) {
        RadiusLoadBalancingPolicyEnum.validateJsonElement(jsonObj.get("radiusLoadBalancingPolicy"));
      }
      if (jsonObj.get("radiusServers") != null && !jsonObj.get("radiusServers").isJsonNull()) {
        JsonArray jsonArrayradiusServers = jsonObj.getAsJsonArray("radiusServers");
        if (jsonArrayradiusServers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("radiusServers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `radiusServers` to be an array in the JSON string but got `%s`", jsonObj.get("radiusServers").toString()));
          }

          // validate the optional field `radiusServers` (array)
          for (int i = 0; i < jsonArrayradiusServers.size(); i++) {
            UpdateNetworkWirelessSsidRequestRadiusServersInner.validateJsonElement(jsonArrayradiusServers.get(i));
          };
        }
      }
      if ((jsonObj.get("secondaryConcentratorNetworkId") != null && !jsonObj.get("secondaryConcentratorNetworkId").isJsonNull()) && !jsonObj.get("secondaryConcentratorNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryConcentratorNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryConcentratorNetworkId").toString()));
      }
      // validate the optional field `speedBurst`
      if (jsonObj.get("speedBurst") != null && !jsonObj.get("speedBurst").isJsonNull()) {
        UpdateNetworkWirelessSsidRequestSpeedBurst.validateJsonElement(jsonObj.get("speedBurst"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("splashGuestSponsorDomains") != null && !jsonObj.get("splashGuestSponsorDomains").isJsonNull() && !jsonObj.get("splashGuestSponsorDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `splashGuestSponsorDomains` to be an array in the JSON string but got `%s`", jsonObj.get("splashGuestSponsorDomains").toString()));
      }
      if ((jsonObj.get("splashPage") != null && !jsonObj.get("splashPage").isJsonNull()) && !jsonObj.get("splashPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splashPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splashPage").toString()));
      }
      // validate the optional field `splashPage`
      if (jsonObj.get("splashPage") != null && !jsonObj.get("splashPage").isJsonNull()) {
        SplashPageEnum.validateJsonElement(jsonObj.get("splashPage"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("walledGardenRanges") != null && !jsonObj.get("walledGardenRanges").isJsonNull() && !jsonObj.get("walledGardenRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `walledGardenRanges` to be an array in the JSON string but got `%s`", jsonObj.get("walledGardenRanges").toString()));
      }
      if ((jsonObj.get("wpaEncryptionMode") != null && !jsonObj.get("wpaEncryptionMode").isJsonNull()) && !jsonObj.get("wpaEncryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wpaEncryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wpaEncryptionMode").toString()));
      }
      // validate the optional field `wpaEncryptionMode`
      if (jsonObj.get("wpaEncryptionMode") != null && !jsonObj.get("wpaEncryptionMode").isJsonNull()) {
        WpaEncryptionModeEnum.validateJsonElement(jsonObj.get("wpaEncryptionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidRequest
   */
  public static UpdateNetworkWirelessSsidRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

