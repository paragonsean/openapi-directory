/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication;
import org.openapitools.client.model.UpdateNetworkApplianceSsidRequestRadiusServersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkApplianceSsidRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkApplianceSsidRequest {
  /**
   * The association control method for the SSID (&#39;open&#39;, &#39;psk&#39;, &#39;8021x-meraki&#39; or &#39;8021x-radius&#39;).
   */
  @JsonAdapter(AuthModeEnum.Adapter.class)
  public enum AuthModeEnum {
    _8021X_MERAKI("8021x-meraki"),
    
    _8021X_RADIUS("8021x-radius"),
    
    OPEN("open"),
    
    PSK("psk");

    private String value;

    AuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthModeEnum fromValue(String value) {
      for (AuthModeEnum b : AuthModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_MODE = "authMode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  private AuthModeEnum authMode;

  public static final String SERIALIZED_NAME_DEFAULT_VLAN_ID = "defaultVlanId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VLAN_ID)
  private Integer defaultVlanId;

  public static final String SERIALIZED_NAME_DHCP_ENFORCED_DEAUTHENTICATION = "dhcpEnforcedDeauthentication";
  @SerializedName(SERIALIZED_NAME_DHCP_ENFORCED_DEAUTHENTICATION)
  private UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication dhcpEnforcedDeauthentication;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * The psk encryption mode for the SSID (&#39;wep&#39; or &#39;wpa&#39;). This param is only valid if the authMode is &#39;psk&#39;.
   */
  @JsonAdapter(EncryptionModeEnum.Adapter.class)
  public enum EncryptionModeEnum {
    WEP("wep"),
    
    WPA("wpa");

    private String value;

    EncryptionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionModeEnum fromValue(String value) {
      for (EncryptionModeEnum b : EncryptionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_MODE = "encryptionMode";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_MODE)
  private EncryptionModeEnum encryptionMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PSK = "psk";
  @SerializedName(SERIALIZED_NAME_PSK)
  private String psk;

  public static final String SERIALIZED_NAME_RADIUS_SERVERS = "radiusServers";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVERS)
  private List<UpdateNetworkApplianceSsidRequestRadiusServersInner> radiusServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  /**
   * The types of WPA encryption. (&#39;WPA1 and WPA2&#39;, &#39;WPA2 only&#39;, &#39;WPA3 Transition Mode&#39; or &#39;WPA3 only&#39;). This param is only valid if (1) the authMode is &#39;psk&#39; &amp; the encryptionMode is &#39;wpa&#39; OR (2) the authMode is &#39;8021x-meraki&#39; OR (3) the authMode is &#39;8021x-radius&#39;
   */
  @JsonAdapter(WpaEncryptionModeEnum.Adapter.class)
  public enum WpaEncryptionModeEnum {
    WPA1_AND_WPA2("WPA1 and WPA2"),
    
    WPA2_ONLY("WPA2 only"),
    
    WPA3_TRANSITION_MODE("WPA3 Transition Mode"),
    
    WPA3_ONLY("WPA3 only");

    private String value;

    WpaEncryptionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WpaEncryptionModeEnum fromValue(String value) {
      for (WpaEncryptionModeEnum b : WpaEncryptionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WpaEncryptionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WpaEncryptionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WpaEncryptionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WpaEncryptionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WpaEncryptionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WPA_ENCRYPTION_MODE = "wpaEncryptionMode";
  @SerializedName(SERIALIZED_NAME_WPA_ENCRYPTION_MODE)
  private WpaEncryptionModeEnum wpaEncryptionMode;

  public UpdateNetworkApplianceSsidRequest() {
  }

  public UpdateNetworkApplianceSsidRequest authMode(AuthModeEnum authMode) {
    this.authMode = authMode;
    return this;
  }

  /**
   * The association control method for the SSID (&#39;open&#39;, &#39;psk&#39;, &#39;8021x-meraki&#39; or &#39;8021x-radius&#39;).
   * @return authMode
   */
  @javax.annotation.Nullable
  public AuthModeEnum getAuthMode() {
    return authMode;
  }

  public void setAuthMode(AuthModeEnum authMode) {
    this.authMode = authMode;
  }


  public UpdateNetworkApplianceSsidRequest defaultVlanId(Integer defaultVlanId) {
    this.defaultVlanId = defaultVlanId;
    return this;
  }

  /**
   * The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.
   * @return defaultVlanId
   */
  @javax.annotation.Nullable
  public Integer getDefaultVlanId() {
    return defaultVlanId;
  }

  public void setDefaultVlanId(Integer defaultVlanId) {
    this.defaultVlanId = defaultVlanId;
  }


  public UpdateNetworkApplianceSsidRequest dhcpEnforcedDeauthentication(UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication dhcpEnforcedDeauthentication) {
    this.dhcpEnforcedDeauthentication = dhcpEnforcedDeauthentication;
    return this;
  }

  /**
   * Get dhcpEnforcedDeauthentication
   * @return dhcpEnforcedDeauthentication
   */
  @javax.annotation.Nullable
  public UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication getDhcpEnforcedDeauthentication() {
    return dhcpEnforcedDeauthentication;
  }

  public void setDhcpEnforcedDeauthentication(UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication dhcpEnforcedDeauthentication) {
    this.dhcpEnforcedDeauthentication = dhcpEnforcedDeauthentication;
  }


  public UpdateNetworkApplianceSsidRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the SSID is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateNetworkApplianceSsidRequest encryptionMode(EncryptionModeEnum encryptionMode) {
    this.encryptionMode = encryptionMode;
    return this;
  }

  /**
   * The psk encryption mode for the SSID (&#39;wep&#39; or &#39;wpa&#39;). This param is only valid if the authMode is &#39;psk&#39;.
   * @return encryptionMode
   */
  @javax.annotation.Nullable
  public EncryptionModeEnum getEncryptionMode() {
    return encryptionMode;
  }

  public void setEncryptionMode(EncryptionModeEnum encryptionMode) {
    this.encryptionMode = encryptionMode;
  }


  public UpdateNetworkApplianceSsidRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SSID.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNetworkApplianceSsidRequest psk(String psk) {
    this.psk = psk;
    return this;
  }

  /**
   * The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
   * @return psk
   */
  @javax.annotation.Nullable
  public String getPsk() {
    return psk;
  }

  public void setPsk(String psk) {
    this.psk = psk;
  }


  public UpdateNetworkApplianceSsidRequest radiusServers(List<UpdateNetworkApplianceSsidRequestRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
    return this;
  }

  public UpdateNetworkApplianceSsidRequest addRadiusServersItem(UpdateNetworkApplianceSsidRequestRadiusServersInner radiusServersItem) {
    if (this.radiusServers == null) {
      this.radiusServers = new ArrayList<>();
    }
    this.radiusServers.add(radiusServersItem);
    return this;
  }

  /**
   * The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is &#39;8021x-radius&#39;.
   * @return radiusServers
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkApplianceSsidRequestRadiusServersInner> getRadiusServers() {
    return radiusServers;
  }

  public void setRadiusServers(List<UpdateNetworkApplianceSsidRequestRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
  }


  public UpdateNetworkApplianceSsidRequest visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Boolean indicating whether the MX should advertise or hide this SSID.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public UpdateNetworkApplianceSsidRequest wpaEncryptionMode(WpaEncryptionModeEnum wpaEncryptionMode) {
    this.wpaEncryptionMode = wpaEncryptionMode;
    return this;
  }

  /**
   * The types of WPA encryption. (&#39;WPA1 and WPA2&#39;, &#39;WPA2 only&#39;, &#39;WPA3 Transition Mode&#39; or &#39;WPA3 only&#39;). This param is only valid if (1) the authMode is &#39;psk&#39; &amp; the encryptionMode is &#39;wpa&#39; OR (2) the authMode is &#39;8021x-meraki&#39; OR (3) the authMode is &#39;8021x-radius&#39;
   * @return wpaEncryptionMode
   */
  @javax.annotation.Nullable
  public WpaEncryptionModeEnum getWpaEncryptionMode() {
    return wpaEncryptionMode;
  }

  public void setWpaEncryptionMode(WpaEncryptionModeEnum wpaEncryptionMode) {
    this.wpaEncryptionMode = wpaEncryptionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest = (UpdateNetworkApplianceSsidRequest) o;
    return Objects.equals(this.authMode, updateNetworkApplianceSsidRequest.authMode) &&
        Objects.equals(this.defaultVlanId, updateNetworkApplianceSsidRequest.defaultVlanId) &&
        Objects.equals(this.dhcpEnforcedDeauthentication, updateNetworkApplianceSsidRequest.dhcpEnforcedDeauthentication) &&
        Objects.equals(this.enabled, updateNetworkApplianceSsidRequest.enabled) &&
        Objects.equals(this.encryptionMode, updateNetworkApplianceSsidRequest.encryptionMode) &&
        Objects.equals(this.name, updateNetworkApplianceSsidRequest.name) &&
        Objects.equals(this.psk, updateNetworkApplianceSsidRequest.psk) &&
        Objects.equals(this.radiusServers, updateNetworkApplianceSsidRequest.radiusServers) &&
        Objects.equals(this.visible, updateNetworkApplianceSsidRequest.visible) &&
        Objects.equals(this.wpaEncryptionMode, updateNetworkApplianceSsidRequest.wpaEncryptionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMode, defaultVlanId, dhcpEnforcedDeauthentication, enabled, encryptionMode, name, psk, radiusServers, visible, wpaEncryptionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkApplianceSsidRequest {\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    defaultVlanId: ").append(toIndentedString(defaultVlanId)).append("\n");
    sb.append("    dhcpEnforcedDeauthentication: ").append(toIndentedString(dhcpEnforcedDeauthentication)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    encryptionMode: ").append(toIndentedString(encryptionMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    psk: ").append(toIndentedString(psk)).append("\n");
    sb.append("    radiusServers: ").append(toIndentedString(radiusServers)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    wpaEncryptionMode: ").append(toIndentedString(wpaEncryptionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authMode");
    openapiFields.add("defaultVlanId");
    openapiFields.add("dhcpEnforcedDeauthentication");
    openapiFields.add("enabled");
    openapiFields.add("encryptionMode");
    openapiFields.add("name");
    openapiFields.add("psk");
    openapiFields.add("radiusServers");
    openapiFields.add("visible");
    openapiFields.add("wpaEncryptionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkApplianceSsidRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkApplianceSsidRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkApplianceSsidRequest is not found in the empty JSON string", UpdateNetworkApplianceSsidRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkApplianceSsidRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkApplianceSsidRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) && !jsonObj.get("authMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authMode").toString()));
      }
      // validate the optional field `authMode`
      if (jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) {
        AuthModeEnum.validateJsonElement(jsonObj.get("authMode"));
      }
      // validate the optional field `dhcpEnforcedDeauthentication`
      if (jsonObj.get("dhcpEnforcedDeauthentication") != null && !jsonObj.get("dhcpEnforcedDeauthentication").isJsonNull()) {
        UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication.validateJsonElement(jsonObj.get("dhcpEnforcedDeauthentication"));
      }
      if ((jsonObj.get("encryptionMode") != null && !jsonObj.get("encryptionMode").isJsonNull()) && !jsonObj.get("encryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionMode").toString()));
      }
      // validate the optional field `encryptionMode`
      if (jsonObj.get("encryptionMode") != null && !jsonObj.get("encryptionMode").isJsonNull()) {
        EncryptionModeEnum.validateJsonElement(jsonObj.get("encryptionMode"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("psk") != null && !jsonObj.get("psk").isJsonNull()) && !jsonObj.get("psk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psk").toString()));
      }
      if (jsonObj.get("radiusServers") != null && !jsonObj.get("radiusServers").isJsonNull()) {
        JsonArray jsonArrayradiusServers = jsonObj.getAsJsonArray("radiusServers");
        if (jsonArrayradiusServers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("radiusServers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `radiusServers` to be an array in the JSON string but got `%s`", jsonObj.get("radiusServers").toString()));
          }

          // validate the optional field `radiusServers` (array)
          for (int i = 0; i < jsonArrayradiusServers.size(); i++) {
            UpdateNetworkApplianceSsidRequestRadiusServersInner.validateJsonElement(jsonArrayradiusServers.get(i));
          };
        }
      }
      if ((jsonObj.get("wpaEncryptionMode") != null && !jsonObj.get("wpaEncryptionMode").isJsonNull()) && !jsonObj.get("wpaEncryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wpaEncryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wpaEncryptionMode").toString()));
      }
      // validate the optional field `wpaEncryptionMode`
      if (jsonObj.get("wpaEncryptionMode") != null && !jsonObj.get("wpaEncryptionMode").isJsonNull()) {
        WpaEncryptionModeEnum.validateJsonElement(jsonObj.get("wpaEncryptionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkApplianceSsidRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkApplianceSsidRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkApplianceSsidRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkApplianceSsidRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkApplianceSsidRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkApplianceSsidRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkApplianceSsidRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkApplianceSsidRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkApplianceSsidRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkApplianceSsidRequest
   */
  public static UpdateNetworkApplianceSsidRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkApplianceSsidRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkApplianceSsidRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

