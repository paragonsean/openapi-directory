/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClaimIntoOrganizationInventoryRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetOrganizationInventoryDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner;
import org.openapitools.client.model.ReleaseFromOrganizationInventoryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for claimIntoOrganizationInventory_1
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimIntoOrganizationInventory_1Call(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimIntoOrganizationInventoryRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/claim"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimIntoOrganizationInventory_1ValidateBeforeCall(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling claimIntoOrganizationInventory_1(Async)");
        }

        return claimIntoOrganizationInventory_1Call(organizationId, claimIntoOrganizationInventoryRequest, _callback);

    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object claimIntoOrganizationInventory_1(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = claimIntoOrganizationInventory_1WithHttpInfo(organizationId, claimIntoOrganizationInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> claimIntoOrganizationInventory_1WithHttpInfo(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = claimIntoOrganizationInventory_1ValidateBeforeCall(organizationId, claimIntoOrganizationInventoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory (asynchronously)
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimIntoOrganizationInventory_1Async(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimIntoOrganizationInventory_1ValidateBeforeCall(organizationId, claimIntoOrganizationInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, _callback);

    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest);
        return localVarResp.getData();
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch (asynchronously)
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringImport_1
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_1Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringImportRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_1ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_1(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringImportRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_1(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringImport_1Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, _callback);

    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @return List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner> createOrganizationInventoryOnboardingCloudMonitoringImport_1(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest) throws ApiException {
        ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringImport_1WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest);
        return localVarResp.getData();
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @return ApiResponse&lt;List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> createOrganizationInventoryOnboardingCloudMonitoringImport_1WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringImport_1ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, null);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring. (asynchronously)
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_1Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringImport_1ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringPrepare_1
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_1Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_1ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_1(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_1(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringPrepare_1Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, _callback);

    }

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @return List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner> createOrganizationInventoryOnboardingCloudMonitoringPrepare_1(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) throws ApiException {
        ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringPrepare_1WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest);
        return localVarResp.getData();
    }

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @return ApiResponse&lt;List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> createOrganizationInventoryOnboardingCloudMonitoringPrepare_1WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringPrepare_1ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, null);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiates or updates an import session (asynchronously)
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_1Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringPrepare_1ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryDevice_1
     * @param organizationId  (required)
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevice_1Call(String organizationId, String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/devices/{serial}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryDevice_1ValidateBeforeCall(String organizationId, String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevice_1(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getOrganizationInventoryDevice_1(Async)");
        }

        return getOrganizationInventoryDevice_1Call(organizationId, serial, _callback);

    }

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param organizationId  (required)
     * @param serial  (required)
     * @return GetOrganizationInventoryDevices200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationInventoryDevices200ResponseInner getOrganizationInventoryDevice_1(String organizationId, String serial) throws ApiException {
        ApiResponse<GetOrganizationInventoryDevices200ResponseInner> localVarResp = getOrganizationInventoryDevice_1WithHttpInfo(organizationId, serial);
        return localVarResp.getData();
    }

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param organizationId  (required)
     * @param serial  (required)
     * @return ApiResponse&lt;GetOrganizationInventoryDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationInventoryDevices200ResponseInner> getOrganizationInventoryDevice_1WithHttpInfo(String organizationId, String serial) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryDevice_1ValidateBeforeCall(organizationId, serial, null);
        Type localVarReturnType = new TypeToken<GetOrganizationInventoryDevices200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single device from the inventory of an organization (asynchronously)
     * Return a single device from the inventory of an organization
     * @param organizationId  (required)
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevice_1Async(String organizationId, String serial, final ApiCallback<GetOrganizationInventoryDevices200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryDevice_1ValidateBeforeCall(organizationId, serial, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationInventoryDevices200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryDevices_1
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevices_1Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/devices"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (usedState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedState", usedState));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (models != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "models", models));
        }

        if (orderNumbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "orderNumbers", orderNumbers));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productTypes", productTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryDevices_1ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevices_1(Async)");
        }

        return getOrganizationInventoryDevices_1Call(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes, _callback);

    }

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @return List&lt;GetOrganizationInventoryDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationInventoryDevices200ResponseInner> getOrganizationInventoryDevices_1(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes) throws ApiException {
        ApiResponse<List<GetOrganizationInventoryDevices200ResponseInner>> localVarResp = getOrganizationInventoryDevices_1WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes);
        return localVarResp.getData();
    }

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationInventoryDevices200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInventoryDevices200ResponseInner>> getOrganizationInventoryDevices_1WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryDevices_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryDevices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the device inventory for an organization (asynchronously)
     * Return the device inventory for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevices_1Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes, final ApiCallback<List<GetOrganizationInventoryDevices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryDevices_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryDevices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringImports_1
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_1Call(String organizationId, List<String> importIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (importIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "importIds", importIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_1ValidateBeforeCall(String organizationId, List<String> importIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_1(Async)");
        }

        // verify the required parameter 'importIds' is set
        if (importIds == null) {
            throw new ApiException("Missing the required parameter 'importIds' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_1(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringImports_1Call(organizationId, importIds, _callback);

    }

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @return List&lt;GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner> getOrganizationInventoryOnboardingCloudMonitoringImports_1(String organizationId, List<String> importIds) throws ApiException {
        ApiResponse<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringImports_1WithHttpInfo(organizationId, importIds);
        return localVarResp.getData();
    }

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> getOrganizationInventoryOnboardingCloudMonitoringImports_1WithHttpInfo(String organizationId, List<String> importIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringImports_1ValidateBeforeCall(organizationId, importIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check the status of a committed Import operation (asynchronously)
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_1Async(String organizationId, List<String> importIds, final ApiCallback<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringImports_1ValidateBeforeCall(organizationId, importIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringNetworks_1
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_1Call(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceType", deviceType));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_1ValidateBeforeCall(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_1(Async)");
        }

        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_1(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringNetworks_1Call(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetwork200Response> getOrganizationInventoryOnboardingCloudMonitoringNetworks_1(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetwork200Response>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringNetworks_1WithHttpInfo(organizationId, deviceType, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetwork200Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetwork200Response>> getOrganizationInventoryOnboardingCloudMonitoringNetworks_1WithHttpInfo(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_1ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device (asynchronously)
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_1Async(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetwork200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_1ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseFromOrganizationInventory_1
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseFromOrganizationInventory_1Call(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releaseFromOrganizationInventoryRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/release"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseFromOrganizationInventory_1ValidateBeforeCall(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling releaseFromOrganizationInventory_1(Async)");
        }

        return releaseFromOrganizationInventory_1Call(organizationId, releaseFromOrganizationInventoryRequest, _callback);

    }

    /**
     * Release a list of claimed devices from an organization.
     * Release a list of claimed devices from an organization.
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object releaseFromOrganizationInventory_1(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = releaseFromOrganizationInventory_1WithHttpInfo(organizationId, releaseFromOrganizationInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * Release a list of claimed devices from an organization.
     * Release a list of claimed devices from an organization.
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> releaseFromOrganizationInventory_1WithHttpInfo(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = releaseFromOrganizationInventory_1ValidateBeforeCall(organizationId, releaseFromOrganizationInventoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Release a list of claimed devices from an organization. (asynchronously)
     * Release a list of claimed devices from an organization.
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseFromOrganizationInventory_1Async(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseFromOrganizationInventory_1ValidateBeforeCall(organizationId, releaseFromOrganizationInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
