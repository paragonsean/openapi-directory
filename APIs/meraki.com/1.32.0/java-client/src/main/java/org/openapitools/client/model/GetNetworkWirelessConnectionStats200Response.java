/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkWirelessConnectionStats200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessConnectionStats200Response {
  public static final String SERIALIZED_NAME_ASSOC = "assoc";
  @SerializedName(SERIALIZED_NAME_ASSOC)
  private Integer assoc;

  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private Integer auth;

  public static final String SERIALIZED_NAME_DHCP = "dhcp";
  @SerializedName(SERIALIZED_NAME_DHCP)
  private Integer dhcp;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private Integer dns;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Integer success;

  public GetNetworkWirelessConnectionStats200Response() {
  }

  public GetNetworkWirelessConnectionStats200Response assoc(Integer assoc) {
    this.assoc = assoc;
    return this;
  }

  /**
   * The number of failed association attempts
   * @return assoc
   */
  @javax.annotation.Nullable
  public Integer getAssoc() {
    return assoc;
  }

  public void setAssoc(Integer assoc) {
    this.assoc = assoc;
  }


  public GetNetworkWirelessConnectionStats200Response auth(Integer auth) {
    this.auth = auth;
    return this;
  }

  /**
   * The number of failed authentication attempts
   * @return auth
   */
  @javax.annotation.Nullable
  public Integer getAuth() {
    return auth;
  }

  public void setAuth(Integer auth) {
    this.auth = auth;
  }


  public GetNetworkWirelessConnectionStats200Response dhcp(Integer dhcp) {
    this.dhcp = dhcp;
    return this;
  }

  /**
   * The number of failed DHCP attempts
   * @return dhcp
   */
  @javax.annotation.Nullable
  public Integer getDhcp() {
    return dhcp;
  }

  public void setDhcp(Integer dhcp) {
    this.dhcp = dhcp;
  }


  public GetNetworkWirelessConnectionStats200Response dns(Integer dns) {
    this.dns = dns;
    return this;
  }

  /**
   * The number of failed DNS attempts
   * @return dns
   */
  @javax.annotation.Nullable
  public Integer getDns() {
    return dns;
  }

  public void setDns(Integer dns) {
    this.dns = dns;
  }


  public GetNetworkWirelessConnectionStats200Response success(Integer success) {
    this.success = success;
    return this;
  }

  /**
   * The number of successful connection attempts
   * @return success
   */
  @javax.annotation.Nullable
  public Integer getSuccess() {
    return success;
  }

  public void setSuccess(Integer success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessConnectionStats200Response getNetworkWirelessConnectionStats200Response = (GetNetworkWirelessConnectionStats200Response) o;
    return Objects.equals(this.assoc, getNetworkWirelessConnectionStats200Response.assoc) &&
        Objects.equals(this.auth, getNetworkWirelessConnectionStats200Response.auth) &&
        Objects.equals(this.dhcp, getNetworkWirelessConnectionStats200Response.dhcp) &&
        Objects.equals(this.dns, getNetworkWirelessConnectionStats200Response.dns) &&
        Objects.equals(this.success, getNetworkWirelessConnectionStats200Response.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assoc, auth, dhcp, dns, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessConnectionStats200Response {\n");
    sb.append("    assoc: ").append(toIndentedString(assoc)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    dhcp: ").append(toIndentedString(dhcp)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assoc");
    openapiFields.add("auth");
    openapiFields.add("dhcp");
    openapiFields.add("dns");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessConnectionStats200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessConnectionStats200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessConnectionStats200Response is not found in the empty JSON string", GetNetworkWirelessConnectionStats200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessConnectionStats200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessConnectionStats200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessConnectionStats200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessConnectionStats200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessConnectionStats200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessConnectionStats200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessConnectionStats200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessConnectionStats200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessConnectionStats200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessConnectionStats200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessConnectionStats200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessConnectionStats200Response
   */
  public static GetNetworkWirelessConnectionStats200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessConnectionStats200Response.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessConnectionStats200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

