/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestFailoverAndFailback;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest {
  public static final String SERIALIZED_NAME_ACTIVE_ACTIVE_AUTO_VPN_ENABLED = "activeActiveAutoVpnEnabled";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ACTIVE_AUTO_VPN_ENABLED)
  private Boolean activeActiveAutoVpnEnabled;

  /**
   * The default uplink. Must be one of: &#39;wan1&#39; or &#39;wan2&#39;
   */
  @JsonAdapter(DefaultUplinkEnum.Adapter.class)
  public enum DefaultUplinkEnum {
    WAN1("wan1"),
    
    WAN2("wan2");

    private String value;

    DefaultUplinkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultUplinkEnum fromValue(String value) {
      for (DefaultUplinkEnum b : DefaultUplinkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultUplinkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultUplinkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultUplinkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultUplinkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultUplinkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_UPLINK = "defaultUplink";
  @SerializedName(SERIALIZED_NAME_DEFAULT_UPLINK)
  private DefaultUplinkEnum defaultUplink;

  public static final String SERIALIZED_NAME_FAILOVER_AND_FAILBACK = "failoverAndFailback";
  @SerializedName(SERIALIZED_NAME_FAILOVER_AND_FAILBACK)
  private UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestFailoverAndFailback failoverAndFailback;

  public static final String SERIALIZED_NAME_LOAD_BALANCING_ENABLED = "loadBalancingEnabled";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_ENABLED)
  private Boolean loadBalancingEnabled;

  public static final String SERIALIZED_NAME_VPN_TRAFFIC_UPLINK_PREFERENCES = "vpnTrafficUplinkPreferences";
  @SerializedName(SERIALIZED_NAME_VPN_TRAFFIC_UPLINK_PREFERENCES)
  private List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner> vpnTrafficUplinkPreferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAN_TRAFFIC_UPLINK_PREFERENCES = "wanTrafficUplinkPreferences";
  @SerializedName(SERIALIZED_NAME_WAN_TRAFFIC_UPLINK_PREFERENCES)
  private List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner> wanTrafficUplinkPreferences = new ArrayList<>();

  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest() {
  }

  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest activeActiveAutoVpnEnabled(Boolean activeActiveAutoVpnEnabled) {
    this.activeActiveAutoVpnEnabled = activeActiveAutoVpnEnabled;
    return this;
  }

  /**
   * Toggle for enabling or disabling active-active AutoVPN
   * @return activeActiveAutoVpnEnabled
   */
  @javax.annotation.Nullable
  public Boolean getActiveActiveAutoVpnEnabled() {
    return activeActiveAutoVpnEnabled;
  }

  public void setActiveActiveAutoVpnEnabled(Boolean activeActiveAutoVpnEnabled) {
    this.activeActiveAutoVpnEnabled = activeActiveAutoVpnEnabled;
  }


  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest defaultUplink(DefaultUplinkEnum defaultUplink) {
    this.defaultUplink = defaultUplink;
    return this;
  }

  /**
   * The default uplink. Must be one of: &#39;wan1&#39; or &#39;wan2&#39;
   * @return defaultUplink
   */
  @javax.annotation.Nullable
  public DefaultUplinkEnum getDefaultUplink() {
    return defaultUplink;
  }

  public void setDefaultUplink(DefaultUplinkEnum defaultUplink) {
    this.defaultUplink = defaultUplink;
  }


  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest failoverAndFailback(UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestFailoverAndFailback failoverAndFailback) {
    this.failoverAndFailback = failoverAndFailback;
    return this;
  }

  /**
   * Get failoverAndFailback
   * @return failoverAndFailback
   */
  @javax.annotation.Nullable
  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestFailoverAndFailback getFailoverAndFailback() {
    return failoverAndFailback;
  }

  public void setFailoverAndFailback(UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestFailoverAndFailback failoverAndFailback) {
    this.failoverAndFailback = failoverAndFailback;
  }


  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest loadBalancingEnabled(Boolean loadBalancingEnabled) {
    this.loadBalancingEnabled = loadBalancingEnabled;
    return this;
  }

  /**
   * Toggle for enabling or disabling load balancing
   * @return loadBalancingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLoadBalancingEnabled() {
    return loadBalancingEnabled;
  }

  public void setLoadBalancingEnabled(Boolean loadBalancingEnabled) {
    this.loadBalancingEnabled = loadBalancingEnabled;
  }


  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest vpnTrafficUplinkPreferences(List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner> vpnTrafficUplinkPreferences) {
    this.vpnTrafficUplinkPreferences = vpnTrafficUplinkPreferences;
    return this;
  }

  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest addVpnTrafficUplinkPreferencesItem(UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner vpnTrafficUplinkPreferencesItem) {
    if (this.vpnTrafficUplinkPreferences == null) {
      this.vpnTrafficUplinkPreferences = new ArrayList<>();
    }
    this.vpnTrafficUplinkPreferences.add(vpnTrafficUplinkPreferencesItem);
    return this;
  }

  /**
   * Array of uplink preference rules for VPN traffic
   * @return vpnTrafficUplinkPreferences
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner> getVpnTrafficUplinkPreferences() {
    return vpnTrafficUplinkPreferences;
  }

  public void setVpnTrafficUplinkPreferences(List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner> vpnTrafficUplinkPreferences) {
    this.vpnTrafficUplinkPreferences = vpnTrafficUplinkPreferences;
  }


  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest wanTrafficUplinkPreferences(List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner> wanTrafficUplinkPreferences) {
    this.wanTrafficUplinkPreferences = wanTrafficUplinkPreferences;
    return this;
  }

  public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest addWanTrafficUplinkPreferencesItem(UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner wanTrafficUplinkPreferencesItem) {
    if (this.wanTrafficUplinkPreferences == null) {
      this.wanTrafficUplinkPreferences = new ArrayList<>();
    }
    this.wanTrafficUplinkPreferences.add(wanTrafficUplinkPreferencesItem);
    return this;
  }

  /**
   * Array of uplink preference rules for WAN traffic
   * @return wanTrafficUplinkPreferences
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner> getWanTrafficUplinkPreferences() {
    return wanTrafficUplinkPreferences;
  }

  public void setWanTrafficUplinkPreferences(List<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner> wanTrafficUplinkPreferences) {
    this.wanTrafficUplinkPreferences = wanTrafficUplinkPreferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest = (UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest) o;
    return Objects.equals(this.activeActiveAutoVpnEnabled, updateNetworkApplianceTrafficShapingUplinkSelectionRequest.activeActiveAutoVpnEnabled) &&
        Objects.equals(this.defaultUplink, updateNetworkApplianceTrafficShapingUplinkSelectionRequest.defaultUplink) &&
        Objects.equals(this.failoverAndFailback, updateNetworkApplianceTrafficShapingUplinkSelectionRequest.failoverAndFailback) &&
        Objects.equals(this.loadBalancingEnabled, updateNetworkApplianceTrafficShapingUplinkSelectionRequest.loadBalancingEnabled) &&
        Objects.equals(this.vpnTrafficUplinkPreferences, updateNetworkApplianceTrafficShapingUplinkSelectionRequest.vpnTrafficUplinkPreferences) &&
        Objects.equals(this.wanTrafficUplinkPreferences, updateNetworkApplianceTrafficShapingUplinkSelectionRequest.wanTrafficUplinkPreferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeActiveAutoVpnEnabled, defaultUplink, failoverAndFailback, loadBalancingEnabled, vpnTrafficUplinkPreferences, wanTrafficUplinkPreferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest {\n");
    sb.append("    activeActiveAutoVpnEnabled: ").append(toIndentedString(activeActiveAutoVpnEnabled)).append("\n");
    sb.append("    defaultUplink: ").append(toIndentedString(defaultUplink)).append("\n");
    sb.append("    failoverAndFailback: ").append(toIndentedString(failoverAndFailback)).append("\n");
    sb.append("    loadBalancingEnabled: ").append(toIndentedString(loadBalancingEnabled)).append("\n");
    sb.append("    vpnTrafficUplinkPreferences: ").append(toIndentedString(vpnTrafficUplinkPreferences)).append("\n");
    sb.append("    wanTrafficUplinkPreferences: ").append(toIndentedString(wanTrafficUplinkPreferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeActiveAutoVpnEnabled");
    openapiFields.add("defaultUplink");
    openapiFields.add("failoverAndFailback");
    openapiFields.add("loadBalancingEnabled");
    openapiFields.add("vpnTrafficUplinkPreferences");
    openapiFields.add("wanTrafficUplinkPreferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest is not found in the empty JSON string", UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultUplink") != null && !jsonObj.get("defaultUplink").isJsonNull()) && !jsonObj.get("defaultUplink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultUplink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultUplink").toString()));
      }
      // validate the optional field `defaultUplink`
      if (jsonObj.get("defaultUplink") != null && !jsonObj.get("defaultUplink").isJsonNull()) {
        DefaultUplinkEnum.validateJsonElement(jsonObj.get("defaultUplink"));
      }
      // validate the optional field `failoverAndFailback`
      if (jsonObj.get("failoverAndFailback") != null && !jsonObj.get("failoverAndFailback").isJsonNull()) {
        UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestFailoverAndFailback.validateJsonElement(jsonObj.get("failoverAndFailback"));
      }
      if (jsonObj.get("vpnTrafficUplinkPreferences") != null && !jsonObj.get("vpnTrafficUplinkPreferences").isJsonNull()) {
        JsonArray jsonArrayvpnTrafficUplinkPreferences = jsonObj.getAsJsonArray("vpnTrafficUplinkPreferences");
        if (jsonArrayvpnTrafficUplinkPreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnTrafficUplinkPreferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnTrafficUplinkPreferences` to be an array in the JSON string but got `%s`", jsonObj.get("vpnTrafficUplinkPreferences").toString()));
          }

          // validate the optional field `vpnTrafficUplinkPreferences` (array)
          for (int i = 0; i < jsonArrayvpnTrafficUplinkPreferences.size(); i++) {
            UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.validateJsonElement(jsonArrayvpnTrafficUplinkPreferences.get(i));
          };
        }
      }
      if (jsonObj.get("wanTrafficUplinkPreferences") != null && !jsonObj.get("wanTrafficUplinkPreferences").isJsonNull()) {
        JsonArray jsonArraywanTrafficUplinkPreferences = jsonObj.getAsJsonArray("wanTrafficUplinkPreferences");
        if (jsonArraywanTrafficUplinkPreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("wanTrafficUplinkPreferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `wanTrafficUplinkPreferences` to be an array in the JSON string but got `%s`", jsonObj.get("wanTrafficUplinkPreferences").toString()));
          }

          // validate the optional field `wanTrafficUplinkPreferences` (array)
          for (int i = 0; i < jsonArraywanTrafficUplinkPreferences.size(); i++) {
            UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestWanTrafficUplinkPreferencesInner.validateJsonElement(jsonArraywanTrafficUplinkPreferences.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest
   */
  public static UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

