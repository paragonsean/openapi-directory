/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyAclRequestRulesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateOrganizationAdaptivePolicyAclRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOrganizationAdaptivePolicyAclRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "";

  /**
   * IP version of adpative policy ACL. One of: &#39;any&#39;, &#39;ipv4&#39; or &#39;ipv6&#39;
   */
  @JsonAdapter(IpVersionEnum.Adapter.class)
  public enum IpVersionEnum {
    ANY("any"),
    
    IPV4("ipv4"),
    
    IPV6("ipv6");

    private String value;

    IpVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpVersionEnum fromValue(String value) {
      for (IpVersionEnum b : IpVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IpVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IP_VERSION = "ipVersion";
  @SerializedName(SERIALIZED_NAME_IP_VERSION)
  private IpVersionEnum ipVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<CreateOrganizationAdaptivePolicyAclRequestRulesInner> rules = new ArrayList<>();

  public CreateOrganizationAdaptivePolicyAclRequest() {
  }

  public CreateOrganizationAdaptivePolicyAclRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the adaptive policy ACL
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateOrganizationAdaptivePolicyAclRequest ipVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
    return this;
  }

  /**
   * IP version of adpative policy ACL. One of: &#39;any&#39;, &#39;ipv4&#39; or &#39;ipv6&#39;
   * @return ipVersion
   */
  @javax.annotation.Nonnull
  public IpVersionEnum getIpVersion() {
    return ipVersion;
  }

  public void setIpVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
  }


  public CreateOrganizationAdaptivePolicyAclRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the adaptive policy ACL
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateOrganizationAdaptivePolicyAclRequest rules(List<CreateOrganizationAdaptivePolicyAclRequestRulesInner> rules) {
    this.rules = rules;
    return this;
  }

  public CreateOrganizationAdaptivePolicyAclRequest addRulesItem(CreateOrganizationAdaptivePolicyAclRequestRulesInner rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * An ordered array of the adaptive policy ACL rules.
   * @return rules
   */
  @javax.annotation.Nonnull
  public List<CreateOrganizationAdaptivePolicyAclRequestRulesInner> getRules() {
    return rules;
  }

  public void setRules(List<CreateOrganizationAdaptivePolicyAclRequestRulesInner> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest = (CreateOrganizationAdaptivePolicyAclRequest) o;
    return Objects.equals(this.description, createOrganizationAdaptivePolicyAclRequest.description) &&
        Objects.equals(this.ipVersion, createOrganizationAdaptivePolicyAclRequest.ipVersion) &&
        Objects.equals(this.name, createOrganizationAdaptivePolicyAclRequest.name) &&
        Objects.equals(this.rules, createOrganizationAdaptivePolicyAclRequest.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, ipVersion, name, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOrganizationAdaptivePolicyAclRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("ipVersion");
    openapiFields.add("name");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ipVersion");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("rules");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOrganizationAdaptivePolicyAclRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOrganizationAdaptivePolicyAclRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOrganizationAdaptivePolicyAclRequest is not found in the empty JSON string", CreateOrganizationAdaptivePolicyAclRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOrganizationAdaptivePolicyAclRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOrganizationAdaptivePolicyAclRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOrganizationAdaptivePolicyAclRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("ipVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipVersion").toString()));
      }
      // validate the required field `ipVersion`
      IpVersionEnum.validateJsonElement(jsonObj.get("ipVersion"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
      }

      JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
      // validate the required field `rules` (array)
      for (int i = 0; i < jsonArrayrules.size(); i++) {
        CreateOrganizationAdaptivePolicyAclRequestRulesInner.validateJsonElement(jsonArrayrules.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOrganizationAdaptivePolicyAclRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOrganizationAdaptivePolicyAclRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOrganizationAdaptivePolicyAclRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOrganizationAdaptivePolicyAclRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOrganizationAdaptivePolicyAclRequest>() {
           @Override
           public void write(JsonWriter out, CreateOrganizationAdaptivePolicyAclRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOrganizationAdaptivePolicyAclRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOrganizationAdaptivePolicyAclRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOrganizationAdaptivePolicyAclRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOrganizationAdaptivePolicyAclRequest
   */
  public static CreateOrganizationAdaptivePolicyAclRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOrganizationAdaptivePolicyAclRequest.class);
  }

  /**
   * Convert an instance of CreateOrganizationAdaptivePolicyAclRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

