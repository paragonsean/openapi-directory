/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner> addresses = new ArrayList<>();

  /**
   * Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
   */
  @JsonAdapter(InterfaceEnum.Adapter.class)
  public enum InterfaceEnum {
    CELLULAR("cellular"),
    
    MAN1("man1"),
    
    MAN2("man2"),
    
    WAN1("wan1"),
    
    WAN2("wan2");

    private String value;

    InterfaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterfaceEnum fromValue(String value) {
      for (InterfaceEnum b : InterfaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterfaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterfaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterfaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private InterfaceEnum _interface;

  public GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner() {
  }

  public GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner addresses(List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner> addresses) {
    this.addresses = addresses;
    return this;
  }

  public GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner addAddressesItem(GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Available addresses for the interface.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner> addresses) {
    this.addresses = addresses;
  }


  public GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner _interface(InterfaceEnum _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
   * @return _interface
   */
  @javax.annotation.Nullable
  public InterfaceEnum getInterface() {
    return _interface;
  }

  public void setInterface(InterfaceEnum _interface) {
    this._interface = _interface;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner getOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner = (GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner) o;
    return Objects.equals(this.addresses, getOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.addresses) &&
        Objects.equals(this._interface, getOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner._interface);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, _interface);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("interface");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner is not found in the empty JSON string", GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) && !jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        InterfaceEnum.validateJsonElement(jsonObj.get("interface"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner>() {
           @Override
           public void write(JsonWriter out, GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner
   */
  public static GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.class);
  }

  /**
   * Convert an instance of GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

