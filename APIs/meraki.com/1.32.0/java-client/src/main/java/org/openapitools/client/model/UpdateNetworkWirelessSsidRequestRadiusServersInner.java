/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessSsidRequestRadiusServersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidRequestRadiusServersInner {
  public static final String SERIALIZED_NAME_CA_CERTIFICATE = "caCertificate";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE)
  private String caCertificate;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_OPEN_ROAMING_CERTIFICATE_ID = "openRoamingCertificateId";
  @SerializedName(SERIALIZED_NAME_OPEN_ROAMING_CERTIFICATE_ID)
  private Integer openRoamingCertificateId;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_RADSEC_ENABLED = "radsecEnabled";
  @SerializedName(SERIALIZED_NAME_RADSEC_ENABLED)
  private Boolean radsecEnabled;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public UpdateNetworkWirelessSsidRequestRadiusServersInner() {
  }

  public UpdateNetworkWirelessSsidRequestRadiusServersInner caCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

  /**
   * Certificate used for authorization for the RADSEC Server
   * @return caCertificate
   */
  @javax.annotation.Nullable
  public String getCaCertificate() {
    return caCertificate;
  }

  public void setCaCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
  }


  public UpdateNetworkWirelessSsidRequestRadiusServersInner host(String host) {
    this.host = host;
    return this;
  }

  /**
   * IP address of your RADIUS server
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public UpdateNetworkWirelessSsidRequestRadiusServersInner openRoamingCertificateId(Integer openRoamingCertificateId) {
    this.openRoamingCertificateId = openRoamingCertificateId;
    return this;
  }

  /**
   * The ID of the Openroaming Certificate attached to radius server.
   * @return openRoamingCertificateId
   */
  @javax.annotation.Nullable
  public Integer getOpenRoamingCertificateId() {
    return openRoamingCertificateId;
  }

  public void setOpenRoamingCertificateId(Integer openRoamingCertificateId) {
    this.openRoamingCertificateId = openRoamingCertificateId;
  }


  public UpdateNetworkWirelessSsidRequestRadiusServersInner port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * UDP port the RADIUS server listens on for Access-requests
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public UpdateNetworkWirelessSsidRequestRadiusServersInner radsecEnabled(Boolean radsecEnabled) {
    this.radsecEnabled = radsecEnabled;
    return this;
  }

  /**
   * Use RADSEC (TLS over TCP) to connect to this RADIUS server. Requires radiusProxyEnabled.
   * @return radsecEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRadsecEnabled() {
    return radsecEnabled;
  }

  public void setRadsecEnabled(Boolean radsecEnabled) {
    this.radsecEnabled = radsecEnabled;
  }


  public UpdateNetworkWirelessSsidRequestRadiusServersInner secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * RADIUS client shared secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidRequestRadiusServersInner updateNetworkWirelessSsidRequestRadiusServersInner = (UpdateNetworkWirelessSsidRequestRadiusServersInner) o;
    return Objects.equals(this.caCertificate, updateNetworkWirelessSsidRequestRadiusServersInner.caCertificate) &&
        Objects.equals(this.host, updateNetworkWirelessSsidRequestRadiusServersInner.host) &&
        Objects.equals(this.openRoamingCertificateId, updateNetworkWirelessSsidRequestRadiusServersInner.openRoamingCertificateId) &&
        Objects.equals(this.port, updateNetworkWirelessSsidRequestRadiusServersInner.port) &&
        Objects.equals(this.radsecEnabled, updateNetworkWirelessSsidRequestRadiusServersInner.radsecEnabled) &&
        Objects.equals(this.secret, updateNetworkWirelessSsidRequestRadiusServersInner.secret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caCertificate, host, openRoamingCertificateId, port, radsecEnabled, secret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidRequestRadiusServersInner {\n");
    sb.append("    caCertificate: ").append(toIndentedString(caCertificate)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    openRoamingCertificateId: ").append(toIndentedString(openRoamingCertificateId)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    radsecEnabled: ").append(toIndentedString(radsecEnabled)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caCertificate");
    openapiFields.add("host");
    openapiFields.add("openRoamingCertificateId");
    openapiFields.add("port");
    openapiFields.add("radsecEnabled");
    openapiFields.add("secret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidRequestRadiusServersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidRequestRadiusServersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidRequestRadiusServersInner is not found in the empty JSON string", UpdateNetworkWirelessSsidRequestRadiusServersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidRequestRadiusServersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidRequestRadiusServersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkWirelessSsidRequestRadiusServersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caCertificate") != null && !jsonObj.get("caCertificate").isJsonNull()) && !jsonObj.get("caCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caCertificate").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidRequestRadiusServersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidRequestRadiusServersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidRequestRadiusServersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidRequestRadiusServersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidRequestRadiusServersInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidRequestRadiusServersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidRequestRadiusServersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidRequestRadiusServersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidRequestRadiusServersInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidRequestRadiusServersInner
   */
  public static UpdateNetworkWirelessSsidRequestRadiusServersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidRequestRadiusServersInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidRequestRadiusServersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

