/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Secure Port status of the port.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  /**
   * The current Secure Port status.
   */
  @JsonAdapter(AuthenticationStatusEnum.Adapter.class)
  public enum AuthenticationStatusEnum {
    AUTHENTICATION_FAILURE("Authentication failure"),
    
    AUTHENTICATION_IN_PROGRESS("Authentication in progress"),
    
    AUTHENTICATION_SUCCESSFUL("Authentication successful"),
    
    AUTHENTICATION_TIMED_OUT("Authentication timed out"),
    
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    AuthenticationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationStatusEnum fromValue(String value) {
      for (AuthenticationStatusEnum b : AuthenticationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_STATUS = "authenticationStatus";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_STATUS)
  private AuthenticationStatusEnum authenticationStatus;

  public static final String SERIALIZED_NAME_CONFIG_OVERRIDES = "configOverrides";
  @SerializedName(SERIALIZED_NAME_CONFIG_OVERRIDES)
  private GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides configOverrides;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort() {
  }

  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether Secure Port is currently active for this port.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort authenticationStatus(AuthenticationStatusEnum authenticationStatus) {
    this.authenticationStatus = authenticationStatus;
    return this;
  }

  /**
   * The current Secure Port status.
   * @return authenticationStatus
   */
  @javax.annotation.Nullable
  public AuthenticationStatusEnum getAuthenticationStatus() {
    return authenticationStatus;
  }

  public void setAuthenticationStatus(AuthenticationStatusEnum authenticationStatus) {
    this.authenticationStatus = authenticationStatus;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort configOverrides(GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides configOverrides) {
    this.configOverrides = configOverrides;
    return this;
  }

  /**
   * Get configOverrides
   * @return configOverrides
   */
  @javax.annotation.Nullable
  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides getConfigOverrides() {
    return configOverrides;
  }

  public void setConfigOverrides(GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides configOverrides) {
    this.configOverrides = configOverrides;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether Secure Port is turned on for this port.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort getDeviceSwitchPortsStatuses200ResponseInnerSecurePort = (GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort) o;
    return Objects.equals(this.active, getDeviceSwitchPortsStatuses200ResponseInnerSecurePort.active) &&
        Objects.equals(this.authenticationStatus, getDeviceSwitchPortsStatuses200ResponseInnerSecurePort.authenticationStatus) &&
        Objects.equals(this.configOverrides, getDeviceSwitchPortsStatuses200ResponseInnerSecurePort.configOverrides) &&
        Objects.equals(this.enabled, getDeviceSwitchPortsStatuses200ResponseInnerSecurePort.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, authenticationStatus, configOverrides, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    authenticationStatus: ").append(toIndentedString(authenticationStatus)).append("\n");
    sb.append("    configOverrides: ").append(toIndentedString(configOverrides)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("authenticationStatus");
    openapiFields.add("configOverrides");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort is not found in the empty JSON string", GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationStatus") != null && !jsonObj.get("authenticationStatus").isJsonNull()) && !jsonObj.get("authenticationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationStatus").toString()));
      }
      // validate the optional field `authenticationStatus`
      if (jsonObj.get("authenticationStatus") != null && !jsonObj.get("authenticationStatus").isJsonNull()) {
        AuthenticationStatusEnum.validateJsonElement(jsonObj.get("authenticationStatus"));
      }
      // validate the optional field `configOverrides`
      if (jsonObj.get("configOverrides") != null && !jsonObj.get("configOverrides").isJsonNull()) {
        GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides.validateJsonElement(jsonObj.get("configOverrides"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort>() {
           @Override
           public void write(JsonWriter out, GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
   * @throws IOException if the JSON string is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
   */
  public static GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.class);
  }

  /**
   * Convert an instance of GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

