/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkTrafficAnalysisRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkTrafficAnalysisRequest {
  public static final String SERIALIZED_NAME_CUSTOM_PIE_CHART_ITEMS = "customPieChartItems";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PIE_CHART_ITEMS)
  private List<UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner> customPieChartItems = new ArrayList<>();

  /**
   *     The traffic analysis mode for the network. Can be one of &#39;disabled&#39; (do not collect traffic types),     &#39;basic&#39; (collect generic traffic categories), or &#39;detailed&#39; (collect destination hostnames). 
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    BASIC("basic"),
    
    DETAILED("detailed"),
    
    DISABLED("disabled");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public UpdateNetworkTrafficAnalysisRequest() {
  }

  public UpdateNetworkTrafficAnalysisRequest customPieChartItems(List<UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner> customPieChartItems) {
    this.customPieChartItems = customPieChartItems;
    return this;
  }

  public UpdateNetworkTrafficAnalysisRequest addCustomPieChartItemsItem(UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner customPieChartItemsItem) {
    if (this.customPieChartItems == null) {
      this.customPieChartItems = new ArrayList<>();
    }
    this.customPieChartItems.add(customPieChartItemsItem);
    return this;
  }

  /**
   * The list of items that make up the custom pie chart for traffic reporting.
   * @return customPieChartItems
   */
  @javax.annotation.Nullable
  public List<UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner> getCustomPieChartItems() {
    return customPieChartItems;
  }

  public void setCustomPieChartItems(List<UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner> customPieChartItems) {
    this.customPieChartItems = customPieChartItems;
  }


  public UpdateNetworkTrafficAnalysisRequest mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   *     The traffic analysis mode for the network. Can be one of &#39;disabled&#39; (do not collect traffic types),     &#39;basic&#39; (collect generic traffic categories), or &#39;detailed&#39; (collect destination hostnames). 
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest = (UpdateNetworkTrafficAnalysisRequest) o;
    return Objects.equals(this.customPieChartItems, updateNetworkTrafficAnalysisRequest.customPieChartItems) &&
        Objects.equals(this.mode, updateNetworkTrafficAnalysisRequest.mode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customPieChartItems, mode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkTrafficAnalysisRequest {\n");
    sb.append("    customPieChartItems: ").append(toIndentedString(customPieChartItems)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customPieChartItems");
    openapiFields.add("mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkTrafficAnalysisRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkTrafficAnalysisRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkTrafficAnalysisRequest is not found in the empty JSON string", UpdateNetworkTrafficAnalysisRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkTrafficAnalysisRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkTrafficAnalysisRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customPieChartItems") != null && !jsonObj.get("customPieChartItems").isJsonNull()) {
        JsonArray jsonArraycustomPieChartItems = jsonObj.getAsJsonArray("customPieChartItems");
        if (jsonArraycustomPieChartItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customPieChartItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customPieChartItems` to be an array in the JSON string but got `%s`", jsonObj.get("customPieChartItems").toString()));
          }

          // validate the optional field `customPieChartItems` (array)
          for (int i = 0; i < jsonArraycustomPieChartItems.size(); i++) {
            UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner.validateJsonElement(jsonArraycustomPieChartItems.get(i));
          };
        }
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkTrafficAnalysisRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkTrafficAnalysisRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkTrafficAnalysisRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkTrafficAnalysisRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkTrafficAnalysisRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkTrafficAnalysisRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkTrafficAnalysisRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkTrafficAnalysisRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkTrafficAnalysisRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkTrafficAnalysisRequest
   */
  public static UpdateNetworkTrafficAnalysisRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkTrafficAnalysisRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkTrafficAnalysisRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

