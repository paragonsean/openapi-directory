/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner;
import org.openapitools.client.model.CreateNetworkSwitchAccessPolicyRequestRadiusServersInner;
import org.openapitools.client.model.GetNetworkSwitchAccessPolicies200ResponseInnerDot1x;
import org.openapitools.client.model.GetNetworkSwitchAccessPolicies200ResponseInnerRadius;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkSwitchAccessPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkSwitchAccessPolicyRequest {
  /**
   * Access Type of the policy. Automatically &#39;Hybrid authentication&#39; when hostMode is &#39;Multi-Domain&#39;.
   */
  @JsonAdapter(AccessPolicyTypeEnum.Adapter.class)
  public enum AccessPolicyTypeEnum {
    _802_1X("802.1x"),
    
    HYBRID_AUTHENTICATION("Hybrid authentication"),
    
    MAC_AUTHENTICATION_BYPASS("MAC authentication bypass");

    private String value;

    AccessPolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessPolicyTypeEnum fromValue(String value) {
      for (AccessPolicyTypeEnum b : AccessPolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessPolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessPolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessPolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessPolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessPolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_POLICY_TYPE = "accessPolicyType";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_TYPE)
  private AccessPolicyTypeEnum accessPolicyType;

  public static final String SERIALIZED_NAME_DOT1X = "dot1x";
  @SerializedName(SERIALIZED_NAME_DOT1X)
  private GetNetworkSwitchAccessPolicies200ResponseInnerDot1x dot1x;

  public static final String SERIALIZED_NAME_GUEST_PORT_BOUNCING = "guestPortBouncing";
  @SerializedName(SERIALIZED_NAME_GUEST_PORT_BOUNCING)
  private Boolean guestPortBouncing;

  public static final String SERIALIZED_NAME_GUEST_VLAN_ID = "guestVlanId";
  @SerializedName(SERIALIZED_NAME_GUEST_VLAN_ID)
  private Integer guestVlanId;

  /**
   * Choose the Host Mode for the access policy.
   */
  @JsonAdapter(HostModeEnum.Adapter.class)
  public enum HostModeEnum {
    MULTI_AUTH("Multi-Auth"),
    
    MULTI_DOMAIN("Multi-Domain"),
    
    MULTI_HOST("Multi-Host"),
    
    SINGLE_HOST("Single-Host");

    private String value;

    HostModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostModeEnum fromValue(String value) {
      for (HostModeEnum b : HostModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_MODE = "hostMode";
  @SerializedName(SERIALIZED_NAME_HOST_MODE)
  private HostModeEnum hostMode;

  public static final String SERIALIZED_NAME_INCREASE_ACCESS_SPEED = "increaseAccessSpeed";
  @SerializedName(SERIALIZED_NAME_INCREASE_ACCESS_SPEED)
  private Boolean increaseAccessSpeed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RADIUS = "radius";
  @SerializedName(SERIALIZED_NAME_RADIUS)
  private GetNetworkSwitchAccessPolicies200ResponseInnerRadius radius;

  public static final String SERIALIZED_NAME_RADIUS_ACCOUNTING_ENABLED = "radiusAccountingEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_ACCOUNTING_ENABLED)
  private Boolean radiusAccountingEnabled;

  public static final String SERIALIZED_NAME_RADIUS_ACCOUNTING_SERVERS = "radiusAccountingServers";
  @SerializedName(SERIALIZED_NAME_RADIUS_ACCOUNTING_SERVERS)
  private List<CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner> radiusAccountingServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RADIUS_COA_SUPPORT_ENABLED = "radiusCoaSupportEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_COA_SUPPORT_ENABLED)
  private Boolean radiusCoaSupportEnabled;

  public static final String SERIALIZED_NAME_RADIUS_GROUP_ATTRIBUTE = "radiusGroupAttribute";
  @SerializedName(SERIALIZED_NAME_RADIUS_GROUP_ATTRIBUTE)
  private String radiusGroupAttribute;

  public static final String SERIALIZED_NAME_RADIUS_SERVERS = "radiusServers";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVERS)
  private List<CreateNetworkSwitchAccessPolicyRequestRadiusServersInner> radiusServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RADIUS_TESTING_ENABLED = "radiusTestingEnabled";
  @SerializedName(SERIALIZED_NAME_RADIUS_TESTING_ENABLED)
  private Boolean radiusTestingEnabled;

  public static final String SERIALIZED_NAME_URL_REDIRECT_WALLED_GARDEN_ENABLED = "urlRedirectWalledGardenEnabled";
  @SerializedName(SERIALIZED_NAME_URL_REDIRECT_WALLED_GARDEN_ENABLED)
  private Boolean urlRedirectWalledGardenEnabled;

  public static final String SERIALIZED_NAME_URL_REDIRECT_WALLED_GARDEN_RANGES = "urlRedirectWalledGardenRanges";
  @SerializedName(SERIALIZED_NAME_URL_REDIRECT_WALLED_GARDEN_RANGES)
  private List<String> urlRedirectWalledGardenRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOICE_VLAN_CLIENTS = "voiceVlanClients";
  @SerializedName(SERIALIZED_NAME_VOICE_VLAN_CLIENTS)
  private Boolean voiceVlanClients;

  public CreateNetworkSwitchAccessPolicyRequest() {
  }

  public CreateNetworkSwitchAccessPolicyRequest accessPolicyType(AccessPolicyTypeEnum accessPolicyType) {
    this.accessPolicyType = accessPolicyType;
    return this;
  }

  /**
   * Access Type of the policy. Automatically &#39;Hybrid authentication&#39; when hostMode is &#39;Multi-Domain&#39;.
   * @return accessPolicyType
   */
  @javax.annotation.Nullable
  public AccessPolicyTypeEnum getAccessPolicyType() {
    return accessPolicyType;
  }

  public void setAccessPolicyType(AccessPolicyTypeEnum accessPolicyType) {
    this.accessPolicyType = accessPolicyType;
  }


  public CreateNetworkSwitchAccessPolicyRequest dot1x(GetNetworkSwitchAccessPolicies200ResponseInnerDot1x dot1x) {
    this.dot1x = dot1x;
    return this;
  }

  /**
   * Get dot1x
   * @return dot1x
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchAccessPolicies200ResponseInnerDot1x getDot1x() {
    return dot1x;
  }

  public void setDot1x(GetNetworkSwitchAccessPolicies200ResponseInnerDot1x dot1x) {
    this.dot1x = dot1x;
  }


  public CreateNetworkSwitchAccessPolicyRequest guestPortBouncing(Boolean guestPortBouncing) {
    this.guestPortBouncing = guestPortBouncing;
    return this;
  }

  /**
   * If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
   * @return guestPortBouncing
   */
  @javax.annotation.Nullable
  public Boolean getGuestPortBouncing() {
    return guestPortBouncing;
  }

  public void setGuestPortBouncing(Boolean guestPortBouncing) {
    this.guestPortBouncing = guestPortBouncing;
  }


  public CreateNetworkSwitchAccessPolicyRequest guestVlanId(Integer guestVlanId) {
    this.guestVlanId = guestVlanId;
    return this;
  }

  /**
   * ID for the guest VLAN allow unauthorized devices access to limited network resources
   * @return guestVlanId
   */
  @javax.annotation.Nullable
  public Integer getGuestVlanId() {
    return guestVlanId;
  }

  public void setGuestVlanId(Integer guestVlanId) {
    this.guestVlanId = guestVlanId;
  }


  public CreateNetworkSwitchAccessPolicyRequest hostMode(HostModeEnum hostMode) {
    this.hostMode = hostMode;
    return this;
  }

  /**
   * Choose the Host Mode for the access policy.
   * @return hostMode
   */
  @javax.annotation.Nonnull
  public HostModeEnum getHostMode() {
    return hostMode;
  }

  public void setHostMode(HostModeEnum hostMode) {
    this.hostMode = hostMode;
  }


  public CreateNetworkSwitchAccessPolicyRequest increaseAccessSpeed(Boolean increaseAccessSpeed) {
    this.increaseAccessSpeed = increaseAccessSpeed;
    return this;
  }

  /**
   * Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is &#39;Hybrid Authentication.
   * @return increaseAccessSpeed
   */
  @javax.annotation.Nullable
  public Boolean getIncreaseAccessSpeed() {
    return increaseAccessSpeed;
  }

  public void setIncreaseAccessSpeed(Boolean increaseAccessSpeed) {
    this.increaseAccessSpeed = increaseAccessSpeed;
  }


  public CreateNetworkSwitchAccessPolicyRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the access policy
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkSwitchAccessPolicyRequest radius(GetNetworkSwitchAccessPolicies200ResponseInnerRadius radius) {
    this.radius = radius;
    return this;
  }

  /**
   * Get radius
   * @return radius
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchAccessPolicies200ResponseInnerRadius getRadius() {
    return radius;
  }

  public void setRadius(GetNetworkSwitchAccessPolicies200ResponseInnerRadius radius) {
    this.radius = radius;
  }


  public CreateNetworkSwitchAccessPolicyRequest radiusAccountingEnabled(Boolean radiusAccountingEnabled) {
    this.radiusAccountingEnabled = radiusAccountingEnabled;
    return this;
  }

  /**
   * Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
   * @return radiusAccountingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getRadiusAccountingEnabled() {
    return radiusAccountingEnabled;
  }

  public void setRadiusAccountingEnabled(Boolean radiusAccountingEnabled) {
    this.radiusAccountingEnabled = radiusAccountingEnabled;
  }


  public CreateNetworkSwitchAccessPolicyRequest radiusAccountingServers(List<CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner> radiusAccountingServers) {
    this.radiusAccountingServers = radiusAccountingServers;
    return this;
  }

  public CreateNetworkSwitchAccessPolicyRequest addRadiusAccountingServersItem(CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner radiusAccountingServersItem) {
    if (this.radiusAccountingServers == null) {
      this.radiusAccountingServers = new ArrayList<>();
    }
    this.radiusAccountingServers.add(radiusAccountingServersItem);
    return this;
  }

  /**
   * List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
   * @return radiusAccountingServers
   */
  @javax.annotation.Nullable
  public List<CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner> getRadiusAccountingServers() {
    return radiusAccountingServers;
  }

  public void setRadiusAccountingServers(List<CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner> radiusAccountingServers) {
    this.radiusAccountingServers = radiusAccountingServers;
  }


  public CreateNetworkSwitchAccessPolicyRequest radiusCoaSupportEnabled(Boolean radiusCoaSupportEnabled) {
    this.radiusCoaSupportEnabled = radiusCoaSupportEnabled;
    return this;
  }

  /**
   * Change of authentication for RADIUS re-authentication and disconnection
   * @return radiusCoaSupportEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getRadiusCoaSupportEnabled() {
    return radiusCoaSupportEnabled;
  }

  public void setRadiusCoaSupportEnabled(Boolean radiusCoaSupportEnabled) {
    this.radiusCoaSupportEnabled = radiusCoaSupportEnabled;
  }


  public CreateNetworkSwitchAccessPolicyRequest radiusGroupAttribute(String radiusGroupAttribute) {
    this.radiusGroupAttribute = radiusGroupAttribute;
    return this;
  }

  /**
   * Acceptable values are &#x60;\&quot;\&quot;&#x60; for None, or &#x60;\&quot;11\&quot;&#x60; for Group Policies ACL
   * @return radiusGroupAttribute
   */
  @javax.annotation.Nullable
  public String getRadiusGroupAttribute() {
    return radiusGroupAttribute;
  }

  public void setRadiusGroupAttribute(String radiusGroupAttribute) {
    this.radiusGroupAttribute = radiusGroupAttribute;
  }


  public CreateNetworkSwitchAccessPolicyRequest radiusServers(List<CreateNetworkSwitchAccessPolicyRequestRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
    return this;
  }

  public CreateNetworkSwitchAccessPolicyRequest addRadiusServersItem(CreateNetworkSwitchAccessPolicyRequestRadiusServersInner radiusServersItem) {
    if (this.radiusServers == null) {
      this.radiusServers = new ArrayList<>();
    }
    this.radiusServers.add(radiusServersItem);
    return this;
  }

  /**
   * List of RADIUS servers to require connecting devices to authenticate against before granting network access
   * @return radiusServers
   */
  @javax.annotation.Nonnull
  public List<CreateNetworkSwitchAccessPolicyRequestRadiusServersInner> getRadiusServers() {
    return radiusServers;
  }

  public void setRadiusServers(List<CreateNetworkSwitchAccessPolicyRequestRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
  }


  public CreateNetworkSwitchAccessPolicyRequest radiusTestingEnabled(Boolean radiusTestingEnabled) {
    this.radiusTestingEnabled = radiusTestingEnabled;
    return this;
  }

  /**
   * If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
   * @return radiusTestingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getRadiusTestingEnabled() {
    return radiusTestingEnabled;
  }

  public void setRadiusTestingEnabled(Boolean radiusTestingEnabled) {
    this.radiusTestingEnabled = radiusTestingEnabled;
  }


  public CreateNetworkSwitchAccessPolicyRequest urlRedirectWalledGardenEnabled(Boolean urlRedirectWalledGardenEnabled) {
    this.urlRedirectWalledGardenEnabled = urlRedirectWalledGardenEnabled;
    return this;
  }

  /**
   * Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
   * @return urlRedirectWalledGardenEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getUrlRedirectWalledGardenEnabled() {
    return urlRedirectWalledGardenEnabled;
  }

  public void setUrlRedirectWalledGardenEnabled(Boolean urlRedirectWalledGardenEnabled) {
    this.urlRedirectWalledGardenEnabled = urlRedirectWalledGardenEnabled;
  }


  public CreateNetworkSwitchAccessPolicyRequest urlRedirectWalledGardenRanges(List<String> urlRedirectWalledGardenRanges) {
    this.urlRedirectWalledGardenRanges = urlRedirectWalledGardenRanges;
    return this;
  }

  public CreateNetworkSwitchAccessPolicyRequest addUrlRedirectWalledGardenRangesItem(String urlRedirectWalledGardenRangesItem) {
    if (this.urlRedirectWalledGardenRanges == null) {
      this.urlRedirectWalledGardenRanges = new ArrayList<>();
    }
    this.urlRedirectWalledGardenRanges.add(urlRedirectWalledGardenRangesItem);
    return this;
  }

  /**
   * IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
   * @return urlRedirectWalledGardenRanges
   */
  @javax.annotation.Nullable
  public List<String> getUrlRedirectWalledGardenRanges() {
    return urlRedirectWalledGardenRanges;
  }

  public void setUrlRedirectWalledGardenRanges(List<String> urlRedirectWalledGardenRanges) {
    this.urlRedirectWalledGardenRanges = urlRedirectWalledGardenRanges;
  }


  public CreateNetworkSwitchAccessPolicyRequest voiceVlanClients(Boolean voiceVlanClients) {
    this.voiceVlanClients = voiceVlanClients;
    return this;
  }

  /**
   * CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is &#39;Multi-Domain&#39;.
   * @return voiceVlanClients
   */
  @javax.annotation.Nullable
  public Boolean getVoiceVlanClients() {
    return voiceVlanClients;
  }

  public void setVoiceVlanClients(Boolean voiceVlanClients) {
    this.voiceVlanClients = voiceVlanClients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest = (CreateNetworkSwitchAccessPolicyRequest) o;
    return Objects.equals(this.accessPolicyType, createNetworkSwitchAccessPolicyRequest.accessPolicyType) &&
        Objects.equals(this.dot1x, createNetworkSwitchAccessPolicyRequest.dot1x) &&
        Objects.equals(this.guestPortBouncing, createNetworkSwitchAccessPolicyRequest.guestPortBouncing) &&
        Objects.equals(this.guestVlanId, createNetworkSwitchAccessPolicyRequest.guestVlanId) &&
        Objects.equals(this.hostMode, createNetworkSwitchAccessPolicyRequest.hostMode) &&
        Objects.equals(this.increaseAccessSpeed, createNetworkSwitchAccessPolicyRequest.increaseAccessSpeed) &&
        Objects.equals(this.name, createNetworkSwitchAccessPolicyRequest.name) &&
        Objects.equals(this.radius, createNetworkSwitchAccessPolicyRequest.radius) &&
        Objects.equals(this.radiusAccountingEnabled, createNetworkSwitchAccessPolicyRequest.radiusAccountingEnabled) &&
        Objects.equals(this.radiusAccountingServers, createNetworkSwitchAccessPolicyRequest.radiusAccountingServers) &&
        Objects.equals(this.radiusCoaSupportEnabled, createNetworkSwitchAccessPolicyRequest.radiusCoaSupportEnabled) &&
        Objects.equals(this.radiusGroupAttribute, createNetworkSwitchAccessPolicyRequest.radiusGroupAttribute) &&
        Objects.equals(this.radiusServers, createNetworkSwitchAccessPolicyRequest.radiusServers) &&
        Objects.equals(this.radiusTestingEnabled, createNetworkSwitchAccessPolicyRequest.radiusTestingEnabled) &&
        Objects.equals(this.urlRedirectWalledGardenEnabled, createNetworkSwitchAccessPolicyRequest.urlRedirectWalledGardenEnabled) &&
        Objects.equals(this.urlRedirectWalledGardenRanges, createNetworkSwitchAccessPolicyRequest.urlRedirectWalledGardenRanges) &&
        Objects.equals(this.voiceVlanClients, createNetworkSwitchAccessPolicyRequest.voiceVlanClients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPolicyType, dot1x, guestPortBouncing, guestVlanId, hostMode, increaseAccessSpeed, name, radius, radiusAccountingEnabled, radiusAccountingServers, radiusCoaSupportEnabled, radiusGroupAttribute, radiusServers, radiusTestingEnabled, urlRedirectWalledGardenEnabled, urlRedirectWalledGardenRanges, voiceVlanClients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkSwitchAccessPolicyRequest {\n");
    sb.append("    accessPolicyType: ").append(toIndentedString(accessPolicyType)).append("\n");
    sb.append("    dot1x: ").append(toIndentedString(dot1x)).append("\n");
    sb.append("    guestPortBouncing: ").append(toIndentedString(guestPortBouncing)).append("\n");
    sb.append("    guestVlanId: ").append(toIndentedString(guestVlanId)).append("\n");
    sb.append("    hostMode: ").append(toIndentedString(hostMode)).append("\n");
    sb.append("    increaseAccessSpeed: ").append(toIndentedString(increaseAccessSpeed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    radius: ").append(toIndentedString(radius)).append("\n");
    sb.append("    radiusAccountingEnabled: ").append(toIndentedString(radiusAccountingEnabled)).append("\n");
    sb.append("    radiusAccountingServers: ").append(toIndentedString(radiusAccountingServers)).append("\n");
    sb.append("    radiusCoaSupportEnabled: ").append(toIndentedString(radiusCoaSupportEnabled)).append("\n");
    sb.append("    radiusGroupAttribute: ").append(toIndentedString(radiusGroupAttribute)).append("\n");
    sb.append("    radiusServers: ").append(toIndentedString(radiusServers)).append("\n");
    sb.append("    radiusTestingEnabled: ").append(toIndentedString(radiusTestingEnabled)).append("\n");
    sb.append("    urlRedirectWalledGardenEnabled: ").append(toIndentedString(urlRedirectWalledGardenEnabled)).append("\n");
    sb.append("    urlRedirectWalledGardenRanges: ").append(toIndentedString(urlRedirectWalledGardenRanges)).append("\n");
    sb.append("    voiceVlanClients: ").append(toIndentedString(voiceVlanClients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPolicyType");
    openapiFields.add("dot1x");
    openapiFields.add("guestPortBouncing");
    openapiFields.add("guestVlanId");
    openapiFields.add("hostMode");
    openapiFields.add("increaseAccessSpeed");
    openapiFields.add("name");
    openapiFields.add("radius");
    openapiFields.add("radiusAccountingEnabled");
    openapiFields.add("radiusAccountingServers");
    openapiFields.add("radiusCoaSupportEnabled");
    openapiFields.add("radiusGroupAttribute");
    openapiFields.add("radiusServers");
    openapiFields.add("radiusTestingEnabled");
    openapiFields.add("urlRedirectWalledGardenEnabled");
    openapiFields.add("urlRedirectWalledGardenRanges");
    openapiFields.add("voiceVlanClients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hostMode");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("radiusAccountingEnabled");
    openapiRequiredFields.add("radiusCoaSupportEnabled");
    openapiRequiredFields.add("radiusServers");
    openapiRequiredFields.add("radiusTestingEnabled");
    openapiRequiredFields.add("urlRedirectWalledGardenEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkSwitchAccessPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkSwitchAccessPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkSwitchAccessPolicyRequest is not found in the empty JSON string", CreateNetworkSwitchAccessPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkSwitchAccessPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkSwitchAccessPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNetworkSwitchAccessPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessPolicyType") != null && !jsonObj.get("accessPolicyType").isJsonNull()) && !jsonObj.get("accessPolicyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessPolicyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessPolicyType").toString()));
      }
      // validate the optional field `accessPolicyType`
      if (jsonObj.get("accessPolicyType") != null && !jsonObj.get("accessPolicyType").isJsonNull()) {
        AccessPolicyTypeEnum.validateJsonElement(jsonObj.get("accessPolicyType"));
      }
      // validate the optional field `dot1x`
      if (jsonObj.get("dot1x") != null && !jsonObj.get("dot1x").isJsonNull()) {
        GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.validateJsonElement(jsonObj.get("dot1x"));
      }
      if (!jsonObj.get("hostMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostMode").toString()));
      }
      // validate the required field `hostMode`
      HostModeEnum.validateJsonElement(jsonObj.get("hostMode"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `radius`
      if (jsonObj.get("radius") != null && !jsonObj.get("radius").isJsonNull()) {
        GetNetworkSwitchAccessPolicies200ResponseInnerRadius.validateJsonElement(jsonObj.get("radius"));
      }
      if (jsonObj.get("radiusAccountingServers") != null && !jsonObj.get("radiusAccountingServers").isJsonNull()) {
        JsonArray jsonArrayradiusAccountingServers = jsonObj.getAsJsonArray("radiusAccountingServers");
        if (jsonArrayradiusAccountingServers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("radiusAccountingServers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `radiusAccountingServers` to be an array in the JSON string but got `%s`", jsonObj.get("radiusAccountingServers").toString()));
          }

          // validate the optional field `radiusAccountingServers` (array)
          for (int i = 0; i < jsonArrayradiusAccountingServers.size(); i++) {
            CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner.validateJsonElement(jsonArrayradiusAccountingServers.get(i));
          };
        }
      }
      if ((jsonObj.get("radiusGroupAttribute") != null && !jsonObj.get("radiusGroupAttribute").isJsonNull()) && !jsonObj.get("radiusGroupAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusGroupAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusGroupAttribute").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("radiusServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusServers` to be an array in the JSON string but got `%s`", jsonObj.get("radiusServers").toString()));
      }

      JsonArray jsonArrayradiusServers = jsonObj.getAsJsonArray("radiusServers");
      // validate the required field `radiusServers` (array)
      for (int i = 0; i < jsonArrayradiusServers.size(); i++) {
        CreateNetworkSwitchAccessPolicyRequestRadiusServersInner.validateJsonElement(jsonArrayradiusServers.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("urlRedirectWalledGardenRanges") != null && !jsonObj.get("urlRedirectWalledGardenRanges").isJsonNull() && !jsonObj.get("urlRedirectWalledGardenRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlRedirectWalledGardenRanges` to be an array in the JSON string but got `%s`", jsonObj.get("urlRedirectWalledGardenRanges").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkSwitchAccessPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkSwitchAccessPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkSwitchAccessPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkSwitchAccessPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkSwitchAccessPolicyRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkSwitchAccessPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkSwitchAccessPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkSwitchAccessPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkSwitchAccessPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkSwitchAccessPolicyRequest
   */
  public static CreateNetworkSwitchAccessPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkSwitchAccessPolicyRequest.class);
  }

  /**
   * Convert an instance of CreateNetworkSwitchAccessPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

