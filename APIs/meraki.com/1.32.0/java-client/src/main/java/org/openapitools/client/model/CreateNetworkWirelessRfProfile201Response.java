/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNetworkWirelessRfProfile201ResponseApBandSettings;
import org.openapitools.client.model.CreateNetworkWirelessRfProfile201ResponsePerSsidSettings;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequestFiveGhzSettings;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequestTransmission;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkWirelessRfProfile201Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkWirelessRfProfile201Response {
  public static final String SERIALIZED_NAME_AP_BAND_SETTINGS = "apBandSettings";
  @SerializedName(SERIALIZED_NAME_AP_BAND_SETTINGS)
  private CreateNetworkWirelessRfProfile201ResponseApBandSettings apBandSettings;

  public static final String SERIALIZED_NAME_BAND_SELECTION_TYPE = "bandSelectionType";
  @SerializedName(SERIALIZED_NAME_BAND_SELECTION_TYPE)
  private String bandSelectionType;

  public static final String SERIALIZED_NAME_CLIENT_BALANCING_ENABLED = "clientBalancingEnabled";
  @SerializedName(SERIALIZED_NAME_CLIENT_BALANCING_ENABLED)
  private Boolean clientBalancingEnabled;

  public static final String SERIALIZED_NAME_FIVE_GHZ_SETTINGS = "fiveGhzSettings";
  @SerializedName(SERIALIZED_NAME_FIVE_GHZ_SETTINGS)
  private CreateNetworkWirelessRfProfileRequestFiveGhzSettings fiveGhzSettings;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MIN_BITRATE_TYPE = "minBitrateType";
  @SerializedName(SERIALIZED_NAME_MIN_BITRATE_TYPE)
  private String minBitrateType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_PER_SSID_SETTINGS = "perSsidSettings";
  @SerializedName(SERIALIZED_NAME_PER_SSID_SETTINGS)
  private CreateNetworkWirelessRfProfile201ResponsePerSsidSettings perSsidSettings;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private CreateNetworkWirelessRfProfileRequestTransmission transmission;

  public static final String SERIALIZED_NAME_TWO_FOUR_GHZ_SETTINGS = "twoFourGhzSettings";
  @SerializedName(SERIALIZED_NAME_TWO_FOUR_GHZ_SETTINGS)
  private CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings twoFourGhzSettings;

  public CreateNetworkWirelessRfProfile201Response() {
  }

  public CreateNetworkWirelessRfProfile201Response apBandSettings(CreateNetworkWirelessRfProfile201ResponseApBandSettings apBandSettings) {
    this.apBandSettings = apBandSettings;
    return this;
  }

  /**
   * Get apBandSettings
   * @return apBandSettings
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfile201ResponseApBandSettings getApBandSettings() {
    return apBandSettings;
  }

  public void setApBandSettings(CreateNetworkWirelessRfProfile201ResponseApBandSettings apBandSettings) {
    this.apBandSettings = apBandSettings;
  }


  public CreateNetworkWirelessRfProfile201Response bandSelectionType(String bandSelectionType) {
    this.bandSelectionType = bandSelectionType;
    return this;
  }

  /**
   * Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
   * @return bandSelectionType
   */
  @javax.annotation.Nullable
  public String getBandSelectionType() {
    return bandSelectionType;
  }

  public void setBandSelectionType(String bandSelectionType) {
    this.bandSelectionType = bandSelectionType;
  }


  public CreateNetworkWirelessRfProfile201Response clientBalancingEnabled(Boolean clientBalancingEnabled) {
    this.clientBalancingEnabled = clientBalancingEnabled;
    return this;
  }

  /**
   * Steers client to best available access point. Can be either true or false. Defaults to true.
   * @return clientBalancingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClientBalancingEnabled() {
    return clientBalancingEnabled;
  }

  public void setClientBalancingEnabled(Boolean clientBalancingEnabled) {
    this.clientBalancingEnabled = clientBalancingEnabled;
  }


  public CreateNetworkWirelessRfProfile201Response fiveGhzSettings(CreateNetworkWirelessRfProfileRequestFiveGhzSettings fiveGhzSettings) {
    this.fiveGhzSettings = fiveGhzSettings;
    return this;
  }

  /**
   * Get fiveGhzSettings
   * @return fiveGhzSettings
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfileRequestFiveGhzSettings getFiveGhzSettings() {
    return fiveGhzSettings;
  }

  public void setFiveGhzSettings(CreateNetworkWirelessRfProfileRequestFiveGhzSettings fiveGhzSettings) {
    this.fiveGhzSettings = fiveGhzSettings;
  }


  public CreateNetworkWirelessRfProfile201Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The name of the new profile. Must be unique.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateNetworkWirelessRfProfile201Response minBitrateType(String minBitrateType) {
    this.minBitrateType = minBitrateType;
    return this;
  }

  /**
   * Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
   * @return minBitrateType
   */
  @javax.annotation.Nullable
  public String getMinBitrateType() {
    return minBitrateType;
  }

  public void setMinBitrateType(String minBitrateType) {
    this.minBitrateType = minBitrateType;
  }


  public CreateNetworkWirelessRfProfile201Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the new profile. Must be unique. This param is required on creation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkWirelessRfProfile201Response networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * The network ID of the RF Profile
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public CreateNetworkWirelessRfProfile201Response perSsidSettings(CreateNetworkWirelessRfProfile201ResponsePerSsidSettings perSsidSettings) {
    this.perSsidSettings = perSsidSettings;
    return this;
  }

  /**
   * Get perSsidSettings
   * @return perSsidSettings
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfile201ResponsePerSsidSettings getPerSsidSettings() {
    return perSsidSettings;
  }

  public void setPerSsidSettings(CreateNetworkWirelessRfProfile201ResponsePerSsidSettings perSsidSettings) {
    this.perSsidSettings = perSsidSettings;
  }


  public CreateNetworkWirelessRfProfile201Response transmission(CreateNetworkWirelessRfProfileRequestTransmission transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfileRequestTransmission getTransmission() {
    return transmission;
  }

  public void setTransmission(CreateNetworkWirelessRfProfileRequestTransmission transmission) {
    this.transmission = transmission;
  }


  public CreateNetworkWirelessRfProfile201Response twoFourGhzSettings(CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings twoFourGhzSettings) {
    this.twoFourGhzSettings = twoFourGhzSettings;
    return this;
  }

  /**
   * Get twoFourGhzSettings
   * @return twoFourGhzSettings
   */
  @javax.annotation.Nullable
  public CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings getTwoFourGhzSettings() {
    return twoFourGhzSettings;
  }

  public void setTwoFourGhzSettings(CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings twoFourGhzSettings) {
    this.twoFourGhzSettings = twoFourGhzSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkWirelessRfProfile201Response createNetworkWirelessRfProfile201Response = (CreateNetworkWirelessRfProfile201Response) o;
    return Objects.equals(this.apBandSettings, createNetworkWirelessRfProfile201Response.apBandSettings) &&
        Objects.equals(this.bandSelectionType, createNetworkWirelessRfProfile201Response.bandSelectionType) &&
        Objects.equals(this.clientBalancingEnabled, createNetworkWirelessRfProfile201Response.clientBalancingEnabled) &&
        Objects.equals(this.fiveGhzSettings, createNetworkWirelessRfProfile201Response.fiveGhzSettings) &&
        Objects.equals(this.id, createNetworkWirelessRfProfile201Response.id) &&
        Objects.equals(this.minBitrateType, createNetworkWirelessRfProfile201Response.minBitrateType) &&
        Objects.equals(this.name, createNetworkWirelessRfProfile201Response.name) &&
        Objects.equals(this.networkId, createNetworkWirelessRfProfile201Response.networkId) &&
        Objects.equals(this.perSsidSettings, createNetworkWirelessRfProfile201Response.perSsidSettings) &&
        Objects.equals(this.transmission, createNetworkWirelessRfProfile201Response.transmission) &&
        Objects.equals(this.twoFourGhzSettings, createNetworkWirelessRfProfile201Response.twoFourGhzSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apBandSettings, bandSelectionType, clientBalancingEnabled, fiveGhzSettings, id, minBitrateType, name, networkId, perSsidSettings, transmission, twoFourGhzSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkWirelessRfProfile201Response {\n");
    sb.append("    apBandSettings: ").append(toIndentedString(apBandSettings)).append("\n");
    sb.append("    bandSelectionType: ").append(toIndentedString(bandSelectionType)).append("\n");
    sb.append("    clientBalancingEnabled: ").append(toIndentedString(clientBalancingEnabled)).append("\n");
    sb.append("    fiveGhzSettings: ").append(toIndentedString(fiveGhzSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    minBitrateType: ").append(toIndentedString(minBitrateType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    perSsidSettings: ").append(toIndentedString(perSsidSettings)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    twoFourGhzSettings: ").append(toIndentedString(twoFourGhzSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apBandSettings");
    openapiFields.add("bandSelectionType");
    openapiFields.add("clientBalancingEnabled");
    openapiFields.add("fiveGhzSettings");
    openapiFields.add("id");
    openapiFields.add("minBitrateType");
    openapiFields.add("name");
    openapiFields.add("networkId");
    openapiFields.add("perSsidSettings");
    openapiFields.add("transmission");
    openapiFields.add("twoFourGhzSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkWirelessRfProfile201Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkWirelessRfProfile201Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkWirelessRfProfile201Response is not found in the empty JSON string", CreateNetworkWirelessRfProfile201Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkWirelessRfProfile201Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkWirelessRfProfile201Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apBandSettings`
      if (jsonObj.get("apBandSettings") != null && !jsonObj.get("apBandSettings").isJsonNull()) {
        CreateNetworkWirelessRfProfile201ResponseApBandSettings.validateJsonElement(jsonObj.get("apBandSettings"));
      }
      if ((jsonObj.get("bandSelectionType") != null && !jsonObj.get("bandSelectionType").isJsonNull()) && !jsonObj.get("bandSelectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandSelectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandSelectionType").toString()));
      }
      // validate the optional field `fiveGhzSettings`
      if (jsonObj.get("fiveGhzSettings") != null && !jsonObj.get("fiveGhzSettings").isJsonNull()) {
        CreateNetworkWirelessRfProfileRequestFiveGhzSettings.validateJsonElement(jsonObj.get("fiveGhzSettings"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("minBitrateType") != null && !jsonObj.get("minBitrateType").isJsonNull()) && !jsonObj.get("minBitrateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minBitrateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minBitrateType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      // validate the optional field `perSsidSettings`
      if (jsonObj.get("perSsidSettings") != null && !jsonObj.get("perSsidSettings").isJsonNull()) {
        CreateNetworkWirelessRfProfile201ResponsePerSsidSettings.validateJsonElement(jsonObj.get("perSsidSettings"));
      }
      // validate the optional field `transmission`
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        CreateNetworkWirelessRfProfileRequestTransmission.validateJsonElement(jsonObj.get("transmission"));
      }
      // validate the optional field `twoFourGhzSettings`
      if (jsonObj.get("twoFourGhzSettings") != null && !jsonObj.get("twoFourGhzSettings").isJsonNull()) {
        CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.validateJsonElement(jsonObj.get("twoFourGhzSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkWirelessRfProfile201Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkWirelessRfProfile201Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkWirelessRfProfile201Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkWirelessRfProfile201Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkWirelessRfProfile201Response>() {
           @Override
           public void write(JsonWriter out, CreateNetworkWirelessRfProfile201Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkWirelessRfProfile201Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkWirelessRfProfile201Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkWirelessRfProfile201Response
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkWirelessRfProfile201Response
   */
  public static CreateNetworkWirelessRfProfile201Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkWirelessRfProfile201Response.class);
  }

  /**
   * Convert an instance of CreateNetworkWirelessRfProfile201Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

