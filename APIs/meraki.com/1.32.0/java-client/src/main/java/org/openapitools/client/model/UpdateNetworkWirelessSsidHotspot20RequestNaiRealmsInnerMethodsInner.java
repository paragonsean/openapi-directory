/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner {
  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPES = "authenticationTypes";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPES)
  private Object authenticationTypes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner() {
  }

  public UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner authenticationTypes(Object authenticationTypes) {
    this.authenticationTypes = authenticationTypes;
    return this;
  }

  /**
   * The authentication types for the method. These should be formatted as an object with the EAP method category in camelcase as the key and the list of types as the value (nonEapInnerAuthentication: Reserved, PAP, CHAP, MSCHAP, MSCHAPV2; eapInnerAuthentication: EAP-TLS, EAP-SIM, EAP-AKA, EAP-TTLS with MSCHAPv2; credentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, none, Reserved, Vendor Specific; tunneledEapMethodCredentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, Reserved, Anonymous, Vendor Specific)
   * @return authenticationTypes
   */
  @javax.annotation.Nullable
  public Object getAuthenticationTypes() {
    return authenticationTypes;
  }

  public void setAuthenticationTypes(Object authenticationTypes) {
    this.authenticationTypes = authenticationTypes;
  }


  public UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of method
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner updateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner = (UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner) o;
    return Objects.equals(this.authenticationTypes, updateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.authenticationTypes) &&
        Objects.equals(this.id, updateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationTypes, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner {\n");
    sb.append("    authenticationTypes: ").append(toIndentedString(authenticationTypes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationTypes");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner is not found in the empty JSON string", UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner
   */
  public static UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInnerMethodsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

