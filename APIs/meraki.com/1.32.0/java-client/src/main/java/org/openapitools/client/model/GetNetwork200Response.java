/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetwork200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetwork200Response {
  public static final String SERIALIZED_NAME_ENROLLMENT_STRING = "enrollmentString";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_STRING)
  private String enrollmentString;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_BOUND_TO_CONFIG_TEMPLATE = "isBoundToConfigTemplate";
  @SerializedName(SERIALIZED_NAME_IS_BOUND_TO_CONFIG_TEMPLATE)
  private Boolean isBoundToConfigTemplate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_PRODUCT_TYPES = "productTypes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPES)
  private List<String> productTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public GetNetwork200Response() {
  }

  public GetNetwork200Response enrollmentString(String enrollmentString) {
    this.enrollmentString = enrollmentString;
    return this;
  }

  /**
   * Enrollment string for the network
   * @return enrollmentString
   */
  @javax.annotation.Nullable
  public String getEnrollmentString() {
    return enrollmentString;
  }

  public void setEnrollmentString(String enrollmentString) {
    this.enrollmentString = enrollmentString;
  }


  public GetNetwork200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Network ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetwork200Response isBoundToConfigTemplate(Boolean isBoundToConfigTemplate) {
    this.isBoundToConfigTemplate = isBoundToConfigTemplate;
    return this;
  }

  /**
   * If the network is bound to a config template
   * @return isBoundToConfigTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsBoundToConfigTemplate() {
    return isBoundToConfigTemplate;
  }

  public void setIsBoundToConfigTemplate(Boolean isBoundToConfigTemplate) {
    this.isBoundToConfigTemplate = isBoundToConfigTemplate;
  }


  public GetNetwork200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Network name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetwork200Response notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Notes for the network
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public GetNetwork200Response organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Organization ID
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public GetNetwork200Response productTypes(List<String> productTypes) {
    this.productTypes = productTypes;
    return this;
  }

  public GetNetwork200Response addProductTypesItem(String productTypesItem) {
    if (this.productTypes == null) {
      this.productTypes = new ArrayList<>();
    }
    this.productTypes.add(productTypesItem);
    return this;
  }

  /**
   * List of the product types that the network supports
   * @return productTypes
   */
  @javax.annotation.Nullable
  public List<String> getProductTypes() {
    return productTypes;
  }

  public void setProductTypes(List<String> productTypes) {
    this.productTypes = productTypes;
  }


  public GetNetwork200Response tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GetNetwork200Response addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Network tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public GetNetwork200Response timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Timezone of the network
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public GetNetwork200Response url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL to the network Dashboard UI
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetwork200Response getNetwork200Response = (GetNetwork200Response) o;
    return Objects.equals(this.enrollmentString, getNetwork200Response.enrollmentString) &&
        Objects.equals(this.id, getNetwork200Response.id) &&
        Objects.equals(this.isBoundToConfigTemplate, getNetwork200Response.isBoundToConfigTemplate) &&
        Objects.equals(this.name, getNetwork200Response.name) &&
        Objects.equals(this.notes, getNetwork200Response.notes) &&
        Objects.equals(this.organizationId, getNetwork200Response.organizationId) &&
        Objects.equals(this.productTypes, getNetwork200Response.productTypes) &&
        Objects.equals(this.tags, getNetwork200Response.tags) &&
        Objects.equals(this.timeZone, getNetwork200Response.timeZone) &&
        Objects.equals(this.url, getNetwork200Response.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enrollmentString, id, isBoundToConfigTemplate, name, notes, organizationId, productTypes, tags, timeZone, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetwork200Response {\n");
    sb.append("    enrollmentString: ").append(toIndentedString(enrollmentString)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBoundToConfigTemplate: ").append(toIndentedString(isBoundToConfigTemplate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    productTypes: ").append(toIndentedString(productTypes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enrollmentString");
    openapiFields.add("id");
    openapiFields.add("isBoundToConfigTemplate");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("organizationId");
    openapiFields.add("productTypes");
    openapiFields.add("tags");
    openapiFields.add("timeZone");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetwork200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetwork200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetwork200Response is not found in the empty JSON string", GetNetwork200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetwork200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetwork200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enrollmentString") != null && !jsonObj.get("enrollmentString").isJsonNull()) && !jsonObj.get("enrollmentString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentString").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productTypes") != null && !jsonObj.get("productTypes").isJsonNull() && !jsonObj.get("productTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypes` to be an array in the JSON string but got `%s`", jsonObj.get("productTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetwork200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetwork200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetwork200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetwork200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetwork200Response>() {
           @Override
           public void write(JsonWriter out, GetNetwork200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetwork200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetwork200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetwork200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetwork200Response
   */
  public static GetNetwork200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetwork200Response.class);
  }

  /**
   * Convert an instance of GetNetwork200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

