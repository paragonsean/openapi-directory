/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateOrganizationApplianceSecurityIntrusionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateOrganizationApplianceSecurityIntrusionRequest {
  public static final String SERIALIZED_NAME_ALLOWED_RULES = "allowedRules";
  @SerializedName(SERIALIZED_NAME_ALLOWED_RULES)
  private List<UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner> allowedRules = new ArrayList<>();

  public UpdateOrganizationApplianceSecurityIntrusionRequest() {
  }

  public UpdateOrganizationApplianceSecurityIntrusionRequest allowedRules(List<UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner> allowedRules) {
    this.allowedRules = allowedRules;
    return this;
  }

  public UpdateOrganizationApplianceSecurityIntrusionRequest addAllowedRulesItem(UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner allowedRulesItem) {
    if (this.allowedRules == null) {
      this.allowedRules = new ArrayList<>();
    }
    this.allowedRules.add(allowedRulesItem);
    return this;
  }

  /**
   * Sets a list of specific SNORT signatures to allow
   * @return allowedRules
   */
  @javax.annotation.Nonnull
  public List<UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner> getAllowedRules() {
    return allowedRules;
  }

  public void setAllowedRules(List<UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner> allowedRules) {
    this.allowedRules = allowedRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest = (UpdateOrganizationApplianceSecurityIntrusionRequest) o;
    return Objects.equals(this.allowedRules, updateOrganizationApplianceSecurityIntrusionRequest.allowedRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOrganizationApplianceSecurityIntrusionRequest {\n");
    sb.append("    allowedRules: ").append(toIndentedString(allowedRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowedRules");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOrganizationApplianceSecurityIntrusionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOrganizationApplianceSecurityIntrusionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOrganizationApplianceSecurityIntrusionRequest is not found in the empty JSON string", UpdateOrganizationApplianceSecurityIntrusionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOrganizationApplianceSecurityIntrusionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOrganizationApplianceSecurityIntrusionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateOrganizationApplianceSecurityIntrusionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("allowedRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedRules` to be an array in the JSON string but got `%s`", jsonObj.get("allowedRules").toString()));
      }

      JsonArray jsonArrayallowedRules = jsonObj.getAsJsonArray("allowedRules");
      // validate the required field `allowedRules` (array)
      for (int i = 0; i < jsonArrayallowedRules.size(); i++) {
        UpdateOrganizationApplianceSecurityIntrusionRequestAllowedRulesInner.validateJsonElement(jsonArrayallowedRules.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOrganizationApplianceSecurityIntrusionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOrganizationApplianceSecurityIntrusionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOrganizationApplianceSecurityIntrusionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOrganizationApplianceSecurityIntrusionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOrganizationApplianceSecurityIntrusionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateOrganizationApplianceSecurityIntrusionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOrganizationApplianceSecurityIntrusionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOrganizationApplianceSecurityIntrusionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOrganizationApplianceSecurityIntrusionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateOrganizationApplianceSecurityIntrusionRequest
   */
  public static UpdateOrganizationApplianceSecurityIntrusionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOrganizationApplianceSecurityIntrusionRequest.class);
  }

  /**
   * Convert an instance of UpdateOrganizationApplianceSecurityIntrusionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

