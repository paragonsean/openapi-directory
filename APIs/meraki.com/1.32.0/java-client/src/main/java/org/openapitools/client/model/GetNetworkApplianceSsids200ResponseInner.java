/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNetworkApplianceSsids200ResponseInnerRadiusServersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkApplianceSsids200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkApplianceSsids200ResponseInner {
  public static final String SERIALIZED_NAME_AUTH_MODE = "authMode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  private String authMode;

  public static final String SERIALIZED_NAME_DEFAULT_VLAN_ID = "defaultVlanId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VLAN_ID)
  private Integer defaultVlanId;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENCRYPTION_MODE = "encryptionMode";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_MODE)
  private String encryptionMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_RADIUS_SERVERS = "radiusServers";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVERS)
  private List<GetNetworkApplianceSsids200ResponseInnerRadiusServersInner> radiusServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_WPA_ENCRYPTION_MODE = "wpaEncryptionMode";
  @SerializedName(SERIALIZED_NAME_WPA_ENCRYPTION_MODE)
  private String wpaEncryptionMode;

  public GetNetworkApplianceSsids200ResponseInner() {
  }

  public GetNetworkApplianceSsids200ResponseInner authMode(String authMode) {
    this.authMode = authMode;
    return this;
  }

  /**
   * The association control method for the SSID.
   * @return authMode
   */
  @javax.annotation.Nullable
  public String getAuthMode() {
    return authMode;
  }

  public void setAuthMode(String authMode) {
    this.authMode = authMode;
  }


  public GetNetworkApplianceSsids200ResponseInner defaultVlanId(Integer defaultVlanId) {
    this.defaultVlanId = defaultVlanId;
    return this;
  }

  /**
   * The VLAN ID of the VLAN associated to this SSID.
   * @return defaultVlanId
   */
  @javax.annotation.Nullable
  public Integer getDefaultVlanId() {
    return defaultVlanId;
  }

  public void setDefaultVlanId(Integer defaultVlanId) {
    this.defaultVlanId = defaultVlanId;
  }


  public GetNetworkApplianceSsids200ResponseInner enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the SSID is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GetNetworkApplianceSsids200ResponseInner encryptionMode(String encryptionMode) {
    this.encryptionMode = encryptionMode;
    return this;
  }

  /**
   * The psk encryption mode for the SSID.
   * @return encryptionMode
   */
  @javax.annotation.Nullable
  public String getEncryptionMode() {
    return encryptionMode;
  }

  public void setEncryptionMode(String encryptionMode) {
    this.encryptionMode = encryptionMode;
  }


  public GetNetworkApplianceSsids200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SSID.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetNetworkApplianceSsids200ResponseInner number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The number of the SSID.
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public GetNetworkApplianceSsids200ResponseInner radiusServers(List<GetNetworkApplianceSsids200ResponseInnerRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
    return this;
  }

  public GetNetworkApplianceSsids200ResponseInner addRadiusServersItem(GetNetworkApplianceSsids200ResponseInnerRadiusServersInner radiusServersItem) {
    if (this.radiusServers == null) {
      this.radiusServers = new ArrayList<>();
    }
    this.radiusServers.add(radiusServersItem);
    return this;
  }

  /**
   * The RADIUS 802.1x servers to be used for authentication.
   * @return radiusServers
   */
  @javax.annotation.Nullable
  public List<GetNetworkApplianceSsids200ResponseInnerRadiusServersInner> getRadiusServers() {
    return radiusServers;
  }

  public void setRadiusServers(List<GetNetworkApplianceSsids200ResponseInnerRadiusServersInner> radiusServers) {
    this.radiusServers = radiusServers;
  }


  public GetNetworkApplianceSsids200ResponseInner visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Boolean indicating whether the MX should advertise or hide this SSID.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public GetNetworkApplianceSsids200ResponseInner wpaEncryptionMode(String wpaEncryptionMode) {
    this.wpaEncryptionMode = wpaEncryptionMode;
    return this;
  }

  /**
   * WPA encryption mode for the SSID.
   * @return wpaEncryptionMode
   */
  @javax.annotation.Nullable
  public String getWpaEncryptionMode() {
    return wpaEncryptionMode;
  }

  public void setWpaEncryptionMode(String wpaEncryptionMode) {
    this.wpaEncryptionMode = wpaEncryptionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkApplianceSsids200ResponseInner getNetworkApplianceSsids200ResponseInner = (GetNetworkApplianceSsids200ResponseInner) o;
    return Objects.equals(this.authMode, getNetworkApplianceSsids200ResponseInner.authMode) &&
        Objects.equals(this.defaultVlanId, getNetworkApplianceSsids200ResponseInner.defaultVlanId) &&
        Objects.equals(this.enabled, getNetworkApplianceSsids200ResponseInner.enabled) &&
        Objects.equals(this.encryptionMode, getNetworkApplianceSsids200ResponseInner.encryptionMode) &&
        Objects.equals(this.name, getNetworkApplianceSsids200ResponseInner.name) &&
        Objects.equals(this.number, getNetworkApplianceSsids200ResponseInner.number) &&
        Objects.equals(this.radiusServers, getNetworkApplianceSsids200ResponseInner.radiusServers) &&
        Objects.equals(this.visible, getNetworkApplianceSsids200ResponseInner.visible) &&
        Objects.equals(this.wpaEncryptionMode, getNetworkApplianceSsids200ResponseInner.wpaEncryptionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMode, defaultVlanId, enabled, encryptionMode, name, number, radiusServers, visible, wpaEncryptionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkApplianceSsids200ResponseInner {\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    defaultVlanId: ").append(toIndentedString(defaultVlanId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    encryptionMode: ").append(toIndentedString(encryptionMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    radiusServers: ").append(toIndentedString(radiusServers)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    wpaEncryptionMode: ").append(toIndentedString(wpaEncryptionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authMode");
    openapiFields.add("defaultVlanId");
    openapiFields.add("enabled");
    openapiFields.add("encryptionMode");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("radiusServers");
    openapiFields.add("visible");
    openapiFields.add("wpaEncryptionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkApplianceSsids200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkApplianceSsids200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkApplianceSsids200ResponseInner is not found in the empty JSON string", GetNetworkApplianceSsids200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkApplianceSsids200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkApplianceSsids200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) && !jsonObj.get("authMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authMode").toString()));
      }
      if ((jsonObj.get("encryptionMode") != null && !jsonObj.get("encryptionMode").isJsonNull()) && !jsonObj.get("encryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionMode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("radiusServers") != null && !jsonObj.get("radiusServers").isJsonNull()) {
        JsonArray jsonArrayradiusServers = jsonObj.getAsJsonArray("radiusServers");
        if (jsonArrayradiusServers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("radiusServers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `radiusServers` to be an array in the JSON string but got `%s`", jsonObj.get("radiusServers").toString()));
          }

          // validate the optional field `radiusServers` (array)
          for (int i = 0; i < jsonArrayradiusServers.size(); i++) {
            GetNetworkApplianceSsids200ResponseInnerRadiusServersInner.validateJsonElement(jsonArrayradiusServers.get(i));
          };
        }
      }
      if ((jsonObj.get("wpaEncryptionMode") != null && !jsonObj.get("wpaEncryptionMode").isJsonNull()) && !jsonObj.get("wpaEncryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wpaEncryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wpaEncryptionMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkApplianceSsids200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkApplianceSsids200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkApplianceSsids200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkApplianceSsids200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkApplianceSsids200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkApplianceSsids200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkApplianceSsids200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkApplianceSsids200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkApplianceSsids200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkApplianceSsids200ResponseInner
   */
  public static GetNetworkApplianceSsids200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkApplianceSsids200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkApplianceSsids200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

