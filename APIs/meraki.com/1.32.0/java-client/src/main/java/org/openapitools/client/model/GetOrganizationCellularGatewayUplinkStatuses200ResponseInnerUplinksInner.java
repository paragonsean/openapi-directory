/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner {
  public static final String SERIALIZED_NAME_APN = "apn";
  @SerializedName(SERIALIZED_NAME_APN)
  private String apn;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private String connectionType;

  public static final String SERIALIZED_NAME_DNS1 = "dns1";
  @SerializedName(SERIALIZED_NAME_DNS1)
  private String dns1;

  public static final String SERIALIZED_NAME_DNS2 = "dns2";
  @SerializedName(SERIALIZED_NAME_DNS2)
  private String dns2;

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private String gateway;

  public static final String SERIALIZED_NAME_ICCID = "iccid";
  @SerializedName(SERIALIZED_NAME_ICCID)
  private String iccid;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private String _interface;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PUBLIC_IP = "publicIp";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP)
  private String publicIp;

  public static final String SERIALIZED_NAME_SIGNAL_STAT = "signalStat";
  @SerializedName(SERIALIZED_NAME_SIGNAL_STAT)
  private GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat signalStat;

  public static final String SERIALIZED_NAME_SIGNAL_TYPE = "signalType";
  @SerializedName(SERIALIZED_NAME_SIGNAL_TYPE)
  private String signalType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner() {
  }

  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner apn(String apn) {
    this.apn = apn;
    return this;
  }

  /**
   * Access Point Name
   * @return apn
   */
  @javax.annotation.Nullable
  public String getApn() {
    return apn;
  }

  public void setApn(String apn) {
    this.apn = apn;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner connectionType(String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Connection Type
   * @return connectionType
   */
  @javax.annotation.Nullable
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner dns1(String dns1) {
    this.dns1 = dns1;
    return this;
  }

  /**
   * Primary DNS IP
   * @return dns1
   */
  @javax.annotation.Nullable
  public String getDns1() {
    return dns1;
  }

  public void setDns1(String dns1) {
    this.dns1 = dns1;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner dns2(String dns2) {
    this.dns2 = dns2;
    return this;
  }

  /**
   * Secondary DNS IP
   * @return dns2
   */
  @javax.annotation.Nullable
  public String getDns2() {
    return dns2;
  }

  public void setDns2(String dns2) {
    this.dns2 = dns2;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner gateway(String gateway) {
    this.gateway = gateway;
    return this;
  }

  /**
   * Gateway IP
   * @return gateway
   */
  @javax.annotation.Nullable
  public String getGateway() {
    return gateway;
  }

  public void setGateway(String gateway) {
    this.gateway = gateway;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner iccid(String iccid) {
    this.iccid = iccid;
    return this;
  }

  /**
   * Integrated Circuit Card Identification Number
   * @return iccid
   */
  @javax.annotation.Nullable
  public String getIccid() {
    return iccid;
  }

  public void setIccid(String iccid) {
    this.iccid = iccid;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner _interface(String _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Uplink interface
   * @return _interface
   */
  @javax.annotation.Nullable
  public String getInterface() {
    return _interface;
  }

  public void setInterface(String _interface) {
    this._interface = _interface;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Uplink IP
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Uplink model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Network Provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner publicIp(String publicIp) {
    this.publicIp = publicIp;
    return this;
  }

  /**
   * Public IP
   * @return publicIp
   */
  @javax.annotation.Nullable
  public String getPublicIp() {
    return publicIp;
  }

  public void setPublicIp(String publicIp) {
    this.publicIp = publicIp;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner signalStat(GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat signalStat) {
    this.signalStat = signalStat;
    return this;
  }

  /**
   * Get signalStat
   * @return signalStat
   */
  @javax.annotation.Nullable
  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat getSignalStat() {
    return signalStat;
  }

  public void setSignalStat(GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat signalStat) {
    this.signalStat = signalStat;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner signalType(String signalType) {
    this.signalType = signalType;
    return this;
  }

  /**
   * Signal Type
   * @return signalType
   */
  @javax.annotation.Nullable
  public String getSignalType() {
    return signalType;
  }

  public void setSignalType(String signalType) {
    this.signalType = signalType;
  }


  public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Uplink status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner = (GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner) o;
    return Objects.equals(this.apn, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.apn) &&
        Objects.equals(this.connectionType, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.connectionType) &&
        Objects.equals(this.dns1, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.dns1) &&
        Objects.equals(this.dns2, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.dns2) &&
        Objects.equals(this.gateway, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.gateway) &&
        Objects.equals(this.iccid, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.iccid) &&
        Objects.equals(this._interface, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner._interface) &&
        Objects.equals(this.ip, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.ip) &&
        Objects.equals(this.model, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.model) &&
        Objects.equals(this.provider, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.provider) &&
        Objects.equals(this.publicIp, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.publicIp) &&
        Objects.equals(this.signalStat, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.signalStat) &&
        Objects.equals(this.signalType, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.signalType) &&
        Objects.equals(this.status, getOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apn, connectionType, dns1, dns2, gateway, iccid, _interface, ip, model, provider, publicIp, signalStat, signalType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner {\n");
    sb.append("    apn: ").append(toIndentedString(apn)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    dns1: ").append(toIndentedString(dns1)).append("\n");
    sb.append("    dns2: ").append(toIndentedString(dns2)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    iccid: ").append(toIndentedString(iccid)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    signalStat: ").append(toIndentedString(signalStat)).append("\n");
    sb.append("    signalType: ").append(toIndentedString(signalType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apn");
    openapiFields.add("connectionType");
    openapiFields.add("dns1");
    openapiFields.add("dns2");
    openapiFields.add("gateway");
    openapiFields.add("iccid");
    openapiFields.add("interface");
    openapiFields.add("ip");
    openapiFields.add("model");
    openapiFields.add("provider");
    openapiFields.add("publicIp");
    openapiFields.add("signalStat");
    openapiFields.add("signalType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner is not found in the empty JSON string", GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apn") != null && !jsonObj.get("apn").isJsonNull()) && !jsonObj.get("apn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apn").toString()));
      }
      if ((jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) && !jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      if ((jsonObj.get("dns1") != null && !jsonObj.get("dns1").isJsonNull()) && !jsonObj.get("dns1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns1").toString()));
      }
      if ((jsonObj.get("dns2") != null && !jsonObj.get("dns2").isJsonNull()) && !jsonObj.get("dns2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns2").toString()));
      }
      if ((jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull()) && !jsonObj.get("gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway").toString()));
      }
      if ((jsonObj.get("iccid") != null && !jsonObj.get("iccid").isJsonNull()) && !jsonObj.get("iccid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iccid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iccid").toString()));
      }
      if ((jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) && !jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("publicIp") != null && !jsonObj.get("publicIp").isJsonNull()) && !jsonObj.get("publicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIp").toString()));
      }
      // validate the optional field `signalStat`
      if (jsonObj.get("signalStat") != null && !jsonObj.get("signalStat").isJsonNull()) {
        GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat.validateJsonElement(jsonObj.get("signalStat"));
      }
      if ((jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) && !jsonObj.get("signalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner>() {
           @Override
           public void write(JsonWriter out, GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner
   * @throws IOException if the JSON string is invalid with respect to GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner
   */
  public static GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner.class);
  }

  /**
   * Convert an instance of GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

