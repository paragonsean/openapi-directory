/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BindNetworkRequest;
import org.openapitools.client.model.ClaimNetworkDevicesRequest;
import org.openapitools.client.model.CombineOrganizationNetworks200Response;
import org.openapitools.client.model.CombineOrganizationNetworksRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200Response;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollbackRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedEventRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedGroupRequest;
import org.openapitools.client.model.CreateNetworkFloorPlanRequest;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequest;
import org.openapitools.client.model.CreateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.CreateNetworkMqttBrokerRequest;
import org.openapitools.client.model.CreateNetworkPiiRequestRequest;
import org.openapitools.client.model.CreateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.CreateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTest201Response;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTestRequest;
import org.openapitools.client.model.CreateOrganizationNetworkRequest;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetNetworkAlertsHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkClient200Response;
import org.openapitools.client.model.GetNetworkClients200Response;
import org.openapitools.client.model.GetNetworkEvents200Response;
import org.openapitools.client.model.GetNetworkEventsEventTypes200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgrades200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedEvents200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedStages200ResponseInner;
import org.openapitools.client.model.GetNetworkHealthAlerts200ResponseInner;
import org.openapitools.client.model.GetNetworkMerakiAuthUsers200ResponseInner;
import org.openapitools.client.model.GetNetworkPoliciesByClient200ResponseInner;
import org.openapitools.client.model.GetNetworkSettings200Response;
import org.openapitools.client.model.GetNetworkSyslogServers200Response;
import org.openapitools.client.model.GetNetworkWebhooksHttpServers200ResponseInner;
import org.openapitools.client.model.GetNetworkWebhooksPayloadTemplates200ResponseInner;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.RemoveNetworkDevicesRequest;
import org.openapitools.client.model.RollbacksNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.SplitNetwork200Response;
import org.openapitools.client.model.UnbindNetworkRequest;
import org.openapitools.client.model.UpdateNetworkAlertsSettingsRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedStagesRequest;
import org.openapitools.client.model.UpdateNetworkFloorPlanRequest;
import org.openapitools.client.model.UpdateNetworkGroupPolicyRequest;
import org.openapitools.client.model.UpdateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.UpdateNetworkMqttBrokerRequest;
import org.openapitools.client.model.UpdateNetworkNetflowRequest;
import org.openapitools.client.model.UpdateNetworkRequest;
import org.openapitools.client.model.UpdateNetworkSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSnmpRequest;
import org.openapitools.client.model.UpdateNetworkSyslogServersRequest;
import org.openapitools.client.model.UpdateNetworkTrafficAnalysisRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.VmxNetworkDevicesClaimRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bindNetwork
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bindNetworkCall(String networkId, BindNetworkRequest bindNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bindNetworkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/bind"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bindNetworkValidateBeforeCall(String networkId, BindNetworkRequest bindNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling bindNetwork(Async)");
        }

        // verify the required parameter 'bindNetworkRequest' is set
        if (bindNetworkRequest == null) {
            throw new ApiException("Missing the required parameter 'bindNetworkRequest' when calling bindNetwork(Async)");
        }

        return bindNetworkCall(networkId, bindNetworkRequest, _callback);

    }

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object bindNetwork(String networkId, BindNetworkRequest bindNetworkRequest) throws ApiException {
        ApiResponse<Object> localVarResp = bindNetworkWithHttpInfo(networkId, bindNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> bindNetworkWithHttpInfo(String networkId, BindNetworkRequest bindNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = bindNetworkValidateBeforeCall(networkId, bindNetworkRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bind a network to a template. (asynchronously)
     * Bind a network to a template.
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bindNetworkAsync(String networkId, BindNetworkRequest bindNetworkRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = bindNetworkValidateBeforeCall(networkId, bindNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for claimNetworkDevices
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimNetworkDevicesCall(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimNetworkDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/claim"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimNetworkDevicesValidateBeforeCall(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling claimNetworkDevices(Async)");
        }

        // verify the required parameter 'claimNetworkDevicesRequest' is set
        if (claimNetworkDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'claimNetworkDevicesRequest' when calling claimNetworkDevices(Async)");
        }

        return claimNetworkDevicesCall(networkId, claimNetworkDevicesRequest, _callback);

    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void claimNetworkDevices(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest) throws ApiException {
        claimNetworkDevicesWithHttpInfo(networkId, claimNetworkDevicesRequest);
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> claimNetworkDevicesWithHttpInfo(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = claimNetworkDevicesValidateBeforeCall(networkId, claimNetworkDevicesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed) (asynchronously)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimNetworkDevicesAsync(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimNetworkDevicesValidateBeforeCall(networkId, claimNetworkDevicesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for combineOrganizationNetworks_1
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combineOrganizationNetworks_1Call(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = combineOrganizationNetworksRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/networks/combine"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call combineOrganizationNetworks_1ValidateBeforeCall(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks_1(Async)");
        }

        // verify the required parameter 'combineOrganizationNetworksRequest' is set
        if (combineOrganizationNetworksRequest == null) {
            throw new ApiException("Missing the required parameter 'combineOrganizationNetworksRequest' when calling combineOrganizationNetworks_1(Async)");
        }

        return combineOrganizationNetworks_1Call(organizationId, combineOrganizationNetworksRequest, _callback);

    }

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @return CombineOrganizationNetworks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CombineOrganizationNetworks200Response combineOrganizationNetworks_1(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest) throws ApiException {
        ApiResponse<CombineOrganizationNetworks200Response> localVarResp = combineOrganizationNetworks_1WithHttpInfo(organizationId, combineOrganizationNetworksRequest);
        return localVarResp.getData();
    }

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @return ApiResponse&lt;CombineOrganizationNetworks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CombineOrganizationNetworks200Response> combineOrganizationNetworks_1WithHttpInfo(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest) throws ApiException {
        okhttp3.Call localVarCall = combineOrganizationNetworks_1ValidateBeforeCall(organizationId, combineOrganizationNetworksRequest, null);
        Type localVarReturnType = new TypeToken<CombineOrganizationNetworks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combine multiple networks into a single network (asynchronously)
     * Combine multiple networks into a single network
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combineOrganizationNetworks_1Async(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest, final ApiCallback<CombineOrganizationNetworks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = combineOrganizationNetworks_1ValidateBeforeCall(organizationId, combineOrganizationNetworksRequest, _callback);
        Type localVarReturnType = new TypeToken<CombineOrganizationNetworks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesRollback
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesRollbackCall(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesRollbackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesRollbackValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesRollback(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' is set
        if (createNetworkFirmwareUpgradesRollbackRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' when calling createNetworkFirmwareUpgradesRollback(Async)");
        }

        return createNetworkFirmwareUpgradesRollbackCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, _callback);

    }

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @return CreateNetworkFirmwareUpgradesRollback200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkFirmwareUpgradesRollback200Response createNetworkFirmwareUpgradesRollback(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest) throws ApiException {
        ApiResponse<CreateNetworkFirmwareUpgradesRollback200Response> localVarResp = createNetworkFirmwareUpgradesRollbackWithHttpInfo(networkId, createNetworkFirmwareUpgradesRollbackRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @return ApiResponse&lt;CreateNetworkFirmwareUpgradesRollback200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkFirmwareUpgradesRollback200Response> createNetworkFirmwareUpgradesRollbackWithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesRollbackValidateBeforeCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkFirmwareUpgradesRollback200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Firmware Upgrade For A Network (asynchronously)
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesRollbackAsync(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback<CreateNetworkFirmwareUpgradesRollback200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesRollbackValidateBeforeCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkFirmwareUpgradesRollback200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesStagedEvent
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEventCall(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedEventRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedEventValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
        if (createNetworkFirmwareUpgradesStagedEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent(Async)");
        }

        return createNetworkFirmwareUpgradesStagedEventCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response createNetworkFirmwareUpgradesStagedEvent(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = createNetworkFirmwareUpgradesStagedEventWithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedEventRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> createNetworkFirmwareUpgradesStagedEventWithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEventValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Event for a network (asynchronously)
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEventAsync(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEventValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesStagedGroup
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedGroupCall(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
        if (createNetworkFirmwareUpgradesStagedGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling createNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        return createNetworkFirmwareUpgradesStagedGroupCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkFirmwareUpgradesStagedGroup(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkFirmwareUpgradesStagedGroupWithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkFirmwareUpgradesStagedGroupWithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Group for a network (asynchronously)
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedGroupAsync(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFloorPlan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFloorPlanCall(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFloorPlanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFloorPlanValidateBeforeCall(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFloorPlan(Async)");
        }

        // verify the required parameter 'createNetworkFloorPlanRequest' is set
        if (createNetworkFloorPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFloorPlanRequest' when calling createNetworkFloorPlan(Async)");
        }

        return createNetworkFloorPlanCall(networkId, createNetworkFloorPlanRequest, _callback);

    }

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkFloorPlan(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkFloorPlanWithHttpInfo(networkId, createNetworkFloorPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkFloorPlanWithHttpInfo(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFloorPlanValidateBeforeCall(networkId, createNetworkFloorPlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a floor plan (asynchronously)
     * Upload a floor plan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFloorPlanAsync(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFloorPlanValidateBeforeCall(networkId, createNetworkFloorPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroupPolicy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupPolicyCall(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkGroupPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupPolicyValidateBeforeCall(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkGroupPolicy(Async)");
        }

        // verify the required parameter 'createNetworkGroupPolicyRequest' is set
        if (createNetworkGroupPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkGroupPolicyRequest' when calling createNetworkGroupPolicy(Async)");
        }

        return createNetworkGroupPolicyCall(networkId, createNetworkGroupPolicyRequest, _callback);

    }

    /**
     * Create a group policy
     * Create a group policy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroupPolicy(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroupPolicyWithHttpInfo(networkId, createNetworkGroupPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a group policy
     * Create a group policy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroupPolicyWithHttpInfo(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupPolicyValidateBeforeCall(networkId, createNetworkGroupPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a group policy (asynchronously)
     * Create a group policy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupPolicyAsync(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupPolicyValidateBeforeCall(networkId, createNetworkGroupPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkMerakiAuthUser
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMerakiAuthUserCall(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkMerakiAuthUserRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkMerakiAuthUserValidateBeforeCall(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkMerakiAuthUser(Async)");
        }

        // verify the required parameter 'createNetworkMerakiAuthUserRequest' is set
        if (createNetworkMerakiAuthUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkMerakiAuthUserRequest' when calling createNetworkMerakiAuthUser(Async)");
        }

        return createNetworkMerakiAuthUserCall(networkId, createNetworkMerakiAuthUserRequest, _callback);

    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner createNetworkMerakiAuthUser(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = createNetworkMerakiAuthUserWithHttpInfo(networkId, createNetworkMerakiAuthUserRequest);
        return localVarResp.getData();
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> createNetworkMerakiAuthUserWithHttpInfo(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkMerakiAuthUserValidateBeforeCall(networkId, createNetworkMerakiAuthUserRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap) (asynchronously)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMerakiAuthUserAsync(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkMerakiAuthUserValidateBeforeCall(networkId, createNetworkMerakiAuthUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkMqttBroker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMqttBrokerCall(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkMqttBrokerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkMqttBrokerValidateBeforeCall(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkMqttBroker(Async)");
        }

        // verify the required parameter 'createNetworkMqttBrokerRequest' is set
        if (createNetworkMqttBrokerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkMqttBrokerRequest' when calling createNetworkMqttBroker(Async)");
        }

        return createNetworkMqttBrokerCall(networkId, createNetworkMqttBrokerRequest, _callback);

    }

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkMqttBroker(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkMqttBrokerWithHttpInfo(networkId, createNetworkMqttBrokerRequest);
        return localVarResp.getData();
    }

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkMqttBrokerWithHttpInfo(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkMqttBrokerValidateBeforeCall(networkId, createNetworkMqttBrokerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an MQTT broker (asynchronously)
     * Add an MQTT broker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMqttBrokerAsync(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkMqttBrokerValidateBeforeCall(networkId, createNetworkMqttBrokerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkPiiRequest
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkPiiRequestCall(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkPiiRequestRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkPiiRequestValidateBeforeCall(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkPiiRequest(Async)");
        }

        return createNetworkPiiRequestCall(networkId, createNetworkPiiRequestRequest, _callback);

    }

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkPiiRequest(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkPiiRequestWithHttpInfo(networkId, createNetworkPiiRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkPiiRequestWithHttpInfo(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkPiiRequestValidateBeforeCall(networkId, createNetworkPiiRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a new delete or restrict processing PII request (asynchronously)
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkPiiRequestAsync(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkPiiRequestValidateBeforeCall(networkId, createNetworkPiiRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksHttpServer
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksHttpServerCall(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksHttpServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksHttpServerValidateBeforeCall(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksHttpServer(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksHttpServerRequest' is set
        if (createNetworkWebhooksHttpServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksHttpServerRequest' when calling createNetworkWebhooksHttpServer(Async)");
        }

        return createNetworkWebhooksHttpServerCall(networkId, createNetworkWebhooksHttpServerRequest, _callback);

    }

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner createNetworkWebhooksHttpServer(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = createNetworkWebhooksHttpServerWithHttpInfo(networkId, createNetworkWebhooksHttpServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> createNetworkWebhooksHttpServerWithHttpInfo(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksHttpServerValidateBeforeCall(networkId, createNetworkWebhooksHttpServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an HTTP server to a network (asynchronously)
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksHttpServerAsync(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksHttpServerValidateBeforeCall(networkId, createNetworkWebhooksHttpServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksPayloadTemplate
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksPayloadTemplateCall(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksPayloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksPayloadTemplateValidateBeforeCall(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksPayloadTemplate(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksPayloadTemplateRequest' is set
        if (createNetworkWebhooksPayloadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksPayloadTemplateRequest' when calling createNetworkWebhooksPayloadTemplate(Async)");
        }

        return createNetworkWebhooksPayloadTemplateCall(networkId, createNetworkWebhooksPayloadTemplateRequest, _callback);

    }

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner createNetworkWebhooksPayloadTemplate(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = createNetworkWebhooksPayloadTemplateWithHttpInfo(networkId, createNetworkWebhooksPayloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> createNetworkWebhooksPayloadTemplateWithHttpInfo(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, createNetworkWebhooksPayloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a webhook payload template for a network (asynchronously)
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksPayloadTemplateAsync(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, createNetworkWebhooksPayloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksWebhookTest
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksWebhookTestCall(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksWebhookTestRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/webhookTests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksWebhookTestValidateBeforeCall(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksWebhookTest(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksWebhookTestRequest' is set
        if (createNetworkWebhooksWebhookTestRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksWebhookTestRequest' when calling createNetworkWebhooksWebhookTest(Async)");
        }

        return createNetworkWebhooksWebhookTestCall(networkId, createNetworkWebhooksWebhookTestRequest, _callback);

    }

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @return CreateNetworkWebhooksWebhookTest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWebhooksWebhookTest201Response createNetworkWebhooksWebhookTest(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest) throws ApiException {
        ApiResponse<CreateNetworkWebhooksWebhookTest201Response> localVarResp = createNetworkWebhooksWebhookTestWithHttpInfo(networkId, createNetworkWebhooksWebhookTestRequest);
        return localVarResp.getData();
    }

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @return ApiResponse&lt;CreateNetworkWebhooksWebhookTest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWebhooksWebhookTest201Response> createNetworkWebhooksWebhookTestWithHttpInfo(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksWebhookTestValidateBeforeCall(networkId, createNetworkWebhooksWebhookTestRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a test webhook for a network (asynchronously)
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksWebhookTestAsync(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback<CreateNetworkWebhooksWebhookTest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksWebhookTestValidateBeforeCall(networkId, createNetworkWebhooksWebhookTestRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationNetwork_1
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationNetwork_1Call(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationNetworkRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationNetwork_1ValidateBeforeCall(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationNetwork_1(Async)");
        }

        // verify the required parameter 'createOrganizationNetworkRequest' is set
        if (createOrganizationNetworkRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationNetworkRequest' when calling createOrganizationNetwork_1(Async)");
        }

        return createOrganizationNetwork_1Call(organizationId, createOrganizationNetworkRequest, _callback);

    }

    /**
     * Create a network
     * Create a network
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response createOrganizationNetwork_1(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = createOrganizationNetwork_1WithHttpInfo(organizationId, createOrganizationNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Create a network
     * Create a network
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> createOrganizationNetwork_1WithHttpInfo(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationNetwork_1ValidateBeforeCall(organizationId, createOrganizationNetworkRequest, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a network (asynchronously)
     * Create a network
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationNetwork_1Async(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationNetwork_1ValidateBeforeCall(organizationId, createOrganizationNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deferNetworkFirmwareUpgradesStagedEvents
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEventsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/defer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deferNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents(Async)");
        }

        return deferNetworkFirmwareUpgradesStagedEventsCall(networkId, _callback);

    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response deferNetworkFirmwareUpgradesStagedEvents(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = deferNetworkFirmwareUpgradesStagedEventsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> deferNetworkFirmwareUpgradesStagedEventsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network (asynchronously)
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEventsAsync(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetwork
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetwork(Async)");
        }

        return deleteNetworkCall(networkId, _callback);

    }

    /**
     * Delete a network
     * Delete a network
     * @param networkId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetwork(String networkId) throws ApiException {
        deleteNetworkWithHttpInfo(networkId);
    }

    /**
     * Delete a network
     * Delete a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkValidateBeforeCall(networkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a network (asynchronously)
     * Delete a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAsync(String networkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkValidateBeforeCall(networkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkFirmwareUpgradesStagedGroup
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroupCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        return deleteNetworkFirmwareUpgradesStagedGroupCall(networkId, groupId, _callback);

    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkFirmwareUpgradesStagedGroup(String networkId, String groupId) throws ApiException {
        deleteNetworkFirmwareUpgradesStagedGroupWithHttpInfo(networkId, groupId);
    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkFirmwareUpgradesStagedGroupWithHttpInfo(String networkId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Staged Upgrade Group (asynchronously)
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroupAsync(String networkId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkFloorPlan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFloorPlanCall(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans/{floorPlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "floorPlanId" + "}", localVarApiClient.escapeString(floorPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkFloorPlanValidateBeforeCall(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkFloorPlan(Async)");
        }

        // verify the required parameter 'floorPlanId' is set
        if (floorPlanId == null) {
            throw new ApiException("Missing the required parameter 'floorPlanId' when calling deleteNetworkFloorPlan(Async)");
        }

        return deleteNetworkFloorPlanCall(networkId, floorPlanId, _callback);

    }

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkFloorPlan(String networkId, String floorPlanId) throws ApiException {
        deleteNetworkFloorPlanWithHttpInfo(networkId, floorPlanId);
    }

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkFloorPlanWithHttpInfo(String networkId, String floorPlanId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkFloorPlanValidateBeforeCall(networkId, floorPlanId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroy a floor plan (asynchronously)
     * Destroy a floor plan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFloorPlanAsync(String networkId, String floorPlanId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkFloorPlanValidateBeforeCall(networkId, floorPlanId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupPolicy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPolicyCall(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies/{groupPolicyId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupPolicyId" + "}", localVarApiClient.escapeString(groupPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupPolicyValidateBeforeCall(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkGroupPolicy(Async)");
        }

        // verify the required parameter 'groupPolicyId' is set
        if (groupPolicyId == null) {
            throw new ApiException("Missing the required parameter 'groupPolicyId' when calling deleteNetworkGroupPolicy(Async)");
        }

        return deleteNetworkGroupPolicyCall(networkId, groupPolicyId, _callback);

    }

    /**
     * Delete a group policy
     * Delete a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupPolicy(String networkId, String groupPolicyId) throws ApiException {
        deleteNetworkGroupPolicyWithHttpInfo(networkId, groupPolicyId);
    }

    /**
     * Delete a group policy
     * Delete a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupPolicyWithHttpInfo(String networkId, String groupPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupPolicyValidateBeforeCall(networkId, groupPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a group policy (asynchronously)
     * Delete a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPolicyAsync(String networkId, String groupPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupPolicyValidateBeforeCall(networkId, groupPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkMerakiAuthUser
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMerakiAuthUserCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkMerakiAuthUserValidateBeforeCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkMerakiAuthUser(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling deleteNetworkMerakiAuthUser(Async)");
        }

        return deleteNetworkMerakiAuthUserCall(networkId, merakiAuthUserId, _callback);

    }

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkMerakiAuthUser(String networkId, String merakiAuthUserId) throws ApiException {
        deleteNetworkMerakiAuthUserWithHttpInfo(networkId, merakiAuthUserId);
    }

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkMerakiAuthUserWithHttpInfo(String networkId, String merakiAuthUserId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkMerakiAuthUserValidateBeforeCall(networkId, merakiAuthUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deauthorize a user (asynchronously)
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMerakiAuthUserAsync(String networkId, String merakiAuthUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkMerakiAuthUserValidateBeforeCall(networkId, merakiAuthUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkMqttBroker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMqttBrokerCall(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers/{mqttBrokerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "mqttBrokerId" + "}", localVarApiClient.escapeString(mqttBrokerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkMqttBrokerValidateBeforeCall(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkMqttBroker(Async)");
        }

        // verify the required parameter 'mqttBrokerId' is set
        if (mqttBrokerId == null) {
            throw new ApiException("Missing the required parameter 'mqttBrokerId' when calling deleteNetworkMqttBroker(Async)");
        }

        return deleteNetworkMqttBrokerCall(networkId, mqttBrokerId, _callback);

    }

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkMqttBroker(String networkId, String mqttBrokerId) throws ApiException {
        deleteNetworkMqttBrokerWithHttpInfo(networkId, mqttBrokerId);
    }

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkMqttBrokerWithHttpInfo(String networkId, String mqttBrokerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkMqttBrokerValidateBeforeCall(networkId, mqttBrokerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an MQTT broker (asynchronously)
     * Delete an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMqttBrokerAsync(String networkId, String mqttBrokerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkMqttBrokerValidateBeforeCall(networkId, mqttBrokerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkPiiRequest
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkPiiRequestCall(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests/{requestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkPiiRequestValidateBeforeCall(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkPiiRequest(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling deleteNetworkPiiRequest(Async)");
        }

        return deleteNetworkPiiRequestCall(networkId, requestId, _callback);

    }

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkPiiRequest(String networkId, String requestId) throws ApiException {
        deleteNetworkPiiRequestWithHttpInfo(networkId, requestId);
    }

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkPiiRequestWithHttpInfo(String networkId, String requestId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkPiiRequestValidateBeforeCall(networkId, requestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a restrict processing PII request (asynchronously)
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkPiiRequestAsync(String networkId, String requestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkPiiRequestValidateBeforeCall(networkId, requestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWebhooksHttpServer
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksHttpServerCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWebhooksHttpServerValidateBeforeCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksHttpServer(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling deleteNetworkWebhooksHttpServer(Async)");
        }

        return deleteNetworkWebhooksHttpServerCall(networkId, httpServerId, _callback);

    }

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWebhooksHttpServer(String networkId, String httpServerId) throws ApiException {
        deleteNetworkWebhooksHttpServerWithHttpInfo(networkId, httpServerId);
    }

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWebhooksHttpServerWithHttpInfo(String networkId, String httpServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWebhooksHttpServerValidateBeforeCall(networkId, httpServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an HTTP server from a network (asynchronously)
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksHttpServerAsync(String networkId, String httpServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWebhooksHttpServerValidateBeforeCall(networkId, httpServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWebhooksPayloadTemplate
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksPayloadTemplateCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWebhooksPayloadTemplateValidateBeforeCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksPayloadTemplate(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling deleteNetworkWebhooksPayloadTemplate(Async)");
        }

        return deleteNetworkWebhooksPayloadTemplateCall(networkId, payloadTemplateId, _callback);

    }

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWebhooksPayloadTemplate(String networkId, String payloadTemplateId) throws ApiException {
        deleteNetworkWebhooksPayloadTemplateWithHttpInfo(networkId, payloadTemplateId);
    }

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWebhooksPayloadTemplateWithHttpInfo(String networkId, String payloadTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, payloadTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroy a webhook payload template for a network (asynchronously)
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksPayloadTemplateAsync(String networkId, String payloadTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, payloadTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetwork
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetwork(Async)");
        }

        return getNetworkCall(networkId, _callback);

    }

    /**
     * Return a network
     * Return a network
     * @param networkId  (required)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response getNetwork(String networkId) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = getNetworkWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return a network
     * Return a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> getNetworkWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a network (asynchronously)
     * Return a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAsync(String networkId, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAlertsHistory
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAlertsHistoryCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/alerts/history"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAlertsHistoryValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAlertsHistory(Async)");
        }

        return getNetworkAlertsHistoryCall(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the alert history for this network
     * Return the alert history for this network
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkAlertsHistory200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkAlertsHistory200ResponseInner> getNetworkAlertsHistory(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkAlertsHistory200ResponseInner>> localVarResp = getNetworkAlertsHistoryWithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the alert history for this network
     * Return the alert history for this network
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkAlertsHistory200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkAlertsHistory200ResponseInner>> getNetworkAlertsHistoryWithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAlertsHistoryValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkAlertsHistory200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the alert history for this network (asynchronously)
     * Return the alert history for this network
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAlertsHistoryAsync(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkAlertsHistory200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAlertsHistoryValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkAlertsHistory200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAlertsSettings
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAlertsSettingsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/alerts/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAlertsSettingsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings(Async)");
        }

        return getNetworkAlertsSettingsCall(networkId, _callback);

    }

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkAlertsSettings(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkAlertsSettingsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkAlertsSettingsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAlertsSettingsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the alert configuration for this network (asynchronously)
     * Return the alert configuration for this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAlertsSettingsAsync(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAlertsSettingsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkBluetoothClient
     * @param networkId  (required)
     * @param bluetoothClientId  (required)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @param connectivityHistoryTimespan The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkBluetoothClientCall(String networkId, String bluetoothClientId, Boolean includeConnectivityHistory, Integer connectivityHistoryTimespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/bluetoothClients/{bluetoothClientId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "bluetoothClientId" + "}", localVarApiClient.escapeString(bluetoothClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeConnectivityHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeConnectivityHistory", includeConnectivityHistory));
        }

        if (connectivityHistoryTimespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectivityHistoryTimespan", connectivityHistoryTimespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkBluetoothClientValidateBeforeCall(String networkId, String bluetoothClientId, Boolean includeConnectivityHistory, Integer connectivityHistoryTimespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkBluetoothClient(Async)");
        }

        // verify the required parameter 'bluetoothClientId' is set
        if (bluetoothClientId == null) {
            throw new ApiException("Missing the required parameter 'bluetoothClientId' when calling getNetworkBluetoothClient(Async)");
        }

        return getNetworkBluetoothClientCall(networkId, bluetoothClientId, includeConnectivityHistory, connectivityHistoryTimespan, _callback);

    }

    /**
     * Return a Bluetooth client
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * @param networkId  (required)
     * @param bluetoothClientId  (required)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @param connectivityHistoryTimespan The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkBluetoothClient(String networkId, String bluetoothClientId, Boolean includeConnectivityHistory, Integer connectivityHistoryTimespan) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkBluetoothClientWithHttpInfo(networkId, bluetoothClientId, includeConnectivityHistory, connectivityHistoryTimespan);
        return localVarResp.getData();
    }

    /**
     * Return a Bluetooth client
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * @param networkId  (required)
     * @param bluetoothClientId  (required)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @param connectivityHistoryTimespan The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkBluetoothClientWithHttpInfo(String networkId, String bluetoothClientId, Boolean includeConnectivityHistory, Integer connectivityHistoryTimespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkBluetoothClientValidateBeforeCall(networkId, bluetoothClientId, includeConnectivityHistory, connectivityHistoryTimespan, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Bluetooth client (asynchronously)
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * @param networkId  (required)
     * @param bluetoothClientId  (required)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @param connectivityHistoryTimespan The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkBluetoothClientAsync(String networkId, String bluetoothClientId, Boolean includeConnectivityHistory, Integer connectivityHistoryTimespan, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkBluetoothClientValidateBeforeCall(networkId, bluetoothClientId, includeConnectivityHistory, connectivityHistoryTimespan, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkBluetoothClients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkBluetoothClientsCall(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, Boolean includeConnectivityHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/bluetoothClients"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (includeConnectivityHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeConnectivityHistory", includeConnectivityHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkBluetoothClientsValidateBeforeCall(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, Boolean includeConnectivityHistory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkBluetoothClients(Async)");
        }

        return getNetworkBluetoothClientsCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, includeConnectivityHistory, _callback);

    }

    /**
     * List the Bluetooth clients seen by APs in this network
     * List the Bluetooth clients seen by APs in this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkBluetoothClients(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, Boolean includeConnectivityHistory) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkBluetoothClientsWithHttpInfo(networkId, t0, timespan, perPage, startingAfter, endingBefore, includeConnectivityHistory);
        return localVarResp.getData();
    }

    /**
     * List the Bluetooth clients seen by APs in this network
     * List the Bluetooth clients seen by APs in this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkBluetoothClientsWithHttpInfo(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, Boolean includeConnectivityHistory) throws ApiException {
        okhttp3.Call localVarCall = getNetworkBluetoothClientsValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, includeConnectivityHistory, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the Bluetooth clients seen by APs in this network (asynchronously)
     * List the Bluetooth clients seen by APs in this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param includeConnectivityHistory Include the connectivity history for this client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkBluetoothClientsAsync(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, Boolean includeConnectivityHistory, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkBluetoothClientsValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, includeConnectivityHistory, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClient
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClient(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClient(Async)");
        }

        return getNetworkClientCall(networkId, clientId, _callback);

    }

    /**
     * Return the client associated with the given identifier
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return GetNetworkClient200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkClient200Response getNetworkClient(String networkId, String clientId) throws ApiException {
        ApiResponse<GetNetworkClient200Response> localVarResp = getNetworkClientWithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the client associated with the given identifier
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;GetNetworkClient200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkClient200Response> getNetworkClientWithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<GetNetworkClient200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client associated with the given identifier (asynchronously)
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientAsync(String networkId, String clientId, final ApiCallback<GetNetworkClient200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkClient200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientPolicy
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientPolicyCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/policy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientPolicyValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientPolicy(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientPolicy(Async)");
        }

        return getNetworkClientPolicyCall(networkId, clientId, _callback);

    }

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientPolicy(String networkId, String clientId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientPolicyWithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientPolicyWithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientPolicyValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the policy assigned to a client on the network (asynchronously)
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientPolicyAsync(String networkId, String clientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientPolicyValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientSplashAuthorizationStatus
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientSplashAuthorizationStatusCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientSplashAuthorizationStatusValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus(Async)");
        }

        return getNetworkClientSplashAuthorizationStatusCall(networkId, clientId, _callback);

    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientSplashAuthorizationStatus(String networkId, String clientId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientSplashAuthorizationStatusWithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientSplashAuthorizationStatusWithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientSplashAuthorizationStatusValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash (asynchronously)
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientSplashAuthorizationStatusAsync(String networkId, String clientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientSplashAuthorizationStatusValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientTrafficHistory
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientTrafficHistoryCall(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/trafficHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientTrafficHistoryValidateBeforeCall(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientTrafficHistory(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientTrafficHistory(Async)");
        }

        return getNetworkClientTrafficHistoryCall(networkId, clientId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the client&#39;s network traffic data over time
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientTrafficHistory(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientTrafficHistoryWithHttpInfo(networkId, clientId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the client&#39;s network traffic data over time
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientTrafficHistoryWithHttpInfo(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientTrafficHistoryValidateBeforeCall(networkId, clientId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client&#39;s network traffic data over time (asynchronously)
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientTrafficHistoryAsync(String networkId, String clientId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientTrafficHistoryValidateBeforeCall(networkId, clientId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientUsageHistory
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientUsageHistoryCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/usageHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientUsageHistoryValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientUsageHistory(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientUsageHistory(Async)");
        }

        return getNetworkClientUsageHistoryCall(networkId, clientId, _callback);

    }

    /**
     * Return the client&#39;s daily usage history
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientUsageHistory(String networkId, String clientId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientUsageHistoryWithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the client&#39;s daily usage history
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientUsageHistoryWithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientUsageHistoryValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client&#39;s daily usage history (asynchronously)
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientUsageHistoryAsync(String networkId, String clientId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientUsageHistoryValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsCall(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "statuses", statuses));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (ip6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip6", ip6));
        }

        if (ip6Local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip6Local", ip6Local));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (os != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("os", os));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (recentDeviceConnections != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "recentDeviceConnections", recentDeviceConnections));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsValidateBeforeCall(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClients(Async)");
        }

        return getNetworkClientsCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections, _callback);

    }

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @return GetNetworkClients200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public GetNetworkClients200Response getNetworkClients(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections) throws ApiException {
        ApiResponse<GetNetworkClients200Response> localVarResp = getNetworkClientsWithHttpInfo(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections);
        return localVarResp.getData();
    }

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @return ApiResponse&lt;GetNetworkClients200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkClients200Response> getNetworkClientsWithHttpInfo(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections, null);
        Type localVarReturnType = new TypeToken<GetNetworkClients200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the clients that have used this network in the timespan (asynchronously)
     * List the clients that have used this network in the timespan
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param statuses Filters clients based on status. Can be one of &#39;Online&#39; or &#39;Offline&#39;. (optional)
     * @param ip Filters clients based on a partial or full match for the ip address field. (optional)
     * @param ip6 Filters clients based on a partial or full match for the ip6 address field. (optional)
     * @param ip6Local Filters clients based on a partial or full match for the ip6Local address field. (optional)
     * @param mac Filters clients based on a partial or full match for the mac address field. (optional)
     * @param os Filters clients based on a partial or full match for the os (operating system) field. (optional)
     * @param description Filters clients based on a partial or full match for the description field. (optional)
     * @param vlan Filters clients based on the full match for the VLAN field. (optional)
     * @param recentDeviceConnections Filters clients based on recent connection type. Can be one of &#39;Wired&#39; or &#39;Wireless&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsAsync(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, List<String> statuses, String ip, String ip6, String ip6Local, String mac, String os, String description, String vlan, List<String> recentDeviceConnections, final ApiCallback<GetNetworkClients200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkClients200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsApplicationUsage
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsApplicationUsageCall(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/applicationUsage"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clients", clients));
        }

        if (ssidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssidNumber", ssidNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsApplicationUsageValidateBeforeCall(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsApplicationUsage(Async)");
        }

        // verify the required parameter 'clients' is set
        if (clients == null) {
            throw new ApiException("Missing the required parameter 'clients' when calling getNetworkClientsApplicationUsage(Async)");
        }

        return getNetworkClientsApplicationUsageCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);

    }

    /**
     * Return the application usage data for clients
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsApplicationUsage(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsApplicationUsageWithHttpInfo(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return the application usage data for clients
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsApplicationUsageWithHttpInfo(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsApplicationUsageValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the application usage data for clients (asynchronously)
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsApplicationUsageAsync(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsApplicationUsageValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsBandwidthUsageHistory
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsBandwidthUsageHistoryCall(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/bandwidthUsageHistory"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsBandwidthUsageHistoryValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsBandwidthUsageHistory(Async)");
        }

        return getNetworkClientsBandwidthUsageHistoryCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsBandwidthUsageHistory(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsBandwidthUsageHistoryWithHttpInfo(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsBandwidthUsageHistoryWithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsBandwidthUsageHistoryValidateBeforeCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second. (asynchronously)
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsBandwidthUsageHistoryAsync(String networkId, String t0, String t1, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsBandwidthUsageHistoryValidateBeforeCall(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsOverview
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsOverviewCall(String networkId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/overview"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsOverviewValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsOverview(Async)");
        }

        return getNetworkClientsOverviewCall(networkId, t0, t1, timespan, resolution, _callback);

    }

    /**
     * Return overview statistics for network clients
     * Return overview statistics for network clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientsOverview(String networkId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientsOverviewWithHttpInfo(networkId, t0, t1, timespan, resolution);
        return localVarResp.getData();
    }

    /**
     * Return overview statistics for network clients
     * Return overview statistics for network clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientsOverviewWithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer resolution) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsOverviewValidateBeforeCall(networkId, t0, t1, timespan, resolution, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return overview statistics for network clients (asynchronously)
     * Return overview statistics for network clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsOverviewAsync(String networkId, String t0, String t1, Float timespan, Integer resolution, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsOverviewValidateBeforeCall(networkId, t0, t1, timespan, resolution, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsUsageHistories
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsUsageHistoriesCall(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/usageHistories"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clients", clients));
        }

        if (ssidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssidNumber", ssidNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsUsageHistoriesValidateBeforeCall(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsUsageHistories(Async)");
        }

        // verify the required parameter 'clients' is set
        if (clients == null) {
            throw new ApiException("Missing the required parameter 'clients' when calling getNetworkClientsUsageHistories(Async)");
        }

        return getNetworkClientsUsageHistoriesCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);

    }

    /**
     * Return the usage histories for clients
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsUsageHistories(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsUsageHistoriesWithHttpInfo(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        return localVarResp.getData();
    }

    /**
     * Return the usage histories for clients
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsUsageHistoriesWithHttpInfo(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsUsageHistoriesValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the usage histories for clients (asynchronously)
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clients A list of client keys, MACs or IPs separated by comma. (required)
     * @param ssidNumber An SSID number to include. If not specified, events for all SSIDs will be returned. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsUsageHistoriesAsync(String networkId, String clients, Integer ssidNumber, Integer perPage, String startingAfter, String endingBefore, String t0, String t1, Float timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsUsageHistoriesValidateBeforeCall(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkDevices
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevicesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkDevicesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkDevices(Async)");
        }

        return getNetworkDevicesCall(networkId, _callback);

    }

    /**
     * List the devices in a network
     * List the devices in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkDevices(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkDevicesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the devices in a network
     * List the devices in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkDevicesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkDevicesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the devices in a network (asynchronously)
     * List the devices in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevicesAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkDevicesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkEvents
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsCall(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (includedEventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includedEventTypes", includedEventTypes));
        }

        if (excludedEventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "excludedEventTypes", excludedEventTypes));
        }

        if (deviceMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceMac", deviceMac));
        }

        if (deviceSerial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceSerial", deviceSerial));
        }

        if (deviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceName", deviceName));
        }

        if (clientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientIp", clientIp));
        }

        if (clientMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientMac", clientMac));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientName", clientName));
        }

        if (smDeviceMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smDeviceMac", smDeviceMac));
        }

        if (smDeviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smDeviceName", smDeviceName));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkEventsValidateBeforeCall(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkEvents(Async)");
        }

        return getNetworkEventsCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List the events for the network
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return GetNetworkEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public GetNetworkEvents200Response getNetworkEvents(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<GetNetworkEvents200Response> localVarResp = getNetworkEventsWithHttpInfo(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List the events for the network
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;GetNetworkEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkEvents200Response> getNetworkEventsWithHttpInfo(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkEventsValidateBeforeCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<GetNetworkEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the events for the network (asynchronously)
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsAsync(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<GetNetworkEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkEventsValidateBeforeCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkEventsEventTypes
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsEventTypesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/events/eventTypes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkEventsEventTypesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkEventsEventTypes(Async)");
        }

        return getNetworkEventsEventTypesCall(networkId, _callback);

    }

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param networkId  (required)
     * @return List&lt;GetNetworkEventsEventTypes200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkEventsEventTypes200ResponseInner> getNetworkEventsEventTypes(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkEventsEventTypes200ResponseInner>> localVarResp = getNetworkEventsEventTypesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkEventsEventTypes200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkEventsEventTypes200ResponseInner>> getNetworkEventsEventTypesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkEventsEventTypesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkEventsEventTypes200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the event type to human-readable description (asynchronously)
     * List the event type to human-readable description
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsEventTypesAsync(String networkId, final ApiCallback<List<GetNetworkEventsEventTypes200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkEventsEventTypesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkEventsEventTypes200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgrades
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgrades(Async)");
        }

        return getNetworkFirmwareUpgradesCall(networkId, _callback);

    }

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgrades200Response getNetworkFirmwareUpgrades(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgrades200Response> localVarResp = getNetworkFirmwareUpgradesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgrades200Response> getNetworkFirmwareUpgradesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade information for a network (asynchronously)
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesAsync(String networkId, final ApiCallback<GetNetworkFirmwareUpgrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedEvents
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEventsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents(Async)");
        }

        return getNetworkFirmwareUpgradesStagedEventsCall(networkId, _callback);

    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response getNetworkFirmwareUpgradesStagedEvents(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = getNetworkFirmwareUpgradesStagedEventsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> getNetworkFirmwareUpgradesStagedEventsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Staged Upgrade Event from a network (asynchronously)
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEventsAsync(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedGroup
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroupCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        return getNetworkFirmwareUpgradesStagedGroupCall(networkId, groupId, _callback);

    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @return GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedGroups200ResponseInner getNetworkFirmwareUpgradesStagedGroup(String networkId, String groupId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> localVarResp = getNetworkFirmwareUpgradesStagedGroupWithHttpInfo(networkId, groupId);
        return localVarResp.getData();
    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> getNetworkFirmwareUpgradesStagedGroupWithHttpInfo(String networkId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, groupId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Staged Upgrade Group from a network (asynchronously)
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroupAsync(String networkId, String groupId, final ApiCallback<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, groupId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedGroups
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroupsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedGroupsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroups(Async)");
        }

        return getNetworkFirmwareUpgradesStagedGroupsCall(networkId, _callback);

    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> getNetworkFirmwareUpgradesStagedGroups(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> localVarResp = getNetworkFirmwareUpgradesStagedGroupsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> getNetworkFirmwareUpgradesStagedGroupsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroupsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Staged Upgrade Groups in a network (asynchronously)
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroupsAsync(String networkId, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroupsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedStages
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedStagesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/stages"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedStagesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedStages(Async)");
        }

        return getNetworkFirmwareUpgradesStagedStagesCall(networkId, _callback);

    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> getNetworkFirmwareUpgradesStagedStages(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> localVarResp = getNetworkFirmwareUpgradesStagedStagesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> getNetworkFirmwareUpgradesStagedStagesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedStagesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order of Staged Upgrade Groups in a network (asynchronously)
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedStagesAsync(String networkId, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedStagesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFloorPlan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlanCall(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans/{floorPlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "floorPlanId" + "}", localVarApiClient.escapeString(floorPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFloorPlanValidateBeforeCall(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFloorPlan(Async)");
        }

        // verify the required parameter 'floorPlanId' is set
        if (floorPlanId == null) {
            throw new ApiException("Missing the required parameter 'floorPlanId' when calling getNetworkFloorPlan(Async)");
        }

        return getNetworkFloorPlanCall(networkId, floorPlanId, _callback);

    }

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkFloorPlan(String networkId, String floorPlanId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkFloorPlanWithHttpInfo(networkId, floorPlanId);
        return localVarResp.getData();
    }

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkFloorPlanWithHttpInfo(String networkId, String floorPlanId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFloorPlanValidateBeforeCall(networkId, floorPlanId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a floor plan by ID (asynchronously)
     * Find a floor plan by ID
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlanAsync(String networkId, String floorPlanId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFloorPlanValidateBeforeCall(networkId, floorPlanId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFloorPlans
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlansCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFloorPlansValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFloorPlans(Async)");
        }

        return getNetworkFloorPlansCall(networkId, _callback);

    }

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkFloorPlans(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkFloorPlansWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkFloorPlansWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFloorPlansValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the floor plans that belong to your network (asynchronously)
     * List the floor plans that belong to your network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlansAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFloorPlansValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPolicies
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPoliciesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPoliciesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkGroupPolicies(Async)");
        }

        return getNetworkGroupPoliciesCall(networkId, _callback);

    }

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkGroupPolicies(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkGroupPoliciesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkGroupPoliciesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPoliciesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the group policies in a network (asynchronously)
     * List the group policies in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPoliciesAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPoliciesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPolicy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPolicyCall(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies/{groupPolicyId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupPolicyId" + "}", localVarApiClient.escapeString(groupPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPolicyValidateBeforeCall(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkGroupPolicy(Async)");
        }

        // verify the required parameter 'groupPolicyId' is set
        if (groupPolicyId == null) {
            throw new ApiException("Missing the required parameter 'groupPolicyId' when calling getNetworkGroupPolicy(Async)");
        }

        return getNetworkGroupPolicyCall(networkId, groupPolicyId, _callback);

    }

    /**
     * Display a group policy
     * Display a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupPolicy(String networkId, String groupPolicyId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupPolicyWithHttpInfo(networkId, groupPolicyId);
        return localVarResp.getData();
    }

    /**
     * Display a group policy
     * Display a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupPolicyWithHttpInfo(String networkId, String groupPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPolicyValidateBeforeCall(networkId, groupPolicyId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display a group policy (asynchronously)
     * Display a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPolicyAsync(String networkId, String groupPolicyId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPolicyValidateBeforeCall(networkId, groupPolicyId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkHealthAlerts
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkHealthAlertsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/health/alerts"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkHealthAlertsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkHealthAlerts(Async)");
        }

        return getNetworkHealthAlertsCall(networkId, _callback);

    }

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param networkId  (required)
     * @return List&lt;GetNetworkHealthAlerts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkHealthAlerts200ResponseInner> getNetworkHealthAlerts(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkHealthAlerts200ResponseInner>> localVarResp = getNetworkHealthAlertsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkHealthAlerts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkHealthAlerts200ResponseInner>> getNetworkHealthAlertsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkHealthAlertsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkHealthAlerts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all global alerts on this network (asynchronously)
     * Return all global alerts on this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkHealthAlertsAsync(String networkId, final ApiCallback<List<GetNetworkHealthAlerts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkHealthAlertsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkHealthAlerts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMerakiAuthUser
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUserCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMerakiAuthUserValidateBeforeCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUser(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling getNetworkMerakiAuthUser(Async)");
        }

        return getNetworkMerakiAuthUserCall(networkId, merakiAuthUserId, _callback);

    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner getNetworkMerakiAuthUser(String networkId, String merakiAuthUserId) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = getNetworkMerakiAuthUserWithHttpInfo(networkId, merakiAuthUserId);
        return localVarResp.getData();
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> getNetworkMerakiAuthUserWithHttpInfo(String networkId, String merakiAuthUserId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMerakiAuthUserValidateBeforeCall(networkId, merakiAuthUserId, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user (asynchronously)
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUserAsync(String networkId, String merakiAuthUserId, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMerakiAuthUserValidateBeforeCall(networkId, merakiAuthUserId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMerakiAuthUsers
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUsersCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMerakiAuthUsersValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUsers(Async)");
        }

        return getNetworkMerakiAuthUsersCall(networkId, _callback);

    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @return List&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkMerakiAuthUsers200ResponseInner> getNetworkMerakiAuthUsers(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkMerakiAuthUsers200ResponseInner>> localVarResp = getNetworkMerakiAuthUsersWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkMerakiAuthUsers200ResponseInner>> getNetworkMerakiAuthUsersWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMerakiAuthUsersValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkMerakiAuthUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network) (asynchronously)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUsersAsync(String networkId, final ApiCallback<List<GetNetworkMerakiAuthUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMerakiAuthUsersValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkMerakiAuthUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMqttBroker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBrokerCall(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers/{mqttBrokerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "mqttBrokerId" + "}", localVarApiClient.escapeString(mqttBrokerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMqttBrokerValidateBeforeCall(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMqttBroker(Async)");
        }

        // verify the required parameter 'mqttBrokerId' is set
        if (mqttBrokerId == null) {
            throw new ApiException("Missing the required parameter 'mqttBrokerId' when calling getNetworkMqttBroker(Async)");
        }

        return getNetworkMqttBrokerCall(networkId, mqttBrokerId, _callback);

    }

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkMqttBroker(String networkId, String mqttBrokerId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkMqttBrokerWithHttpInfo(networkId, mqttBrokerId);
        return localVarResp.getData();
    }

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkMqttBrokerWithHttpInfo(String networkId, String mqttBrokerId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMqttBrokerValidateBeforeCall(networkId, mqttBrokerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an MQTT broker (asynchronously)
     * Return an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBrokerAsync(String networkId, String mqttBrokerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMqttBrokerValidateBeforeCall(networkId, mqttBrokerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMqttBrokers
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBrokersCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMqttBrokersValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMqttBrokers(Async)");
        }

        return getNetworkMqttBrokersCall(networkId, _callback);

    }

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkMqttBrokers(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkMqttBrokersWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkMqttBrokersWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMqttBrokersValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the MQTT brokers for this network (asynchronously)
     * List the MQTT brokers for this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBrokersAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMqttBrokersValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkNetflow
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkNetflowCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/netflow"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkNetflowValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkNetflow(Async)");
        }

        return getNetworkNetflowCall(networkId, _callback);

    }

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkNetflow(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkNetflowWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkNetflowWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkNetflowValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the NetFlow traffic reporting settings for a network (asynchronously)
     * Return the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkNetflowAsync(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkNetflowValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkNetworkHealthChannelUtilization
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkNetworkHealthChannelUtilizationCall(String networkId, String t0, String t1, Float timespan, Integer resolution, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/networkHealth/channelUtilization"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkNetworkHealthChannelUtilizationValidateBeforeCall(String networkId, String t0, String t1, Float timespan, Integer resolution, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkNetworkHealthChannelUtilization(Async)");
        }

        return getNetworkNetworkHealthChannelUtilizationCall(networkId, t0, t1, timespan, resolution, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Get the channel utilization over each radio for all APs in a network.
     * Get the channel utilization over each radio for all APs in a network.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getNetworkNetworkHealthChannelUtilization(String networkId, String t0, String t1, Float timespan, Integer resolution, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkNetworkHealthChannelUtilizationWithHttpInfo(networkId, t0, t1, timespan, resolution, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Get the channel utilization over each radio for all APs in a network.
     * Get the channel utilization over each radio for all APs in a network.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkNetworkHealthChannelUtilizationWithHttpInfo(String networkId, String t0, String t1, Float timespan, Integer resolution, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkNetworkHealthChannelUtilizationValidateBeforeCall(networkId, t0, t1, timespan, resolution, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the channel utilization over each radio for all APs in a network. (asynchronously)
     * Get the channel utilization over each radio for all APs in a network.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param resolution The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkNetworkHealthChannelUtilizationAsync(String networkId, String t0, String t1, Float timespan, Integer resolution, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkNetworkHealthChannelUtilizationValidateBeforeCall(networkId, t0, t1, timespan, resolution, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiPiiKeys
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiPiiKeysCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/piiKeys"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (imei != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imei", imei));
        }

        if (bluetoothMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bluetoothMac", bluetoothMac));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiPiiKeysValidateBeforeCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiPiiKeys(Async)");
        }

        return getNetworkPiiPiiKeysCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);

    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiPiiKeys(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiPiiKeysWithHttpInfo(networkId, username, email, mac, serial, imei, bluetoothMac);
        return localVarResp.getData();
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiPiiKeysWithHttpInfo(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiPiiKeysValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier (asynchronously)
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiPiiKeysAsync(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiPiiKeysValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiRequest
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequestCall(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests/{requestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiRequestValidateBeforeCall(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiRequest(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getNetworkPiiRequest(Async)");
        }

        return getNetworkPiiRequestCall(networkId, requestId, _callback);

    }

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiRequest(String networkId, String requestId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiRequestWithHttpInfo(networkId, requestId);
        return localVarResp.getData();
    }

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiRequestWithHttpInfo(String networkId, String requestId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiRequestValidateBeforeCall(networkId, requestId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a PII request (asynchronously)
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequestAsync(String networkId, String requestId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiRequestValidateBeforeCall(networkId, requestId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiRequests
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequestsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiRequestsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiRequests(Async)");
        }

        return getNetworkPiiRequestsCall(networkId, _callback);

    }

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkPiiRequests(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkPiiRequestsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkPiiRequestsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiRequestsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the PII requests for this network or organization (asynchronously)
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequestsAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiRequestsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiSmDevicesForKey
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmDevicesForKeyCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/smDevicesForKey"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (imei != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imei", imei));
        }

        if (bluetoothMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bluetoothMac", bluetoothMac));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiSmDevicesForKeyValidateBeforeCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiSmDevicesForKey(Async)");
        }

        return getNetworkPiiSmDevicesForKeyCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);

    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiSmDevicesForKey(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiSmDevicesForKeyWithHttpInfo(networkId, username, email, mac, serial, imei, bluetoothMac);
        return localVarResp.getData();
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiSmDevicesForKeyWithHttpInfo(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiSmDevicesForKeyValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier (asynchronously)
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmDevicesForKeyAsync(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiSmDevicesForKeyValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiSmOwnersForKey
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmOwnersForKeyCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/smOwnersForKey"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (imei != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imei", imei));
        }

        if (bluetoothMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bluetoothMac", bluetoothMac));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiSmOwnersForKeyValidateBeforeCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiSmOwnersForKey(Async)");
        }

        return getNetworkPiiSmOwnersForKeyCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);

    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiSmOwnersForKey(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiSmOwnersForKeyWithHttpInfo(networkId, username, email, mac, serial, imei, bluetoothMac);
        return localVarResp.getData();
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiSmOwnersForKeyWithHttpInfo(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiSmOwnersForKeyValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier (asynchronously)
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmOwnersForKeyAsync(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiSmOwnersForKeyValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPoliciesByClient
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPoliciesByClientCall(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/policies/byClient"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPoliciesByClientValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPoliciesByClient(Async)");
        }

        return getNetworkPoliciesByClientCall(networkId, perPage, startingAfter, endingBefore, t0, timespan, _callback);

    }

    /**
     * Get policies for all clients with policies
     * Get policies for all clients with policies
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;GetNetworkPoliciesByClient200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkPoliciesByClient200ResponseInner> getNetworkPoliciesByClient(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan) throws ApiException {
        ApiResponse<List<GetNetworkPoliciesByClient200ResponseInner>> localVarResp = getNetworkPoliciesByClientWithHttpInfo(networkId, perPage, startingAfter, endingBefore, t0, timespan);
        return localVarResp.getData();
    }

    /**
     * Get policies for all clients with policies
     * Get policies for all clients with policies
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkPoliciesByClient200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkPoliciesByClient200ResponseInner>> getNetworkPoliciesByClientWithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPoliciesByClientValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, t0, timespan, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkPoliciesByClient200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get policies for all clients with policies (asynchronously)
     * Get policies for all clients with policies
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPoliciesByClientAsync(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan, final ApiCallback<List<GetNetworkPoliciesByClient200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPoliciesByClientValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, t0, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkPoliciesByClient200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSettings
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSettingsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSettingsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSettings(Async)");
        }

        return getNetworkSettingsCall(networkId, _callback);

    }

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param networkId  (required)
     * @return GetNetworkSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSettings200Response getNetworkSettings(String networkId) throws ApiException {
        ApiResponse<GetNetworkSettings200Response> localVarResp = getNetworkSettingsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSettings200Response> getNetworkSettingsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSettingsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the settings for a network (asynchronously)
     * Return the settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSettingsAsync(String networkId, final ApiCallback<GetNetworkSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSettingsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSnmp
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSnmpCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/snmp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSnmpValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSnmp(Async)");
        }

        return getNetworkSnmpCall(networkId, _callback);

    }

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSnmp(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSnmpWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSnmpWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSnmpValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the SNMP settings for a network (asynchronously)
     * Return the SNMP settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSnmpAsync(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSnmpValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSplashLoginAttempts
     * @param networkId  (required)
     * @param ssidNumber Only return the login attempts for the specified SSID (optional)
     * @param loginIdentifier The username, email, or phone number used during login (optional)
     * @param timespan The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSplashLoginAttemptsCall(String networkId, Integer ssidNumber, String loginIdentifier, Integer timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/splashLoginAttempts"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ssidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssidNumber", ssidNumber));
        }

        if (loginIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loginIdentifier", loginIdentifier));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSplashLoginAttemptsValidateBeforeCall(String networkId, Integer ssidNumber, String loginIdentifier, Integer timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSplashLoginAttempts(Async)");
        }

        return getNetworkSplashLoginAttemptsCall(networkId, ssidNumber, loginIdentifier, timespan, _callback);

    }

    /**
     * List the splash login attempts for a network
     * List the splash login attempts for a network
     * @param networkId  (required)
     * @param ssidNumber Only return the login attempts for the specified SSID (optional)
     * @param loginIdentifier The username, email, or phone number used during login (optional)
     * @param timespan The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSplashLoginAttempts(String networkId, Integer ssidNumber, String loginIdentifier, Integer timespan) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSplashLoginAttemptsWithHttpInfo(networkId, ssidNumber, loginIdentifier, timespan);
        return localVarResp.getData();
    }

    /**
     * List the splash login attempts for a network
     * List the splash login attempts for a network
     * @param networkId  (required)
     * @param ssidNumber Only return the login attempts for the specified SSID (optional)
     * @param loginIdentifier The username, email, or phone number used during login (optional)
     * @param timespan The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSplashLoginAttemptsWithHttpInfo(String networkId, Integer ssidNumber, String loginIdentifier, Integer timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSplashLoginAttemptsValidateBeforeCall(networkId, ssidNumber, loginIdentifier, timespan, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the splash login attempts for a network (asynchronously)
     * List the splash login attempts for a network
     * @param networkId  (required)
     * @param ssidNumber Only return the login attempts for the specified SSID (optional)
     * @param loginIdentifier The username, email, or phone number used during login (optional)
     * @param timespan The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSplashLoginAttemptsAsync(String networkId, Integer ssidNumber, String loginIdentifier, Integer timespan, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSplashLoginAttemptsValidateBeforeCall(networkId, ssidNumber, loginIdentifier, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSyslogServers
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSyslogServersCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/syslogServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSyslogServersValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSyslogServers(Async)");
        }

        return getNetworkSyslogServersCall(networkId, _callback);

    }

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param networkId  (required)
     * @return GetNetworkSyslogServers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSyslogServers200Response getNetworkSyslogServers(String networkId) throws ApiException {
        ApiResponse<GetNetworkSyslogServers200Response> localVarResp = getNetworkSyslogServersWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSyslogServers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSyslogServers200Response> getNetworkSyslogServersWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSyslogServersValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the syslog servers for a network (asynchronously)
     * List the syslog servers for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSyslogServersAsync(String networkId, final ApiCallback<GetNetworkSyslogServers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSyslogServersValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTopologyLinkLayer
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTopologyLinkLayerCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/topology/linkLayer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTopologyLinkLayerValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTopologyLinkLayer(Async)");
        }

        return getNetworkTopologyLinkLayerCall(networkId, _callback);

    }

    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkTopologyLinkLayer(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkTopologyLinkLayerWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkTopologyLinkLayerWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTopologyLinkLayerValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network. (asynchronously)
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTopologyLinkLayerAsync(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTopologyLinkLayerValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTraffic
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days. (optional)
     * @param deviceType Filter the data by device type: &#39;combined&#39;, &#39;wireless&#39;, &#39;switch&#39; or &#39;appliance&#39;. Defaults to &#39;combined&#39;. When using &#39;combined&#39;, for each rule the data will come from the device type with the most usage. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficCall(String networkId, String t0, Float timespan, String deviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/traffic"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceType", deviceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficValidateBeforeCall(String networkId, String t0, Float timespan, String deviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTraffic(Async)");
        }

        return getNetworkTrafficCall(networkId, t0, timespan, deviceType, _callback);

    }

    /**
     * Return the traffic analysis data for this network
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days. (optional)
     * @param deviceType Filter the data by device type: &#39;combined&#39;, &#39;wireless&#39;, &#39;switch&#39; or &#39;appliance&#39;. Defaults to &#39;combined&#39;. When using &#39;combined&#39;, for each rule the data will come from the device type with the most usage. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkTraffic(String networkId, String t0, Float timespan, String deviceType) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkTrafficWithHttpInfo(networkId, t0, timespan, deviceType);
        return localVarResp.getData();
    }

    /**
     * Return the traffic analysis data for this network
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days. (optional)
     * @param deviceType Filter the data by device type: &#39;combined&#39;, &#39;wireless&#39;, &#39;switch&#39; or &#39;appliance&#39;. Defaults to &#39;combined&#39;. When using &#39;combined&#39;, for each rule the data will come from the device type with the most usage. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkTrafficWithHttpInfo(String networkId, String t0, Float timespan, String deviceType) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficValidateBeforeCall(networkId, t0, timespan, deviceType, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the traffic analysis data for this network (asynchronously)
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days. (optional)
     * @param deviceType Filter the data by device type: &#39;combined&#39;, &#39;wireless&#39;, &#39;switch&#39; or &#39;appliance&#39;. Defaults to &#39;combined&#39;. When using &#39;combined&#39;, for each rule the data will come from the device type with the most usage. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficAsync(String networkId, String t0, Float timespan, String deviceType, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficValidateBeforeCall(networkId, t0, timespan, deviceType, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTrafficAnalysis
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficAnalysisCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficAnalysis"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficAnalysisValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTrafficAnalysis(Async)");
        }

        return getNetworkTrafficAnalysisCall(networkId, _callback);

    }

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkTrafficAnalysis(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkTrafficAnalysisWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkTrafficAnalysisWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficAnalysisValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the traffic analysis settings for a network (asynchronously)
     * Return the traffic analysis settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficAnalysisAsync(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficAnalysisValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTrafficShapingApplicationCategories
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingApplicationCategoriesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficShaping/applicationCategories"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficShapingApplicationCategoriesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingApplicationCategories(Async)");
        }

        return getNetworkTrafficShapingApplicationCategoriesCall(networkId, _callback);

    }

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkTrafficShapingApplicationCategories(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkTrafficShapingApplicationCategoriesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkTrafficShapingApplicationCategoriesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficShapingApplicationCategoriesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the application categories for traffic shaping rules. (asynchronously)
     * Returns the application categories for traffic shaping rules.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingApplicationCategoriesAsync(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficShapingApplicationCategoriesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTrafficShapingDscpTaggingOptions
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingDscpTaggingOptionsCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficShaping/dscpTaggingOptions"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficShapingDscpTaggingOptionsValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingDscpTaggingOptions(Async)");
        }

        return getNetworkTrafficShapingDscpTaggingOptionsCall(networkId, _callback);

    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkTrafficShapingDscpTaggingOptions(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkTrafficShapingDscpTaggingOptionsWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkTrafficShapingDscpTaggingOptionsWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficShapingDscpTaggingOptionsValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules. (asynchronously)
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingDscpTaggingOptionsAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficShapingDscpTaggingOptionsValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksHttpServer
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServerCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksHttpServerValidateBeforeCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServer(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling getNetworkWebhooksHttpServer(Async)");
        }

        return getNetworkWebhooksHttpServerCall(networkId, httpServerId, _callback);

    }

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner getNetworkWebhooksHttpServer(String networkId, String httpServerId) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = getNetworkWebhooksHttpServerWithHttpInfo(networkId, httpServerId);
        return localVarResp.getData();
    }

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> getNetworkWebhooksHttpServerWithHttpInfo(String networkId, String httpServerId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksHttpServerValidateBeforeCall(networkId, httpServerId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an HTTP server for a network (asynchronously)
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServerAsync(String networkId, String httpServerId, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksHttpServerValidateBeforeCall(networkId, httpServerId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksHttpServers
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServersCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksHttpServersValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServers(Async)");
        }

        return getNetworkWebhooksHttpServersCall(networkId, _callback);

    }

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWebhooksHttpServers200ResponseInner> getNetworkWebhooksHttpServers(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkWebhooksHttpServers200ResponseInner>> localVarResp = getNetworkWebhooksHttpServersWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWebhooksHttpServers200ResponseInner>> getNetworkWebhooksHttpServersWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksHttpServersValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksHttpServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the HTTP servers for a network (asynchronously)
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServersAsync(String networkId, final ApiCallback<List<GetNetworkWebhooksHttpServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksHttpServersValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksHttpServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksPayloadTemplate
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplateCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksPayloadTemplateValidateBeforeCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplate(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling getNetworkWebhooksPayloadTemplate(Async)");
        }

        return getNetworkWebhooksPayloadTemplateCall(networkId, payloadTemplateId, _callback);

    }

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner getNetworkWebhooksPayloadTemplate(String networkId, String payloadTemplateId) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = getNetworkWebhooksPayloadTemplateWithHttpInfo(networkId, payloadTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> getNetworkWebhooksPayloadTemplateWithHttpInfo(String networkId, String payloadTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, payloadTemplateId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the webhook payload template for a network (asynchronously)
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplateAsync(String networkId, String payloadTemplateId, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, payloadTemplateId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksPayloadTemplates
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplatesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksPayloadTemplatesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplates(Async)");
        }

        return getNetworkWebhooksPayloadTemplatesCall(networkId, _callback);

    }

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWebhooksPayloadTemplates200ResponseInner> getNetworkWebhooksPayloadTemplates(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> localVarResp = getNetworkWebhooksPayloadTemplatesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> getNetworkWebhooksPayloadTemplatesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplatesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the webhook payload templates for a network (asynchronously)
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplatesAsync(String networkId, final ApiCallback<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplatesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksWebhookTest
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksWebhookTestCall(String networkId, String webhookTestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/webhookTests/{webhookTestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "webhookTestId" + "}", localVarApiClient.escapeString(webhookTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksWebhookTestValidateBeforeCall(String networkId, String webhookTestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksWebhookTest(Async)");
        }

        // verify the required parameter 'webhookTestId' is set
        if (webhookTestId == null) {
            throw new ApiException("Missing the required parameter 'webhookTestId' when calling getNetworkWebhooksWebhookTest(Async)");
        }

        return getNetworkWebhooksWebhookTestCall(networkId, webhookTestId, _callback);

    }

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @return CreateNetworkWebhooksWebhookTest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWebhooksWebhookTest201Response getNetworkWebhooksWebhookTest(String networkId, String webhookTestId) throws ApiException {
        ApiResponse<CreateNetworkWebhooksWebhookTest201Response> localVarResp = getNetworkWebhooksWebhookTestWithHttpInfo(networkId, webhookTestId);
        return localVarResp.getData();
    }

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @return ApiResponse&lt;CreateNetworkWebhooksWebhookTest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWebhooksWebhookTest201Response> getNetworkWebhooksWebhookTestWithHttpInfo(String networkId, String webhookTestId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksWebhookTestValidateBeforeCall(networkId, webhookTestId, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the status of a webhook test for a network (asynchronously)
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksWebhookTestAsync(String networkId, String webhookTestId, final ApiCallback<CreateNetworkWebhooksWebhookTest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksWebhookTestValidateBeforeCall(networkId, webhookTestId, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringNetworks_4
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_4Call(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceType", deviceType));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_4ValidateBeforeCall(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_4(Async)");
        }

        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_4(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringNetworks_4Call(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetwork200Response> getOrganizationInventoryOnboardingCloudMonitoringNetworks_4(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetwork200Response>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringNetworks_4WithHttpInfo(organizationId, deviceType, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetwork200Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetwork200Response>> getOrganizationInventoryOnboardingCloudMonitoringNetworks_4WithHttpInfo(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_4ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device (asynchronously)
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_4Async(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetwork200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_4ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationNetworks_1
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationNetworks_1Call(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configTemplateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configTemplateId", configTemplateId));
        }

        if (isBoundToConfigTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBoundToConfigTemplate", isBoundToConfigTemplate));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationNetworks_1ValidateBeforeCall(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationNetworks_1(Async)");
        }

        return getOrganizationNetworks_1Call(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetwork200Response> getOrganizationNetworks_1(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetwork200Response>> localVarResp = getOrganizationNetworks_1WithHttpInfo(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetwork200Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetwork200Response>> getOrganizationNetworks_1WithHttpInfo(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationNetworks_1ValidateBeforeCall(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the networks that the user has privileges on in an organization (asynchronously)
     * List the networks that the user has privileges on in an organization
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationNetworks_1Async(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetwork200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationNetworks_1ValidateBeforeCall(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionNetworkClients
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkClientsCall(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionNetworkClientsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/provision"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionNetworkClientsValidateBeforeCall(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling provisionNetworkClients(Async)");
        }

        // verify the required parameter 'provisionNetworkClientsRequest' is set
        if (provisionNetworkClientsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionNetworkClientsRequest' when calling provisionNetworkClients(Async)");
        }

        return provisionNetworkClientsCall(networkId, provisionNetworkClientsRequest, _callback);

    }

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object provisionNetworkClients(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = provisionNetworkClientsWithHttpInfo(networkId, provisionNetworkClientsRequest);
        return localVarResp.getData();
    }

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> provisionNetworkClientsWithHttpInfo(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionNetworkClientsValidateBeforeCall(networkId, provisionNetworkClientsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provisions a client with a name and policy (asynchronously)
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkClientsAsync(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionNetworkClientsValidateBeforeCall(networkId, provisionNetworkClientsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeNetworkDevices
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkDevicesCall(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeNetworkDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/remove"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeNetworkDevicesValidateBeforeCall(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling removeNetworkDevices(Async)");
        }

        // verify the required parameter 'removeNetworkDevicesRequest' is set
        if (removeNetworkDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'removeNetworkDevicesRequest' when calling removeNetworkDevices(Async)");
        }

        return removeNetworkDevicesCall(networkId, removeNetworkDevicesRequest, _callback);

    }

    /**
     * Remove a single device
     * Remove a single device
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void removeNetworkDevices(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest) throws ApiException {
        removeNetworkDevicesWithHttpInfo(networkId, removeNetworkDevicesRequest);
    }

    /**
     * Remove a single device
     * Remove a single device
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeNetworkDevicesWithHttpInfo(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = removeNetworkDevicesValidateBeforeCall(networkId, removeNetworkDevicesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a single device (asynchronously)
     * Remove a single device
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkDevicesAsync(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeNetworkDevicesValidateBeforeCall(networkId, removeNetworkDevicesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbacksNetworkFirmwareUpgradesStagedEvents
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEventsCall(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents(Async)");
        }

        // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents(Async)");
        }

        return rollbacksNetworkFirmwareUpgradesStagedEventsCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response rollbacksNetworkFirmwareUpgradesStagedEvents(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = rollbacksNetworkFirmwareUpgradesStagedEventsWithHttpInfo(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> rollbacksNetworkFirmwareUpgradesStagedEventsWithHttpInfo(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Staged Upgrade Event for a network (asynchronously)
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEventsAsync(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitNetwork
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitNetworkCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/split"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitNetworkValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling splitNetwork(Async)");
        }

        return splitNetworkCall(networkId, _callback);

    }

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param networkId  (required)
     * @return SplitNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SplitNetwork200Response splitNetwork(String networkId) throws ApiException {
        ApiResponse<SplitNetwork200Response> localVarResp = splitNetworkWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param networkId  (required)
     * @return ApiResponse&lt;SplitNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitNetwork200Response> splitNetworkWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = splitNetworkValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<SplitNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Split a combined network into individual networks for each type of device (asynchronously)
     * Split a combined network into individual networks for each type of device
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitNetworkAsync(String networkId, final ApiCallback<SplitNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitNetworkValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<SplitNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unbindNetwork
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbindNetworkCall(String networkId, UnbindNetworkRequest unbindNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unbindNetworkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/unbind"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unbindNetworkValidateBeforeCall(String networkId, UnbindNetworkRequest unbindNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling unbindNetwork(Async)");
        }

        return unbindNetworkCall(networkId, unbindNetworkRequest, _callback);

    }

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response unbindNetwork(String networkId, UnbindNetworkRequest unbindNetworkRequest) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = unbindNetworkWithHttpInfo(networkId, unbindNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> unbindNetworkWithHttpInfo(String networkId, UnbindNetworkRequest unbindNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = unbindNetworkValidateBeforeCall(networkId, unbindNetworkRequest, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unbind a network from a template. (asynchronously)
     * Unbind a network from a template.
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbindNetworkAsync(String networkId, UnbindNetworkRequest unbindNetworkRequest, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unbindNetworkValidateBeforeCall(networkId, unbindNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetwork
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCall(String networkId, UpdateNetworkRequest updateNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkValidateBeforeCall(String networkId, UpdateNetworkRequest updateNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetwork(Async)");
        }

        return updateNetworkCall(networkId, updateNetworkRequest, _callback);

    }

    /**
     * Update a network
     * Update a network
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response updateNetwork(String networkId, UpdateNetworkRequest updateNetworkRequest) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = updateNetworkWithHttpInfo(networkId, updateNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Update a network
     * Update a network
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> updateNetworkWithHttpInfo(String networkId, UpdateNetworkRequest updateNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkValidateBeforeCall(networkId, updateNetworkRequest, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a network (asynchronously)
     * Update a network
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAsync(String networkId, UpdateNetworkRequest updateNetworkRequest, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkValidateBeforeCall(networkId, updateNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkAlertsSettings
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAlertsSettingsCall(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkAlertsSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/alerts/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkAlertsSettingsValidateBeforeCall(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings(Async)");
        }

        return updateNetworkAlertsSettingsCall(networkId, updateNetworkAlertsSettingsRequest, _callback);

    }

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkAlertsSettings(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkAlertsSettingsWithHttpInfo(networkId, updateNetworkAlertsSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkAlertsSettingsWithHttpInfo(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkAlertsSettingsValidateBeforeCall(networkId, updateNetworkAlertsSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the alert configuration for this network (asynchronously)
     * Update the alert configuration for this network
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAlertsSettingsAsync(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkAlertsSettingsValidateBeforeCall(networkId, updateNetworkAlertsSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkClientPolicy
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientPolicyCall(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkClientPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/policy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkClientPolicyValidateBeforeCall(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy(Async)");
        }

        // verify the required parameter 'updateNetworkClientPolicyRequest' is set
        if (updateNetworkClientPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkClientPolicyRequest' when calling updateNetworkClientPolicy(Async)");
        }

        return updateNetworkClientPolicyCall(networkId, clientId, updateNetworkClientPolicyRequest, _callback);

    }

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkClientPolicy(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkClientPolicyWithHttpInfo(networkId, clientId, updateNetworkClientPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkClientPolicyWithHttpInfo(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkClientPolicyValidateBeforeCall(networkId, clientId, updateNetworkClientPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the policy assigned to a client on the network (asynchronously)
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientPolicyAsync(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkClientPolicyValidateBeforeCall(networkId, clientId, updateNetworkClientPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkClientSplashAuthorizationStatus
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientSplashAuthorizationStatusCall(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkClientSplashAuthorizationStatusRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkClientSplashAuthorizationStatusValidateBeforeCall(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus(Async)");
        }

        // verify the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' is set
        if (updateNetworkClientSplashAuthorizationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' when calling updateNetworkClientSplashAuthorizationStatus(Async)");
        }

        return updateNetworkClientSplashAuthorizationStatusCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, _callback);

    }

    /**
     * Update a client&#39;s splash authorization
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkClientSplashAuthorizationStatus(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkClientSplashAuthorizationStatusWithHttpInfo(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update a client&#39;s splash authorization
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkClientSplashAuthorizationStatusWithHttpInfo(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkClientSplashAuthorizationStatusValidateBeforeCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a client&#39;s splash authorization (asynchronously)
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientSplashAuthorizationStatusAsync(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkClientSplashAuthorizationStatusValidateBeforeCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgrades
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesCall(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgrades(Async)");
        }

        return updateNetworkFirmwareUpgradesCall(networkId, updateNetworkFirmwareUpgradesRequest, _callback);

    }

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @return GetNetworkFirmwareUpgrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgrades200Response updateNetworkFirmwareUpgrades(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgrades200Response> localVarResp = updateNetworkFirmwareUpgradesWithHttpInfo(networkId, updateNetworkFirmwareUpgradesRequest);
        return localVarResp.getData();
    }

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgrades200Response> updateNetworkFirmwareUpgradesWithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update firmware upgrade information for a network (asynchronously)
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesAsync(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback<GetNetworkFirmwareUpgrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedEvents
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEventsCall(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents(Async)");
        }

        // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (updateNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedEventsCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response updateNetworkFirmwareUpgradesStagedEvents(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = updateNetworkFirmwareUpgradesStagedEventsWithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> updateNetworkFirmwareUpgradesStagedEventsWithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Staged Upgrade Event for a network (asynchronously)
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEventsAsync(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEventsValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedGroup
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedGroupCall(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
        if (createNetworkFirmwareUpgradesStagedGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling updateNetworkFirmwareUpgradesStagedGroup(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedGroupCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);

    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkFirmwareUpgradesStagedGroup(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkFirmwareUpgradesStagedGroupWithHttpInfo(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkFirmwareUpgradesStagedGroupWithHttpInfo(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Staged Upgrade Group for a network (asynchronously)
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedGroupAsync(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedGroupValidateBeforeCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedStages
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedStagesCall(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedStagesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/stages"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedStagesValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedStages(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedStagesCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, _callback);

    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> updateNetworkFirmwareUpgradesStagedStages(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> localVarResp = updateNetworkFirmwareUpgradesStagedStagesWithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest);
        return localVarResp.getData();
    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> updateNetworkFirmwareUpgradesStagedStagesWithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedStagesValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Staged Upgrade Group order in the sequence. (asynchronously)
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedStagesAsync(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedStagesValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFloorPlan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFloorPlanCall(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFloorPlanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans/{floorPlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "floorPlanId" + "}", localVarApiClient.escapeString(floorPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFloorPlanValidateBeforeCall(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFloorPlan(Async)");
        }

        // verify the required parameter 'floorPlanId' is set
        if (floorPlanId == null) {
            throw new ApiException("Missing the required parameter 'floorPlanId' when calling updateNetworkFloorPlan(Async)");
        }

        return updateNetworkFloorPlanCall(networkId, floorPlanId, updateNetworkFloorPlanRequest, _callback);

    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data
     * Update a floor plan&#39;s geolocation and other meta data
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkFloorPlan(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkFloorPlanWithHttpInfo(networkId, floorPlanId, updateNetworkFloorPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data
     * Update a floor plan&#39;s geolocation and other meta data
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkFloorPlanWithHttpInfo(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFloorPlanValidateBeforeCall(networkId, floorPlanId, updateNetworkFloorPlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data (asynchronously)
     * Update a floor plan&#39;s geolocation and other meta data
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFloorPlanAsync(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFloorPlanValidateBeforeCall(networkId, floorPlanId, updateNetworkFloorPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkGroupPolicy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkGroupPolicyCall(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkGroupPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies/{groupPolicyId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupPolicyId" + "}", localVarApiClient.escapeString(groupPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkGroupPolicyValidateBeforeCall(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkGroupPolicy(Async)");
        }

        // verify the required parameter 'groupPolicyId' is set
        if (groupPolicyId == null) {
            throw new ApiException("Missing the required parameter 'groupPolicyId' when calling updateNetworkGroupPolicy(Async)");
        }

        return updateNetworkGroupPolicyCall(networkId, groupPolicyId, updateNetworkGroupPolicyRequest, _callback);

    }

    /**
     * Update a group policy
     * Update a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkGroupPolicy(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkGroupPolicyWithHttpInfo(networkId, groupPolicyId, updateNetworkGroupPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a group policy
     * Update a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkGroupPolicyWithHttpInfo(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkGroupPolicyValidateBeforeCall(networkId, groupPolicyId, updateNetworkGroupPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a group policy (asynchronously)
     * Update a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkGroupPolicyAsync(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkGroupPolicyValidateBeforeCall(networkId, groupPolicyId, updateNetworkGroupPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkMerakiAuthUser
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMerakiAuthUserCall(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkMerakiAuthUserRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkMerakiAuthUserValidateBeforeCall(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkMerakiAuthUser(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling updateNetworkMerakiAuthUser(Async)");
        }

        return updateNetworkMerakiAuthUserCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, _callback);

    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner updateNetworkMerakiAuthUser(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = updateNetworkMerakiAuthUserWithHttpInfo(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> updateNetworkMerakiAuthUserWithHttpInfo(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkMerakiAuthUserValidateBeforeCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated) (asynchronously)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMerakiAuthUserAsync(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkMerakiAuthUserValidateBeforeCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkMqttBroker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMqttBrokerCall(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkMqttBrokerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers/{mqttBrokerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "mqttBrokerId" + "}", localVarApiClient.escapeString(mqttBrokerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkMqttBrokerValidateBeforeCall(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkMqttBroker(Async)");
        }

        // verify the required parameter 'mqttBrokerId' is set
        if (mqttBrokerId == null) {
            throw new ApiException("Missing the required parameter 'mqttBrokerId' when calling updateNetworkMqttBroker(Async)");
        }

        return updateNetworkMqttBrokerCall(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest, _callback);

    }

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkMqttBroker(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkMqttBrokerWithHttpInfo(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest);
        return localVarResp.getData();
    }

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkMqttBrokerWithHttpInfo(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkMqttBrokerValidateBeforeCall(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an MQTT broker (asynchronously)
     * Update an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMqttBrokerAsync(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkMqttBrokerValidateBeforeCall(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkNetflow
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkNetflowCall(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkNetflowRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/netflow"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkNetflowValidateBeforeCall(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkNetflow(Async)");
        }

        return updateNetworkNetflowCall(networkId, updateNetworkNetflowRequest, _callback);

    }

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkNetflow(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkNetflowWithHttpInfo(networkId, updateNetworkNetflowRequest);
        return localVarResp.getData();
    }

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkNetflowWithHttpInfo(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkNetflowValidateBeforeCall(networkId, updateNetworkNetflowRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the NetFlow traffic reporting settings for a network (asynchronously)
     * Update the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkNetflowAsync(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkNetflowValidateBeforeCall(networkId, updateNetworkNetflowRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSettings
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSettingsCall(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSettingsValidateBeforeCall(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSettings(Async)");
        }

        return updateNetworkSettingsCall(networkId, updateNetworkSettingsRequest, _callback);

    }

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @return GetNetworkSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSettings200Response updateNetworkSettings(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkSettings200Response> localVarResp = updateNetworkSettingsWithHttpInfo(networkId, updateNetworkSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSettings200Response> updateNetworkSettingsWithHttpInfo(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSettingsValidateBeforeCall(networkId, updateNetworkSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the settings for a network (asynchronously)
     * Update the settings for a network
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSettingsAsync(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest, final ApiCallback<GetNetworkSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSettingsValidateBeforeCall(networkId, updateNetworkSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSnmp
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSnmpCall(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSnmpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/snmp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSnmpValidateBeforeCall(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSnmp(Async)");
        }

        return updateNetworkSnmpCall(networkId, updateNetworkSnmpRequest, _callback);

    }

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSnmp(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSnmpWithHttpInfo(networkId, updateNetworkSnmpRequest);
        return localVarResp.getData();
    }

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSnmpWithHttpInfo(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSnmpValidateBeforeCall(networkId, updateNetworkSnmpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the SNMP settings for a network (asynchronously)
     * Update the SNMP settings for a network
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSnmpAsync(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSnmpValidateBeforeCall(networkId, updateNetworkSnmpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSyslogServers
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSyslogServersCall(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSyslogServersRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/syslogServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSyslogServersValidateBeforeCall(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSyslogServers(Async)");
        }

        // verify the required parameter 'updateNetworkSyslogServersRequest' is set
        if (updateNetworkSyslogServersRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSyslogServersRequest' when calling updateNetworkSyslogServers(Async)");
        }

        return updateNetworkSyslogServersCall(networkId, updateNetworkSyslogServersRequest, _callback);

    }

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @return GetNetworkSyslogServers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSyslogServers200Response updateNetworkSyslogServers(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest) throws ApiException {
        ApiResponse<GetNetworkSyslogServers200Response> localVarResp = updateNetworkSyslogServersWithHttpInfo(networkId, updateNetworkSyslogServersRequest);
        return localVarResp.getData();
    }

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @return ApiResponse&lt;GetNetworkSyslogServers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSyslogServers200Response> updateNetworkSyslogServersWithHttpInfo(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSyslogServersValidateBeforeCall(networkId, updateNetworkSyslogServersRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the syslog servers for a network (asynchronously)
     * Update the syslog servers for a network
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSyslogServersAsync(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest, final ApiCallback<GetNetworkSyslogServers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSyslogServersValidateBeforeCall(networkId, updateNetworkSyslogServersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkTrafficAnalysis
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkTrafficAnalysisCall(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkTrafficAnalysisRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficAnalysis"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkTrafficAnalysisValidateBeforeCall(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkTrafficAnalysis(Async)");
        }

        return updateNetworkTrafficAnalysisCall(networkId, updateNetworkTrafficAnalysisRequest, _callback);

    }

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkTrafficAnalysis(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkTrafficAnalysisWithHttpInfo(networkId, updateNetworkTrafficAnalysisRequest);
        return localVarResp.getData();
    }

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkTrafficAnalysisWithHttpInfo(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkTrafficAnalysisValidateBeforeCall(networkId, updateNetworkTrafficAnalysisRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the traffic analysis settings for a network (asynchronously)
     * Update the traffic analysis settings for a network
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkTrafficAnalysisAsync(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkTrafficAnalysisValidateBeforeCall(networkId, updateNetworkTrafficAnalysisRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWebhooksHttpServer
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksHttpServerCall(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWebhooksHttpServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWebhooksHttpServerValidateBeforeCall(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWebhooksHttpServer(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling updateNetworkWebhooksHttpServer(Async)");
        }

        return updateNetworkWebhooksHttpServerCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, _callback);

    }

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner updateNetworkWebhooksHttpServer(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = updateNetworkWebhooksHttpServerWithHttpInfo(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> updateNetworkWebhooksHttpServerWithHttpInfo(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWebhooksHttpServerValidateBeforeCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an HTTP server (asynchronously)
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksHttpServerAsync(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWebhooksHttpServerValidateBeforeCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWebhooksPayloadTemplate
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksPayloadTemplateCall(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWebhooksPayloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWebhooksPayloadTemplateValidateBeforeCall(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWebhooksPayloadTemplate(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling updateNetworkWebhooksPayloadTemplate(Async)");
        }

        return updateNetworkWebhooksPayloadTemplateCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, _callback);

    }

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner updateNetworkWebhooksPayloadTemplate(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = updateNetworkWebhooksPayloadTemplateWithHttpInfo(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> updateNetworkWebhooksPayloadTemplateWithHttpInfo(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a webhook payload template for a network (asynchronously)
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksPayloadTemplateAsync(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWebhooksPayloadTemplateValidateBeforeCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vmxNetworkDevicesClaim
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vmxNetworkDevicesClaimCall(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmxNetworkDevicesClaimRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/claim/vmx"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vmxNetworkDevicesClaimValidateBeforeCall(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling vmxNetworkDevicesClaim(Async)");
        }

        // verify the required parameter 'vmxNetworkDevicesClaimRequest' is set
        if (vmxNetworkDevicesClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'vmxNetworkDevicesClaimRequest' when calling vmxNetworkDevicesClaim(Async)");
        }

        return vmxNetworkDevicesClaimCall(networkId, vmxNetworkDevicesClaimRequest, _callback);

    }

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object vmxNetworkDevicesClaim(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest) throws ApiException {
        ApiResponse<Object> localVarResp = vmxNetworkDevicesClaimWithHttpInfo(networkId, vmxNetworkDevicesClaimRequest);
        return localVarResp.getData();
    }

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> vmxNetworkDevicesClaimWithHttpInfo(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = vmxNetworkDevicesClaimValidateBeforeCall(networkId, vmxNetworkDevicesClaimRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claim a vMX into a network (asynchronously)
     * Claim a vMX into a network
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vmxNetworkDevicesClaimAsync(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = vmxNetworkDevicesClaimValidateBeforeCall(networkId, vmxNetworkDevicesClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
