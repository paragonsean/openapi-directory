/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgradesByDevice200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ByDeviceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ByDeviceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ByDeviceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4Call(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4(Async)");
        }

        return getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4Call(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner> getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>> localVarResp = getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4WithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>> getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings (asynchronously)
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4Async(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_4ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationDevicesPowerModulesStatusesByDevice_4
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevicesPowerModulesStatusesByDevice_4Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/devices/powerModules/statuses/byDevice"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productTypes", productTypes));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDevicesPowerModulesStatusesByDevice_4ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationDevicesPowerModulesStatusesByDevice_4(Async)");
        }

        return getOrganizationDevicesPowerModulesStatusesByDevice_4Call(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType, _callback);

    }

    /**
     * List the power status information for devices in an organization
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @return List&lt;GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner> getOrganizationDevicesPowerModulesStatusesByDevice_4(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType) throws ApiException {
        ApiResponse<List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>> localVarResp = getOrganizationDevicesPowerModulesStatusesByDevice_4WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        return localVarResp.getData();
    }

    /**
     * List the power status information for devices in an organization
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>> getOrganizationDevicesPowerModulesStatusesByDevice_4WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDevicesPowerModulesStatusesByDevice_4ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the power status information for devices in an organization (asynchronously)
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevicesPowerModulesStatusesByDevice_4Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType, final ApiCallback<List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDevicesPowerModulesStatusesByDevice_4ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationDevicesUplinksAddressesByDevice_4
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevicesUplinksAddressesByDevice_4Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/devices/uplinks/addresses/byDevice"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productTypes", productTypes));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDevicesUplinksAddressesByDevice_4ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksAddressesByDevice_4(Async)");
        }

        return getOrganizationDevicesUplinksAddressesByDevice_4Call(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType, _callback);

    }

    /**
     * List the current uplink addresses for devices in an organization.
     * List the current uplink addresses for devices in an organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @return List&lt;GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner> getOrganizationDevicesUplinksAddressesByDevice_4(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType) throws ApiException {
        ApiResponse<List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>> localVarResp = getOrganizationDevicesUplinksAddressesByDevice_4WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        return localVarResp.getData();
    }

    /**
     * List the current uplink addresses for devices in an organization.
     * List the current uplink addresses for devices in an organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>> getOrganizationDevicesUplinksAddressesByDevice_4WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDevicesUplinksAddressesByDevice_4ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the current uplink addresses for devices in an organization. (asynchronously)
     * List the current uplink addresses for devices in an organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches. (optional)
     * @param productTypes Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches. (optional)
     * @param serials Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches. (optional)
     * @param tags An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). This filter uses multiple exact matches. (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevicesUplinksAddressesByDevice_4Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> productTypes, List<String> serials, List<String> tags, String tagsFilterType, final ApiCallback<List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDevicesUplinksAddressesByDevice_4ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationFirmwareUpgradesByDevice_3
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgradesByDevice_3Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/firmware/upgrades/byDevice"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (firmwareUpgradeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "firmwareUpgradeIds", firmwareUpgradeIds));
        }

        if (firmwareUpgradeBatchIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "firmwareUpgradeBatchIds", firmwareUpgradeBatchIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationFirmwareUpgradesByDevice_3ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgradesByDevice_3(Async)");
        }

        return getOrganizationFirmwareUpgradesByDevice_3Call(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, _callback);

    }

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @return List&lt;GetOrganizationFirmwareUpgradesByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner> getOrganizationFirmwareUpgradesByDevice_3(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds) throws ApiException {
        ApiResponse<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> localVarResp = getOrganizationFirmwareUpgradesByDevice_3WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationFirmwareUpgradesByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> getOrganizationFirmwareUpgradesByDevice_3WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationFirmwareUpgradesByDevice_3ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade status for the filtered devices (asynchronously)
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgradesByDevice_3Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationFirmwareUpgradesByDevice_3ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
