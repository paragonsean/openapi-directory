/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Cisco Discovery Protocol (CDP) information of the connected device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceSwitchPortsStatuses200ResponseInnerCdp {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private String capabilities;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_MANAGEMENT_ADDRESS = "managementAddress";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_ADDRESS)
  private String managementAddress;

  public static final String SERIALIZED_NAME_NATIVE_VLAN = "nativeVlan";
  @SerializedName(SERIALIZED_NAME_NATIVE_VLAN)
  private Integer nativeVlan;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_PORT_ID = "portId";
  @SerializedName(SERIALIZED_NAME_PORT_ID)
  private String portId;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VTP_MANAGEMENT_DOMAIN = "vtpManagementDomain";
  @SerializedName(SERIALIZED_NAME_VTP_MANAGEMENT_DOMAIN)
  private String vtpManagementDomain;

  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp() {
  }

  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Contains network addresses of both receiving and sending devices.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp capabilities(String capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Identifies the device type, which indicates the functional capabilities of the device.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public String getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(String capabilities) {
    this.capabilities = capabilities;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Identifies the device name.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp managementAddress(String managementAddress) {
    this.managementAddress = managementAddress;
    return this;
  }

  /**
   * The device&#39;s management IP.
   * @return managementAddress
   */
  @javax.annotation.Nullable
  public String getManagementAddress() {
    return managementAddress;
  }

  public void setManagementAddress(String managementAddress) {
    this.managementAddress = managementAddress;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp nativeVlan(Integer nativeVlan) {
    this.nativeVlan = nativeVlan;
    return this;
  }

  /**
   * Indicates, per interface, the assumed VLAN for untagged packets on the interface.
   * @return nativeVlan
   */
  @javax.annotation.Nullable
  public Integer getNativeVlan() {
    return nativeVlan;
  }

  public void setNativeVlan(Integer nativeVlan) {
    this.nativeVlan = nativeVlan;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Identifies the hardware platform of the device.
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp portId(String portId) {
    this.portId = portId;
    return this;
  }

  /**
   * Identifies the port from which the CDP packet was sent.
   * @return portId
   */
  @javax.annotation.Nullable
  public String getPortId() {
    return portId;
  }

  public void setPortId(String portId) {
    this.portId = portId;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * The system name.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Contains the device software release information.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public GetDeviceSwitchPortsStatuses200ResponseInnerCdp vtpManagementDomain(String vtpManagementDomain) {
    this.vtpManagementDomain = vtpManagementDomain;
    return this;
  }

  /**
   * Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
   * @return vtpManagementDomain
   */
  @javax.annotation.Nullable
  public String getVtpManagementDomain() {
    return vtpManagementDomain;
  }

  public void setVtpManagementDomain(String vtpManagementDomain) {
    this.vtpManagementDomain = vtpManagementDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceSwitchPortsStatuses200ResponseInnerCdp getDeviceSwitchPortsStatuses200ResponseInnerCdp = (GetDeviceSwitchPortsStatuses200ResponseInnerCdp) o;
    return Objects.equals(this.address, getDeviceSwitchPortsStatuses200ResponseInnerCdp.address) &&
        Objects.equals(this.capabilities, getDeviceSwitchPortsStatuses200ResponseInnerCdp.capabilities) &&
        Objects.equals(this.deviceId, getDeviceSwitchPortsStatuses200ResponseInnerCdp.deviceId) &&
        Objects.equals(this.managementAddress, getDeviceSwitchPortsStatuses200ResponseInnerCdp.managementAddress) &&
        Objects.equals(this.nativeVlan, getDeviceSwitchPortsStatuses200ResponseInnerCdp.nativeVlan) &&
        Objects.equals(this.platform, getDeviceSwitchPortsStatuses200ResponseInnerCdp.platform) &&
        Objects.equals(this.portId, getDeviceSwitchPortsStatuses200ResponseInnerCdp.portId) &&
        Objects.equals(this.systemName, getDeviceSwitchPortsStatuses200ResponseInnerCdp.systemName) &&
        Objects.equals(this.version, getDeviceSwitchPortsStatuses200ResponseInnerCdp.version) &&
        Objects.equals(this.vtpManagementDomain, getDeviceSwitchPortsStatuses200ResponseInnerCdp.vtpManagementDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, capabilities, deviceId, managementAddress, nativeVlan, platform, portId, systemName, version, vtpManagementDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceSwitchPortsStatuses200ResponseInnerCdp {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    managementAddress: ").append(toIndentedString(managementAddress)).append("\n");
    sb.append("    nativeVlan: ").append(toIndentedString(nativeVlan)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    portId: ").append(toIndentedString(portId)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vtpManagementDomain: ").append(toIndentedString(vtpManagementDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("capabilities");
    openapiFields.add("deviceId");
    openapiFields.add("managementAddress");
    openapiFields.add("nativeVlan");
    openapiFields.add("platform");
    openapiFields.add("portId");
    openapiFields.add("systemName");
    openapiFields.add("version");
    openapiFields.add("vtpManagementDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInnerCdp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInnerCdp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceSwitchPortsStatuses200ResponseInnerCdp is not found in the empty JSON string", GetDeviceSwitchPortsStatuses200ResponseInnerCdp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceSwitchPortsStatuses200ResponseInnerCdp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceSwitchPortsStatuses200ResponseInnerCdp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) && !jsonObj.get("capabilities").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("managementAddress") != null && !jsonObj.get("managementAddress").isJsonNull()) && !jsonObj.get("managementAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementAddress").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("portId") != null && !jsonObj.get("portId").isJsonNull()) && !jsonObj.get("portId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portId").toString()));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("vtpManagementDomain") != null && !jsonObj.get("vtpManagementDomain").isJsonNull()) && !jsonObj.get("vtpManagementDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vtpManagementDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vtpManagementDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceSwitchPortsStatuses200ResponseInnerCdp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceSwitchPortsStatuses200ResponseInnerCdp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInnerCdp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceSwitchPortsStatuses200ResponseInnerCdp.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceSwitchPortsStatuses200ResponseInnerCdp>() {
           @Override
           public void write(JsonWriter out, GetDeviceSwitchPortsStatuses200ResponseInnerCdp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceSwitchPortsStatuses200ResponseInnerCdp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceSwitchPortsStatuses200ResponseInnerCdp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceSwitchPortsStatuses200ResponseInnerCdp
   * @throws IOException if the JSON string is invalid with respect to GetDeviceSwitchPortsStatuses200ResponseInnerCdp
   */
  public static GetDeviceSwitchPortsStatuses200ResponseInnerCdp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceSwitchPortsStatuses200ResponseInnerCdp.class);
  }

  /**
   * Convert an instance of GetDeviceSwitchPortsStatuses200ResponseInnerCdp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

