/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckinNetworkSmDevicesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckinNetworkSmDevicesRequest {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<String> ids = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private List<String> scope = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIALS = "serials";
  @SerializedName(SERIALIZED_NAME_SERIALS)
  private List<String> serials = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIFI_MACS = "wifiMacs";
  @SerializedName(SERIALIZED_NAME_WIFI_MACS)
  private List<String> wifiMacs = new ArrayList<>();

  public CheckinNetworkSmDevicesRequest() {
  }

  public CheckinNetworkSmDevicesRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public CheckinNetworkSmDevicesRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * The ids of the devices to be checked-in.
   * @return ids
   */
  @javax.annotation.Nullable
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }


  public CheckinNetworkSmDevicesRequest scope(List<String> scope) {
    this.scope = scope;
    return this;
  }

  public CheckinNetworkSmDevicesRequest addScopeItem(String scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<>();
    }
    this.scope.add(scopeItem);
    return this;
  }

  /**
   * The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be checked-in.
   * @return scope
   */
  @javax.annotation.Nullable
  public List<String> getScope() {
    return scope;
  }

  public void setScope(List<String> scope) {
    this.scope = scope;
  }


  public CheckinNetworkSmDevicesRequest serials(List<String> serials) {
    this.serials = serials;
    return this;
  }

  public CheckinNetworkSmDevicesRequest addSerialsItem(String serialsItem) {
    if (this.serials == null) {
      this.serials = new ArrayList<>();
    }
    this.serials.add(serialsItem);
    return this;
  }

  /**
   * The serials of the devices to be checked-in.
   * @return serials
   */
  @javax.annotation.Nullable
  public List<String> getSerials() {
    return serials;
  }

  public void setSerials(List<String> serials) {
    this.serials = serials;
  }


  public CheckinNetworkSmDevicesRequest wifiMacs(List<String> wifiMacs) {
    this.wifiMacs = wifiMacs;
    return this;
  }

  public CheckinNetworkSmDevicesRequest addWifiMacsItem(String wifiMacsItem) {
    if (this.wifiMacs == null) {
      this.wifiMacs = new ArrayList<>();
    }
    this.wifiMacs.add(wifiMacsItem);
    return this;
  }

  /**
   * The wifiMacs of the devices to be checked-in.
   * @return wifiMacs
   */
  @javax.annotation.Nullable
  public List<String> getWifiMacs() {
    return wifiMacs;
  }

  public void setWifiMacs(List<String> wifiMacs) {
    this.wifiMacs = wifiMacs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = (CheckinNetworkSmDevicesRequest) o;
    return Objects.equals(this.ids, checkinNetworkSmDevicesRequest.ids) &&
        Objects.equals(this.scope, checkinNetworkSmDevicesRequest.scope) &&
        Objects.equals(this.serials, checkinNetworkSmDevicesRequest.serials) &&
        Objects.equals(this.wifiMacs, checkinNetworkSmDevicesRequest.wifiMacs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, scope, serials, wifiMacs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckinNetworkSmDevicesRequest {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    serials: ").append(toIndentedString(serials)).append("\n");
    sb.append("    wifiMacs: ").append(toIndentedString(wifiMacs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("scope");
    openapiFields.add("serials");
    openapiFields.add("wifiMacs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckinNetworkSmDevicesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckinNetworkSmDevicesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckinNetworkSmDevicesRequest is not found in the empty JSON string", CheckinNetworkSmDevicesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckinNetworkSmDevicesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckinNetworkSmDevicesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull() && !jsonObj.get("scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be an array in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serials") != null && !jsonObj.get("serials").isJsonNull() && !jsonObj.get("serials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serials` to be an array in the JSON string but got `%s`", jsonObj.get("serials").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wifiMacs") != null && !jsonObj.get("wifiMacs").isJsonNull() && !jsonObj.get("wifiMacs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiMacs` to be an array in the JSON string but got `%s`", jsonObj.get("wifiMacs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckinNetworkSmDevicesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckinNetworkSmDevicesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckinNetworkSmDevicesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckinNetworkSmDevicesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckinNetworkSmDevicesRequest>() {
           @Override
           public void write(JsonWriter out, CheckinNetworkSmDevicesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckinNetworkSmDevicesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckinNetworkSmDevicesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckinNetworkSmDevicesRequest
   * @throws IOException if the JSON string is invalid with respect to CheckinNetworkSmDevicesRequest
   */
  public static CheckinNetworkSmDevicesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckinNetworkSmDevicesRequest.class);
  }

  /**
   * Convert an instance of CheckinNetworkSmDevicesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

