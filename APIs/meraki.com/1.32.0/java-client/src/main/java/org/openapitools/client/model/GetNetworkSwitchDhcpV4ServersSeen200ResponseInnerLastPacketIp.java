/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIpDscp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional IP attributes of the packet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp {
  public static final String SERIALIZED_NAME_DSCP = "dscp";
  @SerializedName(SERIALIZED_NAME_DSCP)
  private GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIpDscp dscp;

  public static final String SERIALIZED_NAME_HEADER_LENGTH = "headerLength";
  @SerializedName(SERIALIZED_NAME_HEADER_LENGTH)
  private Integer headerLength;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Integer protocol;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  /**
   * IP version of the packet.
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    NUMBER_4(4),
    
    NUMBER_6(6);

    private Integer value;

    VersionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(Integer value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private VersionEnum version;

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp() {
  }

  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp dscp(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIpDscp dscp) {
    this.dscp = dscp;
    return this;
  }

  /**
   * Get dscp
   * @return dscp
   */
  @javax.annotation.Nullable
  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIpDscp getDscp() {
    return dscp;
  }

  public void setDscp(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIpDscp dscp) {
    this.dscp = dscp;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp headerLength(Integer headerLength) {
    this.headerLength = headerLength;
    return this;
  }

  /**
   * IP header length of the packet.
   * @return headerLength
   */
  @javax.annotation.Nullable
  public Integer getHeaderLength() {
    return headerLength;
  }

  public void setHeaderLength(Integer headerLength) {
    this.headerLength = headerLength;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp id(String id) {
    this.id = id;
    return this;
  }

  /**
   * IP ID of the packet.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * IP length of the packet.
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp protocol(Integer protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * IP protocol number of the packet.
   * @return protocol
   */
  @javax.annotation.Nullable
  public Integer getProtocol() {
    return protocol;
  }

  public void setProtocol(Integer protocol) {
    this.protocol = protocol;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Time to live of the packet.
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp version(VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * IP version of the packet.
   * @return version
   */
  @javax.annotation.Nullable
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp = (GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp) o;
    return Objects.equals(this.dscp, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.dscp) &&
        Objects.equals(this.headerLength, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.headerLength) &&
        Objects.equals(this.id, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.id) &&
        Objects.equals(this.length, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.length) &&
        Objects.equals(this.protocol, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.protocol) &&
        Objects.equals(this.ttl, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.ttl) &&
        Objects.equals(this.version, getNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dscp, headerLength, id, length, protocol, ttl, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp {\n");
    sb.append("    dscp: ").append(toIndentedString(dscp)).append("\n");
    sb.append("    headerLength: ").append(toIndentedString(headerLength)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dscp");
    openapiFields.add("headerLength");
    openapiFields.add("id");
    openapiFields.add("length");
    openapiFields.add("protocol");
    openapiFields.add("ttl");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp is not found in the empty JSON string", GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dscp`
      if (jsonObj.get("dscp") != null && !jsonObj.get("dscp").isJsonNull()) {
        GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIpDscp.validateJsonElement(jsonObj.get("dscp"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        VersionEnum.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp>() {
           @Override
           public void write(JsonWriter out, GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp
   */
  public static GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp.class);
  }

  /**
   * Convert an instance of GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketIp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

